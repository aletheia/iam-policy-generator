export const version = {
  version: '2020-09-26T13:28:55.732Z',
  hash: '894df83d429fcdcdb01795b9a301fbd8',
};

export enum COMPREHEND {
  BATCH_DETECT_DOMINANT_LANGUAGE = 'comprehend:BatchDetectDominantLanguage',
  BATCH_DETECT_ENTITIES = 'comprehend:BatchDetectEntities',
  BATCH_DETECT_KEY_PHRASES = 'comprehend:BatchDetectKeyPhrases',
  BATCH_DETECT_SENTIMENT = 'comprehend:BatchDetectSentiment',
  BATCH_DETECT_SYNTAX = 'comprehend:BatchDetectSyntax',
  CLASSIFY_DOCUMENT = 'comprehend:ClassifyDocument',
  CREATE_DOCUMENT_CLASSIFIER = 'comprehend:CreateDocumentClassifier',
  CREATE_ENDPOINT = 'comprehend:CreateEndpoint',
  CREATE_ENTITY_RECOGNIZER = 'comprehend:CreateEntityRecognizer',
  DELETE_DOCUMENT_CLASSIFIER = 'comprehend:DeleteDocumentClassifier',
  DELETE_ENDPOINT = 'comprehend:DeleteEndpoint',
  DELETE_ENTITY_RECOGNIZER = 'comprehend:DeleteEntityRecognizer',
  DESCRIBE_DOCUMENT_CLASSIFICATION_JOB = 'comprehend:DescribeDocumentClassificationJob',
  DESCRIBE_DOCUMENT_CLASSIFIER = 'comprehend:DescribeDocumentClassifier',
  DESCRIBE_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:DescribeDominantLanguageDetectionJob',
  DESCRIBE_ENDPOINT = 'comprehend:DescribeEndpoint',
  DESCRIBE_ENTITIES_DETECTION_JOB = 'comprehend:DescribeEntitiesDetectionJob',
  DESCRIBE_ENTITY_RECOGNIZER = 'comprehend:DescribeEntityRecognizer',
  DESCRIBE_KEY_PHRASES_DETECTION_JOB = 'comprehend:DescribeKeyPhrasesDetectionJob',
  DESCRIBE_PII_ENTITIES_DETECTION_JOB = 'comprehend:DescribePiiEntitiesDetectionJob',
  DESCRIBE_SENTIMENT_DETECTION_JOB = 'comprehend:DescribeSentimentDetectionJob',
  DESCRIBE_TOPICS_DETECTION_JOB = 'comprehend:DescribeTopicsDetectionJob',
  DETECT_DOMINANT_LANGUAGE = 'comprehend:DetectDominantLanguage',
  DETECT_ENTITIES = 'comprehend:DetectEntities',
  DETECT_KEY_PHRASES = 'comprehend:DetectKeyPhrases',
  DETECT_PII_ENTITIES = 'comprehend:DetectPiiEntities',
  DETECT_SENTIMENT = 'comprehend:DetectSentiment',
  DETECT_SYNTAX = 'comprehend:DetectSyntax',
  LIST_DOCUMENT_CLASSIFICATION_JOBS = 'comprehend:ListDocumentClassificationJobs',
  LIST_DOCUMENT_CLASSIFIERS = 'comprehend:ListDocumentClassifiers',
  LIST_DOMINANT_LANGUAGE_DETECTION_JOBS = 'comprehend:ListDominantLanguageDetectionJobs',
  LIST_ENDPOINTS = 'comprehend:ListEndpoints',
  LIST_ENTITIES_DETECTION_JOBS = 'comprehend:ListEntitiesDetectionJobs',
  LIST_ENTITY_RECOGNIZERS = 'comprehend:ListEntityRecognizers',
  LIST_KEY_PHRASES_DETECTION_JOBS = 'comprehend:ListKeyPhrasesDetectionJobs',
  LIST_PII_ENTITIES_DETECTION_JOBS = 'comprehend:ListPiiEntitiesDetectionJobs',
  LIST_SENTIMENT_DETECTION_JOBS = 'comprehend:ListSentimentDetectionJobs',
  LIST_TAGS_FOR_RESOURCE = 'comprehend:ListTagsForResource',
  LIST_TOPICS_DETECTION_JOBS = 'comprehend:ListTopicsDetectionJobs',
  START_DOCUMENT_CLASSIFICATION_JOB = 'comprehend:StartDocumentClassificationJob',
  START_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:StartDominantLanguageDetectionJob',
  START_ENTITIES_DETECTION_JOB = 'comprehend:StartEntitiesDetectionJob',
  START_KEY_PHRASES_DETECTION_JOB = 'comprehend:StartKeyPhrasesDetectionJob',
  START_PII_ENTITIES_DETECTION_JOB = 'comprehend:StartPiiEntitiesDetectionJob',
  START_SENTIMENT_DETECTION_JOB = 'comprehend:StartSentimentDetectionJob',
  START_TOPICS_DETECTION_JOB = 'comprehend:StartTopicsDetectionJob',
  STOP_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:StopDominantLanguageDetectionJob',
  STOP_ENTITIES_DETECTION_JOB = 'comprehend:StopEntitiesDetectionJob',
  STOP_KEY_PHRASES_DETECTION_JOB = 'comprehend:StopKeyPhrasesDetectionJob',
  STOP_PII_ENTITIES_DETECTION_JOB = 'comprehend:StopPiiEntitiesDetectionJob',
  STOP_SENTIMENT_DETECTION_JOB = 'comprehend:StopSentimentDetectionJob',
  STOP_TRAINING_DOCUMENT_CLASSIFIER = 'comprehend:StopTrainingDocumentClassifier',
  STOP_TRAINING_ENTITY_RECOGNIZER = 'comprehend:StopTrainingEntityRecognizer',
  TAG_RESOURCE = 'comprehend:TagResource',
  UNTAG_RESOURCE = 'comprehend:UntagResource',
  UPDATE_ENDPOINT = 'comprehend:UpdateEndpoint',
}
export enum ELASTIC_FILE_SYSTEM {
  BACKUP = 'elasticfilesystem:Backup',
  CLIENT_MOUNT = 'elasticfilesystem:ClientMount',
  CLIENT_ROOT_ACCESS = 'elasticfilesystem:ClientRootAccess',
  CLIENT_WRITE = 'elasticfilesystem:ClientWrite',
  CREATE_ACCESS_POINT = 'elasticfilesystem:CreateAccessPoint',
  CREATE_FILE_SYSTEM = 'elasticfilesystem:CreateFileSystem',
  CREATE_MOUNT_TARGET = 'elasticfilesystem:CreateMountTarget',
  CREATE_TAGS = 'elasticfilesystem:CreateTags',
  DELETE_ACCESS_POINT = 'elasticfilesystem:DeleteAccessPoint',
  DELETE_FILE_SYSTEM = 'elasticfilesystem:DeleteFileSystem',
  DELETE_FILE_SYSTEM_POLICY = 'elasticfilesystem:DeleteFileSystemPolicy',
  DELETE_MOUNT_TARGET = 'elasticfilesystem:DeleteMountTarget',
  DELETE_TAGS = 'elasticfilesystem:DeleteTags',
  DESCRIBE_ACCESS_POINTS = 'elasticfilesystem:DescribeAccessPoints',
  DESCRIBE_BACKUP_POLICY = 'elasticfilesystem:DescribeBackupPolicy',
  DESCRIBE_FILE_SYSTEM_POLICY = 'elasticfilesystem:DescribeFileSystemPolicy',
  DESCRIBE_FILE_SYSTEMS = 'elasticfilesystem:DescribeFileSystems',
  DESCRIBE_LIFECYCLE_CONFIGURATION = 'elasticfilesystem:DescribeLifecycleConfiguration',
  DESCRIBE_MOUNT_TARGET_SECURITY_GROUPS = 'elasticfilesystem:DescribeMountTargetSecurityGroups',
  DESCRIBE_MOUNT_TARGETS = 'elasticfilesystem:DescribeMountTargets',
  DESCRIBE_TAGS = 'elasticfilesystem:DescribeTags',
  LIST_TAGS_FOR_RESOURCE = 'elasticfilesystem:ListTagsForResource',
  MODIFY_MOUNT_TARGET_SECURITY_GROUPS = 'elasticfilesystem:ModifyMountTargetSecurityGroups',
  PUT_BACKUP_POLICY = 'elasticfilesystem:PutBackupPolicy',
  PUT_FILE_SYSTEM_POLICY = 'elasticfilesystem:PutFileSystemPolicy',
  PUT_LIFECYCLE_CONFIGURATION = 'elasticfilesystem:PutLifecycleConfiguration',
  RESTORE = 'elasticfilesystem:Restore',
  TAG_RESOURCE = 'elasticfilesystem:TagResource',
  UNTAG_RESOURCE = 'elasticfilesystem:UntagResource',
  UPDATE_FILE_SYSTEM = 'elasticfilesystem:UpdateFileSystem',
}
export enum GLUE {
  BATCH_CREATE_PARTITION = 'glue:BatchCreatePartition',
  BATCH_DELETE_CONNECTION = 'glue:BatchDeleteConnection',
  BATCH_DELETE_PARTITION = 'glue:BatchDeletePartition',
  BATCH_DELETE_TABLE = 'glue:BatchDeleteTable',
  BATCH_DELETE_TABLE_VERSION = 'glue:BatchDeleteTableVersion',
  BATCH_GET_CRAWLERS = 'glue:BatchGetCrawlers',
  BATCH_GET_DEV_ENDPOINTS = 'glue:BatchGetDevEndpoints',
  BATCH_GET_JOBS = 'glue:BatchGetJobs',
  BATCH_GET_PARTITION = 'glue:BatchGetPartition',
  BATCH_GET_TRIGGERS = 'glue:BatchGetTriggers',
  BATCH_GET_WORKFLOWS = 'glue:BatchGetWorkflows',
  BATCH_STOP_JOB_RUN = 'glue:BatchStopJobRun',
  CANCEL_ML_TASK_RUN = 'glue:CancelMLTaskRun',
  CREATE_CLASSIFIER = 'glue:CreateClassifier',
  CREATE_CONNECTION = 'glue:CreateConnection',
  CREATE_CRAWLER = 'glue:CreateCrawler',
  CREATE_DATABASE = 'glue:CreateDatabase',
  CREATE_DEV_ENDPOINT = 'glue:CreateDevEndpoint',
  CREATE_JOB = 'glue:CreateJob',
  CREATE_ML_TRANSFORM = 'glue:CreateMLTransform',
  CREATE_PARTITION = 'glue:CreatePartition',
  CREATE_SCRIPT = 'glue:CreateScript',
  CREATE_SECURITY_CONFIGURATION = 'glue:CreateSecurityConfiguration',
  CREATE_TABLE = 'glue:CreateTable',
  CREATE_TRIGGER = 'glue:CreateTrigger',
  CREATE_USER_DEFINED_FUNCTION = 'glue:CreateUserDefinedFunction',
  CREATE_WORKFLOW = 'glue:CreateWorkflow',
  DELETE_CLASSIFIER = 'glue:DeleteClassifier',
  DELETE_CONNECTION = 'glue:DeleteConnection',
  DELETE_CRAWLER = 'glue:DeleteCrawler',
  DELETE_DATABASE = 'glue:DeleteDatabase',
  DELETE_DEV_ENDPOINT = 'glue:DeleteDevEndpoint',
  DELETE_JOB = 'glue:DeleteJob',
  DELETE_ML_TRANSFORM = 'glue:DeleteMLTransform',
  DELETE_PARTITION = 'glue:DeletePartition',
  DELETE_RESOURCE_POLICY = 'glue:DeleteResourcePolicy',
  DELETE_SECURITY_CONFIGURATION = 'glue:DeleteSecurityConfiguration',
  DELETE_TABLE = 'glue:DeleteTable',
  DELETE_TABLE_VERSION = 'glue:DeleteTableVersion',
  DELETE_TRIGGER = 'glue:DeleteTrigger',
  DELETE_USER_DEFINED_FUNCTION = 'glue:DeleteUserDefinedFunction',
  DELETE_WORKFLOW = 'glue:DeleteWorkflow',
  GET_CATALOG_IMPORT_STATUS = 'glue:GetCatalogImportStatus',
  GET_CLASSIFIER = 'glue:GetClassifier',
  GET_CLASSIFIERS = 'glue:GetClassifiers',
  GET_CONNECTION = 'glue:GetConnection',
  GET_CONNECTIONS = 'glue:GetConnections',
  GET_CRAWLER = 'glue:GetCrawler',
  GET_CRAWLER_METRICS = 'glue:GetCrawlerMetrics',
  GET_CRAWLERS = 'glue:GetCrawlers',
  GET_DATA_CATALOG_ENCRYPTION_SETTINGS = 'glue:GetDataCatalogEncryptionSettings',
  GET_DATABASE = 'glue:GetDatabase',
  GET_DATABASES = 'glue:GetDatabases',
  GET_DATAFLOW_GRAPH = 'glue:GetDataflowGraph',
  GET_DEV_ENDPOINT = 'glue:GetDevEndpoint',
  GET_DEV_ENDPOINTS = 'glue:GetDevEndpoints',
  GET_JOB = 'glue:GetJob',
  GET_JOB_BOOKMARK = 'glue:GetJobBookmark',
  GET_JOB_RUN = 'glue:GetJobRun',
  GET_JOB_RUNS = 'glue:GetJobRuns',
  GET_JOBS = 'glue:GetJobs',
  GET_ML_TASK_RUN = 'glue:GetMLTaskRun',
  GET_ML_TASK_RUNS = 'glue:GetMLTaskRuns',
  GET_ML_TRANSFORM = 'glue:GetMLTransform',
  GET_ML_TRANSFORMS = 'glue:GetMLTransforms',
  GET_MAPPING = 'glue:GetMapping',
  GET_PARTITION = 'glue:GetPartition',
  GET_PARTITIONS = 'glue:GetPartitions',
  GET_PLAN = 'glue:GetPlan',
  GET_RESOURCE_POLICY = 'glue:GetResourcePolicy',
  GET_SECURITY_CONFIGURATION = 'glue:GetSecurityConfiguration',
  GET_SECURITY_CONFIGURATIONS = 'glue:GetSecurityConfigurations',
  GET_TABLE = 'glue:GetTable',
  GET_TABLE_VERSION = 'glue:GetTableVersion',
  GET_TABLE_VERSIONS = 'glue:GetTableVersions',
  GET_TABLES = 'glue:GetTables',
  GET_TAGS = 'glue:GetTags',
  GET_TRIGGER = 'glue:GetTrigger',
  GET_TRIGGERS = 'glue:GetTriggers',
  GET_USER_DEFINED_FUNCTION = 'glue:GetUserDefinedFunction',
  GET_USER_DEFINED_FUNCTIONS = 'glue:GetUserDefinedFunctions',
  GET_WORKFLOW = 'glue:GetWorkflow',
  GET_WORKFLOW_RUN = 'glue:GetWorkflowRun',
  GET_WORKFLOW_RUN_PROPERTIES = 'glue:GetWorkflowRunProperties',
  GET_WORKFLOW_RUNS = 'glue:GetWorkflowRuns',
  IMPORT_CATALOG_TO_GLUE = 'glue:ImportCatalogToGlue',
  LIST_CRAWLERS = 'glue:ListCrawlers',
  LIST_DEV_ENDPOINTS = 'glue:ListDevEndpoints',
  LIST_JOBS = 'glue:ListJobs',
  LIST_ML_TRANSFORMS = 'glue:ListMLTransforms',
  LIST_TRIGGERS = 'glue:ListTriggers',
  LIST_WORKFLOWS = 'glue:ListWorkflows',
  PUT_DATA_CATALOG_ENCRYPTION_SETTINGS = 'glue:PutDataCatalogEncryptionSettings',
  PUT_RESOURCE_POLICY = 'glue:PutResourcePolicy',
  PUT_WORKFLOW_RUN_PROPERTIES = 'glue:PutWorkflowRunProperties',
  RESET_JOB_BOOKMARK = 'glue:ResetJobBookmark',
  SEARCH_TABLES = 'glue:SearchTables',
  START_CRAWLER = 'glue:StartCrawler',
  START_CRAWLER_SCHEDULE = 'glue:StartCrawlerSchedule',
  START_EXPORT_LABELS_TASK_RUN = 'glue:StartExportLabelsTaskRun',
  START_IMPORT_LABELS_TASK_RUN = 'glue:StartImportLabelsTaskRun',
  START_JOB_RUN = 'glue:StartJobRun',
  START_ML_EVALUATION_TASK_RUN = 'glue:StartMLEvaluationTaskRun',
  START_ML_LABELING_SET_GENERATION_TASK_RUN = 'glue:StartMLLabelingSetGenerationTaskRun',
  START_TRIGGER = 'glue:StartTrigger',
  START_WORKFLOW_RUN = 'glue:StartWorkflowRun',
  STOP_CRAWLER = 'glue:StopCrawler',
  STOP_CRAWLER_SCHEDULE = 'glue:StopCrawlerSchedule',
  STOP_TRIGGER = 'glue:StopTrigger',
  TAG_RESOURCE = 'glue:TagResource',
  UNTAG_RESOURCE = 'glue:UntagResource',
  UPDATE_CLASSIFIER = 'glue:UpdateClassifier',
  UPDATE_CONNECTION = 'glue:UpdateConnection',
  UPDATE_CRAWLER = 'glue:UpdateCrawler',
  UPDATE_CRAWLER_SCHEDULE = 'glue:UpdateCrawlerSchedule',
  UPDATE_DATABASE = 'glue:UpdateDatabase',
  UPDATE_DEV_ENDPOINT = 'glue:UpdateDevEndpoint',
  UPDATE_JOB = 'glue:UpdateJob',
  UPDATE_ML_TRANSFORM = 'glue:UpdateMLTransform',
  UPDATE_PARTITION = 'glue:UpdatePartition',
  UPDATE_TABLE = 'glue:UpdateTable',
  UPDATE_TRIGGER = 'glue:UpdateTrigger',
  UPDATE_USER_DEFINED_FUNCTION = 'glue:UpdateUserDefinedFunction',
  UPDATE_WORKFLOW = 'glue:UpdateWorkflow',
  USE_ML_TRANSFORMS = 'glue:UseMLTransforms',
}
export enum IOT_THINGS_GRAPH {
  ASSOCIATE_ENTITY_TO_THING = 'iotthingsgraph:AssociateEntityToThing',
  CREATE_FLOW_TEMPLATE = 'iotthingsgraph:CreateFlowTemplate',
  CREATE_SYSTEM_INSTANCE = 'iotthingsgraph:CreateSystemInstance',
  CREATE_SYSTEM_TEMPLATE = 'iotthingsgraph:CreateSystemTemplate',
  DELETE_FLOW_TEMPLATE = 'iotthingsgraph:DeleteFlowTemplate',
  DELETE_NAMESPACE = 'iotthingsgraph:DeleteNamespace',
  DELETE_SYSTEM_INSTANCE = 'iotthingsgraph:DeleteSystemInstance',
  DELETE_SYSTEM_TEMPLATE = 'iotthingsgraph:DeleteSystemTemplate',
  DEPLOY_SYSTEM_INSTANCE = 'iotthingsgraph:DeploySystemInstance',
  DEPRECATE_FLOW_TEMPLATE = 'iotthingsgraph:DeprecateFlowTemplate',
  DEPRECATE_SYSTEM_TEMPLATE = 'iotthingsgraph:DeprecateSystemTemplate',
  DESCRIBE_NAMESPACE = 'iotthingsgraph:DescribeNamespace',
  DISSOCIATE_ENTITY_FROM_THING = 'iotthingsgraph:DissociateEntityFromThing',
  GET_ENTITIES = 'iotthingsgraph:GetEntities',
  GET_FLOW_TEMPLATE = 'iotthingsgraph:GetFlowTemplate',
  GET_FLOW_TEMPLATE_REVISIONS = 'iotthingsgraph:GetFlowTemplateRevisions',
  GET_NAMESPACE_DELETION_STATUS = 'iotthingsgraph:GetNamespaceDeletionStatus',
  GET_SYSTEM_INSTANCE = 'iotthingsgraph:GetSystemInstance',
  GET_SYSTEM_TEMPLATE = 'iotthingsgraph:GetSystemTemplate',
  GET_SYSTEM_TEMPLATE_REVISIONS = 'iotthingsgraph:GetSystemTemplateRevisions',
  GET_UPLOAD_STATUS = 'iotthingsgraph:GetUploadStatus',
  LIST_FLOW_EXECUTION_MESSAGES = 'iotthingsgraph:ListFlowExecutionMessages',
  LIST_TAGS_FOR_RESOURCE = 'iotthingsgraph:ListTagsForResource',
  SEARCH_ENTITIES = 'iotthingsgraph:SearchEntities',
  SEARCH_FLOW_EXECUTIONS = 'iotthingsgraph:SearchFlowExecutions',
  SEARCH_FLOW_TEMPLATES = 'iotthingsgraph:SearchFlowTemplates',
  SEARCH_SYSTEM_INSTANCES = 'iotthingsgraph:SearchSystemInstances',
  SEARCH_SYSTEM_TEMPLATES = 'iotthingsgraph:SearchSystemTemplates',
  SEARCH_THINGS = 'iotthingsgraph:SearchThings',
  TAG_RESOURCE = 'iotthingsgraph:TagResource',
  UNDEPLOY_SYSTEM_INSTANCE = 'iotthingsgraph:UndeploySystemInstance',
  UNTAG_RESOURCE = 'iotthingsgraph:UntagResource',
  UPDATE_FLOW_TEMPLATE = 'iotthingsgraph:UpdateFlowTemplate',
  UPDATE_SYSTEM_TEMPLATE = 'iotthingsgraph:UpdateSystemTemplate',
  UPLOAD_ENTITY_DEFINITIONS = 'iotthingsgraph:UploadEntityDefinitions',
}
export enum SAVINGS_PLANS {
  CREATE_SAVINGS_PLAN = 'savingsplans:CreateSavingsPlan',
  DELETE_QUEUED_SAVINGS_PLAN = 'savingsplans:DeleteQueuedSavingsPlan',
  DESCRIBE_SAVINGS_PLAN_RATES = 'savingsplans:DescribeSavingsPlanRates',
  DESCRIBE_SAVINGS_PLANS = 'savingsplans:DescribeSavingsPlans',
  DESCRIBE_SAVINGS_PLANS_OFFERING_RATES = 'savingsplans:DescribeSavingsPlansOfferingRates',
  DESCRIBE_SAVINGS_PLANS_OFFERINGS = 'savingsplans:DescribeSavingsPlansOfferings',
  LIST_TAGS_FOR_RESOURCE = 'savingsplans:ListTagsForResource',
  TAG_RESOURCE = 'savingsplans:TagResource',
  UNTAG_RESOURCE = 'savingsplans:UntagResource',
}
export enum SYSTEMS_MANAGER {
  ADD_TAGS_TO_RESOURCE = 'ssm:AddTagsToResource',
  CANCEL_COMMAND = 'ssm:CancelCommand',
  CANCEL_MAINTENANCE_WINDOW_EXECUTION = 'ssm:CancelMaintenanceWindowExecution',
  CREATE_ACTIVATION = 'ssm:CreateActivation',
  CREATE_ASSOCIATION = 'ssm:CreateAssociation',
  CREATE_ASSOCIATION_BATCH = 'ssm:CreateAssociationBatch',
  CREATE_DOCUMENT = 'ssm:CreateDocument',
  CREATE_MAINTENANCE_WINDOW = 'ssm:CreateMaintenanceWindow',
  CREATE_OPS_ITEM = 'ssm:CreateOpsItem',
  CREATE_PATCH_BASELINE = 'ssm:CreatePatchBaseline',
  CREATE_RESOURCE_DATA_SYNC = 'ssm:CreateResourceDataSync',
  DELETE_ACTIVATION = 'ssm:DeleteActivation',
  DELETE_ASSOCIATION = 'ssm:DeleteAssociation',
  DELETE_DOCUMENT = 'ssm:DeleteDocument',
  DELETE_INVENTORY = 'ssm:DeleteInventory',
  DELETE_MAINTENANCE_WINDOW = 'ssm:DeleteMaintenanceWindow',
  DELETE_PARAMETER = 'ssm:DeleteParameter',
  DELETE_PARAMETERS = 'ssm:DeleteParameters',
  DELETE_PATCH_BASELINE = 'ssm:DeletePatchBaseline',
  DELETE_RESOURCE_DATA_SYNC = 'ssm:DeleteResourceDataSync',
  DEREGISTER_MANAGED_INSTANCE = 'ssm:DeregisterManagedInstance',
  DEREGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:DeregisterPatchBaselineForPatchGroup',
  DEREGISTER_TARGET_FROM_MAINTENANCE_WINDOW = 'ssm:DeregisterTargetFromMaintenanceWindow',
  DEREGISTER_TASK_FROM_MAINTENANCE_WINDOW = 'ssm:DeregisterTaskFromMaintenanceWindow',
  DESCRIBE_ACTIVATIONS = 'ssm:DescribeActivations',
  DESCRIBE_ASSOCIATION = 'ssm:DescribeAssociation',
  DESCRIBE_ASSOCIATION_EXECUTION_TARGETS = 'ssm:DescribeAssociationExecutionTargets',
  DESCRIBE_ASSOCIATION_EXECUTIONS = 'ssm:DescribeAssociationExecutions',
  DESCRIBE_AUTOMATION_EXECUTIONS = 'ssm:DescribeAutomationExecutions',
  DESCRIBE_AUTOMATION_STEP_EXECUTIONS = 'ssm:DescribeAutomationStepExecutions',
  DESCRIBE_AVAILABLE_PATCHES = 'ssm:DescribeAvailablePatches',
  DESCRIBE_DOCUMENT = 'ssm:DescribeDocument',
  DESCRIBE_DOCUMENT_PARAMETERS = 'ssm:DescribeDocumentParameters',
  DESCRIBE_DOCUMENT_PERMISSION = 'ssm:DescribeDocumentPermission',
  DESCRIBE_EFFECTIVE_INSTANCE_ASSOCIATIONS = 'ssm:DescribeEffectiveInstanceAssociations',
  DESCRIBE_EFFECTIVE_PATCHES_FOR_PATCH_BASELINE = 'ssm:DescribeEffectivePatchesForPatchBaseline',
  DESCRIBE_INSTANCE_ASSOCIATIONS_STATUS = 'ssm:DescribeInstanceAssociationsStatus',
  DESCRIBE_INSTANCE_INFORMATION = 'ssm:DescribeInstanceInformation',
  DESCRIBE_INSTANCE_PATCH_STATES = 'ssm:DescribeInstancePatchStates',
  DESCRIBE_INSTANCE_PATCH_STATES_FOR_PATCH_GROUP = 'ssm:DescribeInstancePatchStatesForPatchGroup',
  DESCRIBE_INSTANCE_PATCHES = 'ssm:DescribeInstancePatches',
  DESCRIBE_INSTANCE_PROPERTIES = 'ssm:DescribeInstanceProperties',
  DESCRIBE_INVENTORY_DELETIONS = 'ssm:DescribeInventoryDeletions',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATIONS = 'ssm:DescribeMaintenanceWindowExecutionTaskInvocations',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASKS = 'ssm:DescribeMaintenanceWindowExecutionTasks',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTIONS = 'ssm:DescribeMaintenanceWindowExecutions',
  DESCRIBE_MAINTENANCE_WINDOW_SCHEDULE = 'ssm:DescribeMaintenanceWindowSchedule',
  DESCRIBE_MAINTENANCE_WINDOW_TARGETS = 'ssm:DescribeMaintenanceWindowTargets',
  DESCRIBE_MAINTENANCE_WINDOW_TASKS = 'ssm:DescribeMaintenanceWindowTasks',
  DESCRIBE_MAINTENANCE_WINDOWS = 'ssm:DescribeMaintenanceWindows',
  DESCRIBE_MAINTENANCE_WINDOWS_FOR_TARGET = 'ssm:DescribeMaintenanceWindowsForTarget',
  DESCRIBE_OPS_ITEMS = 'ssm:DescribeOpsItems',
  DESCRIBE_PARAMETERS = 'ssm:DescribeParameters',
  DESCRIBE_PATCH_BASELINES = 'ssm:DescribePatchBaselines',
  DESCRIBE_PATCH_GROUP_STATE = 'ssm:DescribePatchGroupState',
  DESCRIBE_PATCH_GROUPS = 'ssm:DescribePatchGroups',
  DESCRIBE_PATCH_PROPERTIES = 'ssm:DescribePatchProperties',
  DESCRIBE_SESSIONS = 'ssm:DescribeSessions',
  GET_AUTOMATION_EXECUTION = 'ssm:GetAutomationExecution',
  GET_COMMAND_INVOCATION = 'ssm:GetCommandInvocation',
  GET_CONNECTION_STATUS = 'ssm:GetConnectionStatus',
  GET_DEFAULT_PATCH_BASELINE = 'ssm:GetDefaultPatchBaseline',
  GET_DEPLOYABLE_PATCH_SNAPSHOT_FOR_INSTANCE = 'ssm:GetDeployablePatchSnapshotForInstance',
  GET_DOCUMENT = 'ssm:GetDocument',
  GET_INVENTORY = 'ssm:GetInventory',
  GET_INVENTORY_SCHEMA = 'ssm:GetInventorySchema',
  GET_MAINTENANCE_WINDOW = 'ssm:GetMaintenanceWindow',
  GET_MAINTENANCE_WINDOW_EXECUTION = 'ssm:GetMaintenanceWindowExecution',
  GET_MAINTENANCE_WINDOW_EXECUTION_TASK = 'ssm:GetMaintenanceWindowExecutionTask',
  GET_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATION = 'ssm:GetMaintenanceWindowExecutionTaskInvocation',
  GET_MAINTENANCE_WINDOW_TASK = 'ssm:GetMaintenanceWindowTask',
  GET_MANIFEST = 'ssm:GetManifest',
  GET_OPS_ITEM = 'ssm:GetOpsItem',
  GET_OPS_SUMMARY = 'ssm:GetOpsSummary',
  GET_PARAMETER = 'ssm:GetParameter',
  GET_PARAMETER_HISTORY = 'ssm:GetParameterHistory',
  GET_PARAMETERS = 'ssm:GetParameters',
  GET_PARAMETERS_BY_PATH = 'ssm:GetParametersByPath',
  GET_PATCH_BASELINE = 'ssm:GetPatchBaseline',
  GET_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:GetPatchBaselineForPatchGroup',
  GET_SERVICE_SETTING = 'ssm:GetServiceSetting',
  LABEL_PARAMETER_VERSION = 'ssm:LabelParameterVersion',
  LIST_ASSOCIATION_VERSIONS = 'ssm:ListAssociationVersions',
  LIST_ASSOCIATIONS = 'ssm:ListAssociations',
  LIST_COMMAND_INVOCATIONS = 'ssm:ListCommandInvocations',
  LIST_COMMANDS = 'ssm:ListCommands',
  LIST_COMPLIANCE_ITEMS = 'ssm:ListComplianceItems',
  LIST_COMPLIANCE_SUMMARIES = 'ssm:ListComplianceSummaries',
  LIST_DOCUMENT_VERSIONS = 'ssm:ListDocumentVersions',
  LIST_DOCUMENTS = 'ssm:ListDocuments',
  LIST_INSTANCE_ASSOCIATIONS = 'ssm:ListInstanceAssociations',
  LIST_INVENTORY_ENTRIES = 'ssm:ListInventoryEntries',
  LIST_RESOURCE_COMPLIANCE_SUMMARIES = 'ssm:ListResourceComplianceSummaries',
  LIST_RESOURCE_DATA_SYNC = 'ssm:ListResourceDataSync',
  LIST_TAGS_FOR_RESOURCE = 'ssm:ListTagsForResource',
  MODIFY_DOCUMENT_PERMISSION = 'ssm:ModifyDocumentPermission',
  PUT_COMPLIANCE_ITEMS = 'ssm:PutComplianceItems',
  PUT_CONFIGURE_PACKAGE_RESULT = 'ssm:PutConfigurePackageResult',
  PUT_INVENTORY = 'ssm:PutInventory',
  PUT_PARAMETER = 'ssm:PutParameter',
  REGISTER_DEFAULT_PATCH_BASELINE = 'ssm:RegisterDefaultPatchBaseline',
  REGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:RegisterPatchBaselineForPatchGroup',
  REGISTER_TARGET_WITH_MAINTENANCE_WINDOW = 'ssm:RegisterTargetWithMaintenanceWindow',
  REGISTER_TASK_WITH_MAINTENANCE_WINDOW = 'ssm:RegisterTaskWithMaintenanceWindow',
  REMOVE_TAGS_FROM_RESOURCE = 'ssm:RemoveTagsFromResource',
  RESET_SERVICE_SETTING = 'ssm:ResetServiceSetting',
  RESUME_SESSION = 'ssm:ResumeSession',
  SEND_AUTOMATION_SIGNAL = 'ssm:SendAutomationSignal',
  SEND_COMMAND = 'ssm:SendCommand',
  START_ASSOCIATIONS_ONCE = 'ssm:StartAssociationsOnce',
  START_AUTOMATION_EXECUTION = 'ssm:StartAutomationExecution',
  START_SESSION = 'ssm:StartSession',
  STOP_AUTOMATION_EXECUTION = 'ssm:StopAutomationExecution',
  TERMINATE_SESSION = 'ssm:TerminateSession',
  UPDATE_ASSOCIATION = 'ssm:UpdateAssociation',
  UPDATE_ASSOCIATION_STATUS = 'ssm:UpdateAssociationStatus',
  UPDATE_DOCUMENT = 'ssm:UpdateDocument',
  UPDATE_DOCUMENT_DEFAULT_VERSION = 'ssm:UpdateDocumentDefaultVersion',
  UPDATE_INSTANCE_ASSOCIATION_STATUS = 'ssm:UpdateInstanceAssociationStatus',
  UPDATE_INSTANCE_INFORMATION = 'ssm:UpdateInstanceInformation',
  UPDATE_MAINTENANCE_WINDOW = 'ssm:UpdateMaintenanceWindow',
  UPDATE_MAINTENANCE_WINDOW_TARGET = 'ssm:UpdateMaintenanceWindowTarget',
  UPDATE_MAINTENANCE_WINDOW_TASK = 'ssm:UpdateMaintenanceWindowTask',
  UPDATE_MANAGED_INSTANCE_ROLE = 'ssm:UpdateManagedInstanceRole',
  UPDATE_OPS_ITEM = 'ssm:UpdateOpsItem',
  UPDATE_PATCH_BASELINE = 'ssm:UpdatePatchBaseline',
  UPDATE_RESOURCE_DATA_SYNC = 'ssm:UpdateResourceDataSync',
  UPDATE_SERVICE_SETTING = 'ssm:UpdateServiceSetting',
}
export enum SSO {
  ASSOCIATE_DIRECTORY = 'sso:AssociateDirectory',
  ASSOCIATE_PROFILE = 'sso:AssociateProfile',
  ATTACH_MANAGED_POLICY_TO_PERMISSION_SET = 'sso:AttachManagedPolicyToPermissionSet',
  CREATE_ACCOUNT_ASSIGNMENT = 'sso:CreateAccountAssignment',
  CREATE_APPLICATION_INSTANCE = 'sso:CreateApplicationInstance',
  CREATE_APPLICATION_INSTANCE_CERTIFICATE = 'sso:CreateApplicationInstanceCertificate',
  CREATE_MANAGED_APPLICATION_INSTANCE = 'sso:CreateManagedApplicationInstance',
  CREATE_PERMISSION_SET = 'sso:CreatePermissionSet',
  CREATE_PROFILE = 'sso:CreateProfile',
  CREATE_TRUST = 'sso:CreateTrust',
  DELETE_ACCOUNT_ASSIGNMENT = 'sso:DeleteAccountAssignment',
  DELETE_APPLICATION_INSTANCE = 'sso:DeleteApplicationInstance',
  DELETE_APPLICATION_INSTANCE_CERTIFICATE = 'sso:DeleteApplicationInstanceCertificate',
  DELETE_INLINE_POLICY_FROM_PERMISSION_SET = 'sso:DeleteInlinePolicyFromPermissionSet',
  DELETE_MANAGED_APPLICATION_INSTANCE = 'sso:DeleteManagedApplicationInstance',
  DELETE_PERMISSION_SET = 'sso:DeletePermissionSet',
  DELETE_PERMISSIONS_POLICY = 'sso:DeletePermissionsPolicy',
  DELETE_PROFILE = 'sso:DeleteProfile',
  DESCRIBE_ACCOUNT_ASSIGNMENT_CREATION_STATUS = 'sso:DescribeAccountAssignmentCreationStatus',
  DESCRIBE_ACCOUNT_ASSIGNMENT_DELETION_STATUS = 'sso:DescribeAccountAssignmentDeletionStatus',
  DESCRIBE_PERMISSION_SET = 'sso:DescribePermissionSet',
  DESCRIBE_PERMISSION_SET_PROVISIONING_STATUS = 'sso:DescribePermissionSetProvisioningStatus',
  DESCRIBE_PERMISSIONS_POLICIES = 'sso:DescribePermissionsPolicies',
  DESCRIBE_REGISTERED_REGIONS = 'sso:DescribeRegisteredRegions',
  DETACH_MANAGED_POLICY_FROM_PERMISSION_SET = 'sso:DetachManagedPolicyFromPermissionSet',
  DISASSOCIATE_DIRECTORY = 'sso:DisassociateDirectory',
  DISASSOCIATE_PROFILE = 'sso:DisassociateProfile',
  GET_APPLICATION_INSTANCE = 'sso:GetApplicationInstance',
  GET_APPLICATION_TEMPLATE = 'sso:GetApplicationTemplate',
  GET_INLINE_POLICY_FOR_PERMISSION_SET = 'sso:GetInlinePolicyForPermissionSet',
  GET_MANAGED_APPLICATION_INSTANCE = 'sso:GetManagedApplicationInstance',
  GET_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'sso:GetMfaDeviceManagementForDirectory',
  GET_PERMISSION_SET = 'sso:GetPermissionSet',
  GET_PERMISSIONS_POLICY = 'sso:GetPermissionsPolicy',
  GET_PROFILE = 'sso:GetProfile',
  GET_SSO_STATUS = 'sso:GetSSOStatus',
  GET_SHARED_SSO_CONFIGURATION = 'sso:GetSharedSsoConfiguration',
  GET_SSO_CONFIGURATION = 'sso:GetSsoConfiguration',
  GET_TRUST = 'sso:GetTrust',
  IMPORT_APPLICATION_INSTANCE_SERVICE_PROVIDER_METADATA = 'sso:ImportApplicationInstanceServiceProviderMetadata',
  LIST_ACCOUNT_ASSIGNMENT_CREATION_STATUS = 'sso:ListAccountAssignmentCreationStatus',
  LIST_ACCOUNT_ASSIGNMENT_DELETION_STATUS = 'sso:ListAccountAssignmentDeletionStatus',
  LIST_ACCOUNT_ASSIGNMENTS = 'sso:ListAccountAssignments',
  LIST_ACCOUNTS_FOR_PROVISIONED_PERMISSION_SET = 'sso:ListAccountsForProvisionedPermissionSet',
  LIST_APPLICATION_INSTANCE_CERTIFICATES = 'sso:ListApplicationInstanceCertificates',
  LIST_APPLICATION_INSTANCES = 'sso:ListApplicationInstances',
  LIST_APPLICATION_TEMPLATES = 'sso:ListApplicationTemplates',
  LIST_APPLICATIONS = 'sso:ListApplications',
  LIST_DIRECTORY_ASSOCIATIONS = 'sso:ListDirectoryAssociations',
  LIST_INSTANCES = 'sso:ListInstances',
  LIST_MANAGED_POLICIES_IN_PERMISSION_SET = 'sso:ListManagedPoliciesInPermissionSet',
  LIST_PERMISSION_SET_PROVISIONING_STATUS = 'sso:ListPermissionSetProvisioningStatus',
  LIST_PERMISSION_SETS = 'sso:ListPermissionSets',
  LIST_PERMISSION_SETS_PROVISIONED_TO_ACCOUNT = 'sso:ListPermissionSetsProvisionedToAccount',
  LIST_PROFILE_ASSOCIATIONS = 'sso:ListProfileAssociations',
  LIST_PROFILES = 'sso:ListProfiles',
  LIST_TAGS_FOR_RESOURCE = 'sso:ListTagsForResource',
  PROVISION_PERMISSION_SET = 'sso:ProvisionPermissionSet',
  PUT_INLINE_POLICY_TO_PERMISSION_SET = 'sso:PutInlinePolicyToPermissionSet',
  PUT_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'sso:PutMfaDeviceManagementForDirectory',
  PUT_PERMISSIONS_POLICY = 'sso:PutPermissionsPolicy',
  START_SSO = 'sso:StartSSO',
  TAG_RESOURCE = 'sso:TagResource',
  UNTAG_RESOURCE = 'sso:UntagResource',
  UPDATE_APPLICATION_INSTANCE_ACTIVE_CERTIFICATE = 'sso:UpdateApplicationInstanceActiveCertificate',
  UPDATE_APPLICATION_INSTANCE_DISPLAY_DATA = 'sso:UpdateApplicationInstanceDisplayData',
  UPDATE_APPLICATION_INSTANCE_RESPONSE_CONFIGURATION = 'sso:UpdateApplicationInstanceResponseConfiguration',
  UPDATE_APPLICATION_INSTANCE_RESPONSE_SCHEMA_CONFIGURATION = 'sso:UpdateApplicationInstanceResponseSchemaConfiguration',
  UPDATE_APPLICATION_INSTANCE_SECURITY_CONFIGURATION = 'sso:UpdateApplicationInstanceSecurityConfiguration',
  UPDATE_APPLICATION_INSTANCE_SERVICE_PROVIDER_CONFIGURATION = 'sso:UpdateApplicationInstanceServiceProviderConfiguration',
  UPDATE_APPLICATION_INSTANCE_STATUS = 'sso:UpdateApplicationInstanceStatus',
  UPDATE_DIRECTORY_ASSOCIATION = 'sso:UpdateDirectoryAssociation',
  UPDATE_MANAGED_APPLICATION_INSTANCE_STATUS = 'sso:UpdateManagedApplicationInstanceStatus',
  UPDATE_PERMISSION_SET = 'sso:UpdatePermissionSet',
  UPDATE_PROFILE = 'sso:UpdateProfile',
  UPDATE_SSO_CONFIGURATION = 'sso:UpdateSSOConfiguration',
  UPDATE_TRUST = 'sso:UpdateTrust',
}
export enum IOT {
  ACCEPT_CERTIFICATE_TRANSFER = 'iot:AcceptCertificateTransfer',
  ADD_THING_TO_BILLING_GROUP = 'iot:AddThingToBillingGroup',
  ADD_THING_TO_THING_GROUP = 'iot:AddThingToThingGroup',
  ASSOCIATE_TARGETS_WITH_JOB = 'iot:AssociateTargetsWithJob',
  ATTACH_POLICY = 'iot:AttachPolicy',
  ATTACH_PRINCIPAL_POLICY = 'iot:AttachPrincipalPolicy',
  ATTACH_SECURITY_PROFILE = 'iot:AttachSecurityProfile',
  ATTACH_THING_PRINCIPAL = 'iot:AttachThingPrincipal',
  CANCEL_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:CancelAuditMitigationActionsTask',
  CANCEL_AUDIT_TASK = 'iot:CancelAuditTask',
  CANCEL_CERTIFICATE_TRANSFER = 'iot:CancelCertificateTransfer',
  CANCEL_JOB = 'iot:CancelJob',
  CANCEL_JOB_EXECUTION = 'iot:CancelJobExecution',
  CLEAR_DEFAULT_AUTHORIZER = 'iot:ClearDefaultAuthorizer',
  CLOSE_TUNNEL = 'iot:CloseTunnel',
  CONNECT = 'iot:Connect',
  CREATE_AUDIT_SUPPRESSION = 'iot:CreateAuditSuppression',
  CREATE_AUTHORIZER = 'iot:CreateAuthorizer',
  CREATE_BILLING_GROUP = 'iot:CreateBillingGroup',
  CREATE_CERTIFICATE_FROM_CSR = 'iot:CreateCertificateFromCsr',
  CREATE_DIMENSION = 'iot:CreateDimension',
  CREATE_DOMAIN_CONFIGURATION = 'iot:CreateDomainConfiguration',
  CREATE_DYNAMIC_THING_GROUP = 'iot:CreateDynamicThingGroup',
  CREATE_JOB = 'iot:CreateJob',
  CREATE_KEYS_AND_CERTIFICATE = 'iot:CreateKeysAndCertificate',
  CREATE_MITIGATION_ACTION = 'iot:CreateMitigationAction',
  CREATE_OTA_UPDATE = 'iot:CreateOTAUpdate',
  CREATE_POLICY = 'iot:CreatePolicy',
  CREATE_POLICY_VERSION = 'iot:CreatePolicyVersion',
  CREATE_PROVISIONING_CLAIM = 'iot:CreateProvisioningClaim',
  CREATE_PROVISIONING_TEMPLATE = 'iot:CreateProvisioningTemplate',
  CREATE_PROVISIONING_TEMPLATE_VERSION = 'iot:CreateProvisioningTemplateVersion',
  CREATE_ROLE_ALIAS = 'iot:CreateRoleAlias',
  CREATE_SCHEDULED_AUDIT = 'iot:CreateScheduledAudit',
  CREATE_SECURITY_PROFILE = 'iot:CreateSecurityProfile',
  CREATE_STREAM = 'iot:CreateStream',
  CREATE_THING = 'iot:CreateThing',
  CREATE_THING_GROUP = 'iot:CreateThingGroup',
  CREATE_THING_TYPE = 'iot:CreateThingType',
  CREATE_TOPIC_RULE = 'iot:CreateTopicRule',
  DELETE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:DeleteAccountAuditConfiguration',
  DELETE_AUDIT_SUPPRESSION = 'iot:DeleteAuditSuppression',
  DELETE_AUTHORIZER = 'iot:DeleteAuthorizer',
  DELETE_BILLING_GROUP = 'iot:DeleteBillingGroup',
  DELETE_CA_CERTIFICATE = 'iot:DeleteCACertificate',
  DELETE_CERTIFICATE = 'iot:DeleteCertificate',
  DELETE_DIMENSION = 'iot:DeleteDimension',
  DELETE_DOMAIN_CONFIGURATION = 'iot:DeleteDomainConfiguration',
  DELETE_DYNAMIC_THING_GROUP = 'iot:DeleteDynamicThingGroup',
  DELETE_JOB = 'iot:DeleteJob',
  DELETE_JOB_EXECUTION = 'iot:DeleteJobExecution',
  DELETE_MITIGATION_ACTION = 'iot:DeleteMitigationAction',
  DELETE_OTA_UPDATE = 'iot:DeleteOTAUpdate',
  DELETE_POLICY = 'iot:DeletePolicy',
  DELETE_POLICY_VERSION = 'iot:DeletePolicyVersion',
  DELETE_PROVISIONING_TEMPLATE = 'iot:DeleteProvisioningTemplate',
  DELETE_PROVISIONING_TEMPLATE_VERSION = 'iot:DeleteProvisioningTemplateVersion',
  DELETE_REGISTRATION_CODE = 'iot:DeleteRegistrationCode',
  DELETE_ROLE_ALIAS = 'iot:DeleteRoleAlias',
  DELETE_SCHEDULED_AUDIT = 'iot:DeleteScheduledAudit',
  DELETE_SECURITY_PROFILE = 'iot:DeleteSecurityProfile',
  DELETE_STREAM = 'iot:DeleteStream',
  DELETE_THING = 'iot:DeleteThing',
  DELETE_THING_GROUP = 'iot:DeleteThingGroup',
  DELETE_THING_SHADOW = 'iot:DeleteThingShadow',
  DELETE_THING_TYPE = 'iot:DeleteThingType',
  DELETE_TOPIC_RULE = 'iot:DeleteTopicRule',
  DELETE_V_2_LOGGING_LEVEL = 'iot:DeleteV2LoggingLevel',
  DEPRECATE_THING_TYPE = 'iot:DeprecateThingType',
  DESCRIBE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:DescribeAccountAuditConfiguration',
  DESCRIBE_AUDIT_FINDING = 'iot:DescribeAuditFinding',
  DESCRIBE_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:DescribeAuditMitigationActionsTask',
  DESCRIBE_AUDIT_SUPPRESSION = 'iot:DescribeAuditSuppression',
  DESCRIBE_AUDIT_TASK = 'iot:DescribeAuditTask',
  DESCRIBE_AUTHORIZER = 'iot:DescribeAuthorizer',
  DESCRIBE_BILLING_GROUP = 'iot:DescribeBillingGroup',
  DESCRIBE_CA_CERTIFICATE = 'iot:DescribeCACertificate',
  DESCRIBE_CERTIFICATE = 'iot:DescribeCertificate',
  DESCRIBE_DEFAULT_AUTHORIZER = 'iot:DescribeDefaultAuthorizer',
  DESCRIBE_DIMENSION = 'iot:DescribeDimension',
  DESCRIBE_DOMAIN_CONFIGURATION = 'iot:DescribeDomainConfiguration',
  DESCRIBE_ENDPOINT = 'iot:DescribeEndpoint',
  DESCRIBE_EVENT_CONFIGURATIONS = 'iot:DescribeEventConfigurations',
  DESCRIBE_INDEX = 'iot:DescribeIndex',
  DESCRIBE_JOB = 'iot:DescribeJob',
  DESCRIBE_JOB_EXECUTION = 'iot:DescribeJobExecution',
  DESCRIBE_MITIGATION_ACTION = 'iot:DescribeMitigationAction',
  DESCRIBE_PROVISIONING_TEMPLATE = 'iot:DescribeProvisioningTemplate',
  DESCRIBE_PROVISIONING_TEMPLATE_VERSION = 'iot:DescribeProvisioningTemplateVersion',
  DESCRIBE_ROLE_ALIAS = 'iot:DescribeRoleAlias',
  DESCRIBE_SCHEDULED_AUDIT = 'iot:DescribeScheduledAudit',
  DESCRIBE_SECURITY_PROFILE = 'iot:DescribeSecurityProfile',
  DESCRIBE_STREAM = 'iot:DescribeStream',
  DESCRIBE_THING = 'iot:DescribeThing',
  DESCRIBE_THING_GROUP = 'iot:DescribeThingGroup',
  DESCRIBE_THING_REGISTRATION_TASK = 'iot:DescribeThingRegistrationTask',
  DESCRIBE_THING_TYPE = 'iot:DescribeThingType',
  DESCRIBE_TUNNEL = 'iot:DescribeTunnel',
  DETACH_POLICY = 'iot:DetachPolicy',
  DETACH_PRINCIPAL_POLICY = 'iot:DetachPrincipalPolicy',
  DETACH_SECURITY_PROFILE = 'iot:DetachSecurityProfile',
  DETACH_THING_PRINCIPAL = 'iot:DetachThingPrincipal',
  DISABLE_TOPIC_RULE = 'iot:DisableTopicRule',
  ENABLE_TOPIC_RULE = 'iot:EnableTopicRule',
  GET_CARDINALITY = 'iot:GetCardinality',
  GET_EFFECTIVE_POLICIES = 'iot:GetEffectivePolicies',
  GET_INDEXING_CONFIGURATION = 'iot:GetIndexingConfiguration',
  GET_JOB_DOCUMENT = 'iot:GetJobDocument',
  GET_LOGGING_OPTIONS = 'iot:GetLoggingOptions',
  GET_OTA_UPDATE = 'iot:GetOTAUpdate',
  GET_PENDING_JOB_EXECUTIONS = 'iot:GetPendingJobExecutions',
  GET_PERCENTILES = 'iot:GetPercentiles',
  GET_POLICY = 'iot:GetPolicy',
  GET_POLICY_VERSION = 'iot:GetPolicyVersion',
  GET_REGISTRATION_CODE = 'iot:GetRegistrationCode',
  GET_STATISTICS = 'iot:GetStatistics',
  GET_THING_SHADOW = 'iot:GetThingShadow',
  GET_TOPIC_RULE = 'iot:GetTopicRule',
  GET_V_2_LOGGING_OPTIONS = 'iot:GetV2LoggingOptions',
  LIST_ACTIVE_VIOLATIONS = 'iot:ListActiveViolations',
  LIST_ATTACHED_POLICIES = 'iot:ListAttachedPolicies',
  LIST_AUDIT_FINDINGS = 'iot:ListAuditFindings',
  LIST_AUDIT_MITIGATION_ACTIONS_EXECUTIONS = 'iot:ListAuditMitigationActionsExecutions',
  LIST_AUDIT_MITIGATION_ACTIONS_TASKS = 'iot:ListAuditMitigationActionsTasks',
  LIST_AUDIT_SUPPRESSIONS = 'iot:ListAuditSuppressions',
  LIST_AUDIT_TASKS = 'iot:ListAuditTasks',
  LIST_AUTHORIZERS = 'iot:ListAuthorizers',
  LIST_BILLING_GROUPS = 'iot:ListBillingGroups',
  LIST_CA_CERTIFICATES = 'iot:ListCACertificates',
  LIST_CERTIFICATES = 'iot:ListCertificates',
  LIST_CERTIFICATES_BY_CA = 'iot:ListCertificatesByCA',
  LIST_DIMENSIONS = 'iot:ListDimensions',
  LIST_DOMAIN_CONFIGURATIONS = 'iot:ListDomainConfigurations',
  LIST_INDICES = 'iot:ListIndices',
  LIST_JOB_EXECUTIONS_FOR_JOB = 'iot:ListJobExecutionsForJob',
  LIST_JOB_EXECUTIONS_FOR_THING = 'iot:ListJobExecutionsForThing',
  LIST_JOBS = 'iot:ListJobs',
  LIST_MITIGATION_ACTIONS = 'iot:ListMitigationActions',
  LIST_NAMED_SHADOWS_FOR_THING = 'iot:ListNamedShadowsForThing',
  LIST_OTA_UPDATES = 'iot:ListOTAUpdates',
  LIST_OUTGOING_CERTIFICATES = 'iot:ListOutgoingCertificates',
  LIST_POLICIES = 'iot:ListPolicies',
  LIST_POLICY_PRINCIPALS = 'iot:ListPolicyPrincipals',
  LIST_POLICY_VERSIONS = 'iot:ListPolicyVersions',
  LIST_PRINCIPAL_POLICIES = 'iot:ListPrincipalPolicies',
  LIST_PRINCIPAL_THINGS = 'iot:ListPrincipalThings',
  LIST_PROVISIONING_TEMPLATE_VERSIONS = 'iot:ListProvisioningTemplateVersions',
  LIST_PROVISIONING_TEMPLATES = 'iot:ListProvisioningTemplates',
  LIST_ROLE_ALIASES = 'iot:ListRoleAliases',
  LIST_SCHEDULED_AUDITS = 'iot:ListScheduledAudits',
  LIST_SECURITY_PROFILES = 'iot:ListSecurityProfiles',
  LIST_SECURITY_PROFILES_FOR_TARGET = 'iot:ListSecurityProfilesForTarget',
  LIST_STREAMS = 'iot:ListStreams',
  LIST_TAGS_FOR_RESOURCE = 'iot:ListTagsForResource',
  LIST_TARGETS_FOR_POLICY = 'iot:ListTargetsForPolicy',
  LIST_TARGETS_FOR_SECURITY_PROFILE = 'iot:ListTargetsForSecurityProfile',
  LIST_THING_GROUPS = 'iot:ListThingGroups',
  LIST_THING_GROUPS_FOR_THING = 'iot:ListThingGroupsForThing',
  LIST_THING_PRINCIPALS = 'iot:ListThingPrincipals',
  LIST_THING_REGISTRATION_TASK_REPORTS = 'iot:ListThingRegistrationTaskReports',
  LIST_THING_REGISTRATION_TASKS = 'iot:ListThingRegistrationTasks',
  LIST_THING_TYPES = 'iot:ListThingTypes',
  LIST_THINGS = 'iot:ListThings',
  LIST_THINGS_IN_BILLING_GROUP = 'iot:ListThingsInBillingGroup',
  LIST_THINGS_IN_THING_GROUP = 'iot:ListThingsInThingGroup',
  LIST_TOPIC_RULES = 'iot:ListTopicRules',
  LIST_TUNNELS = 'iot:ListTunnels',
  LIST_V_2_LOGGING_LEVELS = 'iot:ListV2LoggingLevels',
  LIST_VIOLATION_EVENTS = 'iot:ListViolationEvents',
  OPEN_TUNNEL = 'iot:OpenTunnel',
  PUBLISH = 'iot:Publish',
  RECEIVE = 'iot:Receive',
  REGISTER_CA_CERTIFICATE = 'iot:RegisterCACertificate',
  REGISTER_CERTIFICATE = 'iot:RegisterCertificate',
  REGISTER_CERTIFICATE_WITHOUT_CA = 'iot:RegisterCertificateWithoutCA',
  REGISTER_THING = 'iot:RegisterThing',
  REJECT_CERTIFICATE_TRANSFER = 'iot:RejectCertificateTransfer',
  REMOVE_THING_FROM_BILLING_GROUP = 'iot:RemoveThingFromBillingGroup',
  REMOVE_THING_FROM_THING_GROUP = 'iot:RemoveThingFromThingGroup',
  REPLACE_TOPIC_RULE = 'iot:ReplaceTopicRule',
  SEARCH_INDEX = 'iot:SearchIndex',
  SET_DEFAULT_AUTHORIZER = 'iot:SetDefaultAuthorizer',
  SET_DEFAULT_POLICY_VERSION = 'iot:SetDefaultPolicyVersion',
  SET_LOGGING_OPTIONS = 'iot:SetLoggingOptions',
  SET_V_2_LOGGING_LEVEL = 'iot:SetV2LoggingLevel',
  SET_V_2_LOGGING_OPTIONS = 'iot:SetV2LoggingOptions',
  START_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:StartAuditMitigationActionsTask',
  START_NEXT_PENDING_JOB_EXECUTION = 'iot:StartNextPendingJobExecution',
  START_ON_DEMAND_AUDIT_TASK = 'iot:StartOnDemandAuditTask',
  START_THING_REGISTRATION_TASK = 'iot:StartThingRegistrationTask',
  STOP_THING_REGISTRATION_TASK = 'iot:StopThingRegistrationTask',
  SUBSCRIBE = 'iot:Subscribe',
  TAG_RESOURCE = 'iot:TagResource',
  TEST_AUTHORIZATION = 'iot:TestAuthorization',
  TEST_INVOKE_AUTHORIZER = 'iot:TestInvokeAuthorizer',
  TRANSFER_CERTIFICATE = 'iot:TransferCertificate',
  UNTAG_RESOURCE = 'iot:UntagResource',
  UPDATE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:UpdateAccountAuditConfiguration',
  UPDATE_AUDIT_SUPPRESSION = 'iot:UpdateAuditSuppression',
  UPDATE_AUTHORIZER = 'iot:UpdateAuthorizer',
  UPDATE_BILLING_GROUP = 'iot:UpdateBillingGroup',
  UPDATE_CA_CERTIFICATE = 'iot:UpdateCACertificate',
  UPDATE_CERTIFICATE = 'iot:UpdateCertificate',
  UPDATE_DIMENSION = 'iot:UpdateDimension',
  UPDATE_DOMAIN_CONFIGURATION = 'iot:UpdateDomainConfiguration',
  UPDATE_DYNAMIC_THING_GROUP = 'iot:UpdateDynamicThingGroup',
  UPDATE_EVENT_CONFIGURATIONS = 'iot:UpdateEventConfigurations',
  UPDATE_INDEXING_CONFIGURATION = 'iot:UpdateIndexingConfiguration',
  UPDATE_JOB = 'iot:UpdateJob',
  UPDATE_JOB_EXECUTION = 'iot:UpdateJobExecution',
  UPDATE_MITIGATION_ACTION = 'iot:UpdateMitigationAction',
  UPDATE_PROVISIONING_TEMPLATE = 'iot:UpdateProvisioningTemplate',
  UPDATE_ROLE_ALIAS = 'iot:UpdateRoleAlias',
  UPDATE_SCHEDULED_AUDIT = 'iot:UpdateScheduledAudit',
  UPDATE_SECURITY_PROFILE = 'iot:UpdateSecurityProfile',
  UPDATE_STREAM = 'iot:UpdateStream',
  UPDATE_THING = 'iot:UpdateThing',
  UPDATE_THING_GROUP = 'iot:UpdateThingGroup',
  UPDATE_THING_GROUPS_FOR_THING = 'iot:UpdateThingGroupsForThing',
  UPDATE_THING_SHADOW = 'iot:UpdateThingShadow',
  VALIDATE_SECURITY_PROFILE_BEHAVIORS = 'iot:ValidateSecurityProfileBehaviors',
}
export enum MIGRATION_HUB {
  ASSOCIATE_CREATED_ARTIFACT = 'mgh:AssociateCreatedArtifact',
  ASSOCIATE_DISCOVERED_RESOURCE = 'mgh:AssociateDiscoveredResource',
  CREATE_HOME_REGION_CONTROL = 'mgh:CreateHomeRegionControl',
  CREATE_PROGRESS_UPDATE_STREAM = 'mgh:CreateProgressUpdateStream',
  DELETE_PROGRESS_UPDATE_STREAM = 'mgh:DeleteProgressUpdateStream',
  DESCRIBE_APPLICATION_STATE = 'mgh:DescribeApplicationState',
  DESCRIBE_HOME_REGION_CONTROLS = 'mgh:DescribeHomeRegionControls',
  DESCRIBE_MIGRATION_TASK = 'mgh:DescribeMigrationTask',
  DISASSOCIATE_CREATED_ARTIFACT = 'mgh:DisassociateCreatedArtifact',
  DISASSOCIATE_DISCOVERED_RESOURCE = 'mgh:DisassociateDiscoveredResource',
  GET_HOME_REGION = 'mgh:GetHomeRegion',
  IMPORT_MIGRATION_TASK = 'mgh:ImportMigrationTask',
  LIST_CREATED_ARTIFACTS = 'mgh:ListCreatedArtifacts',
  LIST_DISCOVERED_RESOURCES = 'mgh:ListDiscoveredResources',
  LIST_MIGRATION_TASKS = 'mgh:ListMigrationTasks',
  LIST_PROGRESS_UPDATE_STREAMS = 'mgh:ListProgressUpdateStreams',
  NOTIFY_APPLICATION_STATE = 'mgh:NotifyApplicationState',
  NOTIFY_MIGRATION_TASK_STATE = 'mgh:NotifyMigrationTaskState',
  PUT_RESOURCE_ATTRIBUTES = 'mgh:PutResourceAttributes',
}
export enum LAMBDA {
  ADD_LAYER_VERSION_PERMISSION = 'lambda:AddLayerVersionPermission',
  ADD_PERMISSION = 'lambda:AddPermission',
  CREATE_ALIAS = 'lambda:CreateAlias',
  CREATE_EVENT_SOURCE_MAPPING = 'lambda:CreateEventSourceMapping',
  CREATE_FUNCTION = 'lambda:CreateFunction',
  DELETE_ALIAS = 'lambda:DeleteAlias',
  DELETE_EVENT_SOURCE_MAPPING = 'lambda:DeleteEventSourceMapping',
  DELETE_FUNCTION = 'lambda:DeleteFunction',
  DELETE_FUNCTION_CONCURRENCY = 'lambda:DeleteFunctionConcurrency',
  DELETE_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:DeleteFunctionEventInvokeConfig',
  DELETE_LAYER_VERSION = 'lambda:DeleteLayerVersion',
  DELETE_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:DeleteProvisionedConcurrencyConfig',
  DISABLE_REPLICATION = 'lambda:DisableReplication',
  ENABLE_REPLICATION = 'lambda:EnableReplication',
  GET_ACCOUNT_SETTINGS = 'lambda:GetAccountSettings',
  GET_ALIAS = 'lambda:GetAlias',
  GET_EVENT_SOURCE_MAPPING = 'lambda:GetEventSourceMapping',
  GET_FUNCTION = 'lambda:GetFunction',
  GET_FUNCTION_CONCURRENCY = 'lambda:GetFunctionConcurrency',
  GET_FUNCTION_CONFIGURATION = 'lambda:GetFunctionConfiguration',
  GET_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:GetFunctionEventInvokeConfig',
  GET_LAYER_VERSION = 'lambda:GetLayerVersion',
  GET_LAYER_VERSION_POLICY = 'lambda:GetLayerVersionPolicy',
  GET_POLICY = 'lambda:GetPolicy',
  GET_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:GetProvisionedConcurrencyConfig',
  INVOKE_ASYNC = 'lambda:InvokeAsync',
  INVOKE_FUNCTION = 'lambda:InvokeFunction',
  LIST_ALIASES = 'lambda:ListAliases',
  LIST_EVENT_SOURCE_MAPPINGS = 'lambda:ListEventSourceMappings',
  LIST_FUNCTION_EVENT_INVOKE_CONFIGS = 'lambda:ListFunctionEventInvokeConfigs',
  LIST_FUNCTIONS = 'lambda:ListFunctions',
  LIST_LAYER_VERSIONS = 'lambda:ListLayerVersions',
  LIST_LAYERS = 'lambda:ListLayers',
  LIST_PROVISIONED_CONCURRENCY_CONFIGS = 'lambda:ListProvisionedConcurrencyConfigs',
  LIST_TAGS = 'lambda:ListTags',
  LIST_VERSIONS_BY_FUNCTION = 'lambda:ListVersionsByFunction',
  PUBLISH_LAYER_VERSION = 'lambda:PublishLayerVersion',
  PUBLISH_VERSION = 'lambda:PublishVersion',
  PUT_FUNCTION_CONCURRENCY = 'lambda:PutFunctionConcurrency',
  PUT_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:PutFunctionEventInvokeConfig',
  PUT_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:PutProvisionedConcurrencyConfig',
  REMOVE_LAYER_VERSION_PERMISSION = 'lambda:RemoveLayerVersionPermission',
  REMOVE_PERMISSION = 'lambda:RemovePermission',
  TAG_RESOURCE = 'lambda:TagResource',
  UNTAG_RESOURCE = 'lambda:UntagResource',
  UPDATE_ALIAS = 'lambda:UpdateAlias',
  UPDATE_EVENT_SOURCE_MAPPING = 'lambda:UpdateEventSourceMapping',
  UPDATE_FUNCTION_CODE = 'lambda:UpdateFunctionCode',
  UPDATE_FUNCTION_CONFIGURATION = 'lambda:UpdateFunctionConfiguration',
  UPDATE_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:UpdateFunctionEventInvokeConfig',
}
export enum DATA_EXCHANGE {
  CANCEL_JOB = 'dataexchange:CancelJob',
  CREATE_ASSET = 'dataexchange:CreateAsset',
  CREATE_DATA_SET = 'dataexchange:CreateDataSet',
  CREATE_JOB = 'dataexchange:CreateJob',
  CREATE_REVISION = 'dataexchange:CreateRevision',
  DELETE_ASSET = 'dataexchange:DeleteAsset',
  DELETE_DATA_SET = 'dataexchange:DeleteDataSet',
  DELETE_REVISION = 'dataexchange:DeleteRevision',
  GET_ASSET = 'dataexchange:GetAsset',
  GET_DATA_SET = 'dataexchange:GetDataSet',
  GET_JOB = 'dataexchange:GetJob',
  GET_REVISION = 'dataexchange:GetRevision',
  LIST_DATA_SET_REVISIONS = 'dataexchange:ListDataSetRevisions',
  LIST_DATA_SETS = 'dataexchange:ListDataSets',
  LIST_JOBS = 'dataexchange:ListJobs',
  LIST_REVISION_ASSETS = 'dataexchange:ListRevisionAssets',
  LIST_TAGS_FOR_RESOURCE = 'dataexchange:ListTagsForResource',
  START_JOB = 'dataexchange:StartJob',
  TAG_RESOURCE = 'dataexchange:TagResource',
  UNTAG_RESOURCE = 'dataexchange:UntagResource',
  UPDATE_ASSET = 'dataexchange:UpdateAsset',
  UPDATE_DATA_SET = 'dataexchange:UpdateDataSet',
  UPDATE_REVISION = 'dataexchange:UpdateRevision',
}
export enum MACHINE_LEARNING {
  ADD_TAGS = 'machinelearning:AddTags',
  CREATE_BATCH_PREDICTION = 'machinelearning:CreateBatchPrediction',
  CREATE_DATA_SOURCE_FROM_RDS = 'machinelearning:CreateDataSourceFromRDS',
  CREATE_DATA_SOURCE_FROM_REDSHIFT = 'machinelearning:CreateDataSourceFromRedshift',
  CREATE_DATA_SOURCE_FROM_S_3 = 'machinelearning:CreateDataSourceFromS3',
  CREATE_EVALUATION = 'machinelearning:CreateEvaluation',
  CREATE_ML_MODEL = 'machinelearning:CreateMLModel',
  CREATE_REALTIME_ENDPOINT = 'machinelearning:CreateRealtimeEndpoint',
  DELETE_BATCH_PREDICTION = 'machinelearning:DeleteBatchPrediction',
  DELETE_DATA_SOURCE = 'machinelearning:DeleteDataSource',
  DELETE_EVALUATION = 'machinelearning:DeleteEvaluation',
  DELETE_ML_MODEL = 'machinelearning:DeleteMLModel',
  DELETE_REALTIME_ENDPOINT = 'machinelearning:DeleteRealtimeEndpoint',
  DELETE_TAGS = 'machinelearning:DeleteTags',
  DESCRIBE_BATCH_PREDICTIONS = 'machinelearning:DescribeBatchPredictions',
  DESCRIBE_DATA_SOURCES = 'machinelearning:DescribeDataSources',
  DESCRIBE_EVALUATIONS = 'machinelearning:DescribeEvaluations',
  DESCRIBE_ML_MODELS = 'machinelearning:DescribeMLModels',
  DESCRIBE_TAGS = 'machinelearning:DescribeTags',
  GET_BATCH_PREDICTION = 'machinelearning:GetBatchPrediction',
  GET_DATA_SOURCE = 'machinelearning:GetDataSource',
  GET_EVALUATION = 'machinelearning:GetEvaluation',
  GET_ML_MODEL = 'machinelearning:GetMLModel',
  PREDICT = 'machinelearning:Predict',
  UPDATE_BATCH_PREDICTION = 'machinelearning:UpdateBatchPrediction',
  UPDATE_DATA_SOURCE = 'machinelearning:UpdateDataSource',
  UPDATE_EVALUATION = 'machinelearning:UpdateEvaluation',
  UPDATE_ML_MODEL = 'machinelearning:UpdateMLModel',
}
export enum GUARDDUTY {
  ACCEPT_INVITATION = 'guardduty:AcceptInvitation',
  ARCHIVE_FINDINGS = 'guardduty:ArchiveFindings',
  CREATE_DETECTOR = 'guardduty:CreateDetector',
  CREATE_FILTER = 'guardduty:CreateFilter',
  CREATE_IP_SET = 'guardduty:CreateIPSet',
  CREATE_MEMBERS = 'guardduty:CreateMembers',
  CREATE_PUBLISHING_DESTINATION = 'guardduty:CreatePublishingDestination',
  CREATE_SAMPLE_FINDINGS = 'guardduty:CreateSampleFindings',
  CREATE_THREAT_INTEL_SET = 'guardduty:CreateThreatIntelSet',
  DECLINE_INVITATIONS = 'guardduty:DeclineInvitations',
  DELETE_DETECTOR = 'guardduty:DeleteDetector',
  DELETE_FILTER = 'guardduty:DeleteFilter',
  DELETE_IP_SET = 'guardduty:DeleteIPSet',
  DELETE_INVITATIONS = 'guardduty:DeleteInvitations',
  DELETE_MEMBERS = 'guardduty:DeleteMembers',
  DELETE_PUBLISHING_DESTINATION = 'guardduty:DeletePublishingDestination',
  DELETE_THREAT_INTEL_SET = 'guardduty:DeleteThreatIntelSet',
  DESCRIBE_ORGANIZATION_CONFIGURATION = 'guardduty:DescribeOrganizationConfiguration',
  DESCRIBE_PUBLISHING_DESTINATION = 'guardduty:DescribePublishingDestination',
  DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'guardduty:DisableOrganizationAdminAccount',
  DISASSOCIATE_FROM_MASTER_ACCOUNT = 'guardduty:DisassociateFromMasterAccount',
  DISASSOCIATE_MEMBERS = 'guardduty:DisassociateMembers',
  ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'guardduty:EnableOrganizationAdminAccount',
  GET_DETECTOR = 'guardduty:GetDetector',
  GET_FILTER = 'guardduty:GetFilter',
  GET_FINDINGS = 'guardduty:GetFindings',
  GET_FINDINGS_STATISTICS = 'guardduty:GetFindingsStatistics',
  GET_IP_SET = 'guardduty:GetIPSet',
  GET_INVITATIONS_COUNT = 'guardduty:GetInvitationsCount',
  GET_MASTER_ACCOUNT = 'guardduty:GetMasterAccount',
  GET_MEMBERS = 'guardduty:GetMembers',
  GET_THREAT_INTEL_SET = 'guardduty:GetThreatIntelSet',
  INVITE_MEMBERS = 'guardduty:InviteMembers',
  LIST_DETECTORS = 'guardduty:ListDetectors',
  LIST_FILTERS = 'guardduty:ListFilters',
  LIST_FINDINGS = 'guardduty:ListFindings',
  LIST_INVITATIONS = 'guardduty:ListInvitations',
  LIST_MEMBERS = 'guardduty:ListMembers',
  LIST_ORGANIZATION_ADMIN_ACCOUNTS = 'guardduty:ListOrganizationAdminAccounts',
  LIST_PUBLISHING_DESTINATIONS = 'guardduty:ListPublishingDestinations',
  LIST_TAGS_FOR_RESOURCE = 'guardduty:ListTagsForResource',
  LIST_THREAT_INTEL_SETS = 'guardduty:ListThreatIntelSets',
  START_MONITORING_MEMBERS = 'guardduty:StartMonitoringMembers',
  STOP_MONITORING_MEMBERS = 'guardduty:StopMonitoringMembers',
  TAG_RESOURCE = 'guardduty:TagResource',
  UNARCHIVE_FINDINGS = 'guardduty:UnarchiveFindings',
  UNTAG_RESOURCE = 'guardduty:UntagResource',
  UPDATE_DETECTOR = 'guardduty:UpdateDetector',
  UPDATE_FILTER = 'guardduty:UpdateFilter',
  UPDATE_FINDINGS_FEEDBACK = 'guardduty:UpdateFindingsFeedback',
  UPDATE_IP_SET = 'guardduty:UpdateIPSet',
  UPDATE_ORGANIZATION_CONFIGURATION = 'guardduty:UpdateOrganizationConfiguration',
  UPDATE_PUBLISHING_DESTINATION = 'guardduty:UpdatePublishingDestination',
  UPDATE_THREAT_INTEL_SET = 'guardduty:UpdateThreatIntelSet',
}
export enum EVENTBRIDGE {
  ACTIVATE_EVENT_SOURCE = 'events:ActivateEventSource',
  CREATE_EVENT_BUS = 'events:CreateEventBus',
  CREATE_PARTNER_EVENT_SOURCE = 'events:CreatePartnerEventSource',
  DEACTIVATE_EVENT_SOURCE = 'events:DeactivateEventSource',
  DELETE_EVENT_BUS = 'events:DeleteEventBus',
  DELETE_PARTNER_EVENT_SOURCE = 'events:DeletePartnerEventSource',
  DELETE_RULE = 'events:DeleteRule',
  DESCRIBE_EVENT_BUS = 'events:DescribeEventBus',
  DESCRIBE_EVENT_SOURCE = 'events:DescribeEventSource',
  DESCRIBE_PARTNER_EVENT_SOURCE = 'events:DescribePartnerEventSource',
  DESCRIBE_RULE = 'events:DescribeRule',
  DISABLE_RULE = 'events:DisableRule',
  ENABLE_RULE = 'events:EnableRule',
  LIST_EVENT_BUSES = 'events:ListEventBuses',
  LIST_EVENT_SOURCES = 'events:ListEventSources',
  LIST_PARTNER_EVENT_SOURCE_ACCOUNTS = 'events:ListPartnerEventSourceAccounts',
  LIST_PARTNER_EVENT_SOURCES = 'events:ListPartnerEventSources',
  LIST_RULE_NAMES_BY_TARGET = 'events:ListRuleNamesByTarget',
  LIST_RULES = 'events:ListRules',
  LIST_TAGS_FOR_RESOURCE = 'events:ListTagsForResource',
  LIST_TARGETS_BY_RULE = 'events:ListTargetsByRule',
  PUT_EVENTS = 'events:PutEvents',
  PUT_PARTNER_EVENTS = 'events:PutPartnerEvents',
  PUT_PERMISSION = 'events:PutPermission',
  PUT_RULE = 'events:PutRule',
  PUT_TARGETS = 'events:PutTargets',
  REMOVE_PERMISSION = 'events:RemovePermission',
  REMOVE_TARGETS = 'events:RemoveTargets',
  TAG_RESOURCE = 'events:TagResource',
  TEST_EVENT_PATTERN = 'events:TestEventPattern',
  UNTAG_RESOURCE = 'events:UntagResource',
}
export enum LEX {
  CREATE_BOT_VERSION = 'lex:CreateBotVersion',
  CREATE_INTENT_VERSION = 'lex:CreateIntentVersion',
  CREATE_SLOT_TYPE_VERSION = 'lex:CreateSlotTypeVersion',
  DELETE_BOT = 'lex:DeleteBot',
  DELETE_BOT_ALIAS = 'lex:DeleteBotAlias',
  DELETE_BOT_CHANNEL_ASSOCIATION = 'lex:DeleteBotChannelAssociation',
  DELETE_BOT_VERSION = 'lex:DeleteBotVersion',
  DELETE_INTENT = 'lex:DeleteIntent',
  DELETE_INTENT_VERSION = 'lex:DeleteIntentVersion',
  DELETE_SESSION = 'lex:DeleteSession',
  DELETE_SLOT_TYPE = 'lex:DeleteSlotType',
  DELETE_SLOT_TYPE_VERSION = 'lex:DeleteSlotTypeVersion',
  DELETE_UTTERANCES = 'lex:DeleteUtterances',
  GET_BOT = 'lex:GetBot',
  GET_BOT_ALIAS = 'lex:GetBotAlias',
  GET_BOT_ALIASES = 'lex:GetBotAliases',
  GET_BOT_CHANNEL_ASSOCIATION = 'lex:GetBotChannelAssociation',
  GET_BOT_CHANNEL_ASSOCIATIONS = 'lex:GetBotChannelAssociations',
  GET_BOT_VERSIONS = 'lex:GetBotVersions',
  GET_BOTS = 'lex:GetBots',
  GET_BUILTIN_INTENT = 'lex:GetBuiltinIntent',
  GET_BUILTIN_INTENTS = 'lex:GetBuiltinIntents',
  GET_BUILTIN_SLOT_TYPES = 'lex:GetBuiltinSlotTypes',
  GET_EXPORT = 'lex:GetExport',
  GET_IMPORT = 'lex:GetImport',
  GET_INTENT = 'lex:GetIntent',
  GET_INTENT_VERSIONS = 'lex:GetIntentVersions',
  GET_INTENTS = 'lex:GetIntents',
  GET_SESSION = 'lex:GetSession',
  GET_SLOT_TYPE = 'lex:GetSlotType',
  GET_SLOT_TYPE_VERSIONS = 'lex:GetSlotTypeVersions',
  GET_SLOT_TYPES = 'lex:GetSlotTypes',
  GET_UTTERANCES_VIEW = 'lex:GetUtterancesView',
  LIST_TAGS_FOR_RESOURCE = 'lex:ListTagsForResource',
  POST_CONTENT = 'lex:PostContent',
  POST_TEXT = 'lex:PostText',
  PUT_BOT = 'lex:PutBot',
  PUT_BOT_ALIAS = 'lex:PutBotAlias',
  PUT_INTENT = 'lex:PutIntent',
  PUT_SESSION = 'lex:PutSession',
  PUT_SLOT_TYPE = 'lex:PutSlotType',
  START_IMPORT = 'lex:StartImport',
  TAG_RESOURCE = 'lex:TagResource',
  UNTAG_RESOURCE = 'lex:UntagResource',
}
export enum RESOURCE_ACCESS_MANAGER {
  ACCEPT_RESOURCE_SHARE_INVITATION = 'ram:AcceptResourceShareInvitation',
  ASSOCIATE_RESOURCE_SHARE = 'ram:AssociateResourceShare',
  ASSOCIATE_RESOURCE_SHARE_PERMISSION = 'ram:AssociateResourceSharePermission',
  CREATE_RESOURCE_SHARE = 'ram:CreateResourceShare',
  DELETE_RESOURCE_SHARE = 'ram:DeleteResourceShare',
  DISASSOCIATE_RESOURCE_SHARE = 'ram:DisassociateResourceShare',
  DISASSOCIATE_RESOURCE_SHARE_PERMISSION = 'ram:DisassociateResourceSharePermission',
  ENABLE_SHARING_WITH_AWS_ORGANIZATION = 'ram:EnableSharingWithAwsOrganization',
  GET_PERMISSION = 'ram:GetPermission',
  GET_RESOURCE_POLICIES = 'ram:GetResourcePolicies',
  GET_RESOURCE_SHARE_ASSOCIATIONS = 'ram:GetResourceShareAssociations',
  GET_RESOURCE_SHARE_INVITATIONS = 'ram:GetResourceShareInvitations',
  GET_RESOURCE_SHARES = 'ram:GetResourceShares',
  LIST_PENDING_INVITATION_RESOURCES = 'ram:ListPendingInvitationResources',
  LIST_PERMISSIONS = 'ram:ListPermissions',
  LIST_PRINCIPALS = 'ram:ListPrincipals',
  LIST_RESOURCE_SHARE_PERMISSIONS = 'ram:ListResourceSharePermissions',
  LIST_RESOURCES = 'ram:ListResources',
  REJECT_RESOURCE_SHARE_INVITATION = 'ram:RejectResourceShareInvitation',
  TAG_RESOURCE = 'ram:TagResource',
  UNTAG_RESOURCE = 'ram:UntagResource',
  UPDATE_RESOURCE_SHARE = 'ram:UpdateResourceShare',
}
export enum ELEMENTAL_MEDIACONNECT {
  ADD_FLOW_OUTPUTS = 'mediaconnect:AddFlowOutputs',
  CREATE_FLOW = 'mediaconnect:CreateFlow',
  DELETE_FLOW = 'mediaconnect:DeleteFlow',
  DESCRIBE_FLOW = 'mediaconnect:DescribeFlow',
  GRANT_FLOW_ENTITLEMENTS = 'mediaconnect:GrantFlowEntitlements',
  LIST_ENTITLEMENTS = 'mediaconnect:ListEntitlements',
  LIST_FLOWS = 'mediaconnect:ListFlows',
  REMOVE_FLOW_OUTPUT = 'mediaconnect:RemoveFlowOutput',
  REVOKE_FLOW_ENTITLEMENT = 'mediaconnect:RevokeFlowEntitlement',
  START_FLOW = 'mediaconnect:StartFlow',
  STOP_FLOW = 'mediaconnect:StopFlow',
  UPDATE_FLOW_ENTITLEMENT = 'mediaconnect:UpdateFlowEntitlement',
  UPDATE_FLOW_OUTPUT = 'mediaconnect:UpdateFlowOutput',
  UPDATE_FLOW_SOURCE = 'mediaconnect:UpdateFlowSource',
}
export enum S3 {
  ABORT_MULTIPART_UPLOAD = 's3:AbortMultipartUpload',
  BYPASS_GOVERNANCE_RETENTION = 's3:BypassGovernanceRetention',
  CREATE_ACCESS_POINT = 's3:CreateAccessPoint',
  CREATE_BUCKET = 's3:CreateBucket',
  CREATE_JOB = 's3:CreateJob',
  DELETE_ACCESS_POINT = 's3:DeleteAccessPoint',
  DELETE_ACCESS_POINT_POLICY = 's3:DeleteAccessPointPolicy',
  DELETE_BUCKET = 's3:DeleteBucket',
  DELETE_BUCKET_POLICY = 's3:DeleteBucketPolicy',
  DELETE_BUCKET_WEBSITE = 's3:DeleteBucketWebsite',
  DELETE_JOB_TAGGING = 's3:DeleteJobTagging',
  DELETE_OBJECT = 's3:DeleteObject',
  DELETE_OBJECT_TAGGING = 's3:DeleteObjectTagging',
  DELETE_OBJECT_VERSION = 's3:DeleteObjectVersion',
  DELETE_OBJECT_VERSION_TAGGING = 's3:DeleteObjectVersionTagging',
  DESCRIBE_JOB = 's3:DescribeJob',
  GET_ACCELERATE_CONFIGURATION = 's3:GetAccelerateConfiguration',
  GET_ACCESS_POINT = 's3:GetAccessPoint',
  GET_ACCESS_POINT_POLICY = 's3:GetAccessPointPolicy',
  GET_ACCESS_POINT_POLICY_STATUS = 's3:GetAccessPointPolicyStatus',
  GET_ACCOUNT_PUBLIC_ACCESS_BLOCK = 's3:GetAccountPublicAccessBlock',
  GET_ANALYTICS_CONFIGURATION = 's3:GetAnalyticsConfiguration',
  GET_BUCKET_ACL = 's3:GetBucketAcl',
  GET_BUCKET_CORS = 's3:GetBucketCORS',
  GET_BUCKET_LOCATION = 's3:GetBucketLocation',
  GET_BUCKET_LOGGING = 's3:GetBucketLogging',
  GET_BUCKET_NOTIFICATION = 's3:GetBucketNotification',
  GET_BUCKET_OBJECT_LOCK_CONFIGURATION = 's3:GetBucketObjectLockConfiguration',
  GET_BUCKET_POLICY = 's3:GetBucketPolicy',
  GET_BUCKET_POLICY_STATUS = 's3:GetBucketPolicyStatus',
  GET_BUCKET_PUBLIC_ACCESS_BLOCK = 's3:GetBucketPublicAccessBlock',
  GET_BUCKET_REQUEST_PAYMENT = 's3:GetBucketRequestPayment',
  GET_BUCKET_TAGGING = 's3:GetBucketTagging',
  GET_BUCKET_VERSIONING = 's3:GetBucketVersioning',
  GET_BUCKET_WEBSITE = 's3:GetBucketWebsite',
  GET_ENCRYPTION_CONFIGURATION = 's3:GetEncryptionConfiguration',
  GET_INVENTORY_CONFIGURATION = 's3:GetInventoryConfiguration',
  GET_JOB_TAGGING = 's3:GetJobTagging',
  GET_LIFECYCLE_CONFIGURATION = 's3:GetLifecycleConfiguration',
  GET_METRICS_CONFIGURATION = 's3:GetMetricsConfiguration',
  GET_OBJECT = 's3:GetObject',
  GET_OBJECT_ACL = 's3:GetObjectAcl',
  GET_OBJECT_LEGAL_HOLD = 's3:GetObjectLegalHold',
  GET_OBJECT_RETENTION = 's3:GetObjectRetention',
  GET_OBJECT_TAGGING = 's3:GetObjectTagging',
  GET_OBJECT_TORRENT = 's3:GetObjectTorrent',
  GET_OBJECT_VERSION = 's3:GetObjectVersion',
  GET_OBJECT_VERSION_ACL = 's3:GetObjectVersionAcl',
  GET_OBJECT_VERSION_FOR_REPLICATION = 's3:GetObjectVersionForReplication',
  GET_OBJECT_VERSION_TAGGING = 's3:GetObjectVersionTagging',
  GET_OBJECT_VERSION_TORRENT = 's3:GetObjectVersionTorrent',
  GET_REPLICATION_CONFIGURATION = 's3:GetReplicationConfiguration',
  HEAD_BUCKET = 's3:HeadBucket',
  LIST_ACCESS_POINTS = 's3:ListAccessPoints',
  LIST_ALL_MY_BUCKETS = 's3:ListAllMyBuckets',
  LIST_BUCKET = 's3:ListBucket',
  LIST_BUCKET_MULTIPART_UPLOADS = 's3:ListBucketMultipartUploads',
  LIST_BUCKET_VERSIONS = 's3:ListBucketVersions',
  LIST_JOBS = 's3:ListJobs',
  LIST_MULTIPART_UPLOAD_PARTS = 's3:ListMultipartUploadParts',
  OBJECT_OWNER_OVERRIDE_TO_BUCKET_OWNER = 's3:ObjectOwnerOverrideToBucketOwner',
  PUT_ACCELERATE_CONFIGURATION = 's3:PutAccelerateConfiguration',
  PUT_ACCESS_POINT_POLICY = 's3:PutAccessPointPolicy',
  PUT_ACCOUNT_PUBLIC_ACCESS_BLOCK = 's3:PutAccountPublicAccessBlock',
  PUT_ANALYTICS_CONFIGURATION = 's3:PutAnalyticsConfiguration',
  PUT_BUCKET_ACL = 's3:PutBucketAcl',
  PUT_BUCKET_CORS = 's3:PutBucketCORS',
  PUT_BUCKET_LOGGING = 's3:PutBucketLogging',
  PUT_BUCKET_NOTIFICATION = 's3:PutBucketNotification',
  PUT_BUCKET_OBJECT_LOCK_CONFIGURATION = 's3:PutBucketObjectLockConfiguration',
  PUT_BUCKET_POLICY = 's3:PutBucketPolicy',
  PUT_BUCKET_PUBLIC_ACCESS_BLOCK = 's3:PutBucketPublicAccessBlock',
  PUT_BUCKET_REQUEST_PAYMENT = 's3:PutBucketRequestPayment',
  PUT_BUCKET_TAGGING = 's3:PutBucketTagging',
  PUT_BUCKET_VERSIONING = 's3:PutBucketVersioning',
  PUT_BUCKET_WEBSITE = 's3:PutBucketWebsite',
  PUT_ENCRYPTION_CONFIGURATION = 's3:PutEncryptionConfiguration',
  PUT_INVENTORY_CONFIGURATION = 's3:PutInventoryConfiguration',
  PUT_JOB_TAGGING = 's3:PutJobTagging',
  PUT_LIFECYCLE_CONFIGURATION = 's3:PutLifecycleConfiguration',
  PUT_METRICS_CONFIGURATION = 's3:PutMetricsConfiguration',
  PUT_OBJECT = 's3:PutObject',
  PUT_OBJECT_ACL = 's3:PutObjectAcl',
  PUT_OBJECT_LEGAL_HOLD = 's3:PutObjectLegalHold',
  PUT_OBJECT_RETENTION = 's3:PutObjectRetention',
  PUT_OBJECT_TAGGING = 's3:PutObjectTagging',
  PUT_OBJECT_VERSION_ACL = 's3:PutObjectVersionAcl',
  PUT_OBJECT_VERSION_TAGGING = 's3:PutObjectVersionTagging',
  PUT_REPLICATION_CONFIGURATION = 's3:PutReplicationConfiguration',
  REPLICATE_DELETE = 's3:ReplicateDelete',
  REPLICATE_OBJECT = 's3:ReplicateObject',
  REPLICATE_TAGS = 's3:ReplicateTags',
  RESTORE_OBJECT = 's3:RestoreObject',
  UPDATE_JOB_PRIORITY = 's3:UpdateJobPriority',
  UPDATE_JOB_STATUS = 's3:UpdateJobStatus',
}
export enum SAGEMAKER {
  ADD_TAGS = 'sagemaker:AddTags',
  ASSOCIATE_TRIAL_COMPONENT = 'sagemaker:AssociateTrialComponent',
  BATCH_GET_METRICS = 'sagemaker:BatchGetMetrics',
  BATCH_PUT_METRICS = 'sagemaker:BatchPutMetrics',
  CREATE_ALGORITHM = 'sagemaker:CreateAlgorithm',
  CREATE_APP = 'sagemaker:CreateApp',
  CREATE_AUTO_ML_JOB = 'sagemaker:CreateAutoMLJob',
  CREATE_CODE_REPOSITORY = 'sagemaker:CreateCodeRepository',
  CREATE_COMPILATION_JOB = 'sagemaker:CreateCompilationJob',
  CREATE_DOMAIN = 'sagemaker:CreateDomain',
  CREATE_ENDPOINT = 'sagemaker:CreateEndpoint',
  CREATE_ENDPOINT_CONFIG = 'sagemaker:CreateEndpointConfig',
  CREATE_EXPERIMENT = 'sagemaker:CreateExperiment',
  CREATE_FLOW_DEFINITION = 'sagemaker:CreateFlowDefinition',
  CREATE_HUMAN_TASK_UI = 'sagemaker:CreateHumanTaskUi',
  CREATE_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:CreateHyperParameterTuningJob',
  CREATE_LABELING_JOB = 'sagemaker:CreateLabelingJob',
  CREATE_MODEL = 'sagemaker:CreateModel',
  CREATE_MODEL_PACKAGE = 'sagemaker:CreateModelPackage',
  CREATE_MONITORING_SCHEDULE = 'sagemaker:CreateMonitoringSchedule',
  CREATE_NOTEBOOK_INSTANCE = 'sagemaker:CreateNotebookInstance',
  CREATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:CreateNotebookInstanceLifecycleConfig',
  CREATE_PRESIGNED_DOMAIN_URL = 'sagemaker:CreatePresignedDomainUrl',
  CREATE_PRESIGNED_NOTEBOOK_INSTANCE_URL = 'sagemaker:CreatePresignedNotebookInstanceUrl',
  CREATE_PROCESSING_JOB = 'sagemaker:CreateProcessingJob',
  CREATE_TRAINING_JOB = 'sagemaker:CreateTrainingJob',
  CREATE_TRANSFORM_JOB = 'sagemaker:CreateTransformJob',
  CREATE_TRIAL = 'sagemaker:CreateTrial',
  CREATE_TRIAL_COMPONENT = 'sagemaker:CreateTrialComponent',
  CREATE_USER_PROFILE = 'sagemaker:CreateUserProfile',
  CREATE_WORKFORCE = 'sagemaker:CreateWorkforce',
  CREATE_WORKTEAM = 'sagemaker:CreateWorkteam',
  DELETE_ALGORITHM = 'sagemaker:DeleteAlgorithm',
  DELETE_APP = 'sagemaker:DeleteApp',
  DELETE_CODE_REPOSITORY = 'sagemaker:DeleteCodeRepository',
  DELETE_DOMAIN = 'sagemaker:DeleteDomain',
  DELETE_ENDPOINT = 'sagemaker:DeleteEndpoint',
  DELETE_ENDPOINT_CONFIG = 'sagemaker:DeleteEndpointConfig',
  DELETE_EXPERIMENT = 'sagemaker:DeleteExperiment',
  DELETE_FLOW_DEFINITION = 'sagemaker:DeleteFlowDefinition',
  DELETE_HUMAN_LOOP = 'sagemaker:DeleteHumanLoop',
  DELETE_MODEL = 'sagemaker:DeleteModel',
  DELETE_MODEL_PACKAGE = 'sagemaker:DeleteModelPackage',
  DELETE_MONITORING_SCHEDULE = 'sagemaker:DeleteMonitoringSchedule',
  DELETE_NOTEBOOK_INSTANCE = 'sagemaker:DeleteNotebookInstance',
  DELETE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:DeleteNotebookInstanceLifecycleConfig',
  DELETE_TAGS = 'sagemaker:DeleteTags',
  DELETE_TRIAL = 'sagemaker:DeleteTrial',
  DELETE_TRIAL_COMPONENT = 'sagemaker:DeleteTrialComponent',
  DELETE_USER_PROFILE = 'sagemaker:DeleteUserProfile',
  DELETE_WORKFORCE = 'sagemaker:DeleteWorkforce',
  DELETE_WORKTEAM = 'sagemaker:DeleteWorkteam',
  DESCRIBE_ALGORITHM = 'sagemaker:DescribeAlgorithm',
  DESCRIBE_APP = 'sagemaker:DescribeApp',
  DESCRIBE_AUTO_ML_JOB = 'sagemaker:DescribeAutoMLJob',
  DESCRIBE_CODE_REPOSITORY = 'sagemaker:DescribeCodeRepository',
  DESCRIBE_COMPILATION_JOB = 'sagemaker:DescribeCompilationJob',
  DESCRIBE_DOMAIN = 'sagemaker:DescribeDomain',
  DESCRIBE_ENDPOINT = 'sagemaker:DescribeEndpoint',
  DESCRIBE_ENDPOINT_CONFIG = 'sagemaker:DescribeEndpointConfig',
  DESCRIBE_EXPERIMENT = 'sagemaker:DescribeExperiment',
  DESCRIBE_FLOW_DEFINITION = 'sagemaker:DescribeFlowDefinition',
  DESCRIBE_HUMAN_LOOP = 'sagemaker:DescribeHumanLoop',
  DESCRIBE_HUMAN_TASK_UI = 'sagemaker:DescribeHumanTaskUi',
  DESCRIBE_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:DescribeHyperParameterTuningJob',
  DESCRIBE_LABELING_JOB = 'sagemaker:DescribeLabelingJob',
  DESCRIBE_MODEL = 'sagemaker:DescribeModel',
  DESCRIBE_MODEL_PACKAGE = 'sagemaker:DescribeModelPackage',
  DESCRIBE_MONITORING_SCHEDULE = 'sagemaker:DescribeMonitoringSchedule',
  DESCRIBE_NOTEBOOK_INSTANCE = 'sagemaker:DescribeNotebookInstance',
  DESCRIBE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:DescribeNotebookInstanceLifecycleConfig',
  DESCRIBE_PROCESSING_JOB = 'sagemaker:DescribeProcessingJob',
  DESCRIBE_SUBSCRIBED_WORKTEAM = 'sagemaker:DescribeSubscribedWorkteam',
  DESCRIBE_TRAINING_JOB = 'sagemaker:DescribeTrainingJob',
  DESCRIBE_TRANSFORM_JOB = 'sagemaker:DescribeTransformJob',
  DESCRIBE_TRIAL = 'sagemaker:DescribeTrial',
  DESCRIBE_TRIAL_COMPONENT = 'sagemaker:DescribeTrialComponent',
  DESCRIBE_USER_PROFILE = 'sagemaker:DescribeUserProfile',
  DESCRIBE_WORKFORCE = 'sagemaker:DescribeWorkforce',
  DESCRIBE_WORKTEAM = 'sagemaker:DescribeWorkteam',
  DISASSOCIATE_TRIAL_COMPONENT = 'sagemaker:DisassociateTrialComponent',
  GET_SEARCH_SUGGESTIONS = 'sagemaker:GetSearchSuggestions',
  INVOKE_ENDPOINT = 'sagemaker:InvokeEndpoint',
  LIST_ALGORITHMS = 'sagemaker:ListAlgorithms',
  LIST_APPS = 'sagemaker:ListApps',
  LIST_AUTO_ML_JOBS = 'sagemaker:ListAutoMLJobs',
  LIST_CANDIDATES_FOR_AUTO_ML_JOB = 'sagemaker:ListCandidatesForAutoMLJob',
  LIST_CODE_REPOSITORIES = 'sagemaker:ListCodeRepositories',
  LIST_COMPILATION_JOBS = 'sagemaker:ListCompilationJobs',
  LIST_DOMAINS = 'sagemaker:ListDomains',
  LIST_ENDPOINT_CONFIGS = 'sagemaker:ListEndpointConfigs',
  LIST_ENDPOINTS = 'sagemaker:ListEndpoints',
  LIST_EXPERIMENTS = 'sagemaker:ListExperiments',
  LIST_FLOW_DEFINITIONS = 'sagemaker:ListFlowDefinitions',
  LIST_HUMAN_LOOPS = 'sagemaker:ListHumanLoops',
  LIST_HUMAN_TASK_UIS = 'sagemaker:ListHumanTaskUis',
  LIST_HYPER_PARAMETER_TUNING_JOBS = 'sagemaker:ListHyperParameterTuningJobs',
  LIST_LABELING_JOBS = 'sagemaker:ListLabelingJobs',
  LIST_LABELING_JOBS_FOR_WORKTEAM = 'sagemaker:ListLabelingJobsForWorkteam',
  LIST_MODEL_PACKAGES = 'sagemaker:ListModelPackages',
  LIST_MODELS = 'sagemaker:ListModels',
  LIST_MONITORING_EXECUTIONS = 'sagemaker:ListMonitoringExecutions',
  LIST_MONITORING_SCHEDULES = 'sagemaker:ListMonitoringSchedules',
  LIST_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIGS = 'sagemaker:ListNotebookInstanceLifecycleConfigs',
  LIST_NOTEBOOK_INSTANCES = 'sagemaker:ListNotebookInstances',
  LIST_PROCESSING_JOBS = 'sagemaker:ListProcessingJobs',
  LIST_SUBSCRIBED_WORKTEAMS = 'sagemaker:ListSubscribedWorkteams',
  LIST_TAGS = 'sagemaker:ListTags',
  LIST_TRAINING_JOBS = 'sagemaker:ListTrainingJobs',
  LIST_TRAINING_JOBS_FOR_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:ListTrainingJobsForHyperParameterTuningJob',
  LIST_TRANSFORM_JOBS = 'sagemaker:ListTransformJobs',
  LIST_TRIAL_COMPONENTS = 'sagemaker:ListTrialComponents',
  LIST_TRIALS = 'sagemaker:ListTrials',
  LIST_USER_PROFILES = 'sagemaker:ListUserProfiles',
  LIST_WORKFORCES = 'sagemaker:ListWorkforces',
  LIST_WORKTEAMS = 'sagemaker:ListWorkteams',
  RENDER_UI_TEMPLATE = 'sagemaker:RenderUiTemplate',
  SEARCH = 'sagemaker:Search',
  START_HUMAN_LOOP = 'sagemaker:StartHumanLoop',
  START_MONITORING_SCHEDULE = 'sagemaker:StartMonitoringSchedule',
  START_NOTEBOOK_INSTANCE = 'sagemaker:StartNotebookInstance',
  STOP_AUTO_ML_JOB = 'sagemaker:StopAutoMLJob',
  STOP_COMPILATION_JOB = 'sagemaker:StopCompilationJob',
  STOP_HUMAN_LOOP = 'sagemaker:StopHumanLoop',
  STOP_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:StopHyperParameterTuningJob',
  STOP_LABELING_JOB = 'sagemaker:StopLabelingJob',
  STOP_MONITORING_SCHEDULE = 'sagemaker:StopMonitoringSchedule',
  STOP_NOTEBOOK_INSTANCE = 'sagemaker:StopNotebookInstance',
  STOP_PROCESSING_JOB = 'sagemaker:StopProcessingJob',
  STOP_TRAINING_JOB = 'sagemaker:StopTrainingJob',
  STOP_TRANSFORM_JOB = 'sagemaker:StopTransformJob',
  UPDATE_CODE_REPOSITORY = 'sagemaker:UpdateCodeRepository',
  UPDATE_DOMAIN = 'sagemaker:UpdateDomain',
  UPDATE_ENDPOINT = 'sagemaker:UpdateEndpoint',
  UPDATE_ENDPOINT_WEIGHTS_AND_CAPACITIES = 'sagemaker:UpdateEndpointWeightsAndCapacities',
  UPDATE_EXPERIMENT = 'sagemaker:UpdateExperiment',
  UPDATE_MONITORING_SCHEDULE = 'sagemaker:UpdateMonitoringSchedule',
  UPDATE_NOTEBOOK_INSTANCE = 'sagemaker:UpdateNotebookInstance',
  UPDATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:UpdateNotebookInstanceLifecycleConfig',
  UPDATE_TRIAL = 'sagemaker:UpdateTrial',
  UPDATE_TRIAL_COMPONENT = 'sagemaker:UpdateTrialComponent',
  UPDATE_USER_PROFILE = 'sagemaker:UpdateUserProfile',
  UPDATE_WORKFORCE = 'sagemaker:UpdateWorkforce',
  UPDATE_WORKTEAM = 'sagemaker:UpdateWorkteam',
}
export enum LAKE_FORMATION {
  BATCH_GRANT_PERMISSIONS = 'lakeformation:BatchGrantPermissions',
  BATCH_REVOKE_PERMISSIONS = 'lakeformation:BatchRevokePermissions',
  DEREGISTER_RESOURCE = 'lakeformation:DeregisterResource',
  DESCRIBE_RESOURCE = 'lakeformation:DescribeResource',
  GET_DATA_ACCESS = 'lakeformation:GetDataAccess',
  GET_DATA_LAKE_SETTINGS = 'lakeformation:GetDataLakeSettings',
  GET_EFFECTIVE_PERMISSIONS_FOR_PATH = 'lakeformation:GetEffectivePermissionsForPath',
  GRANT_PERMISSIONS = 'lakeformation:GrantPermissions',
  LIST_PERMISSIONS = 'lakeformation:ListPermissions',
  LIST_RESOURCES = 'lakeformation:ListResources',
  PUT_DATA_LAKE_SETTINGS = 'lakeformation:PutDataLakeSettings',
  REGISTER_RESOURCE = 'lakeformation:RegisterResource',
  REVOKE_PERMISSIONS = 'lakeformation:RevokePermissions',
  UPDATE_RESOURCE = 'lakeformation:UpdateResource',
}
export enum REDSHIFT_DATA_API {
  CANCEL_STATEMENT = 'redshift-data:CancelStatement',
  DESCRIBE_STATEMENT = 'redshift-data:DescribeStatement',
  DESCRIBE_TABLE = 'redshift-data:DescribeTable',
  EXECUTE_STATEMENT = 'redshift-data:ExecuteStatement',
  GET_STATEMENT_RESULT = 'redshift-data:GetStatementResult',
  LIST_DATABASES = 'redshift-data:ListDatabases',
  LIST_SCHEMAS = 'redshift-data:ListSchemas',
  LIST_STATEMENTS = 'redshift-data:ListStatements',
  LIST_TABLES = 'redshift-data:ListTables',
}
export enum MOBILE_HUB {
  CREATE_PROJECT = 'mobilehub:CreateProject',
  CREATE_SERVICE_ROLE = 'mobilehub:CreateServiceRole',
  DELETE_PROJECT = 'mobilehub:DeleteProject',
  DELETE_PROJECT_SNAPSHOT = 'mobilehub:DeleteProjectSnapshot',
  DEPLOY_TO_STAGE = 'mobilehub:DeployToStage',
  DESCRIBE_BUNDLE = 'mobilehub:DescribeBundle',
  EXPORT_BUNDLE = 'mobilehub:ExportBundle',
  EXPORT_PROJECT = 'mobilehub:ExportProject',
  GENERATE_PROJECT_PARAMETERS = 'mobilehub:GenerateProjectParameters',
  GET_PROJECT = 'mobilehub:GetProject',
  GET_PROJECT_SNAPSHOT = 'mobilehub:GetProjectSnapshot',
  IMPORT_PROJECT = 'mobilehub:ImportProject',
  INSTALL_BUNDLE = 'mobilehub:InstallBundle',
  LIST_AVAILABLE_CONNECTORS = 'mobilehub:ListAvailableConnectors',
  LIST_AVAILABLE_FEATURES = 'mobilehub:ListAvailableFeatures',
  LIST_AVAILABLE_REGIONS = 'mobilehub:ListAvailableRegions',
  LIST_BUNDLES = 'mobilehub:ListBundles',
  LIST_PROJECT_SNAPSHOTS = 'mobilehub:ListProjectSnapshots',
  LIST_PROJECTS = 'mobilehub:ListProjects',
  SYNCHRONIZE_PROJECT = 'mobilehub:SynchronizeProject',
  UPDATE_PROJECT = 'mobilehub:UpdateProject',
  VALIDATE_PROJECT = 'mobilehub:ValidateProject',
  VERIFY_SERVICE_ROLE = 'mobilehub:VerifyServiceRole',
}
export enum GLOBAL_ACCELERATOR {
  ADVERTISE_BYOIP_CIDR = 'globalaccelerator:AdvertiseByoipCidr',
  CREATE_ACCELERATOR = 'globalaccelerator:CreateAccelerator',
  CREATE_ENDPOINT_GROUP = 'globalaccelerator:CreateEndpointGroup',
  CREATE_LISTENER = 'globalaccelerator:CreateListener',
  DELETE_ACCELERATOR = 'globalaccelerator:DeleteAccelerator',
  DELETE_ENDPOINT_GROUP = 'globalaccelerator:DeleteEndpointGroup',
  DELETE_LISTENER = 'globalaccelerator:DeleteListener',
  DEPROVISION_BYOIP_CIDR = 'globalaccelerator:DeprovisionByoipCidr',
  DESCRIBE_ACCELERATOR = 'globalaccelerator:DescribeAccelerator',
  DESCRIBE_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:DescribeAcceleratorAttributes',
  DESCRIBE_ENDPOINT_GROUP = 'globalaccelerator:DescribeEndpointGroup',
  DESCRIBE_LISTENER = 'globalaccelerator:DescribeListener',
  LIST_ACCELERATORS = 'globalaccelerator:ListAccelerators',
  LIST_BYOIP_CIDRS = 'globalaccelerator:ListByoipCidrs',
  LIST_ENDPOINT_GROUPS = 'globalaccelerator:ListEndpointGroups',
  LIST_LISTENERS = 'globalaccelerator:ListListeners',
  LIST_TAGS_FOR_RESOURCE = 'globalaccelerator:ListTagsForResource',
  PROVISION_BYOIP_CIDR = 'globalaccelerator:ProvisionByoipCidr',
  TAG_RESOURCE = 'globalaccelerator:TagResource',
  UNTAG_RESOURCE = 'globalaccelerator:UntagResource',
  UPDATE_ACCELERATOR = 'globalaccelerator:UpdateAccelerator',
  UPDATE_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:UpdateAcceleratorAttributes',
  UPDATE_ENDPOINT_GROUP = 'globalaccelerator:UpdateEndpointGroup',
  UPDATE_LISTENER = 'globalaccelerator:UpdateListener',
  WITHDRAW_BYOIP_CIDR = 'globalaccelerator:WithdrawByoipCidr',
}
export enum SERVERLESS_APPLICATION_REPOSITORY {
  CREATE_APPLICATION = 'serverlessrepo:CreateApplication',
  CREATE_APPLICATION_VERSION = 'serverlessrepo:CreateApplicationVersion',
  CREATE_CLOUD_FORMATION_CHANGE_SET = 'serverlessrepo:CreateCloudFormationChangeSet',
  CREATE_CLOUD_FORMATION_TEMPLATE = 'serverlessrepo:CreateCloudFormationTemplate',
  DELETE_APPLICATION = 'serverlessrepo:DeleteApplication',
  GET_APPLICATION = 'serverlessrepo:GetApplication',
  GET_APPLICATION_POLICY = 'serverlessrepo:GetApplicationPolicy',
  GET_CLOUD_FORMATION_TEMPLATE = 'serverlessrepo:GetCloudFormationTemplate',
  LIST_APPLICATION_DEPENDENCIES = 'serverlessrepo:ListApplicationDependencies',
  LIST_APPLICATION_VERSIONS = 'serverlessrepo:ListApplicationVersions',
  LIST_APPLICATIONS = 'serverlessrepo:ListApplications',
  PUT_APPLICATION_POLICY = 'serverlessrepo:PutApplicationPolicy',
  SEARCH_APPLICATIONS = 'serverlessrepo:SearchApplications',
  UNSHARE_APPLICATION = 'serverlessrepo:UnshareApplication',
  UPDATE_APPLICATION = 'serverlessrepo:UpdateApplication',
}
export enum FORECAST {
  CREATE_DATASET = 'forecast:CreateDataset',
  CREATE_DATASET_GROUP = 'forecast:CreateDatasetGroup',
  CREATE_DATASET_IMPORT_JOB = 'forecast:CreateDatasetImportJob',
  CREATE_FORECAST = 'forecast:CreateForecast',
  CREATE_FORECAST_EXPORT_JOB = 'forecast:CreateForecastExportJob',
  CREATE_PREDICTOR = 'forecast:CreatePredictor',
  DELETE_DATASET = 'forecast:DeleteDataset',
  DELETE_DATASET_GROUP = 'forecast:DeleteDatasetGroup',
  DELETE_DATASET_IMPORT_JOB = 'forecast:DeleteDatasetImportJob',
  DELETE_FORECAST = 'forecast:DeleteForecast',
  DELETE_FORECAST_EXPORT_JOB = 'forecast:DeleteForecastExportJob',
  DELETE_PREDICTOR = 'forecast:DeletePredictor',
  DESCRIBE_DATASET = 'forecast:DescribeDataset',
  DESCRIBE_DATASET_GROUP = 'forecast:DescribeDatasetGroup',
  DESCRIBE_DATASET_IMPORT_JOB = 'forecast:DescribeDatasetImportJob',
  DESCRIBE_FORECAST = 'forecast:DescribeForecast',
  DESCRIBE_FORECAST_EXPORT_JOB = 'forecast:DescribeForecastExportJob',
  DESCRIBE_PREDICTOR = 'forecast:DescribePredictor',
  GET_ACCURACY_METRICS = 'forecast:GetAccuracyMetrics',
  LIST_DATASET_GROUPS = 'forecast:ListDatasetGroups',
  LIST_DATASET_IMPORT_JOBS = 'forecast:ListDatasetImportJobs',
  LIST_DATASETS = 'forecast:ListDatasets',
  LIST_FORECAST_EXPORT_JOBS = 'forecast:ListForecastExportJobs',
  LIST_FORECASTS = 'forecast:ListForecasts',
  LIST_PREDICTORS = 'forecast:ListPredictors',
  LIST_TAGS_FOR_RESOURCE = 'forecast:ListTagsForResource',
  QUERY_FORECAST = 'forecast:QueryForecast',
  TAG_RESOURCE = 'forecast:TagResource',
  UNTAG_RESOURCE = 'forecast:UntagResource',
  UPDATE_DATASET_GROUP = 'forecast:UpdateDatasetGroup',
}
export enum CLOUD_DIRECTORY {
  ADD_FACET_TO_OBJECT = 'clouddirectory:AddFacetToObject',
  APPLY_SCHEMA = 'clouddirectory:ApplySchema',
  ATTACH_OBJECT = 'clouddirectory:AttachObject',
  ATTACH_POLICY = 'clouddirectory:AttachPolicy',
  ATTACH_TO_INDEX = 'clouddirectory:AttachToIndex',
  ATTACH_TYPED_LINK = 'clouddirectory:AttachTypedLink',
  BATCH_READ = 'clouddirectory:BatchRead',
  BATCH_WRITE = 'clouddirectory:BatchWrite',
  CREATE_DIRECTORY = 'clouddirectory:CreateDirectory',
  CREATE_FACET = 'clouddirectory:CreateFacet',
  CREATE_INDEX = 'clouddirectory:CreateIndex',
  CREATE_OBJECT = 'clouddirectory:CreateObject',
  CREATE_SCHEMA = 'clouddirectory:CreateSchema',
  CREATE_TYPED_LINK_FACET = 'clouddirectory:CreateTypedLinkFacet',
  DELETE_DIRECTORY = 'clouddirectory:DeleteDirectory',
  DELETE_FACET = 'clouddirectory:DeleteFacet',
  DELETE_OBJECT = 'clouddirectory:DeleteObject',
  DELETE_SCHEMA = 'clouddirectory:DeleteSchema',
  DELETE_TYPED_LINK_FACET = 'clouddirectory:DeleteTypedLinkFacet',
  DETACH_FROM_INDEX = 'clouddirectory:DetachFromIndex',
  DETACH_OBJECT = 'clouddirectory:DetachObject',
  DETACH_POLICY = 'clouddirectory:DetachPolicy',
  DETACH_TYPED_LINK = 'clouddirectory:DetachTypedLink',
  DISABLE_DIRECTORY = 'clouddirectory:DisableDirectory',
  ENABLE_DIRECTORY = 'clouddirectory:EnableDirectory',
  GET_DIRECTORY = 'clouddirectory:GetDirectory',
  GET_FACET = 'clouddirectory:GetFacet',
  GET_LINK_ATTRIBUTES = 'clouddirectory:GetLinkAttributes',
  GET_OBJECT_ATTRIBUTES = 'clouddirectory:GetObjectAttributes',
  GET_OBJECT_INFORMATION = 'clouddirectory:GetObjectInformation',
  GET_SCHEMA_AS_JSON = 'clouddirectory:GetSchemaAsJson',
  GET_TYPED_LINK_FACET_INFORMATION = 'clouddirectory:GetTypedLinkFacetInformation',
  LIST_APPLIED_SCHEMA_ARNS = 'clouddirectory:ListAppliedSchemaArns',
  LIST_ATTACHED_INDICES = 'clouddirectory:ListAttachedIndices',
  LIST_DEVELOPMENT_SCHEMA_ARNS = 'clouddirectory:ListDevelopmentSchemaArns',
  LIST_DIRECTORIES = 'clouddirectory:ListDirectories',
  LIST_FACET_ATTRIBUTES = 'clouddirectory:ListFacetAttributes',
  LIST_FACET_NAMES = 'clouddirectory:ListFacetNames',
  LIST_INCOMING_TYPED_LINKS = 'clouddirectory:ListIncomingTypedLinks',
  LIST_INDEX = 'clouddirectory:ListIndex',
  LIST_OBJECT_ATTRIBUTES = 'clouddirectory:ListObjectAttributes',
  LIST_OBJECT_CHILDREN = 'clouddirectory:ListObjectChildren',
  LIST_OBJECT_PARENT_PATHS = 'clouddirectory:ListObjectParentPaths',
  LIST_OBJECT_PARENTS = 'clouddirectory:ListObjectParents',
  LIST_OBJECT_POLICIES = 'clouddirectory:ListObjectPolicies',
  LIST_OUTGOING_TYPED_LINKS = 'clouddirectory:ListOutgoingTypedLinks',
  LIST_POLICY_ATTACHMENTS = 'clouddirectory:ListPolicyAttachments',
  LIST_PUBLISHED_SCHEMA_ARNS = 'clouddirectory:ListPublishedSchemaArns',
  LIST_TAGS_FOR_RESOURCE = 'clouddirectory:ListTagsForResource',
  LIST_TYPED_LINK_FACET_ATTRIBUTES = 'clouddirectory:ListTypedLinkFacetAttributes',
  LIST_TYPED_LINK_FACET_NAMES = 'clouddirectory:ListTypedLinkFacetNames',
  LOOKUP_POLICY = 'clouddirectory:LookupPolicy',
  PUBLISH_SCHEMA = 'clouddirectory:PublishSchema',
  PUT_SCHEMA_FROM_JSON = 'clouddirectory:PutSchemaFromJson',
  REMOVE_FACET_FROM_OBJECT = 'clouddirectory:RemoveFacetFromObject',
  TAG_RESOURCE = 'clouddirectory:TagResource',
  UNTAG_RESOURCE = 'clouddirectory:UntagResource',
  UPDATE_FACET = 'clouddirectory:UpdateFacet',
  UPDATE_LINK_ATTRIBUTES = 'clouddirectory:UpdateLinkAttributes',
  UPDATE_OBJECT_ATTRIBUTES = 'clouddirectory:UpdateObjectAttributes',
  UPDATE_SCHEMA = 'clouddirectory:UpdateSchema',
  UPDATE_TYPED_LINK_FACET = 'clouddirectory:UpdateTypedLinkFacet',
}
export enum ELEMENTAL_MEDIATAILOR {
  DELETE_PLAYBACK_CONFIGURATION = 'mediatailor:DeletePlaybackConfiguration',
  GET_PLAYBACK_CONFIGURATION = 'mediatailor:GetPlaybackConfiguration',
  LIST_PLAYBACK_CONFIGURATIONS = 'mediatailor:ListPlaybackConfigurations',
  LIST_TAGS_FOR_RESOURCE = 'mediatailor:ListTagsForResource',
  PUT_PLAYBACK_CONFIGURATION = 'mediatailor:PutPlaybackConfiguration',
  TAG_RESOURCE = 'mediatailor:TagResource',
  UNTAG_RESOURCE = 'mediatailor:UntagResource',
}
export enum ROUTE_53 {
  ASSOCIATE_VPC_WITH_HOSTED_ZONE = 'route53:AssociateVPCWithHostedZone',
  CHANGE_RESOURCE_RECORD_SETS = 'route53:ChangeResourceRecordSets',
  CHANGE_TAGS_FOR_RESOURCE = 'route53:ChangeTagsForResource',
  CREATE_HEALTH_CHECK = 'route53:CreateHealthCheck',
  CREATE_HOSTED_ZONE = 'route53:CreateHostedZone',
  CREATE_QUERY_LOGGING_CONFIG = 'route53:CreateQueryLoggingConfig',
  CREATE_REUSABLE_DELEGATION_SET = 'route53:CreateReusableDelegationSet',
  CREATE_TRAFFIC_POLICY = 'route53:CreateTrafficPolicy',
  CREATE_TRAFFIC_POLICY_INSTANCE = 'route53:CreateTrafficPolicyInstance',
  CREATE_TRAFFIC_POLICY_VERSION = 'route53:CreateTrafficPolicyVersion',
  CREATE_VPC_ASSOCIATION_AUTHORIZATION = 'route53:CreateVPCAssociationAuthorization',
  DELETE_HEALTH_CHECK = 'route53:DeleteHealthCheck',
  DELETE_HOSTED_ZONE = 'route53:DeleteHostedZone',
  DELETE_QUERY_LOGGING_CONFIG = 'route53:DeleteQueryLoggingConfig',
  DELETE_REUSABLE_DELEGATION_SET = 'route53:DeleteReusableDelegationSet',
  DELETE_TRAFFIC_POLICY = 'route53:DeleteTrafficPolicy',
  DELETE_TRAFFIC_POLICY_INSTANCE = 'route53:DeleteTrafficPolicyInstance',
  DELETE_VPC_ASSOCIATION_AUTHORIZATION = 'route53:DeleteVPCAssociationAuthorization',
  DISASSOCIATE_VPC_FROM_HOSTED_ZONE = 'route53:DisassociateVPCFromHostedZone',
  GET_ACCOUNT_LIMIT = 'route53:GetAccountLimit',
  GET_CHANGE = 'route53:GetChange',
  GET_CHECKER_IP_RANGES = 'route53:GetCheckerIpRanges',
  GET_GEO_LOCATION = 'route53:GetGeoLocation',
  GET_HEALTH_CHECK = 'route53:GetHealthCheck',
  GET_HEALTH_CHECK_COUNT = 'route53:GetHealthCheckCount',
  GET_HEALTH_CHECK_LAST_FAILURE_REASON = 'route53:GetHealthCheckLastFailureReason',
  GET_HEALTH_CHECK_STATUS = 'route53:GetHealthCheckStatus',
  GET_HOSTED_ZONE = 'route53:GetHostedZone',
  GET_HOSTED_ZONE_COUNT = 'route53:GetHostedZoneCount',
  GET_HOSTED_ZONE_LIMIT = 'route53:GetHostedZoneLimit',
  GET_QUERY_LOGGING_CONFIG = 'route53:GetQueryLoggingConfig',
  GET_REUSABLE_DELEGATION_SET = 'route53:GetReusableDelegationSet',
  GET_REUSABLE_DELEGATION_SET_LIMIT = 'route53:GetReusableDelegationSetLimit',
  GET_TRAFFIC_POLICY = 'route53:GetTrafficPolicy',
  GET_TRAFFIC_POLICY_INSTANCE = 'route53:GetTrafficPolicyInstance',
  GET_TRAFFIC_POLICY_INSTANCE_COUNT = 'route53:GetTrafficPolicyInstanceCount',
  LIST_GEO_LOCATIONS = 'route53:ListGeoLocations',
  LIST_HEALTH_CHECKS = 'route53:ListHealthChecks',
  LIST_HOSTED_ZONES = 'route53:ListHostedZones',
  LIST_HOSTED_ZONES_BY_NAME = 'route53:ListHostedZonesByName',
  LIST_QUERY_LOGGING_CONFIGS = 'route53:ListQueryLoggingConfigs',
  LIST_RESOURCE_RECORD_SETS = 'route53:ListResourceRecordSets',
  LIST_REUSABLE_DELEGATION_SETS = 'route53:ListReusableDelegationSets',
  LIST_TAGS_FOR_RESOURCE = 'route53:ListTagsForResource',
  LIST_TAGS_FOR_RESOURCES = 'route53:ListTagsForResources',
  LIST_TRAFFIC_POLICIES = 'route53:ListTrafficPolicies',
  LIST_TRAFFIC_POLICY_INSTANCES = 'route53:ListTrafficPolicyInstances',
  LIST_TRAFFIC_POLICY_INSTANCES_BY_HOSTED_ZONE = 'route53:ListTrafficPolicyInstancesByHostedZone',
  LIST_TRAFFIC_POLICY_INSTANCES_BY_POLICY = 'route53:ListTrafficPolicyInstancesByPolicy',
  LIST_TRAFFIC_POLICY_VERSIONS = 'route53:ListTrafficPolicyVersions',
  LIST_VPC_ASSOCIATION_AUTHORIZATIONS = 'route53:ListVPCAssociationAuthorizations',
  TEST_DNS_ANSWER = 'route53:TestDNSAnswer',
  UPDATE_HEALTH_CHECK = 'route53:UpdateHealthCheck',
  UPDATE_HOSTED_ZONE_COMMENT = 'route53:UpdateHostedZoneComment',
  UPDATE_TRAFFIC_POLICY_COMMENT = 'route53:UpdateTrafficPolicyComment',
  UPDATE_TRAFFIC_POLICY_INSTANCE = 'route53:UpdateTrafficPolicyInstance',
}
export enum SIMPLEDB {
  BATCH_DELETE_ATTRIBUTES = 'sdb:BatchDeleteAttributes',
  BATCH_PUT_ATTRIBUTES = 'sdb:BatchPutAttributes',
  CREATE_DOMAIN = 'sdb:CreateDomain',
  DELETE_ATTRIBUTES = 'sdb:DeleteAttributes',
  DELETE_DOMAIN = 'sdb:DeleteDomain',
  DOMAIN_METADATA = 'sdb:DomainMetadata',
  GET_ATTRIBUTES = 'sdb:GetAttributes',
  LIST_DOMAINS = 'sdb:ListDomains',
  PUT_ATTRIBUTES = 'sdb:PutAttributes',
  SELECT = 'sdb:Select',
}
export enum SECURITY_TOKEN_SERVICE {
  ASSUME_ROLE = 'sts:AssumeRole',
  ASSUME_ROLE_WITH_SAML = 'sts:AssumeRoleWithSAML',
  ASSUME_ROLE_WITH_WEB_IDENTITY = 'sts:AssumeRoleWithWebIdentity',
  DECODE_AUTHORIZATION_MESSAGE = 'sts:DecodeAuthorizationMessage',
  GET_ACCESS_KEY_INFO = 'sts:GetAccessKeyInfo',
  GET_CALLER_IDENTITY = 'sts:GetCallerIdentity',
  GET_FEDERATION_TOKEN = 'sts:GetFederationToken',
  GET_SERVICE_BEARER_TOKEN = 'sts:GetServiceBearerToken',
  GET_SESSION_TOKEN = 'sts:GetSessionToken',
  TAG_SESSION = 'sts:TagSession',
}
export enum ELEMENTAL_MEDIAPACKAGE {
  CREATE_CHANNEL = 'mediapackage:CreateChannel',
  CREATE_ORIGIN_ENDPOINT = 'mediapackage:CreateOriginEndpoint',
  DELETE_CHANNEL = 'mediapackage:DeleteChannel',
  DELETE_ORIGIN_ENDPOINT = 'mediapackage:DeleteOriginEndpoint',
  DESCRIBE_CHANNEL = 'mediapackage:DescribeChannel',
  DESCRIBE_ORIGIN_ENDPOINT = 'mediapackage:DescribeOriginEndpoint',
  LIST_CHANNELS = 'mediapackage:ListChannels',
  LIST_ORIGIN_ENDPOINTS = 'mediapackage:ListOriginEndpoints',
  LIST_TAGS_FOR_RESOURCE = 'mediapackage:ListTagsForResource',
  ROTATE_INGEST_ENDPOINT_CREDENTIALS = 'mediapackage:RotateIngestEndpointCredentials',
  TAG_RESOURCE = 'mediapackage:TagResource',
  UNTAG_RESOURCE = 'mediapackage:UntagResource',
  UPDATE_CHANNEL = 'mediapackage:UpdateChannel',
  UPDATE_ORIGIN_ENDPOINT = 'mediapackage:UpdateOriginEndpoint',
}
export enum KEYSPACES_FOR_APACHE_CASSANDRA {
  ALTER = 'cassandra:Alter',
  CREATE = 'cassandra:Create',
  DROP = 'cassandra:Drop',
  MODIFY = 'cassandra:Modify',
  RESTORE = 'cassandra:Restore',
  SELECT = 'cassandra:Select',
  TAG_RESOURCE = 'cassandra:TagResource',
  UNTAG_RESOURCE = 'cassandra:UntagResource',
}
export enum ATHENA {
  BATCH_GET_NAMED_QUERY = 'athena:BatchGetNamedQuery',
  BATCH_GET_QUERY_EXECUTION = 'athena:BatchGetQueryExecution',
  CREATE_DATA_CATALOG = 'athena:CreateDataCatalog',
  CREATE_NAMED_QUERY = 'athena:CreateNamedQuery',
  CREATE_WORK_GROUP = 'athena:CreateWorkGroup',
  DELETE_DATA_CATALOG = 'athena:DeleteDataCatalog',
  DELETE_NAMED_QUERY = 'athena:DeleteNamedQuery',
  DELETE_WORK_GROUP = 'athena:DeleteWorkGroup',
  GET_DATA_CATALOG = 'athena:GetDataCatalog',
  GET_DATABASE = 'athena:GetDatabase',
  GET_NAMED_QUERY = 'athena:GetNamedQuery',
  GET_QUERY_EXECUTION = 'athena:GetQueryExecution',
  GET_QUERY_RESULTS = 'athena:GetQueryResults',
  GET_QUERY_RESULTS_STREAM = 'athena:GetQueryResultsStream',
  GET_TABLE_METADATA = 'athena:GetTableMetadata',
  GET_WORK_GROUP = 'athena:GetWorkGroup',
  LIST_DATA_CATALOGS = 'athena:ListDataCatalogs',
  LIST_DATABASES = 'athena:ListDatabases',
  LIST_NAMED_QUERIES = 'athena:ListNamedQueries',
  LIST_QUERY_EXECUTIONS = 'athena:ListQueryExecutions',
  LIST_TABLE_METADATA = 'athena:ListTableMetadata',
  LIST_TAGS_FOR_RESOURCE = 'athena:ListTagsForResource',
  LIST_WORK_GROUPS = 'athena:ListWorkGroups',
  START_QUERY_EXECUTION = 'athena:StartQueryExecution',
  STOP_QUERY_EXECUTION = 'athena:StopQueryExecution',
  TAG_RESOURCE = 'athena:TagResource',
  UNTAG_RESOURCE = 'athena:UntagResource',
  UPDATE_DATA_CATALOG = 'athena:UpdateDataCatalog',
  UPDATE_WORK_GROUP = 'athena:UpdateWorkGroup',
}
export enum MARKETPLACE_METERING_SERVICE {
  BATCH_METER_USAGE = 'aws-marketplace:BatchMeterUsage',
  METER_USAGE = 'aws-marketplace:MeterUsage',
  REGISTER_USAGE = 'aws-marketplace:RegisterUsage',
  RESOLVE_CUSTOMER = 'aws-marketplace:ResolveCustomer',
}
export enum MARKETPLACE_PROCUREMENT_SYSTEMS_INTEGRATION {
  DESCRIBE_PROCUREMENT_SYSTEM_CONFIGURATION = 'aws-marketplace:DescribeProcurementSystemConfiguration',
  PUT_PROCUREMENT_SYSTEM_CONFIGURATION = 'aws-marketplace:PutProcurementSystemConfiguration',
}
export enum MARKETPLACE_CATALOG {
  CANCEL_CHANGE_SET = 'aws-marketplace:CancelChangeSet',
  COMPLETE_TASK = 'aws-marketplace:CompleteTask',
  DESCRIBE_CHANGE_SET = 'aws-marketplace:DescribeChangeSet',
  DESCRIBE_ENTITY = 'aws-marketplace:DescribeEntity',
  DESCRIBE_TASK = 'aws-marketplace:DescribeTask',
  LIST_CHANGE_SETS = 'aws-marketplace:ListChangeSets',
  LIST_ENTITIES = 'aws-marketplace:ListEntities',
  LIST_TASKS = 'aws-marketplace:ListTasks',
  START_CHANGE_SET = 'aws-marketplace:StartChangeSet',
  UPDATE_TASK = 'aws-marketplace:UpdateTask',
}
export enum MARKETPLACE_IMAGE_BUILDING_SERVICE {
  DESCRIBE_BUILDS = 'aws-marketplace:DescribeBuilds',
  LIST_BUILDS = 'aws-marketplace:ListBuilds',
  START_BUILD = 'aws-marketplace:StartBuild',
}
export enum MARKETPLACE_ENTITLEMENT_SERVICE {
  GET_ENTITLEMENTS = 'aws-marketplace:GetEntitlements',
}
export enum MARKETPLACE {
  ACCEPT_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:AcceptAgreementApprovalRequest',
  CANCEL_AGREEMENT_REQUEST = 'aws-marketplace:CancelAgreementRequest',
  DESCRIBE_AGREEMENT = 'aws-marketplace:DescribeAgreement',
  GET_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:GetAgreementApprovalRequest',
  GET_AGREEMENT_REQUEST = 'aws-marketplace:GetAgreementRequest',
  GET_AGREEMENT_TERMS = 'aws-marketplace:GetAgreementTerms',
  LIST_AGREEMENT_APPROVAL_REQUESTS = 'aws-marketplace:ListAgreementApprovalRequests',
  LIST_AGREEMENT_REQUESTS = 'aws-marketplace:ListAgreementRequests',
  REJECT_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:RejectAgreementApprovalRequest',
  SEARCH_AGREEMENTS = 'aws-marketplace:SearchAgreements',
  SUBSCRIBE = 'aws-marketplace:Subscribe',
  UNSUBSCRIBE = 'aws-marketplace:Unsubscribe',
  UPDATE_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:UpdateAgreementApprovalRequest',
  VIEW_SUBSCRIPTIONS = 'aws-marketplace:ViewSubscriptions',
}
export enum PRIVATE_MARKETPLACE {
  ASSOCIATE_PRODUCTS_WITH_PRIVATE_MARKETPLACE = 'aws-marketplace:AssociateProductsWithPrivateMarketplace',
  CREATE_PRIVATE_MARKETPLACE = 'aws-marketplace:CreatePrivateMarketplace',
  CREATE_PRIVATE_MARKETPLACE_PROFILE = 'aws-marketplace:CreatePrivateMarketplaceProfile',
  CREATE_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:CreatePrivateMarketplaceRequests',
  DESCRIBE_PRIVATE_MARKETPLACE_PRODUCTS = 'aws-marketplace:DescribePrivateMarketplaceProducts',
  DESCRIBE_PRIVATE_MARKETPLACE_PROFILE = 'aws-marketplace:DescribePrivateMarketplaceProfile',
  DESCRIBE_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:DescribePrivateMarketplaceRequests',
  DESCRIBE_PRIVATE_MARKETPLACE_SETTINGS = 'aws-marketplace:DescribePrivateMarketplaceSettings',
  DESCRIBE_PRIVATE_MARKETPLACE_STATUS = 'aws-marketplace:DescribePrivateMarketplaceStatus',
  DISASSOCIATE_PRODUCTS_FROM_PRIVATE_MARKETPLACE = 'aws-marketplace:DisassociateProductsFromPrivateMarketplace',
  LIST_PRIVATE_MARKETPLACE_PRODUCTS = 'aws-marketplace:ListPrivateMarketplaceProducts',
  LIST_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:ListPrivateMarketplaceRequests',
  START_PRIVATE_MARKETPLACE = 'aws-marketplace:StartPrivateMarketplace',
  STOP_PRIVATE_MARKETPLACE = 'aws-marketplace:StopPrivateMarketplace',
  UPDATE_PRIVATE_MARKETPLACE_PROFILE = 'aws-marketplace:UpdatePrivateMarketplaceProfile',
  UPDATE_PRIVATE_MARKETPLACE_SETTINGS = 'aws-marketplace:UpdatePrivateMarketplaceSettings',
}
export enum PINPOINT {
  CREATE_APP = 'mobiletargeting:CreateApp',
  CREATE_CAMPAIGN = 'mobiletargeting:CreateCampaign',
  CREATE_EMAIL_TEMPLATE = 'mobiletargeting:CreateEmailTemplate',
  CREATE_EXPORT_JOB = 'mobiletargeting:CreateExportJob',
  CREATE_IMPORT_JOB = 'mobiletargeting:CreateImportJob',
  CREATE_JOURNEY = 'mobiletargeting:CreateJourney',
  CREATE_PUSH_TEMPLATE = 'mobiletargeting:CreatePushTemplate',
  CREATE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:CreateRecommenderConfiguration',
  CREATE_SEGMENT = 'mobiletargeting:CreateSegment',
  CREATE_SMS_TEMPLATE = 'mobiletargeting:CreateSmsTemplate',
  CREATE_VOICE_TEMPLATE = 'mobiletargeting:CreateVoiceTemplate',
  DELETE_ADM_CHANNEL = 'mobiletargeting:DeleteAdmChannel',
  DELETE_APNS_CHANNEL = 'mobiletargeting:DeleteApnsChannel',
  DELETE_APNS_SANDBOX_CHANNEL = 'mobiletargeting:DeleteApnsSandboxChannel',
  DELETE_APNS_VOIP_CHANNEL = 'mobiletargeting:DeleteApnsVoipChannel',
  DELETE_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:DeleteApnsVoipSandboxChannel',
  DELETE_APP = 'mobiletargeting:DeleteApp',
  DELETE_BAIDU_CHANNEL = 'mobiletargeting:DeleteBaiduChannel',
  DELETE_CAMPAIGN = 'mobiletargeting:DeleteCampaign',
  DELETE_EMAIL_CHANNEL = 'mobiletargeting:DeleteEmailChannel',
  DELETE_EMAIL_TEMPLATE = 'mobiletargeting:DeleteEmailTemplate',
  DELETE_ENDPOINT = 'mobiletargeting:DeleteEndpoint',
  DELETE_EVENT_STREAM = 'mobiletargeting:DeleteEventStream',
  DELETE_GCM_CHANNEL = 'mobiletargeting:DeleteGcmChannel',
  DELETE_JOURNEY = 'mobiletargeting:DeleteJourney',
  DELETE_PUSH_TEMPLATE = 'mobiletargeting:DeletePushTemplate',
  DELETE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:DeleteRecommenderConfiguration',
  DELETE_SEGMENT = 'mobiletargeting:DeleteSegment',
  DELETE_SMS_CHANNEL = 'mobiletargeting:DeleteSmsChannel',
  DELETE_SMS_TEMPLATE = 'mobiletargeting:DeleteSmsTemplate',
  DELETE_USER_ENDPOINTS = 'mobiletargeting:DeleteUserEndpoints',
  DELETE_VOICE_CHANNEL = 'mobiletargeting:DeleteVoiceChannel',
  DELETE_VOICE_TEMPLATE = 'mobiletargeting:DeleteVoiceTemplate',
  GET_ADM_CHANNEL = 'mobiletargeting:GetAdmChannel',
  GET_APNS_CHANNEL = 'mobiletargeting:GetApnsChannel',
  GET_APNS_SANDBOX_CHANNEL = 'mobiletargeting:GetApnsSandboxChannel',
  GET_APNS_VOIP_CHANNEL = 'mobiletargeting:GetApnsVoipChannel',
  GET_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:GetApnsVoipSandboxChannel',
  GET_APP = 'mobiletargeting:GetApp',
  GET_APPLICATION_SETTINGS = 'mobiletargeting:GetApplicationSettings',
  GET_APPS = 'mobiletargeting:GetApps',
  GET_BAIDU_CHANNEL = 'mobiletargeting:GetBaiduChannel',
  GET_CAMPAIGN = 'mobiletargeting:GetCampaign',
  GET_CAMPAIGN_ACTIVITIES = 'mobiletargeting:GetCampaignActivities',
  GET_CAMPAIGN_VERSION = 'mobiletargeting:GetCampaignVersion',
  GET_CAMPAIGN_VERSIONS = 'mobiletargeting:GetCampaignVersions',
  GET_CAMPAIGNS = 'mobiletargeting:GetCampaigns',
  GET_CHANNELS = 'mobiletargeting:GetChannels',
  GET_EMAIL_CHANNEL = 'mobiletargeting:GetEmailChannel',
  GET_EMAIL_TEMPLATE = 'mobiletargeting:GetEmailTemplate',
  GET_ENDPOINT = 'mobiletargeting:GetEndpoint',
  GET_EVENT_STREAM = 'mobiletargeting:GetEventStream',
  GET_EXPORT_JOB = 'mobiletargeting:GetExportJob',
  GET_EXPORT_JOBS = 'mobiletargeting:GetExportJobs',
  GET_GCM_CHANNEL = 'mobiletargeting:GetGcmChannel',
  GET_IMPORT_JOB = 'mobiletargeting:GetImportJob',
  GET_IMPORT_JOBS = 'mobiletargeting:GetImportJobs',
  GET_JOURNEY = 'mobiletargeting:GetJourney',
  GET_PUSH_TEMPLATE = 'mobiletargeting:GetPushTemplate',
  GET_RECOMMENDER_CONFIGURATION = 'mobiletargeting:GetRecommenderConfiguration',
  GET_RECOMMENDER_CONFIGURATIONS = 'mobiletargeting:GetRecommenderConfigurations',
  GET_SEGMENT = 'mobiletargeting:GetSegment',
  GET_SEGMENT_EXPORT_JOBS = 'mobiletargeting:GetSegmentExportJobs',
  GET_SEGMENT_IMPORT_JOBS = 'mobiletargeting:GetSegmentImportJobs',
  GET_SEGMENT_VERSION = 'mobiletargeting:GetSegmentVersion',
  GET_SEGMENT_VERSIONS = 'mobiletargeting:GetSegmentVersions',
  GET_SEGMENTS = 'mobiletargeting:GetSegments',
  GET_SMS_CHANNEL = 'mobiletargeting:GetSmsChannel',
  GET_SMS_TEMPLATE = 'mobiletargeting:GetSmsTemplate',
  GET_USER_ENDPOINTS = 'mobiletargeting:GetUserEndpoints',
  GET_VOICE_CHANNEL = 'mobiletargeting:GetVoiceChannel',
  GET_VOICE_TEMPLATE = 'mobiletargeting:GetVoiceTemplate',
  LIST_JOURNEYS = 'mobiletargeting:ListJourneys',
  LIST_TAGS_FOR_RESOURCE = 'mobiletargeting:ListTagsForResource',
  LIST_TEMPLATE_VERSIONS = 'mobiletargeting:ListTemplateVersions',
  LIST_TEMPLATES = 'mobiletargeting:ListTemplates',
  PHONE_NUMBER_VALIDATE = 'mobiletargeting:PhoneNumberValidate',
  PUT_EVENT_STREAM = 'mobiletargeting:PutEventStream',
  PUT_EVENTS = 'mobiletargeting:PutEvents',
  REMOVE_ATTRIBUTES = 'mobiletargeting:RemoveAttributes',
  SEND_MESSAGES = 'mobiletargeting:SendMessages',
  SEND_USERS_MESSAGES = 'mobiletargeting:SendUsersMessages',
  TAG_RESOURCE = 'mobiletargeting:TagResource',
  UNTAG_RESOURCE = 'mobiletargeting:UntagResource',
  UPDATE_ADM_CHANNEL = 'mobiletargeting:UpdateAdmChannel',
  UPDATE_APNS_CHANNEL = 'mobiletargeting:UpdateApnsChannel',
  UPDATE_APNS_SANDBOX_CHANNEL = 'mobiletargeting:UpdateApnsSandboxChannel',
  UPDATE_APNS_VOIP_CHANNEL = 'mobiletargeting:UpdateApnsVoipChannel',
  UPDATE_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:UpdateApnsVoipSandboxChannel',
  UPDATE_APPLICATION_SETTINGS = 'mobiletargeting:UpdateApplicationSettings',
  UPDATE_BAIDU_CHANNEL = 'mobiletargeting:UpdateBaiduChannel',
  UPDATE_CAMPAIGN = 'mobiletargeting:UpdateCampaign',
  UPDATE_EMAIL_CHANNEL = 'mobiletargeting:UpdateEmailChannel',
  UPDATE_EMAIL_TEMPLATE = 'mobiletargeting:UpdateEmailTemplate',
  UPDATE_ENDPOINT = 'mobiletargeting:UpdateEndpoint',
  UPDATE_ENDPOINTS_BATCH = 'mobiletargeting:UpdateEndpointsBatch',
  UPDATE_GCM_CHANNEL = 'mobiletargeting:UpdateGcmChannel',
  UPDATE_JOURNEY = 'mobiletargeting:UpdateJourney',
  UPDATE_JOURNEY_STATE = 'mobiletargeting:UpdateJourneyState',
  UPDATE_PUSH_TEMPLATE = 'mobiletargeting:UpdatePushTemplate',
  UPDATE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:UpdateRecommenderConfiguration',
  UPDATE_SEGMENT = 'mobiletargeting:UpdateSegment',
  UPDATE_SMS_CHANNEL = 'mobiletargeting:UpdateSmsChannel',
  UPDATE_SMS_TEMPLATE = 'mobiletargeting:UpdateSmsTemplate',
  UPDATE_TEMPLATE_ACTIVE_VERSION = 'mobiletargeting:UpdateTemplateActiveVersion',
  UPDATE_VOICE_CHANNEL = 'mobiletargeting:UpdateVoiceChannel',
  UPDATE_VOICE_TEMPLATE = 'mobiletargeting:UpdateVoiceTemplate',
}
export enum SUMERIAN {
  LOGIN = 'sumerian:Login',
  VIEW_RELEASE = 'sumerian:ViewRelease',
}
export enum AUTO_SCALING {
  CREATE_SCALING_PLAN = 'autoscaling-plans:CreateScalingPlan',
  DELETE_SCALING_PLAN = 'autoscaling-plans:DeleteScalingPlan',
  DESCRIBE_SCALING_PLAN_RESOURCES = 'autoscaling-plans:DescribeScalingPlanResources',
  DESCRIBE_SCALING_PLANS = 'autoscaling-plans:DescribeScalingPlans',
  GET_SCALING_PLAN_RESOURCE_FORECAST_DATA = 'autoscaling-plans:GetScalingPlanResourceForecastData',
  UPDATE_SCALING_PLAN = 'autoscaling-plans:UpdateScalingPlan',
}
export enum COST_AND_USAGE_REPORT {
  DELETE_REPORT_DEFINITION = 'cur:DeleteReportDefinition',
  DESCRIBE_REPORT_DEFINITIONS = 'cur:DescribeReportDefinitions',
  MODIFY_REPORT_DEFINITION = 'cur:ModifyReportDefinition',
  PUT_REPORT_DEFINITION = 'cur:PutReportDefinition',
}
export enum IDENTITY_STORE {
  DESCRIBE_GROUP = 'identitystore:DescribeGroup',
  DESCRIBE_USER = 'identitystore:DescribeUser',
  LIST_GROUPS = 'identitystore:ListGroups',
  LIST_USERS = 'identitystore:ListUsers',
}
export enum ROUTE53_DOMAINS {
  CHECK_DOMAIN_AVAILABILITY = 'route53domains:CheckDomainAvailability',
  DELETE_TAGS_FOR_DOMAIN = 'route53domains:DeleteTagsForDomain',
  DISABLE_DOMAIN_AUTO_RENEW = 'route53domains:DisableDomainAutoRenew',
  DISABLE_DOMAIN_TRANSFER_LOCK = 'route53domains:DisableDomainTransferLock',
  ENABLE_DOMAIN_AUTO_RENEW = 'route53domains:EnableDomainAutoRenew',
  ENABLE_DOMAIN_TRANSFER_LOCK = 'route53domains:EnableDomainTransferLock',
  GET_CONTACT_REACHABILITY_STATUS = 'route53domains:GetContactReachabilityStatus',
  GET_DOMAIN_DETAIL = 'route53domains:GetDomainDetail',
  GET_DOMAIN_SUGGESTIONS = 'route53domains:GetDomainSuggestions',
  GET_OPERATION_DETAIL = 'route53domains:GetOperationDetail',
  LIST_DOMAINS = 'route53domains:ListDomains',
  LIST_OPERATIONS = 'route53domains:ListOperations',
  LIST_TAGS_FOR_DOMAIN = 'route53domains:ListTagsForDomain',
  REGISTER_DOMAIN = 'route53domains:RegisterDomain',
  RENEW_DOMAIN = 'route53domains:RenewDomain',
  RESEND_CONTACT_REACHABILITY_EMAIL = 'route53domains:ResendContactReachabilityEmail',
  RETRIEVE_DOMAIN_AUTH_CODE = 'route53domains:RetrieveDomainAuthCode',
  TRANSFER_DOMAIN = 'route53domains:TransferDomain',
  UPDATE_DOMAIN_CONTACT = 'route53domains:UpdateDomainContact',
  UPDATE_DOMAIN_CONTACT_PRIVACY = 'route53domains:UpdateDomainContactPrivacy',
  UPDATE_DOMAIN_NAMESERVERS = 'route53domains:UpdateDomainNameservers',
  UPDATE_TAGS_FOR_DOMAIN = 'route53domains:UpdateTagsForDomain',
  VIEW_BILLING = 'route53domains:ViewBilling',
}
export enum OPSWORKS {
  ASSIGN_INSTANCE = 'opsworks:AssignInstance',
  ASSIGN_VOLUME = 'opsworks:AssignVolume',
  ASSOCIATE_ELASTIC_IP = 'opsworks:AssociateElasticIp',
  ATTACH_ELASTIC_LOAD_BALANCER = 'opsworks:AttachElasticLoadBalancer',
  CLONE_STACK = 'opsworks:CloneStack',
  CREATE_APP = 'opsworks:CreateApp',
  CREATE_DEPLOYMENT = 'opsworks:CreateDeployment',
  CREATE_INSTANCE = 'opsworks:CreateInstance',
  CREATE_LAYER = 'opsworks:CreateLayer',
  CREATE_STACK = 'opsworks:CreateStack',
  CREATE_USER_PROFILE = 'opsworks:CreateUserProfile',
  DELETE_APP = 'opsworks:DeleteApp',
  DELETE_INSTANCE = 'opsworks:DeleteInstance',
  DELETE_LAYER = 'opsworks:DeleteLayer',
  DELETE_STACK = 'opsworks:DeleteStack',
  DELETE_USER_PROFILE = 'opsworks:DeleteUserProfile',
  DEREGISTER_ECS_CLUSTER = 'opsworks:DeregisterEcsCluster',
  DEREGISTER_ELASTIC_IP = 'opsworks:DeregisterElasticIp',
  DEREGISTER_INSTANCE = 'opsworks:DeregisterInstance',
  DEREGISTER_RDS_DB_INSTANCE = 'opsworks:DeregisterRdsDbInstance',
  DEREGISTER_VOLUME = 'opsworks:DeregisterVolume',
  DESCRIBE_AGENT_VERSIONS = 'opsworks:DescribeAgentVersions',
  DESCRIBE_APPS = 'opsworks:DescribeApps',
  DESCRIBE_COMMANDS = 'opsworks:DescribeCommands',
  DESCRIBE_DEPLOYMENTS = 'opsworks:DescribeDeployments',
  DESCRIBE_ECS_CLUSTERS = 'opsworks:DescribeEcsClusters',
  DESCRIBE_ELASTIC_IPS = 'opsworks:DescribeElasticIps',
  DESCRIBE_ELASTIC_LOAD_BALANCERS = 'opsworks:DescribeElasticLoadBalancers',
  DESCRIBE_INSTANCES = 'opsworks:DescribeInstances',
  DESCRIBE_LAYERS = 'opsworks:DescribeLayers',
  DESCRIBE_LOAD_BASED_AUTO_SCALING = 'opsworks:DescribeLoadBasedAutoScaling',
  DESCRIBE_MY_USER_PROFILE = 'opsworks:DescribeMyUserProfile',
  DESCRIBE_PERMISSIONS = 'opsworks:DescribePermissions',
  DESCRIBE_RAID_ARRAYS = 'opsworks:DescribeRaidArrays',
  DESCRIBE_RDS_DB_INSTANCES = 'opsworks:DescribeRdsDbInstances',
  DESCRIBE_SERVICE_ERRORS = 'opsworks:DescribeServiceErrors',
  DESCRIBE_STACK_PROVISIONING_PARAMETERS = 'opsworks:DescribeStackProvisioningParameters',
  DESCRIBE_STACK_SUMMARY = 'opsworks:DescribeStackSummary',
  DESCRIBE_STACKS = 'opsworks:DescribeStacks',
  DESCRIBE_TIME_BASED_AUTO_SCALING = 'opsworks:DescribeTimeBasedAutoScaling',
  DESCRIBE_USER_PROFILES = 'opsworks:DescribeUserProfiles',
  DESCRIBE_VOLUMES = 'opsworks:DescribeVolumes',
  DETACH_ELASTIC_LOAD_BALANCER = 'opsworks:DetachElasticLoadBalancer',
  DISASSOCIATE_ELASTIC_IP = 'opsworks:DisassociateElasticIp',
  GET_HOSTNAME_SUGGESTION = 'opsworks:GetHostnameSuggestion',
  GRANT_ACCESS = 'opsworks:GrantAccess',
  LIST_TAGS = 'opsworks:ListTags',
  REBOOT_INSTANCE = 'opsworks:RebootInstance',
  REGISTER_ECS_CLUSTER = 'opsworks:RegisterEcsCluster',
  REGISTER_ELASTIC_IP = 'opsworks:RegisterElasticIp',
  REGISTER_INSTANCE = 'opsworks:RegisterInstance',
  REGISTER_RDS_DB_INSTANCE = 'opsworks:RegisterRdsDbInstance',
  REGISTER_VOLUME = 'opsworks:RegisterVolume',
  SET_LOAD_BASED_AUTO_SCALING = 'opsworks:SetLoadBasedAutoScaling',
  SET_PERMISSION = 'opsworks:SetPermission',
  SET_TIME_BASED_AUTO_SCALING = 'opsworks:SetTimeBasedAutoScaling',
  START_INSTANCE = 'opsworks:StartInstance',
  START_STACK = 'opsworks:StartStack',
  STOP_INSTANCE = 'opsworks:StopInstance',
  STOP_STACK = 'opsworks:StopStack',
  TAG_RESOURCE = 'opsworks:TagResource',
  UNASSIGN_INSTANCE = 'opsworks:UnassignInstance',
  UNASSIGN_VOLUME = 'opsworks:UnassignVolume',
  UNTAG_RESOURCE = 'opsworks:UntagResource',
  UPDATE_APP = 'opsworks:UpdateApp',
  UPDATE_ELASTIC_IP = 'opsworks:UpdateElasticIp',
  UPDATE_INSTANCE = 'opsworks:UpdateInstance',
  UPDATE_LAYER = 'opsworks:UpdateLayer',
  UPDATE_MY_USER_PROFILE = 'opsworks:UpdateMyUserProfile',
  UPDATE_RDS_DB_INSTANCE = 'opsworks:UpdateRdsDbInstance',
  UPDATE_STACK = 'opsworks:UpdateStack',
  UPDATE_USER_PROFILE = 'opsworks:UpdateUserProfile',
  UPDATE_VOLUME = 'opsworks:UpdateVolume',
}
export enum FREERTOS {
  CREATE_SOFTWARE_CONFIGURATION = 'freertos:CreateSoftwareConfiguration',
  DELETE_SOFTWARE_CONFIGURATION = 'freertos:DeleteSoftwareConfiguration',
  DESCRIBE_HARDWARE_PLATFORM = 'freertos:DescribeHardwarePlatform',
  DESCRIBE_SOFTWARE_CONFIGURATION = 'freertos:DescribeSoftwareConfiguration',
  GET_SOFTWARE_URL = 'freertos:GetSoftwareURL',
  GET_SOFTWARE_URL_FOR_CONFIGURATION = 'freertos:GetSoftwareURLForConfiguration',
  LIST_FREE_RTOS_VERSIONS = 'freertos:ListFreeRTOSVersions',
  LIST_HARDWARE_PLATFORMS = 'freertos:ListHardwarePlatforms',
  LIST_HARDWARE_VENDORS = 'freertos:ListHardwareVendors',
  LIST_SOFTWARE_CONFIGURATIONS = 'freertos:ListSoftwareConfigurations',
  UPDATE_SOFTWARE_CONFIGURATION = 'freertos:UpdateSoftwareConfiguration',
}
export enum CODEDEPLOY {
  ADD_TAGS_TO_ON_PREMISES_INSTANCES = 'codedeploy:AddTagsToOnPremisesInstances',
  BATCH_GET_APPLICATION_REVISIONS = 'codedeploy:BatchGetApplicationRevisions',
  BATCH_GET_APPLICATIONS = 'codedeploy:BatchGetApplications',
  BATCH_GET_DEPLOYMENT_GROUPS = 'codedeploy:BatchGetDeploymentGroups',
  BATCH_GET_DEPLOYMENT_INSTANCES = 'codedeploy:BatchGetDeploymentInstances',
  BATCH_GET_DEPLOYMENT_TARGETS = 'codedeploy:BatchGetDeploymentTargets',
  BATCH_GET_DEPLOYMENTS = 'codedeploy:BatchGetDeployments',
  BATCH_GET_ON_PREMISES_INSTANCES = 'codedeploy:BatchGetOnPremisesInstances',
  CONTINUE_DEPLOYMENT = 'codedeploy:ContinueDeployment',
  CREATE_APPLICATION = 'codedeploy:CreateApplication',
  CREATE_CLOUD_FORMATION_DEPLOYMENT = 'codedeploy:CreateCloudFormationDeployment',
  CREATE_DEPLOYMENT = 'codedeploy:CreateDeployment',
  CREATE_DEPLOYMENT_CONFIG = 'codedeploy:CreateDeploymentConfig',
  CREATE_DEPLOYMENT_GROUP = 'codedeploy:CreateDeploymentGroup',
  DELETE_APPLICATION = 'codedeploy:DeleteApplication',
  DELETE_DEPLOYMENT_CONFIG = 'codedeploy:DeleteDeploymentConfig',
  DELETE_DEPLOYMENT_GROUP = 'codedeploy:DeleteDeploymentGroup',
  DELETE_GIT_HUB_ACCOUNT_TOKEN = 'codedeploy:DeleteGitHubAccountToken',
  DELETE_RESOURCES_BY_EXTERNAL_ID = 'codedeploy:DeleteResourcesByExternalId',
  DEREGISTER_ON_PREMISES_INSTANCE = 'codedeploy:DeregisterOnPremisesInstance',
  GET_APPLICATION = 'codedeploy:GetApplication',
  GET_APPLICATION_REVISION = 'codedeploy:GetApplicationRevision',
  GET_DEPLOYMENT = 'codedeploy:GetDeployment',
  GET_DEPLOYMENT_CONFIG = 'codedeploy:GetDeploymentConfig',
  GET_DEPLOYMENT_GROUP = 'codedeploy:GetDeploymentGroup',
  GET_DEPLOYMENT_INSTANCE = 'codedeploy:GetDeploymentInstance',
  GET_DEPLOYMENT_TARGET = 'codedeploy:GetDeploymentTarget',
  GET_ON_PREMISES_INSTANCE = 'codedeploy:GetOnPremisesInstance',
  LIST_APPLICATION_REVISIONS = 'codedeploy:ListApplicationRevisions',
  LIST_APPLICATIONS = 'codedeploy:ListApplications',
  LIST_DEPLOYMENT_CONFIGS = 'codedeploy:ListDeploymentConfigs',
  LIST_DEPLOYMENT_GROUPS = 'codedeploy:ListDeploymentGroups',
  LIST_DEPLOYMENT_INSTANCES = 'codedeploy:ListDeploymentInstances',
  LIST_DEPLOYMENT_TARGETS = 'codedeploy:ListDeploymentTargets',
  LIST_DEPLOYMENTS = 'codedeploy:ListDeployments',
  LIST_GIT_HUB_ACCOUNT_TOKEN_NAMES = 'codedeploy:ListGitHubAccountTokenNames',
  LIST_ON_PREMISES_INSTANCES = 'codedeploy:ListOnPremisesInstances',
  LIST_TAGS_FOR_RESOURCE = 'codedeploy:ListTagsForResource',
  PUT_LIFECYCLE_EVENT_HOOK_EXECUTION_STATUS = 'codedeploy:PutLifecycleEventHookExecutionStatus',
  REGISTER_APPLICATION_REVISION = 'codedeploy:RegisterApplicationRevision',
  REGISTER_ON_PREMISES_INSTANCE = 'codedeploy:RegisterOnPremisesInstance',
  REMOVE_TAGS_FROM_ON_PREMISES_INSTANCES = 'codedeploy:RemoveTagsFromOnPremisesInstances',
  SKIP_WAIT_TIME_FOR_INSTANCE_TERMINATION = 'codedeploy:SkipWaitTimeForInstanceTermination',
  STOP_DEPLOYMENT = 'codedeploy:StopDeployment',
  TAG_RESOURCE = 'codedeploy:TagResource',
  UNTAG_RESOURCE = 'codedeploy:UntagResource',
  UPDATE_APPLICATION = 'codedeploy:UpdateApplication',
  UPDATE_DEPLOYMENT_GROUP = 'codedeploy:UpdateDeploymentGroup',
}
export enum IDENTITY_AND_ACCESS_MANAGEMENT {
  ADD_CLIENT_ID_TO_OPEN_ID_CONNECT_PROVIDER = 'iam:AddClientIDToOpenIDConnectProvider',
  ADD_ROLE_TO_INSTANCE_PROFILE = 'iam:AddRoleToInstanceProfile',
  ADD_USER_TO_GROUP = 'iam:AddUserToGroup',
  ATTACH_GROUP_POLICY = 'iam:AttachGroupPolicy',
  ATTACH_ROLE_POLICY = 'iam:AttachRolePolicy',
  ATTACH_USER_POLICY = 'iam:AttachUserPolicy',
  CHANGE_PASSWORD = 'iam:ChangePassword',
  CREATE_ACCESS_KEY = 'iam:CreateAccessKey',
  CREATE_ACCOUNT_ALIAS = 'iam:CreateAccountAlias',
  CREATE_GROUP = 'iam:CreateGroup',
  CREATE_INSTANCE_PROFILE = 'iam:CreateInstanceProfile',
  CREATE_LOGIN_PROFILE = 'iam:CreateLoginProfile',
  CREATE_OPEN_ID_CONNECT_PROVIDER = 'iam:CreateOpenIDConnectProvider',
  CREATE_POLICY = 'iam:CreatePolicy',
  CREATE_POLICY_VERSION = 'iam:CreatePolicyVersion',
  CREATE_ROLE = 'iam:CreateRole',
  CREATE_SAML_PROVIDER = 'iam:CreateSAMLProvider',
  CREATE_SERVICE_LINKED_ROLE = 'iam:CreateServiceLinkedRole',
  CREATE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:CreateServiceSpecificCredential',
  CREATE_USER = 'iam:CreateUser',
  CREATE_VIRTUAL_MFA_DEVICE = 'iam:CreateVirtualMFADevice',
  DEACTIVATE_MFA_DEVICE = 'iam:DeactivateMFADevice',
  DELETE_ACCESS_KEY = 'iam:DeleteAccessKey',
  DELETE_ACCOUNT_ALIAS = 'iam:DeleteAccountAlias',
  DELETE_ACCOUNT_PASSWORD_POLICY = 'iam:DeleteAccountPasswordPolicy',
  DELETE_GROUP = 'iam:DeleteGroup',
  DELETE_GROUP_POLICY = 'iam:DeleteGroupPolicy',
  DELETE_INSTANCE_PROFILE = 'iam:DeleteInstanceProfile',
  DELETE_LOGIN_PROFILE = 'iam:DeleteLoginProfile',
  DELETE_OPEN_ID_CONNECT_PROVIDER = 'iam:DeleteOpenIDConnectProvider',
  DELETE_POLICY = 'iam:DeletePolicy',
  DELETE_POLICY_VERSION = 'iam:DeletePolicyVersion',
  DELETE_ROLE = 'iam:DeleteRole',
  DELETE_ROLE_PERMISSIONS_BOUNDARY = 'iam:DeleteRolePermissionsBoundary',
  DELETE_ROLE_POLICY = 'iam:DeleteRolePolicy',
  DELETE_SAML_PROVIDER = 'iam:DeleteSAMLProvider',
  DELETE_SSH_PUBLIC_KEY = 'iam:DeleteSSHPublicKey',
  DELETE_SERVER_CERTIFICATE = 'iam:DeleteServerCertificate',
  DELETE_SERVICE_LINKED_ROLE = 'iam:DeleteServiceLinkedRole',
  DELETE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:DeleteServiceSpecificCredential',
  DELETE_SIGNING_CERTIFICATE = 'iam:DeleteSigningCertificate',
  DELETE_USER = 'iam:DeleteUser',
  DELETE_USER_PERMISSIONS_BOUNDARY = 'iam:DeleteUserPermissionsBoundary',
  DELETE_USER_POLICY = 'iam:DeleteUserPolicy',
  DELETE_VIRTUAL_MFA_DEVICE = 'iam:DeleteVirtualMFADevice',
  DETACH_GROUP_POLICY = 'iam:DetachGroupPolicy',
  DETACH_ROLE_POLICY = 'iam:DetachRolePolicy',
  DETACH_USER_POLICY = 'iam:DetachUserPolicy',
  ENABLE_MFA_DEVICE = 'iam:EnableMFADevice',
  GENERATE_CREDENTIAL_REPORT = 'iam:GenerateCredentialReport',
  GENERATE_ORGANIZATIONS_ACCESS_REPORT = 'iam:GenerateOrganizationsAccessReport',
  GENERATE_SERVICE_LAST_ACCESSED_DETAILS = 'iam:GenerateServiceLastAccessedDetails',
  GET_ACCESS_KEY_LAST_USED = 'iam:GetAccessKeyLastUsed',
  GET_ACCOUNT_AUTHORIZATION_DETAILS = 'iam:GetAccountAuthorizationDetails',
  GET_ACCOUNT_PASSWORD_POLICY = 'iam:GetAccountPasswordPolicy',
  GET_ACCOUNT_SUMMARY = 'iam:GetAccountSummary',
  GET_CONTEXT_KEYS_FOR_CUSTOM_POLICY = 'iam:GetContextKeysForCustomPolicy',
  GET_CONTEXT_KEYS_FOR_PRINCIPAL_POLICY = 'iam:GetContextKeysForPrincipalPolicy',
  GET_CREDENTIAL_REPORT = 'iam:GetCredentialReport',
  GET_GROUP = 'iam:GetGroup',
  GET_GROUP_POLICY = 'iam:GetGroupPolicy',
  GET_INSTANCE_PROFILE = 'iam:GetInstanceProfile',
  GET_LOGIN_PROFILE = 'iam:GetLoginProfile',
  GET_OPEN_ID_CONNECT_PROVIDER = 'iam:GetOpenIDConnectProvider',
  GET_ORGANIZATIONS_ACCESS_REPORT = 'iam:GetOrganizationsAccessReport',
  GET_POLICY = 'iam:GetPolicy',
  GET_POLICY_VERSION = 'iam:GetPolicyVersion',
  GET_ROLE = 'iam:GetRole',
  GET_ROLE_POLICY = 'iam:GetRolePolicy',
  GET_SAML_PROVIDER = 'iam:GetSAMLProvider',
  GET_SSH_PUBLIC_KEY = 'iam:GetSSHPublicKey',
  GET_SERVER_CERTIFICATE = 'iam:GetServerCertificate',
  GET_SERVICE_LAST_ACCESSED_DETAILS = 'iam:GetServiceLastAccessedDetails',
  GET_SERVICE_LAST_ACCESSED_DETAILS_WITH_ENTITIES = 'iam:GetServiceLastAccessedDetailsWithEntities',
  GET_SERVICE_LINKED_ROLE_DELETION_STATUS = 'iam:GetServiceLinkedRoleDeletionStatus',
  GET_USER = 'iam:GetUser',
  GET_USER_POLICY = 'iam:GetUserPolicy',
  LIST_ACCESS_KEYS = 'iam:ListAccessKeys',
  LIST_ACCOUNT_ALIASES = 'iam:ListAccountAliases',
  LIST_ATTACHED_GROUP_POLICIES = 'iam:ListAttachedGroupPolicies',
  LIST_ATTACHED_ROLE_POLICIES = 'iam:ListAttachedRolePolicies',
  LIST_ATTACHED_USER_POLICIES = 'iam:ListAttachedUserPolicies',
  LIST_ENTITIES_FOR_POLICY = 'iam:ListEntitiesForPolicy',
  LIST_GROUP_POLICIES = 'iam:ListGroupPolicies',
  LIST_GROUPS = 'iam:ListGroups',
  LIST_GROUPS_FOR_USER = 'iam:ListGroupsForUser',
  LIST_INSTANCE_PROFILES = 'iam:ListInstanceProfiles',
  LIST_INSTANCE_PROFILES_FOR_ROLE = 'iam:ListInstanceProfilesForRole',
  LIST_MFA_DEVICES = 'iam:ListMFADevices',
  LIST_OPEN_ID_CONNECT_PROVIDERS = 'iam:ListOpenIDConnectProviders',
  LIST_POLICIES = 'iam:ListPolicies',
  LIST_POLICIES_GRANTING_SERVICE_ACCESS = 'iam:ListPoliciesGrantingServiceAccess',
  LIST_POLICY_VERSIONS = 'iam:ListPolicyVersions',
  LIST_ROLE_POLICIES = 'iam:ListRolePolicies',
  LIST_ROLE_TAGS = 'iam:ListRoleTags',
  LIST_ROLES = 'iam:ListRoles',
  LIST_SAML_PROVIDERS = 'iam:ListSAMLProviders',
  LIST_SSH_PUBLIC_KEYS = 'iam:ListSSHPublicKeys',
  LIST_SERVER_CERTIFICATES = 'iam:ListServerCertificates',
  LIST_SERVICE_SPECIFIC_CREDENTIALS = 'iam:ListServiceSpecificCredentials',
  LIST_SIGNING_CERTIFICATES = 'iam:ListSigningCertificates',
  LIST_USER_POLICIES = 'iam:ListUserPolicies',
  LIST_USER_TAGS = 'iam:ListUserTags',
  LIST_USERS = 'iam:ListUsers',
  LIST_VIRTUAL_MFA_DEVICES = 'iam:ListVirtualMFADevices',
  PASS_ROLE = 'iam:PassRole',
  PUT_GROUP_POLICY = 'iam:PutGroupPolicy',
  PUT_ROLE_PERMISSIONS_BOUNDARY = 'iam:PutRolePermissionsBoundary',
  PUT_ROLE_POLICY = 'iam:PutRolePolicy',
  PUT_USER_PERMISSIONS_BOUNDARY = 'iam:PutUserPermissionsBoundary',
  PUT_USER_POLICY = 'iam:PutUserPolicy',
  REMOVE_CLIENT_ID_FROM_OPEN_ID_CONNECT_PROVIDER = 'iam:RemoveClientIDFromOpenIDConnectProvider',
  REMOVE_ROLE_FROM_INSTANCE_PROFILE = 'iam:RemoveRoleFromInstanceProfile',
  REMOVE_USER_FROM_GROUP = 'iam:RemoveUserFromGroup',
  RESET_SERVICE_SPECIFIC_CREDENTIAL = 'iam:ResetServiceSpecificCredential',
  RESYNC_MFA_DEVICE = 'iam:ResyncMFADevice',
  SET_DEFAULT_POLICY_VERSION = 'iam:SetDefaultPolicyVersion',
  SET_SECURITY_TOKEN_SERVICE_PREFERENCES = 'iam:SetSecurityTokenServicePreferences',
  SIMULATE_CUSTOM_POLICY = 'iam:SimulateCustomPolicy',
  SIMULATE_PRINCIPAL_POLICY = 'iam:SimulatePrincipalPolicy',
  TAG_ROLE = 'iam:TagRole',
  TAG_USER = 'iam:TagUser',
  UNTAG_ROLE = 'iam:UntagRole',
  UNTAG_USER = 'iam:UntagUser',
  UPDATE_ACCESS_KEY = 'iam:UpdateAccessKey',
  UPDATE_ACCOUNT_PASSWORD_POLICY = 'iam:UpdateAccountPasswordPolicy',
  UPDATE_ASSUME_ROLE_POLICY = 'iam:UpdateAssumeRolePolicy',
  UPDATE_GROUP = 'iam:UpdateGroup',
  UPDATE_LOGIN_PROFILE = 'iam:UpdateLoginProfile',
  UPDATE_OPEN_ID_CONNECT_PROVIDER_THUMBPRINT = 'iam:UpdateOpenIDConnectProviderThumbprint',
  UPDATE_ROLE = 'iam:UpdateRole',
  UPDATE_ROLE_DESCRIPTION = 'iam:UpdateRoleDescription',
  UPDATE_SAML_PROVIDER = 'iam:UpdateSAMLProvider',
  UPDATE_SSH_PUBLIC_KEY = 'iam:UpdateSSHPublicKey',
  UPDATE_SERVER_CERTIFICATE = 'iam:UpdateServerCertificate',
  UPDATE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:UpdateServiceSpecificCredential',
  UPDATE_SIGNING_CERTIFICATE = 'iam:UpdateSigningCertificate',
  UPDATE_USER = 'iam:UpdateUser',
  UPLOAD_SSH_PUBLIC_KEY = 'iam:UploadSSHPublicKey',
  UPLOAD_SERVER_CERTIFICATE = 'iam:UploadServerCertificate',
  UPLOAD_SIGNING_CERTIFICATE = 'iam:UploadSigningCertificate',
}
export enum ROUTE_53_RESOLVER {
  ASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'route53resolver:AssociateResolverEndpointIpAddress',
  ASSOCIATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:AssociateResolverQueryLogConfig',
  ASSOCIATE_RESOLVER_RULE = 'route53resolver:AssociateResolverRule',
  CREATE_RESOLVER_ENDPOINT = 'route53resolver:CreateResolverEndpoint',
  CREATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:CreateResolverQueryLogConfig',
  CREATE_RESOLVER_RULE = 'route53resolver:CreateResolverRule',
  DELETE_RESOLVER_ENDPOINT = 'route53resolver:DeleteResolverEndpoint',
  DELETE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:DeleteResolverQueryLogConfig',
  DELETE_RESOLVER_RULE = 'route53resolver:DeleteResolverRule',
  DISASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'route53resolver:DisassociateResolverEndpointIpAddress',
  DISASSOCIATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:DisassociateResolverQueryLogConfig',
  DISASSOCIATE_RESOLVER_RULE = 'route53resolver:DisassociateResolverRule',
  GET_RESOLVER_ENDPOINT = 'route53resolver:GetResolverEndpoint',
  GET_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:GetResolverQueryLogConfig',
  GET_RESOLVER_QUERY_LOG_CONFIG_ASSOCIATION = 'route53resolver:GetResolverQueryLogConfigAssociation',
  GET_RESOLVER_QUERY_LOG_CONFIG_POLICY = 'route53resolver:GetResolverQueryLogConfigPolicy',
  GET_RESOLVER_RULE = 'route53resolver:GetResolverRule',
  GET_RESOLVER_RULE_ASSOCIATION = 'route53resolver:GetResolverRuleAssociation',
  GET_RESOLVER_RULE_POLICY = 'route53resolver:GetResolverRulePolicy',
  LIST_RESOLVER_ENDPOINT_IP_ADDRESSES = 'route53resolver:ListResolverEndpointIpAddresses',
  LIST_RESOLVER_ENDPOINTS = 'route53resolver:ListResolverEndpoints',
  LIST_RESOLVER_QUERY_LOG_CONFIG_ASSOCIATIONS = 'route53resolver:ListResolverQueryLogConfigAssociations',
  LIST_RESOLVER_QUERY_LOG_CONFIGS = 'route53resolver:ListResolverQueryLogConfigs',
  LIST_RESOLVER_RULE_ASSOCIATIONS = 'route53resolver:ListResolverRuleAssociations',
  LIST_RESOLVER_RULES = 'route53resolver:ListResolverRules',
  LIST_TAGS_FOR_RESOURCE = 'route53resolver:ListTagsForResource',
  PUT_RESOLVER_QUERY_LOG_CONFIG_POLICY = 'route53resolver:PutResolverQueryLogConfigPolicy',
  PUT_RESOLVER_RULE_POLICY = 'route53resolver:PutResolverRulePolicy',
  TAG_RESOURCE = 'route53resolver:TagResource',
  UNTAG_RESOURCE = 'route53resolver:UntagResource',
  UPDATE_RESOLVER_ENDPOINT = 'route53resolver:UpdateResolverEndpoint',
  UPDATE_RESOLVER_RULE = 'route53resolver:UpdateResolverRule',
}
export enum WORKMAIL {
  ADD_MEMBERS_TO_GROUP = 'workmail:AddMembersToGroup',
  ASSOCIATE_DELEGATE_TO_RESOURCE = 'workmail:AssociateDelegateToResource',
  ASSOCIATE_MEMBER_TO_GROUP = 'workmail:AssociateMemberToGroup',
  CREATE_ALIAS = 'workmail:CreateAlias',
  CREATE_GROUP = 'workmail:CreateGroup',
  CREATE_INBOUND_MAIL_FLOW_RULE = 'workmail:CreateInboundMailFlowRule',
  CREATE_MAIL_DOMAIN = 'workmail:CreateMailDomain',
  CREATE_MAIL_USER = 'workmail:CreateMailUser',
  CREATE_ORGANIZATION = 'workmail:CreateOrganization',
  CREATE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:CreateOutboundMailFlowRule',
  CREATE_RESOURCE = 'workmail:CreateResource',
  CREATE_SMTP_GATEWAY = 'workmail:CreateSmtpGateway',
  CREATE_USER = 'workmail:CreateUser',
  DELETE_ACCESS_CONTROL_RULE = 'workmail:DeleteAccessControlRule',
  DELETE_ALIAS = 'workmail:DeleteAlias',
  DELETE_GROUP = 'workmail:DeleteGroup',
  DELETE_INBOUND_MAIL_FLOW_RULE = 'workmail:DeleteInboundMailFlowRule',
  DELETE_MAIL_DOMAIN = 'workmail:DeleteMailDomain',
  DELETE_MAILBOX_PERMISSIONS = 'workmail:DeleteMailboxPermissions',
  DELETE_MOBILE_DEVICE = 'workmail:DeleteMobileDevice',
  DELETE_ORGANIZATION = 'workmail:DeleteOrganization',
  DELETE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:DeleteOutboundMailFlowRule',
  DELETE_RESOURCE = 'workmail:DeleteResource',
  DELETE_RETENTION_POLICY = 'workmail:DeleteRetentionPolicy',
  DELETE_SMTP_GATEWAY = 'workmail:DeleteSmtpGateway',
  DELETE_USER = 'workmail:DeleteUser',
  DEREGISTER_FROM_WORK_MAIL = 'workmail:DeregisterFromWorkMail',
  DESCRIBE_DIRECTORIES = 'workmail:DescribeDirectories',
  DESCRIBE_GROUP = 'workmail:DescribeGroup',
  DESCRIBE_INBOUND_MAIL_FLOW_RULE = 'workmail:DescribeInboundMailFlowRule',
  DESCRIBE_KMS_KEYS = 'workmail:DescribeKmsKeys',
  DESCRIBE_MAIL_DOMAINS = 'workmail:DescribeMailDomains',
  DESCRIBE_MAIL_GROUPS = 'workmail:DescribeMailGroups',
  DESCRIBE_MAIL_USERS = 'workmail:DescribeMailUsers',
  DESCRIBE_ORGANIZATION = 'workmail:DescribeOrganization',
  DESCRIBE_ORGANIZATIONS = 'workmail:DescribeOrganizations',
  DESCRIBE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:DescribeOutboundMailFlowRule',
  DESCRIBE_RESOURCE = 'workmail:DescribeResource',
  DESCRIBE_SMTP_GATEWAY = 'workmail:DescribeSmtpGateway',
  DESCRIBE_USER = 'workmail:DescribeUser',
  DISABLE_MAIL_GROUPS = 'workmail:DisableMailGroups',
  DISABLE_MAIL_USERS = 'workmail:DisableMailUsers',
  DISASSOCIATE_DELEGATE_FROM_RESOURCE = 'workmail:DisassociateDelegateFromResource',
  DISASSOCIATE_MEMBER_FROM_GROUP = 'workmail:DisassociateMemberFromGroup',
  ENABLE_MAIL_DOMAIN = 'workmail:EnableMailDomain',
  ENABLE_MAIL_GROUPS = 'workmail:EnableMailGroups',
  ENABLE_MAIL_USERS = 'workmail:EnableMailUsers',
  GET_ACCESS_CONTROL_EFFECT = 'workmail:GetAccessControlEffect',
  GET_DEFAULT_RETENTION_POLICY = 'workmail:GetDefaultRetentionPolicy',
  GET_JOURNALING_RULES = 'workmail:GetJournalingRules',
  GET_MAIL_DOMAIN_DETAILS = 'workmail:GetMailDomainDetails',
  GET_MAIL_GROUP_DETAILS = 'workmail:GetMailGroupDetails',
  GET_MAIL_USER_DETAILS = 'workmail:GetMailUserDetails',
  GET_MAILBOX_DETAILS = 'workmail:GetMailboxDetails',
  GET_MOBILE_DEVICE_DETAILS = 'workmail:GetMobileDeviceDetails',
  GET_MOBILE_DEVICES_FOR_USER = 'workmail:GetMobileDevicesForUser',
  GET_MOBILE_POLICY_DETAILS = 'workmail:GetMobilePolicyDetails',
  LIST_ACCESS_CONTROL_RULES = 'workmail:ListAccessControlRules',
  LIST_ALIASES = 'workmail:ListAliases',
  LIST_GROUP_MEMBERS = 'workmail:ListGroupMembers',
  LIST_GROUPS = 'workmail:ListGroups',
  LIST_INBOUND_MAIL_FLOW_RULES = 'workmail:ListInboundMailFlowRules',
  LIST_MAILBOX_PERMISSIONS = 'workmail:ListMailboxPermissions',
  LIST_MEMBERS_IN_MAIL_GROUP = 'workmail:ListMembersInMailGroup',
  LIST_ORGANIZATIONS = 'workmail:ListOrganizations',
  LIST_OUTBOUND_MAIL_FLOW_RULES = 'workmail:ListOutboundMailFlowRules',
  LIST_RESOURCE_DELEGATES = 'workmail:ListResourceDelegates',
  LIST_RESOURCES = 'workmail:ListResources',
  LIST_SMTP_GATEWAYS = 'workmail:ListSmtpGateways',
  LIST_TAGS_FOR_RESOURCE = 'workmail:ListTagsForResource',
  LIST_USERS = 'workmail:ListUsers',
  PUT_ACCESS_CONTROL_RULE = 'workmail:PutAccessControlRule',
  PUT_MAILBOX_PERMISSIONS = 'workmail:PutMailboxPermissions',
  PUT_RETENTION_POLICY = 'workmail:PutRetentionPolicy',
  REGISTER_TO_WORK_MAIL = 'workmail:RegisterToWorkMail',
  REMOVE_MEMBERS_FROM_GROUP = 'workmail:RemoveMembersFromGroup',
  RESET_PASSWORD = 'workmail:ResetPassword',
  RESET_USER_PASSWORD = 'workmail:ResetUserPassword',
  SEARCH_MEMBERS = 'workmail:SearchMembers',
  SET_ADMIN = 'workmail:SetAdmin',
  SET_DEFAULT_MAIL_DOMAIN = 'workmail:SetDefaultMailDomain',
  SET_JOURNALING_RULES = 'workmail:SetJournalingRules',
  SET_MAIL_GROUP_DETAILS = 'workmail:SetMailGroupDetails',
  SET_MAIL_USER_DETAILS = 'workmail:SetMailUserDetails',
  SET_MOBILE_POLICY_DETAILS = 'workmail:SetMobilePolicyDetails',
  TAG_RESOURCE = 'workmail:TagResource',
  TEST_INBOUND_MAIL_FLOW_RULES = 'workmail:TestInboundMailFlowRules',
  TEST_OUTBOUND_MAIL_FLOW_RULES = 'workmail:TestOutboundMailFlowRules',
  UNTAG_RESOURCE = 'workmail:UntagResource',
  UPDATE_INBOUND_MAIL_FLOW_RULE = 'workmail:UpdateInboundMailFlowRule',
  UPDATE_MAILBOX_QUOTA = 'workmail:UpdateMailboxQuota',
  UPDATE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:UpdateOutboundMailFlowRule',
  UPDATE_PRIMARY_EMAIL_ADDRESS = 'workmail:UpdatePrimaryEmailAddress',
  UPDATE_RESOURCE = 'workmail:UpdateResource',
  UPDATE_SMTP_GATEWAY = 'workmail:UpdateSmtpGateway',
  WIPE_MOBILE_DEVICE = 'workmail:WipeMobileDevice',
}
export enum CODEBUILD {
  BATCH_DELETE_BUILDS = 'codebuild:BatchDeleteBuilds',
  BATCH_GET_BUILD_BATCHES = 'codebuild:BatchGetBuildBatches',
  BATCH_GET_BUILDS = 'codebuild:BatchGetBuilds',
  BATCH_GET_PROJECTS = 'codebuild:BatchGetProjects',
  BATCH_GET_REPORT_GROUPS = 'codebuild:BatchGetReportGroups',
  BATCH_GET_REPORTS = 'codebuild:BatchGetReports',
  BATCH_PUT_CODE_COVERAGES = 'codebuild:BatchPutCodeCoverages',
  BATCH_PUT_TEST_CASES = 'codebuild:BatchPutTestCases',
  CREATE_PROJECT = 'codebuild:CreateProject',
  CREATE_REPORT = 'codebuild:CreateReport',
  CREATE_REPORT_GROUP = 'codebuild:CreateReportGroup',
  CREATE_WEBHOOK = 'codebuild:CreateWebhook',
  DELETE_BUILD_BATCH = 'codebuild:DeleteBuildBatch',
  DELETE_O_AUTH_TOKEN = 'codebuild:DeleteOAuthToken',
  DELETE_PROJECT = 'codebuild:DeleteProject',
  DELETE_REPORT = 'codebuild:DeleteReport',
  DELETE_REPORT_GROUP = 'codebuild:DeleteReportGroup',
  DELETE_RESOURCE_POLICY = 'codebuild:DeleteResourcePolicy',
  DELETE_SOURCE_CREDENTIALS = 'codebuild:DeleteSourceCredentials',
  DELETE_WEBHOOK = 'codebuild:DeleteWebhook',
  DESCRIBE_CODE_COVERAGES = 'codebuild:DescribeCodeCoverages',
  DESCRIBE_TEST_CASES = 'codebuild:DescribeTestCases',
  GET_RESOURCE_POLICY = 'codebuild:GetResourcePolicy',
  IMPORT_SOURCE_CREDENTIALS = 'codebuild:ImportSourceCredentials',
  INVALIDATE_PROJECT_CACHE = 'codebuild:InvalidateProjectCache',
  LIST_BUILD_BATCHES = 'codebuild:ListBuildBatches',
  LIST_BUILD_BATCHES_FOR_PROJECT = 'codebuild:ListBuildBatchesForProject',
  LIST_BUILDS = 'codebuild:ListBuilds',
  LIST_BUILDS_FOR_PROJECT = 'codebuild:ListBuildsForProject',
  LIST_CONNECTED_O_AUTH_ACCOUNTS = 'codebuild:ListConnectedOAuthAccounts',
  LIST_CURATED_ENVIRONMENT_IMAGES = 'codebuild:ListCuratedEnvironmentImages',
  LIST_PROJECTS = 'codebuild:ListProjects',
  LIST_REPORT_GROUPS = 'codebuild:ListReportGroups',
  LIST_REPORTS = 'codebuild:ListReports',
  LIST_REPORTS_FOR_REPORT_GROUP = 'codebuild:ListReportsForReportGroup',
  LIST_REPOSITORIES = 'codebuild:ListRepositories',
  LIST_SHARED_PROJECTS = 'codebuild:ListSharedProjects',
  LIST_SHARED_REPORT_GROUPS = 'codebuild:ListSharedReportGroups',
  LIST_SOURCE_CREDENTIALS = 'codebuild:ListSourceCredentials',
  PERSIST_O_AUTH_TOKEN = 'codebuild:PersistOAuthToken',
  PUT_RESOURCE_POLICY = 'codebuild:PutResourcePolicy',
  RETRY_BUILD = 'codebuild:RetryBuild',
  RETRY_BUILD_BATCH = 'codebuild:RetryBuildBatch',
  START_BUILD = 'codebuild:StartBuild',
  START_BUILD_BATCH = 'codebuild:StartBuildBatch',
  STOP_BUILD = 'codebuild:StopBuild',
  STOP_BUILD_BATCH = 'codebuild:StopBuildBatch',
  UPDATE_PROJECT = 'codebuild:UpdateProject',
  UPDATE_REPORT = 'codebuild:UpdateReport',
  UPDATE_REPORT_GROUP = 'codebuild:UpdateReportGroup',
  UPDATE_WEBHOOK = 'codebuild:UpdateWebhook',
}
export enum IOT_ANALYTICS {
  BATCH_PUT_MESSAGE = 'iotanalytics:BatchPutMessage',
  CANCEL_PIPELINE_REPROCESSING = 'iotanalytics:CancelPipelineReprocessing',
  CREATE_CHANNEL = 'iotanalytics:CreateChannel',
  CREATE_DATASET = 'iotanalytics:CreateDataset',
  CREATE_DATASET_CONTENT = 'iotanalytics:CreateDatasetContent',
  CREATE_DATASTORE = 'iotanalytics:CreateDatastore',
  CREATE_PIPELINE = 'iotanalytics:CreatePipeline',
  DELETE_CHANNEL = 'iotanalytics:DeleteChannel',
  DELETE_DATASET = 'iotanalytics:DeleteDataset',
  DELETE_DATASET_CONTENT = 'iotanalytics:DeleteDatasetContent',
  DELETE_DATASTORE = 'iotanalytics:DeleteDatastore',
  DELETE_PIPELINE = 'iotanalytics:DeletePipeline',
  DESCRIBE_CHANNEL = 'iotanalytics:DescribeChannel',
  DESCRIBE_DATASET = 'iotanalytics:DescribeDataset',
  DESCRIBE_DATASTORE = 'iotanalytics:DescribeDatastore',
  DESCRIBE_LOGGING_OPTIONS = 'iotanalytics:DescribeLoggingOptions',
  DESCRIBE_PIPELINE = 'iotanalytics:DescribePipeline',
  GET_DATASET_CONTENT = 'iotanalytics:GetDatasetContent',
  LIST_CHANNELS = 'iotanalytics:ListChannels',
  LIST_DATASETS = 'iotanalytics:ListDatasets',
  LIST_DATASTORES = 'iotanalytics:ListDatastores',
  LIST_PIPELINES = 'iotanalytics:ListPipelines',
  LIST_TAGS_FOR_RESOURCE = 'iotanalytics:ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'iotanalytics:PutLoggingOptions',
  RUN_PIPELINE_ACTIVITY = 'iotanalytics:RunPipelineActivity',
  SAMPLE_CHANNEL_DATA = 'iotanalytics:SampleChannelData',
  START_PIPELINE_REPROCESSING = 'iotanalytics:StartPipelineReprocessing',
  TAG_RESOURCE = 'iotanalytics:TagResource',
  UNTAG_RESOURCE = 'iotanalytics:UntagResource',
  UPDATE_CHANNEL = 'iotanalytics:UpdateChannel',
  UPDATE_DATASET = 'iotanalytics:UpdateDataset',
  UPDATE_DATASTORE = 'iotanalytics:UpdateDatastore',
  UPDATE_PIPELINE = 'iotanalytics:UpdatePipeline',
}
export enum CONNECT {
  ASSOCIATE_ROUTING_PROFILE_QUEUES = 'connect:AssociateRoutingProfileQueues',
  CREATE_CONTACT_FLOW = 'connect:CreateContactFlow',
  CREATE_INSTANCE = 'connect:CreateInstance',
  CREATE_ROUTING_PROFILE = 'connect:CreateRoutingProfile',
  CREATE_USER = 'connect:CreateUser',
  DELETE_USER = 'connect:DeleteUser',
  DESCRIBE_CONTACT_FLOW = 'connect:DescribeContactFlow',
  DESCRIBE_INSTANCE = 'connect:DescribeInstance',
  DESCRIBE_ROUTING_PROFILE = 'connect:DescribeRoutingProfile',
  DESCRIBE_USER = 'connect:DescribeUser',
  DESCRIBE_USER_HIERARCHY_GROUP = 'connect:DescribeUserHierarchyGroup',
  DESCRIBE_USER_HIERARCHY_STRUCTURE = 'connect:DescribeUserHierarchyStructure',
  DESTROY_INSTANCE = 'connect:DestroyInstance',
  DISASSOCIATE_ROUTING_PROFILE_QUEUES = 'connect:DisassociateRoutingProfileQueues',
  GET_CONTACT_ATTRIBUTES = 'connect:GetContactAttributes',
  GET_CURRENT_METRIC_DATA = 'connect:GetCurrentMetricData',
  GET_FEDERATION_TOKEN = 'connect:GetFederationToken',
  GET_FEDERATION_TOKENS = 'connect:GetFederationTokens',
  GET_METRIC_DATA = 'connect:GetMetricData',
  LIST_CONTACT_FLOWS = 'connect:ListContactFlows',
  LIST_HOURS_OF_OPERATIONS = 'connect:ListHoursOfOperations',
  LIST_INSTANCES = 'connect:ListInstances',
  LIST_PHONE_NUMBERS = 'connect:ListPhoneNumbers',
  LIST_PROMPTS = 'connect:ListPrompts',
  LIST_QUEUES = 'connect:ListQueues',
  LIST_ROUTING_PROFILE_QUEUES = 'connect:ListRoutingProfileQueues',
  LIST_ROUTING_PROFILES = 'connect:ListRoutingProfiles',
  LIST_SECURITY_PROFILES = 'connect:ListSecurityProfiles',
  LIST_TAGS_FOR_RESOURCE = 'connect:ListTagsForResource',
  LIST_USER_HIERARCHY_GROUPS = 'connect:ListUserHierarchyGroups',
  LIST_USERS = 'connect:ListUsers',
  MODIFY_INSTANCE = 'connect:ModifyInstance',
  RESUME_CONTACT_RECORDING = 'connect:ResumeContactRecording',
  START_CHAT_CONTACT = 'connect:StartChatContact',
  START_CONTACT_RECORDING = 'connect:StartContactRecording',
  START_OUTBOUND_VOICE_CONTACT = 'connect:StartOutboundVoiceContact',
  STOP_CONTACT = 'connect:StopContact',
  STOP_CONTACT_RECORDING = 'connect:StopContactRecording',
  SUSPEND_CONTACT_RECORDING = 'connect:SuspendContactRecording',
  TAG_RESOURCE = 'connect:TagResource',
  UNTAG_RESOURCE = 'connect:UntagResource',
  UPDATE_CONTACT_ATTRIBUTES = 'connect:UpdateContactAttributes',
  UPDATE_CONTACT_FLOW_CONTENT = 'connect:UpdateContactFlowContent',
  UPDATE_CONTACT_FLOW_NAME = 'connect:UpdateContactFlowName',
  UPDATE_ROUTING_PROFILE_CONCURRENCY = 'connect:UpdateRoutingProfileConcurrency',
  UPDATE_ROUTING_PROFILE_DEFAULT_OUTBOUND_QUEUE = 'connect:UpdateRoutingProfileDefaultOutboundQueue',
  UPDATE_ROUTING_PROFILE_NAME = 'connect:UpdateRoutingProfileName',
  UPDATE_ROUTING_PROFILE_QUEUES = 'connect:UpdateRoutingProfileQueues',
  UPDATE_USER_HIERARCHY = 'connect:UpdateUserHierarchy',
  UPDATE_USER_IDENTITY_INFO = 'connect:UpdateUserIdentityInfo',
  UPDATE_USER_PHONE_CONFIG = 'connect:UpdateUserPhoneConfig',
  UPDATE_USER_ROUTING_PROFILE = 'connect:UpdateUserRoutingProfile',
  UPDATE_USER_SECURITY_PROFILES = 'connect:UpdateUserSecurityProfiles',
}
export enum PINPOINT_EMAIL_SERVICE {
  CREATE_CONFIGURATION_SET = 'ses:CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:CreateConfigurationSetEventDestination',
  CREATE_DEDICATED_IP_POOL = 'ses:CreateDedicatedIpPool',
  CREATE_DELIVERABILITY_TEST_REPORT = 'ses:CreateDeliverabilityTestReport',
  CREATE_EMAIL_IDENTITY = 'ses:CreateEmailIdentity',
  DELETE_CONFIGURATION_SET = 'ses:DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:DeleteConfigurationSetEventDestination',
  DELETE_DEDICATED_IP_POOL = 'ses:DeleteDedicatedIpPool',
  DELETE_EMAIL_IDENTITY = 'ses:DeleteEmailIdentity',
  GET_ACCOUNT = 'ses:GetAccount',
  GET_BLACKLIST_REPORTS = 'ses:GetBlacklistReports',
  GET_CONFIGURATION_SET = 'ses:GetConfigurationSet',
  GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'ses:GetConfigurationSetEventDestinations',
  GET_DEDICATED_IP = 'ses:GetDedicatedIp',
  GET_DEDICATED_IPS = 'ses:GetDedicatedIps',
  GET_DELIVERABILITY_DASHBOARD_OPTIONS = 'ses:GetDeliverabilityDashboardOptions',
  GET_DELIVERABILITY_TEST_REPORT = 'ses:GetDeliverabilityTestReport',
  GET_DOMAIN_STATISTICS_REPORT = 'ses:GetDomainStatisticsReport',
  GET_EMAIL_IDENTITY = 'ses:GetEmailIdentity',
  LIST_CONFIGURATION_SETS = 'ses:ListConfigurationSets',
  LIST_DEDICATED_IP_POOLS = 'ses:ListDedicatedIpPools',
  LIST_DELIVERABILITY_TEST_REPORTS = 'ses:ListDeliverabilityTestReports',
  LIST_EMAIL_IDENTITIES = 'ses:ListEmailIdentities',
  LIST_TAGS_FOR_RESOURCE = 'ses:ListTagsForResource',
  PUT_ACCOUNT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutAccountDedicatedIpWarmupAttributes',
  PUT_ACCOUNT_SENDING_ATTRIBUTES = 'ses:PutAccountSendingAttributes',
  PUT_CONFIGURATION_SET_DELIVERY_OPTIONS = 'ses:PutConfigurationSetDeliveryOptions',
  PUT_CONFIGURATION_SET_REPUTATION_OPTIONS = 'ses:PutConfigurationSetReputationOptions',
  PUT_CONFIGURATION_SET_SENDING_OPTIONS = 'ses:PutConfigurationSetSendingOptions',
  PUT_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:PutConfigurationSetTrackingOptions',
  PUT_DEDICATED_IP_IN_POOL = 'ses:PutDedicatedIpInPool',
  PUT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutDedicatedIpWarmupAttributes',
  PUT_DELIVERABILITY_DASHBOARD_OPTION = 'ses:PutDeliverabilityDashboardOption',
  PUT_EMAIL_IDENTITY_DKIM_ATTRIBUTES = 'ses:PutEmailIdentityDkimAttributes',
  PUT_EMAIL_IDENTITY_FEEDBACK_ATTRIBUTES = 'ses:PutEmailIdentityFeedbackAttributes',
  PUT_EMAIL_IDENTITY_MAIL_FROM_ATTRIBUTES = 'ses:PutEmailIdentityMailFromAttributes',
  SEND_EMAIL = 'ses:SendEmail',
  TAG_RESOURCE = 'ses:TagResource',
  UNTAG_RESOURCE = 'ses:UntagResource',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:UpdateConfigurationSetEventDestination',
}
export enum SES {
  CLONE_RECEIPT_RULE_SET = 'ses:CloneReceiptRuleSet',
  CREATE_CONFIGURATION_SET = 'ses:CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:CreateConfigurationSetEventDestination',
  CREATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:CreateConfigurationSetTrackingOptions',
  CREATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:CreateCustomVerificationEmailTemplate',
  CREATE_RECEIPT_FILTER = 'ses:CreateReceiptFilter',
  CREATE_RECEIPT_RULE = 'ses:CreateReceiptRule',
  CREATE_RECEIPT_RULE_SET = 'ses:CreateReceiptRuleSet',
  CREATE_TEMPLATE = 'ses:CreateTemplate',
  DELETE_CONFIGURATION_SET = 'ses:DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:DeleteConfigurationSetEventDestination',
  DELETE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:DeleteConfigurationSetTrackingOptions',
  DELETE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:DeleteCustomVerificationEmailTemplate',
  DELETE_IDENTITY = 'ses:DeleteIdentity',
  DELETE_IDENTITY_POLICY = 'ses:DeleteIdentityPolicy',
  DELETE_RECEIPT_FILTER = 'ses:DeleteReceiptFilter',
  DELETE_RECEIPT_RULE = 'ses:DeleteReceiptRule',
  DELETE_RECEIPT_RULE_SET = 'ses:DeleteReceiptRuleSet',
  DELETE_TEMPLATE = 'ses:DeleteTemplate',
  DELETE_VERIFIED_EMAIL_ADDRESS = 'ses:DeleteVerifiedEmailAddress',
  DESCRIBE_ACTIVE_RECEIPT_RULE_SET = 'ses:DescribeActiveReceiptRuleSet',
  DESCRIBE_CONFIGURATION_SET = 'ses:DescribeConfigurationSet',
  DESCRIBE_RECEIPT_RULE = 'ses:DescribeReceiptRule',
  DESCRIBE_RECEIPT_RULE_SET = 'ses:DescribeReceiptRuleSet',
  GET_ACCOUNT_SENDING_ENABLED = 'ses:GetAccountSendingEnabled',
  GET_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:GetCustomVerificationEmailTemplate',
  GET_IDENTITY_DKIM_ATTRIBUTES = 'ses:GetIdentityDkimAttributes',
  GET_IDENTITY_MAIL_FROM_DOMAIN_ATTRIBUTES = 'ses:GetIdentityMailFromDomainAttributes',
  GET_IDENTITY_NOTIFICATION_ATTRIBUTES = 'ses:GetIdentityNotificationAttributes',
  GET_IDENTITY_POLICIES = 'ses:GetIdentityPolicies',
  GET_IDENTITY_VERIFICATION_ATTRIBUTES = 'ses:GetIdentityVerificationAttributes',
  GET_SEND_QUOTA = 'ses:GetSendQuota',
  GET_SEND_STATISTICS = 'ses:GetSendStatistics',
  GET_TEMPLATE = 'ses:GetTemplate',
  LIST_CONFIGURATION_SETS = 'ses:ListConfigurationSets',
  LIST_CUSTOM_VERIFICATION_EMAIL_TEMPLATES = 'ses:ListCustomVerificationEmailTemplates',
  LIST_IDENTITIES = 'ses:ListIdentities',
  LIST_IDENTITY_POLICIES = 'ses:ListIdentityPolicies',
  LIST_RECEIPT_FILTERS = 'ses:ListReceiptFilters',
  LIST_RECEIPT_RULE_SETS = 'ses:ListReceiptRuleSets',
  LIST_TEMPLATES = 'ses:ListTemplates',
  LIST_VERIFIED_EMAIL_ADDRESSES = 'ses:ListVerifiedEmailAddresses',
  PUT_IDENTITY_POLICY = 'ses:PutIdentityPolicy',
  REORDER_RECEIPT_RULE_SET = 'ses:ReorderReceiptRuleSet',
  SEND_BOUNCE = 'ses:SendBounce',
  SEND_BULK_TEMPLATED_EMAIL = 'ses:SendBulkTemplatedEmail',
  SEND_CUSTOM_VERIFICATION_EMAIL = 'ses:SendCustomVerificationEmail',
  SEND_EMAIL = 'ses:SendEmail',
  SEND_RAW_EMAIL = 'ses:SendRawEmail',
  SEND_TEMPLATED_EMAIL = 'ses:SendTemplatedEmail',
  SET_ACTIVE_RECEIPT_RULE_SET = 'ses:SetActiveReceiptRuleSet',
  SET_IDENTITY_DKIM_ENABLED = 'ses:SetIdentityDkimEnabled',
  SET_IDENTITY_FEEDBACK_FORWARDING_ENABLED = 'ses:SetIdentityFeedbackForwardingEnabled',
  SET_IDENTITY_HEADERS_IN_NOTIFICATIONS_ENABLED = 'ses:SetIdentityHeadersInNotificationsEnabled',
  SET_IDENTITY_MAIL_FROM_DOMAIN = 'ses:SetIdentityMailFromDomain',
  SET_IDENTITY_NOTIFICATION_TOPIC = 'ses:SetIdentityNotificationTopic',
  SET_RECEIPT_RULE_POSITION = 'ses:SetReceiptRulePosition',
  TEST_RENDER_TEMPLATE = 'ses:TestRenderTemplate',
  UPDATE_ACCOUNT_SENDING_ENABLED = 'ses:UpdateAccountSendingEnabled',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:UpdateConfigurationSetEventDestination',
  UPDATE_CONFIGURATION_SET_REPUTATION_METRICS_ENABLED = 'ses:UpdateConfigurationSetReputationMetricsEnabled',
  UPDATE_CONFIGURATION_SET_SENDING_ENABLED = 'ses:UpdateConfigurationSetSendingEnabled',
  UPDATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:UpdateConfigurationSetTrackingOptions',
  UPDATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:UpdateCustomVerificationEmailTemplate',
  UPDATE_RECEIPT_RULE = 'ses:UpdateReceiptRule',
  UPDATE_TEMPLATE = 'ses:UpdateTemplate',
  VERIFY_DOMAIN_DKIM = 'ses:VerifyDomainDkim',
  VERIFY_DOMAIN_IDENTITY = 'ses:VerifyDomainIdentity',
  VERIFY_EMAIL_ADDRESS = 'ses:VerifyEmailAddress',
  VERIFY_EMAIL_IDENTITY = 'ses:VerifyEmailIdentity',
}
export enum COST_EXPLORER_SERVICE {
  CREATE_ANOMALY_MONITOR = 'ce:CreateAnomalyMonitor',
  CREATE_ANOMALY_SUBSCRIPTION = 'ce:CreateAnomalySubscription',
  CREATE_COST_CATEGORY_DEFINITION = 'ce:CreateCostCategoryDefinition',
  DELETE_ANOMALY_MONITOR = 'ce:DeleteAnomalyMonitor',
  DELETE_ANOMALY_SUBSCRIPTION = 'ce:DeleteAnomalySubscription',
  DELETE_COST_CATEGORY_DEFINITION = 'ce:DeleteCostCategoryDefinition',
  DESCRIBE_COST_CATEGORY_DEFINITION = 'ce:DescribeCostCategoryDefinition',
  GET_ANOMALIES = 'ce:GetAnomalies',
  GET_ANOMALY_MONITORS = 'ce:GetAnomalyMonitors',
  GET_ANOMALY_SUBSCRIPTIONS = 'ce:GetAnomalySubscriptions',
  GET_COST_AND_USAGE = 'ce:GetCostAndUsage',
  GET_COST_AND_USAGE_WITH_RESOURCES = 'ce:GetCostAndUsageWithResources',
  GET_COST_FORECAST = 'ce:GetCostForecast',
  GET_DIMENSION_VALUES = 'ce:GetDimensionValues',
  GET_RESERVATION_COVERAGE = 'ce:GetReservationCoverage',
  GET_RESERVATION_PURCHASE_RECOMMENDATION = 'ce:GetReservationPurchaseRecommendation',
  GET_RESERVATION_UTILIZATION = 'ce:GetReservationUtilization',
  GET_RIGHTSIZING_RECOMMENDATION = 'ce:GetRightsizingRecommendation',
  GET_SAVINGS_PLANS_COVERAGE = 'ce:GetSavingsPlansCoverage',
  GET_SAVINGS_PLANS_PURCHASE_RECOMMENDATION = 'ce:GetSavingsPlansPurchaseRecommendation',
  GET_SAVINGS_PLANS_UTILIZATION = 'ce:GetSavingsPlansUtilization',
  GET_SAVINGS_PLANS_UTILIZATION_DETAILS = 'ce:GetSavingsPlansUtilizationDetails',
  GET_TAGS = 'ce:GetTags',
  GET_USAGE_FORECAST = 'ce:GetUsageForecast',
  LIST_COST_CATEGORY_DEFINITIONS = 'ce:ListCostCategoryDefinitions',
  PROVIDE_ANOMALY_FEEDBACK = 'ce:ProvideAnomalyFeedback',
  UPDATE_ANOMALY_MONITOR = 'ce:UpdateAnomalyMonitor',
  UPDATE_ANOMALY_SUBSCRIPTION = 'ce:UpdateAnomalySubscription',
  UPDATE_COST_CATEGORY_DEFINITION = 'ce:UpdateCostCategoryDefinition',
}
export enum CLOUDWATCH_SYNTHETICS {
  CREATE_CANARY = 'synthetics:CreateCanary',
  DELETE_CANARY = 'synthetics:DeleteCanary',
  DESCRIBE_CANARIES = 'synthetics:DescribeCanaries',
  DESCRIBE_CANARIES_LAST_RUN = 'synthetics:DescribeCanariesLastRun',
  GET_CANARY_RUNS = 'synthetics:GetCanaryRuns',
  LIST_TAGS_FOR_RESOURCE = 'synthetics:ListTagsForResource',
  START_CANARY = 'synthetics:StartCanary',
  STOP_CANARY = 'synthetics:StopCanary',
  TAG_RESOURCE = 'synthetics:TagResource',
  UNTAG_RESOURCE = 'synthetics:UntagResource',
  UPDATE_CANARY = 'synthetics:UpdateCanary',
}
export enum ELASTIC_INFERENCE {
  CONNECT = 'elastic-inference:Connect',
}
export enum DEEPLENS {
  ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'deeplens:AssociateServiceRoleToAccount',
  BATCH_GET_DEVICE = 'deeplens:BatchGetDevice',
  BATCH_GET_MODEL = 'deeplens:BatchGetModel',
  BATCH_GET_PROJECT = 'deeplens:BatchGetProject',
  CREATE_DEVICE_CERTIFICATES = 'deeplens:CreateDeviceCertificates',
  CREATE_MODEL = 'deeplens:CreateModel',
  CREATE_PROJECT = 'deeplens:CreateProject',
  DELETE_MODEL = 'deeplens:DeleteModel',
  DELETE_PROJECT = 'deeplens:DeleteProject',
  DEPLOY_PROJECT = 'deeplens:DeployProject',
  DEREGISTER_DEVICE = 'deeplens:DeregisterDevice',
  GET_ASSOCIATED_RESOURCES = 'deeplens:GetAssociatedResources',
  GET_DEPLOYMENT_STATUS = 'deeplens:GetDeploymentStatus',
  GET_DEVICE = 'deeplens:GetDevice',
  GET_MODEL = 'deeplens:GetModel',
  GET_PROJECT = 'deeplens:GetProject',
  IMPORT_PROJECT_FROM_TEMPLATE = 'deeplens:ImportProjectFromTemplate',
  LIST_DEPLOYMENTS = 'deeplens:ListDeployments',
  LIST_DEVICES = 'deeplens:ListDevices',
  LIST_MODELS = 'deeplens:ListModels',
  LIST_PROJECTS = 'deeplens:ListProjects',
  REGISTER_DEVICE = 'deeplens:RegisterDevice',
  REMOVE_PROJECT = 'deeplens:RemoveProject',
  UPDATE_PROJECT = 'deeplens:UpdateProject',
}
export enum RDS_DATA_API {
  BATCH_EXECUTE_STATEMENT = 'rds-data:BatchExecuteStatement',
  BEGIN_TRANSACTION = 'rds-data:BeginTransaction',
  COMMIT_TRANSACTION = 'rds-data:CommitTransaction',
  EXECUTE_SQL = 'rds-data:ExecuteSql',
  EXECUTE_STATEMENT = 'rds-data:ExecuteStatement',
  ROLLBACK_TRANSACTION = 'rds-data:RollbackTransaction',
}
export enum SSO_DIRECTORY {
  ADD_MEMBER_TO_GROUP = 'sso-directory:AddMemberToGroup',
  COMPLETE_VIRTUAL_MFA_DEVICE_REGISTRATION = 'sso-directory:CompleteVirtualMfaDeviceRegistration',
  CREATE_ALIAS = 'sso-directory:CreateAlias',
  CREATE_BEARER_TOKEN = 'sso-directory:CreateBearerToken',
  CREATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:CreateExternalIdPConfigurationForDirectory',
  CREATE_GROUP = 'sso-directory:CreateGroup',
  CREATE_PROVISIONING_TENANT = 'sso-directory:CreateProvisioningTenant',
  CREATE_USER = 'sso-directory:CreateUser',
  DELETE_BEARER_TOKEN = 'sso-directory:DeleteBearerToken',
  DELETE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:DeleteExternalIdPConfigurationForDirectory',
  DELETE_GROUP = 'sso-directory:DeleteGroup',
  DELETE_MFA_DEVICE_FOR_USER = 'sso-directory:DeleteMfaDeviceForUser',
  DELETE_PROVISIONING_TENANT = 'sso-directory:DeleteProvisioningTenant',
  DELETE_USER = 'sso-directory:DeleteUser',
  DESCRIBE_DIRECTORY = 'sso-directory:DescribeDirectory',
  DESCRIBE_GROUPS = 'sso-directory:DescribeGroups',
  DESCRIBE_USERS = 'sso-directory:DescribeUsers',
  DISABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:DisableExternalIdPConfigurationForDirectory',
  DISABLE_USER = 'sso-directory:DisableUser',
  ENABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:EnableExternalIdPConfigurationForDirectory',
  ENABLE_USER = 'sso-directory:EnableUser',
  GET_AWSSP_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:GetAWSSPConfigurationForDirectory',
  LIST_BEARER_TOKENS = 'sso-directory:ListBearerTokens',
  LIST_EXTERNAL_ID_P_CONFIGURATIONS_FOR_DIRECTORY = 'sso-directory:ListExternalIdPConfigurationsForDirectory',
  LIST_GROUPS_FOR_USER = 'sso-directory:ListGroupsForUser',
  LIST_MEMBERS_IN_GROUP = 'sso-directory:ListMembersInGroup',
  LIST_MFA_DEVICES_FOR_USER = 'sso-directory:ListMfaDevicesForUser',
  LIST_PROVISIONING_TENANTS = 'sso-directory:ListProvisioningTenants',
  REMOVE_MEMBER_FROM_GROUP = 'sso-directory:RemoveMemberFromGroup',
  SEARCH_GROUPS = 'sso-directory:SearchGroups',
  SEARCH_USERS = 'sso-directory:SearchUsers',
  START_VIRTUAL_MFA_DEVICE_REGISTRATION = 'sso-directory:StartVirtualMfaDeviceRegistration',
  UPDATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:UpdateExternalIdPConfigurationForDirectory',
  UPDATE_GROUP = 'sso-directory:UpdateGroup',
  UPDATE_PASSWORD = 'sso-directory:UpdatePassword',
  UPDATE_USER = 'sso-directory:UpdateUser',
  VERIFY_EMAIL = 'sso-directory:VerifyEmail',
}
export enum APPFLOW {
  CREATE_CONNECTOR_PROFILE = 'appflow:CreateConnectorProfile',
  CREATE_FLOW = 'appflow:CreateFlow',
  DELETE_CONNECTOR_PROFILE = 'appflow:DeleteConnectorProfile',
  DELETE_FLOW = 'appflow:DeleteFlow',
  DESCRIBE_CONNECTOR_ENTITY = 'appflow:DescribeConnectorEntity',
  DESCRIBE_CONNECTOR_FIELDS = 'appflow:DescribeConnectorFields',
  DESCRIBE_CONNECTOR_PROFILES = 'appflow:DescribeConnectorProfiles',
  DESCRIBE_CONNECTORS = 'appflow:DescribeConnectors',
  DESCRIBE_FLOW = 'appflow:DescribeFlow',
  DESCRIBE_FLOW_EXECUTION = 'appflow:DescribeFlowExecution',
  DESCRIBE_FLOW_EXECUTION_RECORDS = 'appflow:DescribeFlowExecutionRecords',
  DESCRIBE_FLOWS = 'appflow:DescribeFlows',
  LIST_CONNECTOR_ENTITIES = 'appflow:ListConnectorEntities',
  LIST_CONNECTOR_FIELDS = 'appflow:ListConnectorFields',
  LIST_FLOWS = 'appflow:ListFlows',
  LIST_TAGS_FOR_RESOURCE = 'appflow:ListTagsForResource',
  RUN_FLOW = 'appflow:RunFlow',
  START_FLOW = 'appflow:StartFlow',
  STOP_FLOW = 'appflow:StopFlow',
  TAG_RESOURCE = 'appflow:TagResource',
  UNTAG_RESOURCE = 'appflow:UntagResource',
  UPDATE_CONNECTOR_PROFILE = 'appflow:UpdateConnectorProfile',
  UPDATE_FLOW = 'appflow:UpdateFlow',
}
export enum TRUSTED_ADVISOR {
  DESCRIBE_ACCOUNT = 'trustedadvisor:DescribeAccount',
  DESCRIBE_ACCOUNT_ACCESS = 'trustedadvisor:DescribeAccountAccess',
  DESCRIBE_CHECK_ITEMS = 'trustedadvisor:DescribeCheckItems',
  DESCRIBE_CHECK_REFRESH_STATUSES = 'trustedadvisor:DescribeCheckRefreshStatuses',
  DESCRIBE_CHECK_SUMMARIES = 'trustedadvisor:DescribeCheckSummaries',
  DESCRIBE_CHECKS = 'trustedadvisor:DescribeChecks',
  DESCRIBE_NOTIFICATION_PREFERENCES = 'trustedadvisor:DescribeNotificationPreferences',
  DESCRIBE_ORGANIZATION = 'trustedadvisor:DescribeOrganization',
  DESCRIBE_ORGANIZATION_ACCOUNTS = 'trustedadvisor:DescribeOrganizationAccounts',
  DESCRIBE_REPORTS = 'trustedadvisor:DescribeReports',
  DESCRIBE_SERVICE_METADATA = 'trustedadvisor:DescribeServiceMetadata',
  EXCLUDE_CHECK_ITEMS = 'trustedadvisor:ExcludeCheckItems',
  GENERATE_REPORT = 'trustedadvisor:GenerateReport',
  INCLUDE_CHECK_ITEMS = 'trustedadvisor:IncludeCheckItems',
  REFRESH_CHECK = 'trustedadvisor:RefreshCheck',
  SET_ACCOUNT_ACCESS = 'trustedadvisor:SetAccountAccess',
  SET_ORGANIZATION_ACCESS = 'trustedadvisor:SetOrganizationAccess',
  UPDATE_NOTIFICATION_PREFERENCES = 'trustedadvisor:UpdateNotificationPreferences',
}
export enum CONFIG {
  BATCH_GET_AGGREGATE_RESOURCE_CONFIG = 'config:BatchGetAggregateResourceConfig',
  BATCH_GET_RESOURCE_CONFIG = 'config:BatchGetResourceConfig',
  DELETE_AGGREGATION_AUTHORIZATION = 'config:DeleteAggregationAuthorization',
  DELETE_CONFIG_RULE = 'config:DeleteConfigRule',
  DELETE_CONFIGURATION_AGGREGATOR = 'config:DeleteConfigurationAggregator',
  DELETE_CONFIGURATION_RECORDER = 'config:DeleteConfigurationRecorder',
  DELETE_CONFORMANCE_PACK = 'config:DeleteConformancePack',
  DELETE_DELIVERY_CHANNEL = 'config:DeleteDeliveryChannel',
  DELETE_EVALUATION_RESULTS = 'config:DeleteEvaluationResults',
  DELETE_ORGANIZATION_CONFIG_RULE = 'config:DeleteOrganizationConfigRule',
  DELETE_ORGANIZATION_CONFORMANCE_PACK = 'config:DeleteOrganizationConformancePack',
  DELETE_PENDING_AGGREGATION_REQUEST = 'config:DeletePendingAggregationRequest',
  DELETE_REMEDIATION_CONFIGURATION = 'config:DeleteRemediationConfiguration',
  DELETE_REMEDIATION_EXCEPTIONS = 'config:DeleteRemediationExceptions',
  DELETE_RESOURCE_CONFIG = 'config:DeleteResourceConfig',
  DELETE_RETENTION_CONFIGURATION = 'config:DeleteRetentionConfiguration',
  DELIVER_CONFIG_SNAPSHOT = 'config:DeliverConfigSnapshot',
  DESCRIBE_AGGREGATE_COMPLIANCE_BY_CONFIG_RULES = 'config:DescribeAggregateComplianceByConfigRules',
  DESCRIBE_AGGREGATION_AUTHORIZATIONS = 'config:DescribeAggregationAuthorizations',
  DESCRIBE_COMPLIANCE_BY_CONFIG_RULE = 'config:DescribeComplianceByConfigRule',
  DESCRIBE_COMPLIANCE_BY_RESOURCE = 'config:DescribeComplianceByResource',
  DESCRIBE_CONFIG_RULE_EVALUATION_STATUS = 'config:DescribeConfigRuleEvaluationStatus',
  DESCRIBE_CONFIG_RULES = 'config:DescribeConfigRules',
  DESCRIBE_CONFIGURATION_AGGREGATOR_SOURCES_STATUS = 'config:DescribeConfigurationAggregatorSourcesStatus',
  DESCRIBE_CONFIGURATION_AGGREGATORS = 'config:DescribeConfigurationAggregators',
  DESCRIBE_CONFIGURATION_RECORDER_STATUS = 'config:DescribeConfigurationRecorderStatus',
  DESCRIBE_CONFIGURATION_RECORDERS = 'config:DescribeConfigurationRecorders',
  DESCRIBE_CONFORMANCE_PACK_COMPLIANCE = 'config:DescribeConformancePackCompliance',
  DESCRIBE_CONFORMANCE_PACK_STATUS = 'config:DescribeConformancePackStatus',
  DESCRIBE_CONFORMANCE_PACKS = 'config:DescribeConformancePacks',
  DESCRIBE_DELIVERY_CHANNEL_STATUS = 'config:DescribeDeliveryChannelStatus',
  DESCRIBE_DELIVERY_CHANNELS = 'config:DescribeDeliveryChannels',
  DESCRIBE_ORGANIZATION_CONFIG_RULE_STATUSES = 'config:DescribeOrganizationConfigRuleStatuses',
  DESCRIBE_ORGANIZATION_CONFIG_RULES = 'config:DescribeOrganizationConfigRules',
  DESCRIBE_ORGANIZATION_CONFORMANCE_PACK_STATUSES = 'config:DescribeOrganizationConformancePackStatuses',
  DESCRIBE_ORGANIZATION_CONFORMANCE_PACKS = 'config:DescribeOrganizationConformancePacks',
  DESCRIBE_PENDING_AGGREGATION_REQUESTS = 'config:DescribePendingAggregationRequests',
  DESCRIBE_REMEDIATION_CONFIGURATIONS = 'config:DescribeRemediationConfigurations',
  DESCRIBE_REMEDIATION_EXCEPTIONS = 'config:DescribeRemediationExceptions',
  DESCRIBE_REMEDIATION_EXECUTION_STATUS = 'config:DescribeRemediationExecutionStatus',
  DESCRIBE_RETENTION_CONFIGURATIONS = 'config:DescribeRetentionConfigurations',
  GET_AGGREGATE_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'config:GetAggregateComplianceDetailsByConfigRule',
  GET_AGGREGATE_CONFIG_RULE_COMPLIANCE_SUMMARY = 'config:GetAggregateConfigRuleComplianceSummary',
  GET_AGGREGATE_DISCOVERED_RESOURCE_COUNTS = 'config:GetAggregateDiscoveredResourceCounts',
  GET_AGGREGATE_RESOURCE_CONFIG = 'config:GetAggregateResourceConfig',
  GET_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'config:GetComplianceDetailsByConfigRule',
  GET_COMPLIANCE_DETAILS_BY_RESOURCE = 'config:GetComplianceDetailsByResource',
  GET_COMPLIANCE_SUMMARY_BY_CONFIG_RULE = 'config:GetComplianceSummaryByConfigRule',
  GET_COMPLIANCE_SUMMARY_BY_RESOURCE_TYPE = 'config:GetComplianceSummaryByResourceType',
  GET_CONFORMANCE_PACK_COMPLIANCE_DETAILS = 'config:GetConformancePackComplianceDetails',
  GET_CONFORMANCE_PACK_COMPLIANCE_SUMMARY = 'config:GetConformancePackComplianceSummary',
  GET_DISCOVERED_RESOURCE_COUNTS = 'config:GetDiscoveredResourceCounts',
  GET_ORGANIZATION_CONFIG_RULE_DETAILED_STATUS = 'config:GetOrganizationConfigRuleDetailedStatus',
  GET_ORGANIZATION_CONFORMANCE_PACK_DETAILED_STATUS = 'config:GetOrganizationConformancePackDetailedStatus',
  GET_RESOURCE_CONFIG_HISTORY = 'config:GetResourceConfigHistory',
  LIST_AGGREGATE_DISCOVERED_RESOURCES = 'config:ListAggregateDiscoveredResources',
  LIST_DISCOVERED_RESOURCES = 'config:ListDiscoveredResources',
  LIST_TAGS_FOR_RESOURCE = 'config:ListTagsForResource',
  PUT_AGGREGATION_AUTHORIZATION = 'config:PutAggregationAuthorization',
  PUT_CONFIG_RULE = 'config:PutConfigRule',
  PUT_CONFIGURATION_AGGREGATOR = 'config:PutConfigurationAggregator',
  PUT_CONFIGURATION_RECORDER = 'config:PutConfigurationRecorder',
  PUT_CONFORMANCE_PACK = 'config:PutConformancePack',
  PUT_DELIVERY_CHANNEL = 'config:PutDeliveryChannel',
  PUT_EVALUATIONS = 'config:PutEvaluations',
  PUT_ORGANIZATION_CONFIG_RULE = 'config:PutOrganizationConfigRule',
  PUT_ORGANIZATION_CONFORMANCE_PACK = 'config:PutOrganizationConformancePack',
  PUT_REMEDIATION_CONFIGURATIONS = 'config:PutRemediationConfigurations',
  PUT_REMEDIATION_EXCEPTIONS = 'config:PutRemediationExceptions',
  PUT_RESOURCE_CONFIG = 'config:PutResourceConfig',
  PUT_RETENTION_CONFIGURATION = 'config:PutRetentionConfiguration',
  SELECT_AGGREGATE_RESOURCE_CONFIG = 'config:SelectAggregateResourceConfig',
  SELECT_RESOURCE_CONFIG = 'config:SelectResourceConfig',
  START_CONFIG_RULES_EVALUATION = 'config:StartConfigRulesEvaluation',
  START_CONFIGURATION_RECORDER = 'config:StartConfigurationRecorder',
  START_REMEDIATION_EXECUTION = 'config:StartRemediationExecution',
  STOP_CONFIGURATION_RECORDER = 'config:StopConfigurationRecorder',
  TAG_RESOURCE = 'config:TagResource',
  UNTAG_RESOURCE = 'config:UntagResource',
}
export enum RDS {
  ADD_ROLE_TO_DB_CLUSTER = 'rds:AddRoleToDBCluster',
  ADD_ROLE_TO_DB_INSTANCE = 'rds:AddRoleToDBInstance',
  ADD_SOURCE_IDENTIFIER_TO_SUBSCRIPTION = 'rds:AddSourceIdentifierToSubscription',
  ADD_TAGS_TO_RESOURCE = 'rds:AddTagsToResource',
  APPLY_PENDING_MAINTENANCE_ACTION = 'rds:ApplyPendingMaintenanceAction',
  AUTHORIZE_DB_SECURITY_GROUP_INGRESS = 'rds:AuthorizeDBSecurityGroupIngress',
  BACKTRACK_DB_CLUSTER = 'rds:BacktrackDBCluster',
  CANCEL_EXPORT_TASK = 'rds:CancelExportTask',
  COPY_DB_CLUSTER_PARAMETER_GROUP = 'rds:CopyDBClusterParameterGroup',
  COPY_DB_CLUSTER_SNAPSHOT = 'rds:CopyDBClusterSnapshot',
  COPY_DB_PARAMETER_GROUP = 'rds:CopyDBParameterGroup',
  COPY_DB_SNAPSHOT = 'rds:CopyDBSnapshot',
  COPY_OPTION_GROUP = 'rds:CopyOptionGroup',
  CREATE_DB_CLUSTER = 'rds:CreateDBCluster',
  CREATE_DB_CLUSTER_ENDPOINT = 'rds:CreateDBClusterEndpoint',
  CREATE_DB_CLUSTER_PARAMETER_GROUP = 'rds:CreateDBClusterParameterGroup',
  CREATE_DB_CLUSTER_SNAPSHOT = 'rds:CreateDBClusterSnapshot',
  CREATE_DB_INSTANCE = 'rds:CreateDBInstance',
  CREATE_DB_INSTANCE_READ_REPLICA = 'rds:CreateDBInstanceReadReplica',
  CREATE_DB_PARAMETER_GROUP = 'rds:CreateDBParameterGroup',
  CREATE_DB_PROXY = 'rds:CreateDBProxy',
  CREATE_DB_SECURITY_GROUP = 'rds:CreateDBSecurityGroup',
  CREATE_DB_SNAPSHOT = 'rds:CreateDBSnapshot',
  CREATE_DB_SUBNET_GROUP = 'rds:CreateDBSubnetGroup',
  CREATE_EVENT_SUBSCRIPTION = 'rds:CreateEventSubscription',
  CREATE_GLOBAL_CLUSTER = 'rds:CreateGlobalCluster',
  CREATE_OPTION_GROUP = 'rds:CreateOptionGroup',
  DELETE_DB_CLUSTER = 'rds:DeleteDBCluster',
  DELETE_DB_CLUSTER_ENDPOINT = 'rds:DeleteDBClusterEndpoint',
  DELETE_DB_CLUSTER_PARAMETER_GROUP = 'rds:DeleteDBClusterParameterGroup',
  DELETE_DB_CLUSTER_SNAPSHOT = 'rds:DeleteDBClusterSnapshot',
  DELETE_DB_INSTANCE = 'rds:DeleteDBInstance',
  DELETE_DB_INSTANCE_AUTOMATED_BACKUP = 'rds:DeleteDBInstanceAutomatedBackup',
  DELETE_DB_PARAMETER_GROUP = 'rds:DeleteDBParameterGroup',
  DELETE_DB_PROXY = 'rds:DeleteDBProxy',
  DELETE_DB_SECURITY_GROUP = 'rds:DeleteDBSecurityGroup',
  DELETE_DB_SNAPSHOT = 'rds:DeleteDBSnapshot',
  DELETE_DB_SUBNET_GROUP = 'rds:DeleteDBSubnetGroup',
  DELETE_EVENT_SUBSCRIPTION = 'rds:DeleteEventSubscription',
  DELETE_GLOBAL_CLUSTER = 'rds:DeleteGlobalCluster',
  DELETE_OPTION_GROUP = 'rds:DeleteOptionGroup',
  DEREGISTER_DB_PROXY_TARGETS = 'rds:DeregisterDBProxyTargets',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'rds:DescribeAccountAttributes',
  DESCRIBE_CERTIFICATES = 'rds:DescribeCertificates',
  DESCRIBE_DB_CLUSTER_BACKTRACKS = 'rds:DescribeDBClusterBacktracks',
  DESCRIBE_DB_CLUSTER_ENDPOINTS = 'rds:DescribeDBClusterEndpoints',
  DESCRIBE_DB_CLUSTER_PARAMETER_GROUPS = 'rds:DescribeDBClusterParameterGroups',
  DESCRIBE_DB_CLUSTER_PARAMETERS = 'rds:DescribeDBClusterParameters',
  DESCRIBE_DB_CLUSTER_SNAPSHOT_ATTRIBUTES = 'rds:DescribeDBClusterSnapshotAttributes',
  DESCRIBE_DB_CLUSTER_SNAPSHOTS = 'rds:DescribeDBClusterSnapshots',
  DESCRIBE_DB_CLUSTERS = 'rds:DescribeDBClusters',
  DESCRIBE_DB_ENGINE_VERSIONS = 'rds:DescribeDBEngineVersions',
  DESCRIBE_DB_INSTANCE_AUTOMATED_BACKUPS = 'rds:DescribeDBInstanceAutomatedBackups',
  DESCRIBE_DB_INSTANCES = 'rds:DescribeDBInstances',
  DESCRIBE_DB_LOG_FILES = 'rds:DescribeDBLogFiles',
  DESCRIBE_DB_PARAMETER_GROUPS = 'rds:DescribeDBParameterGroups',
  DESCRIBE_DB_PARAMETERS = 'rds:DescribeDBParameters',
  DESCRIBE_DB_PROXIES = 'rds:DescribeDBProxies',
  DESCRIBE_DB_PROXY_TARGET_GROUPS = 'rds:DescribeDBProxyTargetGroups',
  DESCRIBE_DB_PROXY_TARGETS = 'rds:DescribeDBProxyTargets',
  DESCRIBE_DB_SECURITY_GROUPS = 'rds:DescribeDBSecurityGroups',
  DESCRIBE_DB_SNAPSHOT_ATTRIBUTES = 'rds:DescribeDBSnapshotAttributes',
  DESCRIBE_DB_SNAPSHOTS = 'rds:DescribeDBSnapshots',
  DESCRIBE_DB_SUBNET_GROUPS = 'rds:DescribeDBSubnetGroups',
  DESCRIBE_ENGINE_DEFAULT_CLUSTER_PARAMETERS = 'rds:DescribeEngineDefaultClusterParameters',
  DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'rds:DescribeEngineDefaultParameters',
  DESCRIBE_EVENT_CATEGORIES = 'rds:DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'rds:DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'rds:DescribeEvents',
  DESCRIBE_EXPORT_TASKS = 'rds:DescribeExportTasks',
  DESCRIBE_GLOBAL_CLUSTERS = 'rds:DescribeGlobalClusters',
  DESCRIBE_OPTION_GROUP_OPTIONS = 'rds:DescribeOptionGroupOptions',
  DESCRIBE_OPTION_GROUPS = 'rds:DescribeOptionGroups',
  DESCRIBE_ORDERABLE_DB_INSTANCE_OPTIONS = 'rds:DescribeOrderableDBInstanceOptions',
  DESCRIBE_PENDING_MAINTENANCE_ACTIONS = 'rds:DescribePendingMaintenanceActions',
  DESCRIBE_RESERVED_DB_INSTANCES = 'rds:DescribeReservedDBInstances',
  DESCRIBE_RESERVED_DB_INSTANCES_OFFERINGS = 'rds:DescribeReservedDBInstancesOfferings',
  DESCRIBE_SOURCE_REGIONS = 'rds:DescribeSourceRegions',
  DESCRIBE_VALID_DB_INSTANCE_MODIFICATIONS = 'rds:DescribeValidDBInstanceModifications',
  DOWNLOAD_DB_LOG_FILE_PORTION = 'rds:DownloadDBLogFilePortion',
  FAILOVER_DB_CLUSTER = 'rds:FailoverDBCluster',
  LIST_TAGS_FOR_RESOURCE = 'rds:ListTagsForResource',
  MODIFY_CURRENT_DB_CLUSTER_CAPACITY = 'rds:ModifyCurrentDBClusterCapacity',
  MODIFY_DB_CLUSTER = 'rds:ModifyDBCluster',
  MODIFY_DB_CLUSTER_ENDPOINT = 'rds:ModifyDBClusterEndpoint',
  MODIFY_DB_CLUSTER_PARAMETER_GROUP = 'rds:ModifyDBClusterParameterGroup',
  MODIFY_DB_CLUSTER_SNAPSHOT_ATTRIBUTE = 'rds:ModifyDBClusterSnapshotAttribute',
  MODIFY_DB_INSTANCE = 'rds:ModifyDBInstance',
  MODIFY_DB_PARAMETER_GROUP = 'rds:ModifyDBParameterGroup',
  MODIFY_DB_PROXY = 'rds:ModifyDBProxy',
  MODIFY_DB_PROXY_TARGET_GROUP = 'rds:ModifyDBProxyTargetGroup',
  MODIFY_DB_SNAPSHOT = 'rds:ModifyDBSnapshot',
  MODIFY_DB_SNAPSHOT_ATTRIBUTE = 'rds:ModifyDBSnapshotAttribute',
  MODIFY_DB_SUBNET_GROUP = 'rds:ModifyDBSubnetGroup',
  MODIFY_EVENT_SUBSCRIPTION = 'rds:ModifyEventSubscription',
  MODIFY_GLOBAL_CLUSTER = 'rds:ModifyGlobalCluster',
  MODIFY_OPTION_GROUP = 'rds:ModifyOptionGroup',
  PROMOTE_READ_REPLICA = 'rds:PromoteReadReplica',
  PROMOTE_READ_REPLICA_DB_CLUSTER = 'rds:PromoteReadReplicaDBCluster',
  PURCHASE_RESERVED_DB_INSTANCES_OFFERING = 'rds:PurchaseReservedDBInstancesOffering',
  REBOOT_DB_INSTANCE = 'rds:RebootDBInstance',
  REGISTER_DB_PROXY_TARGETS = 'rds:RegisterDBProxyTargets',
  REMOVE_FROM_GLOBAL_CLUSTER = 'rds:RemoveFromGlobalCluster',
  REMOVE_ROLE_FROM_DB_CLUSTER = 'rds:RemoveRoleFromDBCluster',
  REMOVE_ROLE_FROM_DB_INSTANCE = 'rds:RemoveRoleFromDBInstance',
  REMOVE_SOURCE_IDENTIFIER_FROM_SUBSCRIPTION = 'rds:RemoveSourceIdentifierFromSubscription',
  REMOVE_TAGS_FROM_RESOURCE = 'rds:RemoveTagsFromResource',
  RESET_DB_CLUSTER_PARAMETER_GROUP = 'rds:ResetDBClusterParameterGroup',
  RESET_DB_PARAMETER_GROUP = 'rds:ResetDBParameterGroup',
  RESTORE_DB_CLUSTER_FROM_S_3 = 'rds:RestoreDBClusterFromS3',
  RESTORE_DB_CLUSTER_FROM_SNAPSHOT = 'rds:RestoreDBClusterFromSnapshot',
  RESTORE_DB_CLUSTER_TO_POINT_IN_TIME = 'rds:RestoreDBClusterToPointInTime',
  RESTORE_DB_INSTANCE_FROM_DB_SNAPSHOT = 'rds:RestoreDBInstanceFromDBSnapshot',
  RESTORE_DB_INSTANCE_FROM_S_3 = 'rds:RestoreDBInstanceFromS3',
  RESTORE_DB_INSTANCE_TO_POINT_IN_TIME = 'rds:RestoreDBInstanceToPointInTime',
  REVOKE_DB_SECURITY_GROUP_INGRESS = 'rds:RevokeDBSecurityGroupIngress',
  START_ACTIVITY_STREAM = 'rds:StartActivityStream',
  START_DB_CLUSTER = 'rds:StartDBCluster',
  START_DB_INSTANCE = 'rds:StartDBInstance',
  START_EXPORT_TASK = 'rds:StartExportTask',
  STOP_ACTIVITY_STREAM = 'rds:StopActivityStream',
  STOP_DB_CLUSTER = 'rds:StopDBCluster',
  STOP_DB_INSTANCE = 'rds:StopDBInstance',
}
export enum SIMPLE_WORKFLOW_SERVICE {
  CANCEL_TIMER = 'swf:CancelTimer',
  CANCEL_WORKFLOW_EXECUTION = 'swf:CancelWorkflowExecution',
  COMPLETE_WORKFLOW_EXECUTION = 'swf:CompleteWorkflowExecution',
  CONTINUE_AS_NEW_WORKFLOW_EXECUTION = 'swf:ContinueAsNewWorkflowExecution',
  COUNT_CLOSED_WORKFLOW_EXECUTIONS = 'swf:CountClosedWorkflowExecutions',
  COUNT_OPEN_WORKFLOW_EXECUTIONS = 'swf:CountOpenWorkflowExecutions',
  COUNT_PENDING_ACTIVITY_TASKS = 'swf:CountPendingActivityTasks',
  COUNT_PENDING_DECISION_TASKS = 'swf:CountPendingDecisionTasks',
  DEPRECATE_ACTIVITY_TYPE = 'swf:DeprecateActivityType',
  DEPRECATE_DOMAIN = 'swf:DeprecateDomain',
  DEPRECATE_WORKFLOW_TYPE = 'swf:DeprecateWorkflowType',
  DESCRIBE_ACTIVITY_TYPE = 'swf:DescribeActivityType',
  DESCRIBE_DOMAIN = 'swf:DescribeDomain',
  DESCRIBE_WORKFLOW_EXECUTION = 'swf:DescribeWorkflowExecution',
  DESCRIBE_WORKFLOW_TYPE = 'swf:DescribeWorkflowType',
  FAIL_WORKFLOW_EXECUTION = 'swf:FailWorkflowExecution',
  GET_WORKFLOW_EXECUTION_HISTORY = 'swf:GetWorkflowExecutionHistory',
  LIST_ACTIVITY_TYPES = 'swf:ListActivityTypes',
  LIST_CLOSED_WORKFLOW_EXECUTIONS = 'swf:ListClosedWorkflowExecutions',
  LIST_DOMAINS = 'swf:ListDomains',
  LIST_OPEN_WORKFLOW_EXECUTIONS = 'swf:ListOpenWorkflowExecutions',
  LIST_TAGS_FOR_RESOURCE = 'swf:ListTagsForResource',
  LIST_WORKFLOW_TYPES = 'swf:ListWorkflowTypes',
  POLL_FOR_ACTIVITY_TASK = 'swf:PollForActivityTask',
  POLL_FOR_DECISION_TASK = 'swf:PollForDecisionTask',
  RECORD_ACTIVITY_TASK_HEARTBEAT = 'swf:RecordActivityTaskHeartbeat',
  RECORD_MARKER = 'swf:RecordMarker',
  REGISTER_ACTIVITY_TYPE = 'swf:RegisterActivityType',
  REGISTER_DOMAIN = 'swf:RegisterDomain',
  REGISTER_WORKFLOW_TYPE = 'swf:RegisterWorkflowType',
  REQUEST_CANCEL_ACTIVITY_TASK = 'swf:RequestCancelActivityTask',
  REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION = 'swf:RequestCancelExternalWorkflowExecution',
  REQUEST_CANCEL_WORKFLOW_EXECUTION = 'swf:RequestCancelWorkflowExecution',
  RESPOND_ACTIVITY_TASK_CANCELED = 'swf:RespondActivityTaskCanceled',
  RESPOND_ACTIVITY_TASK_COMPLETED = 'swf:RespondActivityTaskCompleted',
  RESPOND_ACTIVITY_TASK_FAILED = 'swf:RespondActivityTaskFailed',
  RESPOND_DECISION_TASK_COMPLETED = 'swf:RespondDecisionTaskCompleted',
  SCHEDULE_ACTIVITY_TASK = 'swf:ScheduleActivityTask',
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION = 'swf:SignalExternalWorkflowExecution',
  SIGNAL_WORKFLOW_EXECUTION = 'swf:SignalWorkflowExecution',
  START_CHILD_WORKFLOW_EXECUTION = 'swf:StartChildWorkflowExecution',
  START_TIMER = 'swf:StartTimer',
  START_WORKFLOW_EXECUTION = 'swf:StartWorkflowExecution',
  TAG_RESOURCE = 'swf:TagResource',
  TERMINATE_WORKFLOW_EXECUTION = 'swf:TerminateWorkflowExecution',
  UNTAG_RESOURCE = 'swf:UntagResource',
}
export enum MACIE_CLASSIC {
  ASSOCIATE_MEMBER_ACCOUNT = 'macie:AssociateMemberAccount',
  ASSOCIATE_S_3_RESOURCES = 'macie:AssociateS3Resources',
  DISASSOCIATE_MEMBER_ACCOUNT = 'macie:DisassociateMemberAccount',
  DISASSOCIATE_S_3_RESOURCES = 'macie:DisassociateS3Resources',
  LIST_MEMBER_ACCOUNTS = 'macie:ListMemberAccounts',
  LIST_S_3_RESOURCES = 'macie:ListS3Resources',
  UPDATE_S_3_RESOURCES = 'macie:UpdateS3Resources',
}
export enum APPSYNC {
  CREATE_API_KEY = 'appsync:CreateApiKey',
  CREATE_DATA_SOURCE = 'appsync:CreateDataSource',
  CREATE_FUNCTION = 'appsync:CreateFunction',
  CREATE_GRAPHQL_API = 'appsync:CreateGraphqlApi',
  CREATE_RESOLVER = 'appsync:CreateResolver',
  CREATE_TYPE = 'appsync:CreateType',
  DELETE_API_KEY = 'appsync:DeleteApiKey',
  DELETE_DATA_SOURCE = 'appsync:DeleteDataSource',
  DELETE_FUNCTION = 'appsync:DeleteFunction',
  DELETE_GRAPHQL_API = 'appsync:DeleteGraphqlApi',
  DELETE_RESOLVER = 'appsync:DeleteResolver',
  DELETE_TYPE = 'appsync:DeleteType',
  GET_DATA_SOURCE = 'appsync:GetDataSource',
  GET_FUNCTION = 'appsync:GetFunction',
  GET_GRAPHQL_API = 'appsync:GetGraphqlApi',
  GET_INTROSPECTION_SCHEMA = 'appsync:GetIntrospectionSchema',
  GET_RESOLVER = 'appsync:GetResolver',
  GET_SCHEMA_CREATION_STATUS = 'appsync:GetSchemaCreationStatus',
  GET_TYPE = 'appsync:GetType',
  GRAPH_QL = 'appsync:GraphQL',
  LIST_API_KEYS = 'appsync:ListApiKeys',
  LIST_DATA_SOURCES = 'appsync:ListDataSources',
  LIST_FUNCTIONS = 'appsync:ListFunctions',
  LIST_GRAPHQL_APIS = 'appsync:ListGraphqlApis',
  LIST_RESOLVERS = 'appsync:ListResolvers',
  LIST_RESOLVERS_BY_FUNCTION = 'appsync:ListResolversByFunction',
  LIST_TAGS_FOR_RESOURCE = 'appsync:ListTagsForResource',
  LIST_TYPES = 'appsync:ListTypes',
  START_SCHEMA_CREATION = 'appsync:StartSchemaCreation',
  TAG_RESOURCE = 'appsync:TagResource',
  UNTAG_RESOURCE = 'appsync:UntagResource',
  UPDATE_API_KEY = 'appsync:UpdateApiKey',
  UPDATE_DATA_SOURCE = 'appsync:UpdateDataSource',
  UPDATE_FUNCTION = 'appsync:UpdateFunction',
  UPDATE_GRAPHQL_API = 'appsync:UpdateGraphqlApi',
  UPDATE_RESOLVER = 'appsync:UpdateResolver',
  UPDATE_TYPE = 'appsync:UpdateType',
}
export enum CERTIFICATE_MANAGER {
  ADD_TAGS_TO_CERTIFICATE = 'acm:AddTagsToCertificate',
  DELETE_CERTIFICATE = 'acm:DeleteCertificate',
  DESCRIBE_CERTIFICATE = 'acm:DescribeCertificate',
  EXPORT_CERTIFICATE = 'acm:ExportCertificate',
  GET_CERTIFICATE = 'acm:GetCertificate',
  IMPORT_CERTIFICATE = 'acm:ImportCertificate',
  LIST_CERTIFICATES = 'acm:ListCertificates',
  LIST_TAGS_FOR_CERTIFICATE = 'acm:ListTagsForCertificate',
  REMOVE_TAGS_FROM_CERTIFICATE = 'acm:RemoveTagsFromCertificate',
  RENEW_CERTIFICATE = 'acm:RenewCertificate',
  REQUEST_CERTIFICATE = 'acm:RequestCertificate',
  RESEND_VALIDATION_EMAIL = 'acm:ResendValidationEmail',
  UPDATE_CERTIFICATE_OPTIONS = 'acm:UpdateCertificateOptions',
}
export enum XRAY {
  BATCH_GET_TRACES = 'xray:BatchGetTraces',
  CREATE_GROUP = 'xray:CreateGroup',
  CREATE_SAMPLING_RULE = 'xray:CreateSamplingRule',
  DELETE_GROUP = 'xray:DeleteGroup',
  DELETE_SAMPLING_RULE = 'xray:DeleteSamplingRule',
  GET_ENCRYPTION_CONFIG = 'xray:GetEncryptionConfig',
  GET_GROUP = 'xray:GetGroup',
  GET_GROUPS = 'xray:GetGroups',
  GET_INSIGHT = 'xray:GetInsight',
  GET_INSIGHT_EVENTS = 'xray:GetInsightEvents',
  GET_INSIGHT_IMPACT_GRAPH = 'xray:GetInsightImpactGraph',
  GET_INSIGHT_SUMMARIES = 'xray:GetInsightSummaries',
  GET_SAMPLING_RULES = 'xray:GetSamplingRules',
  GET_SAMPLING_STATISTIC_SUMMARIES = 'xray:GetSamplingStatisticSummaries',
  GET_SAMPLING_TARGETS = 'xray:GetSamplingTargets',
  GET_SERVICE_GRAPH = 'xray:GetServiceGraph',
  GET_TIME_SERIES_SERVICE_STATISTICS = 'xray:GetTimeSeriesServiceStatistics',
  GET_TRACE_GRAPH = 'xray:GetTraceGraph',
  GET_TRACE_SUMMARIES = 'xray:GetTraceSummaries',
  LIST_TAGS_FOR_RESOURCE = 'xray:ListTagsForResource',
  PUT_ENCRYPTION_CONFIG = 'xray:PutEncryptionConfig',
  PUT_TELEMETRY_RECORDS = 'xray:PutTelemetryRecords',
  PUT_TRACE_SEGMENTS = 'xray:PutTraceSegments',
  TAG_RESOURCE = 'xray:TagResource',
  UNTAG_RESOURCE = 'xray:UntagResource',
  UPDATE_GROUP = 'xray:UpdateGroup',
  UPDATE_SAMPLING_RULE = 'xray:UpdateSamplingRule',
}
export enum CLOUDFRONT {
  CREATE_CACHE_POLICY = 'cloudfront:CreateCachePolicy',
  CREATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:CreateCloudFrontOriginAccessIdentity',
  CREATE_DISTRIBUTION = 'cloudfront:CreateDistribution',
  CREATE_DISTRIBUTION_WITH_TAGS = 'cloudfront:CreateDistributionWithTags',
  CREATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:CreateFieldLevelEncryptionConfig',
  CREATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:CreateFieldLevelEncryptionProfile',
  CREATE_INVALIDATION = 'cloudfront:CreateInvalidation',
  CREATE_ORIGIN_REQUEST_POLICY = 'cloudfront:CreateOriginRequestPolicy',
  CREATE_PUBLIC_KEY = 'cloudfront:CreatePublicKey',
  CREATE_STREAMING_DISTRIBUTION = 'cloudfront:CreateStreamingDistribution',
  CREATE_STREAMING_DISTRIBUTION_WITH_TAGS = 'cloudfront:CreateStreamingDistributionWithTags',
  DELETE_CACHE_POLICY = 'cloudfront:DeleteCachePolicy',
  DELETE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:DeleteCloudFrontOriginAccessIdentity',
  DELETE_DISTRIBUTION = 'cloudfront:DeleteDistribution',
  DELETE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:DeleteFieldLevelEncryptionConfig',
  DELETE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:DeleteFieldLevelEncryptionProfile',
  DELETE_ORIGIN_REQUEST_POLICY = 'cloudfront:DeleteOriginRequestPolicy',
  DELETE_PUBLIC_KEY = 'cloudfront:DeletePublicKey',
  DELETE_STREAMING_DISTRIBUTION = 'cloudfront:DeleteStreamingDistribution',
  GET_CACHE_POLICY = 'cloudfront:GetCachePolicy',
  GET_CACHE_POLICY_CONFIG = 'cloudfront:GetCachePolicyConfig',
  GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:GetCloudFrontOriginAccessIdentity',
  GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY_CONFIG = 'cloudfront:GetCloudFrontOriginAccessIdentityConfig',
  GET_DISTRIBUTION = 'cloudfront:GetDistribution',
  GET_DISTRIBUTION_CONFIG = 'cloudfront:GetDistributionConfig',
  GET_FIELD_LEVEL_ENCRYPTION = 'cloudfront:GetFieldLevelEncryption',
  GET_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:GetFieldLevelEncryptionConfig',
  GET_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:GetFieldLevelEncryptionProfile',
  GET_FIELD_LEVEL_ENCRYPTION_PROFILE_CONFIG = 'cloudfront:GetFieldLevelEncryptionProfileConfig',
  GET_INVALIDATION = 'cloudfront:GetInvalidation',
  GET_ORIGIN_REQUEST_POLICY = 'cloudfront:GetOriginRequestPolicy',
  GET_ORIGIN_REQUEST_POLICY_CONFIG = 'cloudfront:GetOriginRequestPolicyConfig',
  GET_PUBLIC_KEY = 'cloudfront:GetPublicKey',
  GET_PUBLIC_KEY_CONFIG = 'cloudfront:GetPublicKeyConfig',
  GET_STREAMING_DISTRIBUTION = 'cloudfront:GetStreamingDistribution',
  GET_STREAMING_DISTRIBUTION_CONFIG = 'cloudfront:GetStreamingDistributionConfig',
  LIST_CACHE_POLICIES = 'cloudfront:ListCachePolicies',
  LIST_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITIES = 'cloudfront:ListCloudFrontOriginAccessIdentities',
  LIST_DISTRIBUTIONS = 'cloudfront:ListDistributions',
  LIST_DISTRIBUTIONS_BY_CACHE_POLICY_ID = 'cloudfront:ListDistributionsByCachePolicyId',
  LIST_DISTRIBUTIONS_BY_ORIGIN_REQUEST_POLICY_ID = 'cloudfront:ListDistributionsByOriginRequestPolicyId',
  LIST_DISTRIBUTIONS_BY_WEB_ACL_ID = 'cloudfront:ListDistributionsByWebACLId',
  LIST_FIELD_LEVEL_ENCRYPTION_CONFIGS = 'cloudfront:ListFieldLevelEncryptionConfigs',
  LIST_FIELD_LEVEL_ENCRYPTION_PROFILES = 'cloudfront:ListFieldLevelEncryptionProfiles',
  LIST_INVALIDATIONS = 'cloudfront:ListInvalidations',
  LIST_ORIGIN_REQUEST_POLICIES = 'cloudfront:ListOriginRequestPolicies',
  LIST_PUBLIC_KEYS = 'cloudfront:ListPublicKeys',
  LIST_STREAMING_DISTRIBUTIONS = 'cloudfront:ListStreamingDistributions',
  LIST_TAGS_FOR_RESOURCE = 'cloudfront:ListTagsForResource',
  TAG_RESOURCE = 'cloudfront:TagResource',
  UNTAG_RESOURCE = 'cloudfront:UntagResource',
  UPDATE_CACHE_POLICY = 'cloudfront:UpdateCachePolicy',
  UPDATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:UpdateCloudFrontOriginAccessIdentity',
  UPDATE_DISTRIBUTION = 'cloudfront:UpdateDistribution',
  UPDATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:UpdateFieldLevelEncryptionConfig',
  UPDATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:UpdateFieldLevelEncryptionProfile',
  UPDATE_ORIGIN_REQUEST_POLICY = 'cloudfront:UpdateOriginRequestPolicy',
  UPDATE_PUBLIC_KEY = 'cloudfront:UpdatePublicKey',
  UPDATE_STREAMING_DISTRIBUTION = 'cloudfront:UpdateStreamingDistribution',
}
export enum ELASTIC_CONTAINER_SERVICE_FOR_KUBERNETES {
  CREATE_CLUSTER = 'eks:CreateCluster',
  CREATE_FARGATE_PROFILE = 'eks:CreateFargateProfile',
  CREATE_NODEGROUP = 'eks:CreateNodegroup',
  DELETE_CLUSTER = 'eks:DeleteCluster',
  DELETE_FARGATE_PROFILE = 'eks:DeleteFargateProfile',
  DELETE_NODEGROUP = 'eks:DeleteNodegroup',
  DESCRIBE_CLUSTER = 'eks:DescribeCluster',
  DESCRIBE_FARGATE_PROFILE = 'eks:DescribeFargateProfile',
  DESCRIBE_NODEGROUP = 'eks:DescribeNodegroup',
  DESCRIBE_UPDATE = 'eks:DescribeUpdate',
  LIST_CLUSTERS = 'eks:ListClusters',
  LIST_FARGATE_PROFILES = 'eks:ListFargateProfiles',
  LIST_NODEGROUPS = 'eks:ListNodegroups',
  LIST_TAGS_FOR_RESOURCE = 'eks:ListTagsForResource',
  LIST_UPDATES = 'eks:ListUpdates',
  TAG_RESOURCE = 'eks:TagResource',
  UNTAG_RESOURCE = 'eks:UntagResource',
  UPDATE_CLUSTER_CONFIG = 'eks:UpdateClusterConfig',
  UPDATE_CLUSTER_VERSION = 'eks:UpdateClusterVersion',
  UPDATE_NODEGROUP_CONFIG = 'eks:UpdateNodegroupConfig',
  UPDATE_NODEGROUP_VERSION = 'eks:UpdateNodegroupVersion',
}
export enum FIREWALL_MANAGER {
  ASSOCIATE_ADMIN_ACCOUNT = 'fms:AssociateAdminAccount',
  DELETE_APPS_LIST = 'fms:DeleteAppsList',
  DELETE_NOTIFICATION_CHANNEL = 'fms:DeleteNotificationChannel',
  DELETE_POLICY = 'fms:DeletePolicy',
  DELETE_PROTOCOLS_LIST = 'fms:DeleteProtocolsList',
  DISASSOCIATE_ADMIN_ACCOUNT = 'fms:DisassociateAdminAccount',
  GET_ADMIN_ACCOUNT = 'fms:GetAdminAccount',
  GET_APPS_LIST = 'fms:GetAppsList',
  GET_COMPLIANCE_DETAIL = 'fms:GetComplianceDetail',
  GET_NOTIFICATION_CHANNEL = 'fms:GetNotificationChannel',
  GET_POLICY = 'fms:GetPolicy',
  GET_PROTECTION_STATUS = 'fms:GetProtectionStatus',
  GET_PROTOCOLS_LIST = 'fms:GetProtocolsList',
  LIST_APPS_LISTS = 'fms:ListAppsLists',
  LIST_COMPLIANCE_STATUS = 'fms:ListComplianceStatus',
  LIST_MEMBER_ACCOUNTS = 'fms:ListMemberAccounts',
  LIST_POLICIES = 'fms:ListPolicies',
  LIST_PROTOCOLS_LISTS = 'fms:ListProtocolsLists',
  LIST_TAGS_FOR_RESOURCE = 'fms:ListTagsForResource',
  PUT_APPS_LIST = 'fms:PutAppsList',
  PUT_NOTIFICATION_CHANNEL = 'fms:PutNotificationChannel',
  PUT_POLICY = 'fms:PutPolicy',
  PUT_PROTOCOLS_LIST = 'fms:PutProtocolsList',
  TAG_RESOURCE = 'fms:TagResource',
  UNTAG_RESOURCE = 'fms:UntagResource',
}
export enum KINESIS {
  ADD_TAGS_TO_STREAM = 'kinesis:AddTagsToStream',
  CREATE_STREAM = 'kinesis:CreateStream',
  DECREASE_STREAM_RETENTION_PERIOD = 'kinesis:DecreaseStreamRetentionPeriod',
  DELETE_STREAM = 'kinesis:DeleteStream',
  DEREGISTER_STREAM_CONSUMER = 'kinesis:DeregisterStreamConsumer',
  DESCRIBE_LIMITS = 'kinesis:DescribeLimits',
  DESCRIBE_STREAM = 'kinesis:DescribeStream',
  DESCRIBE_STREAM_CONSUMER = 'kinesis:DescribeStreamConsumer',
  DESCRIBE_STREAM_SUMMARY = 'kinesis:DescribeStreamSummary',
  DISABLE_ENHANCED_MONITORING = 'kinesis:DisableEnhancedMonitoring',
  ENABLE_ENHANCED_MONITORING = 'kinesis:EnableEnhancedMonitoring',
  GET_RECORDS = 'kinesis:GetRecords',
  GET_SHARD_ITERATOR = 'kinesis:GetShardIterator',
  INCREASE_STREAM_RETENTION_PERIOD = 'kinesis:IncreaseStreamRetentionPeriod',
  LIST_SHARDS = 'kinesis:ListShards',
  LIST_STREAM_CONSUMERS = 'kinesis:ListStreamConsumers',
  LIST_STREAMS = 'kinesis:ListStreams',
  LIST_TAGS_FOR_STREAM = 'kinesis:ListTagsForStream',
  MERGE_SHARDS = 'kinesis:MergeShards',
  PUT_RECORD = 'kinesis:PutRecord',
  PUT_RECORDS = 'kinesis:PutRecords',
  REGISTER_STREAM_CONSUMER = 'kinesis:RegisterStreamConsumer',
  REMOVE_TAGS_FROM_STREAM = 'kinesis:RemoveTagsFromStream',
  SPLIT_SHARD = 'kinesis:SplitShard',
  START_STREAM_ENCRYPTION = 'kinesis:StartStreamEncryption',
  STOP_STREAM_ENCRYPTION = 'kinesis:StopStreamEncryption',
  SUBSCRIBE_TO_SHARD = 'kinesis:SubscribeToShard',
  UPDATE_SHARD_COUNT = 'kinesis:UpdateShardCount',
}
export enum BILLING {
  MODIFY_ACCOUNT = 'aws-portal:ModifyAccount',
  MODIFY_BILLING = 'aws-portal:ModifyBilling',
  MODIFY_PAYMENT_METHODS = 'aws-portal:ModifyPaymentMethods',
  VIEW_ACCOUNT = 'aws-portal:ViewAccount',
  VIEW_BILLING = 'aws-portal:ViewBilling',
  VIEW_PAYMENT_METHODS = 'aws-portal:ViewPaymentMethods',
  VIEW_USAGE = 'aws-portal:ViewUsage',
}
export enum DIRECTORY_SERVICE {
  ACCEPT_SHARED_DIRECTORY = 'ds:AcceptSharedDirectory',
  ADD_IP_ROUTES = 'ds:AddIpRoutes',
  ADD_TAGS_TO_RESOURCE = 'ds:AddTagsToResource',
  AUTHORIZE_APPLICATION = 'ds:AuthorizeApplication',
  CANCEL_SCHEMA_EXTENSION = 'ds:CancelSchemaExtension',
  CHECK_ALIAS = 'ds:CheckAlias',
  CONNECT_DIRECTORY = 'ds:ConnectDirectory',
  CREATE_ALIAS = 'ds:CreateAlias',
  CREATE_COMPUTER = 'ds:CreateComputer',
  CREATE_CONDITIONAL_FORWARDER = 'ds:CreateConditionalForwarder',
  CREATE_DIRECTORY = 'ds:CreateDirectory',
  CREATE_IDENTITY_POOL_DIRECTORY = 'ds:CreateIdentityPoolDirectory',
  CREATE_LOG_SUBSCRIPTION = 'ds:CreateLogSubscription',
  CREATE_MICROSOFT_AD = 'ds:CreateMicrosoftAD',
  CREATE_SNAPSHOT = 'ds:CreateSnapshot',
  CREATE_TRUST = 'ds:CreateTrust',
  DELETE_CONDITIONAL_FORWARDER = 'ds:DeleteConditionalForwarder',
  DELETE_DIRECTORY = 'ds:DeleteDirectory',
  DELETE_LOG_SUBSCRIPTION = 'ds:DeleteLogSubscription',
  DELETE_SNAPSHOT = 'ds:DeleteSnapshot',
  DELETE_TRUST = 'ds:DeleteTrust',
  DEREGISTER_CERTIFICATE = 'ds:DeregisterCertificate',
  DEREGISTER_EVENT_TOPIC = 'ds:DeregisterEventTopic',
  DESCRIBE_CERTIFICATE = 'ds:DescribeCertificate',
  DESCRIBE_CONDITIONAL_FORWARDERS = 'ds:DescribeConditionalForwarders',
  DESCRIBE_DIRECTORIES = 'ds:DescribeDirectories',
  DESCRIBE_DOMAIN_CONTROLLERS = 'ds:DescribeDomainControllers',
  DESCRIBE_EVENT_TOPICS = 'ds:DescribeEventTopics',
  DESCRIBE_LDAPS_SETTINGS = 'ds:DescribeLDAPSSettings',
  DESCRIBE_SHARED_DIRECTORIES = 'ds:DescribeSharedDirectories',
  DESCRIBE_SNAPSHOTS = 'ds:DescribeSnapshots',
  DESCRIBE_TRUSTS = 'ds:DescribeTrusts',
  DISABLE_LDAPS = 'ds:DisableLDAPS',
  DISABLE_RADIUS = 'ds:DisableRadius',
  DISABLE_SSO = 'ds:DisableSso',
  ENABLE_LDAPS = 'ds:EnableLDAPS',
  ENABLE_RADIUS = 'ds:EnableRadius',
  ENABLE_SSO = 'ds:EnableSso',
  GET_AUTHORIZED_APPLICATION_DETAILS = 'ds:GetAuthorizedApplicationDetails',
  GET_DIRECTORY_LIMITS = 'ds:GetDirectoryLimits',
  GET_SNAPSHOT_LIMITS = 'ds:GetSnapshotLimits',
  LIST_AUTHORIZED_APPLICATIONS = 'ds:ListAuthorizedApplications',
  LIST_CERTIFICATES = 'ds:ListCertificates',
  LIST_IP_ROUTES = 'ds:ListIpRoutes',
  LIST_LOG_SUBSCRIPTIONS = 'ds:ListLogSubscriptions',
  LIST_SCHEMA_EXTENSIONS = 'ds:ListSchemaExtensions',
  LIST_TAGS_FOR_RESOURCE = 'ds:ListTagsForResource',
  REGISTER_CERTIFICATE = 'ds:RegisterCertificate',
  REGISTER_EVENT_TOPIC = 'ds:RegisterEventTopic',
  REJECT_SHARED_DIRECTORY = 'ds:RejectSharedDirectory',
  REMOVE_IP_ROUTES = 'ds:RemoveIpRoutes',
  REMOVE_TAGS_FROM_RESOURCE = 'ds:RemoveTagsFromResource',
  RESET_USER_PASSWORD = 'ds:ResetUserPassword',
  RESTORE_FROM_SNAPSHOT = 'ds:RestoreFromSnapshot',
  SHARE_DIRECTORY = 'ds:ShareDirectory',
  START_SCHEMA_EXTENSION = 'ds:StartSchemaExtension',
  UNAUTHORIZE_APPLICATION = 'ds:UnauthorizeApplication',
  UNSHARE_DIRECTORY = 'ds:UnshareDirectory',
  UPDATE_CONDITIONAL_FORWARDER = 'ds:UpdateConditionalForwarder',
  UPDATE_NUMBER_OF_DOMAIN_CONTROLLERS = 'ds:UpdateNumberOfDomainControllers',
  UPDATE_RADIUS = 'ds:UpdateRadius',
  UPDATE_TRUST = 'ds:UpdateTrust',
  VERIFY_TRUST = 'ds:VerifyTrust',
}
export enum IOT_SITEWISE {
  ASSOCIATE_ASSETS = 'iotsitewise:AssociateAssets',
  BATCH_ASSOCIATE_PROJECT_ASSETS = 'iotsitewise:BatchAssociateProjectAssets',
  BATCH_DISASSOCIATE_PROJECT_ASSETS = 'iotsitewise:BatchDisassociateProjectAssets',
  BATCH_PUT_ASSET_PROPERTY_VALUE = 'iotsitewise:BatchPutAssetPropertyValue',
  CREATE_ACCESS_POLICY = 'iotsitewise:CreateAccessPolicy',
  CREATE_ASSET = 'iotsitewise:CreateAsset',
  CREATE_ASSET_MODEL = 'iotsitewise:CreateAssetModel',
  CREATE_DASHBOARD = 'iotsitewise:CreateDashboard',
  CREATE_GATEWAY = 'iotsitewise:CreateGateway',
  CREATE_PORTAL = 'iotsitewise:CreatePortal',
  CREATE_PROJECT = 'iotsitewise:CreateProject',
  DELETE_ACCESS_POLICY = 'iotsitewise:DeleteAccessPolicy',
  DELETE_ASSET = 'iotsitewise:DeleteAsset',
  DELETE_ASSET_MODEL = 'iotsitewise:DeleteAssetModel',
  DELETE_DASHBOARD = 'iotsitewise:DeleteDashboard',
  DELETE_GATEWAY = 'iotsitewise:DeleteGateway',
  DELETE_PORTAL = 'iotsitewise:DeletePortal',
  DELETE_PROJECT = 'iotsitewise:DeleteProject',
  DESCRIBE_ACCESS_POLICY = 'iotsitewise:DescribeAccessPolicy',
  DESCRIBE_ASSET = 'iotsitewise:DescribeAsset',
  DESCRIBE_ASSET_MODEL = 'iotsitewise:DescribeAssetModel',
  DESCRIBE_ASSET_PROPERTY = 'iotsitewise:DescribeAssetProperty',
  DESCRIBE_DASHBOARD = 'iotsitewise:DescribeDashboard',
  DESCRIBE_GATEWAY = 'iotsitewise:DescribeGateway',
  DESCRIBE_GATEWAY_CAPABILITY_CONFIGURATION = 'iotsitewise:DescribeGatewayCapabilityConfiguration',
  DESCRIBE_LOGGING_OPTIONS = 'iotsitewise:DescribeLoggingOptions',
  DESCRIBE_PORTAL = 'iotsitewise:DescribePortal',
  DESCRIBE_PROJECT = 'iotsitewise:DescribeProject',
  DISASSOCIATE_ASSETS = 'iotsitewise:DisassociateAssets',
  GET_ASSET_PROPERTY_AGGREGATES = 'iotsitewise:GetAssetPropertyAggregates',
  GET_ASSET_PROPERTY_VALUE = 'iotsitewise:GetAssetPropertyValue',
  GET_ASSET_PROPERTY_VALUE_HISTORY = 'iotsitewise:GetAssetPropertyValueHistory',
  LIST_ACCESS_POLICIES = 'iotsitewise:ListAccessPolicies',
  LIST_ASSET_MODELS = 'iotsitewise:ListAssetModels',
  LIST_ASSETS = 'iotsitewise:ListAssets',
  LIST_ASSOCIATED_ASSETS = 'iotsitewise:ListAssociatedAssets',
  LIST_DASHBOARDS = 'iotsitewise:ListDashboards',
  LIST_GATEWAYS = 'iotsitewise:ListGateways',
  LIST_PORTALS = 'iotsitewise:ListPortals',
  LIST_PROJECT_ASSETS = 'iotsitewise:ListProjectAssets',
  LIST_PROJECTS = 'iotsitewise:ListProjects',
  LIST_TAGS_FOR_RESOURCE = 'iotsitewise:ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'iotsitewise:PutLoggingOptions',
  TAG_RESOURCE = 'iotsitewise:TagResource',
  UNTAG_RESOURCE = 'iotsitewise:UntagResource',
  UPDATE_ACCESS_POLICY = 'iotsitewise:UpdateAccessPolicy',
  UPDATE_ASSET = 'iotsitewise:UpdateAsset',
  UPDATE_ASSET_MODEL = 'iotsitewise:UpdateAssetModel',
  UPDATE_ASSET_PROPERTY = 'iotsitewise:UpdateAssetProperty',
  UPDATE_DASHBOARD = 'iotsitewise:UpdateDashboard',
  UPDATE_GATEWAY = 'iotsitewise:UpdateGateway',
  UPDATE_GATEWAY_CAPABILITY_CONFIGURATION = 'iotsitewise:UpdateGatewayCapabilityConfiguration',
  UPDATE_PORTAL = 'iotsitewise:UpdatePortal',
  UPDATE_PROJECT = 'iotsitewise:UpdateProject',
}
export enum CODESTAR_NOTIFICATIONS {
  CREATE_NOTIFICATION_RULE = 'codestar-notifications:CreateNotificationRule',
  DELETE_NOTIFICATION_RULE = 'codestar-notifications:DeleteNotificationRule',
  DELETE_TARGET = 'codestar-notifications:DeleteTarget',
  DESCRIBE_NOTIFICATION_RULE = 'codestar-notifications:DescribeNotificationRule',
  LIST_EVENT_TYPES = 'codestar-notifications:ListEventTypes',
  LIST_NOTIFICATION_RULES = 'codestar-notifications:ListNotificationRules',
  LIST_TAGS_FOR_RESOURCE = 'codestar-notifications:ListTagsForResource',
  LIST_TARGETS = 'codestar-notifications:ListTargets',
  SUBSCRIBE = 'codestar-notifications:Subscribe',
  TAG_RESOURCE = 'codestar-notifications:TagResource',
  UNSUBSCRIBE = 'codestar-notifications:Unsubscribe',
  UNTAG_RESOURCE = 'codestar-notifications:UntagResource',
  UPDATE_NOTIFICATION_RULE = 'codestar-notifications:UpdateNotificationRule',
}
export enum FRAUD_DETECTOR {
  BATCH_CREATE_VARIABLE = 'frauddetector:BatchCreateVariable',
  BATCH_GET_VARIABLE = 'frauddetector:BatchGetVariable',
  CREATE_DETECTOR_VERSION = 'frauddetector:CreateDetectorVersion',
  CREATE_MODEL = 'frauddetector:CreateModel',
  CREATE_MODEL_VERSION = 'frauddetector:CreateModelVersion',
  CREATE_RULE = 'frauddetector:CreateRule',
  CREATE_VARIABLE = 'frauddetector:CreateVariable',
  DELETE_DETECTOR = 'frauddetector:DeleteDetector',
  DELETE_DETECTOR_VERSION = 'frauddetector:DeleteDetectorVersion',
  DELETE_EVENT = 'frauddetector:DeleteEvent',
  DELETE_RULE = 'frauddetector:DeleteRule',
  DESCRIBE_DETECTOR = 'frauddetector:DescribeDetector',
  DESCRIBE_MODEL_VERSIONS = 'frauddetector:DescribeModelVersions',
  GET_DETECTOR_VERSION = 'frauddetector:GetDetectorVersion',
  GET_DETECTORS = 'frauddetector:GetDetectors',
  GET_ENTITY_TYPES = 'frauddetector:GetEntityTypes',
  GET_EVENT_PREDICTION = 'frauddetector:GetEventPrediction',
  GET_EVENT_TYPES = 'frauddetector:GetEventTypes',
  GET_EXTERNAL_MODELS = 'frauddetector:GetExternalModels',
  GET_KMS_ENCRYPTION_KEY = 'frauddetector:GetKMSEncryptionKey',
  GET_LABELS = 'frauddetector:GetLabels',
  GET_MODEL_VERSION = 'frauddetector:GetModelVersion',
  GET_MODELS = 'frauddetector:GetModels',
  GET_OUTCOMES = 'frauddetector:GetOutcomes',
  GET_RULES = 'frauddetector:GetRules',
  GET_VARIABLES = 'frauddetector:GetVariables',
  LIST_TAGS_FOR_RESOURCE = 'frauddetector:ListTagsForResource',
  PUT_DETECTOR = 'frauddetector:PutDetector',
  PUT_ENTITY_TYPE = 'frauddetector:PutEntityType',
  PUT_EVENT_TYPE = 'frauddetector:PutEventType',
  PUT_EXTERNAL_MODEL = 'frauddetector:PutExternalModel',
  PUT_KMS_ENCRYPTION_KEY = 'frauddetector:PutKMSEncryptionKey',
  PUT_LABEL = 'frauddetector:PutLabel',
  PUT_OUTCOME = 'frauddetector:PutOutcome',
  TAG_RESOURCE = 'frauddetector:TagResource',
  UNTAG_RESOURCE = 'frauddetector:UntagResource',
  UPDATE_DETECTOR_VERSION = 'frauddetector:UpdateDetectorVersion',
  UPDATE_DETECTOR_VERSION_METADATA = 'frauddetector:UpdateDetectorVersionMetadata',
  UPDATE_DETECTOR_VERSION_STATUS = 'frauddetector:UpdateDetectorVersionStatus',
  UPDATE_MODEL = 'frauddetector:UpdateModel',
  UPDATE_MODEL_VERSION = 'frauddetector:UpdateModelVersion',
  UPDATE_MODEL_VERSION_STATUS = 'frauddetector:UpdateModelVersionStatus',
  UPDATE_RULE_METADATA = 'frauddetector:UpdateRuleMetadata',
  UPDATE_RULE_VERSION = 'frauddetector:UpdateRuleVersion',
  UPDATE_VARIABLE = 'frauddetector:UpdateVariable',
}
export enum WORKLINK {
  ASSOCIATE_DOMAIN = 'worklink:AssociateDomain',
  ASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'worklink:AssociateWebsiteAuthorizationProvider',
  ASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:AssociateWebsiteCertificateAuthority',
  CREATE_FLEET = 'worklink:CreateFleet',
  DELETE_FLEET = 'worklink:DeleteFleet',
  DESCRIBE_AUDIT_STREAM_CONFIGURATION = 'worklink:DescribeAuditStreamConfiguration',
  DESCRIBE_COMPANY_NETWORK_CONFIGURATION = 'worklink:DescribeCompanyNetworkConfiguration',
  DESCRIBE_DEVICE = 'worklink:DescribeDevice',
  DESCRIBE_DEVICE_POLICY_CONFIGURATION = 'worklink:DescribeDevicePolicyConfiguration',
  DESCRIBE_DOMAIN = 'worklink:DescribeDomain',
  DESCRIBE_FLEET_METADATA = 'worklink:DescribeFleetMetadata',
  DESCRIBE_IDENTITY_PROVIDER_CONFIGURATION = 'worklink:DescribeIdentityProviderConfiguration',
  DESCRIBE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:DescribeWebsiteCertificateAuthority',
  DISASSOCIATE_DOMAIN = 'worklink:DisassociateDomain',
  DISASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'worklink:DisassociateWebsiteAuthorizationProvider',
  DISASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:DisassociateWebsiteCertificateAuthority',
  LIST_DEVICES = 'worklink:ListDevices',
  LIST_DOMAINS = 'worklink:ListDomains',
  LIST_FLEETS = 'worklink:ListFleets',
  LIST_TAGS_FOR_RESOURCE = 'worklink:ListTagsForResource',
  LIST_WEBSITE_AUTHORIZATION_PROVIDERS = 'worklink:ListWebsiteAuthorizationProviders',
  LIST_WEBSITE_CERTIFICATE_AUTHORITIES = 'worklink:ListWebsiteCertificateAuthorities',
  RESTORE_DOMAIN_ACCESS = 'worklink:RestoreDomainAccess',
  REVOKE_DOMAIN_ACCESS = 'worklink:RevokeDomainAccess',
  SIGN_OUT_USER = 'worklink:SignOutUser',
  TAG_RESOURCE = 'worklink:TagResource',
  UNTAG_RESOURCE = 'worklink:UntagResource',
  UPDATE_AUDIT_STREAM_CONFIGURATION = 'worklink:UpdateAuditStreamConfiguration',
  UPDATE_COMPANY_NETWORK_CONFIGURATION = 'worklink:UpdateCompanyNetworkConfiguration',
  UPDATE_DEVICE_POLICY_CONFIGURATION = 'worklink:UpdateDevicePolicyConfiguration',
  UPDATE_DOMAIN_METADATA = 'worklink:UpdateDomainMetadata',
  UPDATE_FLEET_METADATA = 'worklink:UpdateFleetMetadata',
  UPDATE_IDENTITY_PROVIDER_CONFIGURATION = 'worklink:UpdateIdentityProviderConfiguration',
}
export enum CODESTAR_CONNECTIONS {
  CREATE_CONNECTION = 'codestar-connections:CreateConnection',
  DELETE_CONNECTION = 'codestar-connections:DeleteConnection',
  GET_CONNECTION = 'codestar-connections:GetConnection',
  GET_INDIVIDUAL_ACCESS_TOKEN = 'codestar-connections:GetIndividualAccessToken',
  GET_INSTALLATION_URL = 'codestar-connections:GetInstallationUrl',
  LIST_CONNECTIONS = 'codestar-connections:ListConnections',
  LIST_INSTALLATION_TARGETS = 'codestar-connections:ListInstallationTargets',
  LIST_TAGS_FOR_RESOURCE = 'codestar-connections:ListTagsForResource',
  PASS_CONNECTION = 'codestar-connections:PassConnection',
  START_O_AUTH_HANDSHAKE = 'codestar-connections:StartOAuthHandshake',
  TAG_RESOURCE = 'codestar-connections:TagResource',
  UNTAG_RESOURCE = 'codestar-connections:UntagResource',
  UPDATE_CONNECTION_INSTALLATION = 'codestar-connections:UpdateConnectionInstallation',
  USE_CONNECTION = 'codestar-connections:UseConnection',
}
export enum WORKSPACES {
  ASSOCIATE_IP_GROUPS = 'workspaces:AssociateIpGroups',
  AUTHORIZE_IP_RULES = 'workspaces:AuthorizeIpRules',
  CREATE_IP_GROUP = 'workspaces:CreateIpGroup',
  CREATE_TAGS = 'workspaces:CreateTags',
  CREATE_WORKSPACES = 'workspaces:CreateWorkspaces',
  DELETE_IP_GROUP = 'workspaces:DeleteIpGroup',
  DELETE_TAGS = 'workspaces:DeleteTags',
  DELETE_WORKSPACE_IMAGE = 'workspaces:DeleteWorkspaceImage',
  DESCRIBE_ACCOUNT = 'workspaces:DescribeAccount',
  DESCRIBE_ACCOUNT_MODIFICATIONS = 'workspaces:DescribeAccountModifications',
  DESCRIBE_CLIENT_PROPERTIES = 'workspaces:DescribeClientProperties',
  DESCRIBE_IP_GROUPS = 'workspaces:DescribeIpGroups',
  DESCRIBE_TAGS = 'workspaces:DescribeTags',
  DESCRIBE_WORKSPACE_BUNDLES = 'workspaces:DescribeWorkspaceBundles',
  DESCRIBE_WORKSPACE_DIRECTORIES = 'workspaces:DescribeWorkspaceDirectories',
  DESCRIBE_WORKSPACE_IMAGES = 'workspaces:DescribeWorkspaceImages',
  DESCRIBE_WORKSPACES = 'workspaces:DescribeWorkspaces',
  DESCRIBE_WORKSPACES_CONNECTION_STATUS = 'workspaces:DescribeWorkspacesConnectionStatus',
  DISASSOCIATE_IP_GROUPS = 'workspaces:DisassociateIpGroups',
  IMPORT_WORKSPACE_IMAGE = 'workspaces:ImportWorkspaceImage',
  LIST_AVAILABLE_MANAGEMENT_CIDR_RANGES = 'workspaces:ListAvailableManagementCidrRanges',
  MODIFY_ACCOUNT = 'workspaces:ModifyAccount',
  MODIFY_CLIENT_PROPERTIES = 'workspaces:ModifyClientProperties',
  MODIFY_WORKSPACE_PROPERTIES = 'workspaces:ModifyWorkspaceProperties',
  MODIFY_WORKSPACE_STATE = 'workspaces:ModifyWorkspaceState',
  REBOOT_WORKSPACES = 'workspaces:RebootWorkspaces',
  REBUILD_WORKSPACES = 'workspaces:RebuildWorkspaces',
  REVOKE_IP_RULES = 'workspaces:RevokeIpRules',
  START_WORKSPACES = 'workspaces:StartWorkspaces',
  STOP_WORKSPACES = 'workspaces:StopWorkspaces',
  TERMINATE_WORKSPACES = 'workspaces:TerminateWorkspaces',
  UPDATE_RULES_OF_IP_GROUP = 'workspaces:UpdateRulesOfIpGroup',
}
export enum CHIME {
  ACCEPT_DELEGATE = 'chime:AcceptDelegate',
  ACTIVATE_USERS = 'chime:ActivateUsers',
  ADD_DOMAIN = 'chime:AddDomain',
  ADD_OR_UPDATE_GROUPS = 'chime:AddOrUpdateGroups',
  ASSOCIATE_PHONE_NUMBER_WITH_USER = 'chime:AssociatePhoneNumberWithUser',
  ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR = 'chime:AssociatePhoneNumbersWithVoiceConnector',
  ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR_GROUP = 'chime:AssociatePhoneNumbersWithVoiceConnectorGroup',
  ASSOCIATE_SIGNIN_DELEGATE_GROUPS_WITH_ACCOUNT = 'chime:AssociateSigninDelegateGroupsWithAccount',
  AUTHORIZE_DIRECTORY = 'chime:AuthorizeDirectory',
  BATCH_CREATE_ATTENDEE = 'chime:BatchCreateAttendee',
  BATCH_CREATE_ROOM_MEMBERSHIP = 'chime:BatchCreateRoomMembership',
  BATCH_DELETE_PHONE_NUMBER = 'chime:BatchDeletePhoneNumber',
  BATCH_SUSPEND_USER = 'chime:BatchSuspendUser',
  BATCH_UNSUSPEND_USER = 'chime:BatchUnsuspendUser',
  BATCH_UPDATE_PHONE_NUMBER = 'chime:BatchUpdatePhoneNumber',
  BATCH_UPDATE_USER = 'chime:BatchUpdateUser',
  CONNECT_DIRECTORY = 'chime:ConnectDirectory',
  CREATE_ACCOUNT = 'chime:CreateAccount',
  CREATE_API_KEY = 'chime:CreateApiKey',
  CREATE_ATTENDEE = 'chime:CreateAttendee',
  CREATE_BOT = 'chime:CreateBot',
  CREATE_BOT_MEMBERSHIP = 'chime:CreateBotMembership',
  CREATE_CDR_BUCKET = 'chime:CreateCDRBucket',
  CREATE_MEETING = 'chime:CreateMeeting',
  CREATE_MEETING_WITH_ATTENDEES = 'chime:CreateMeetingWithAttendees',
  CREATE_PHONE_NUMBER_ORDER = 'chime:CreatePhoneNumberOrder',
  CREATE_PROXY_SESSION = 'chime:CreateProxySession',
  CREATE_ROOM = 'chime:CreateRoom',
  CREATE_ROOM_MEMBERSHIP = 'chime:CreateRoomMembership',
  CREATE_USER = 'chime:CreateUser',
  CREATE_VOICE_CONNECTOR = 'chime:CreateVoiceConnector',
  CREATE_VOICE_CONNECTOR_GROUP = 'chime:CreateVoiceConnectorGroup',
  DELETE_ACCOUNT = 'chime:DeleteAccount',
  DELETE_ACCOUNT_OPEN_ID_CONFIG = 'chime:DeleteAccountOpenIdConfig',
  DELETE_API_KEY = 'chime:DeleteApiKey',
  DELETE_ATTENDEE = 'chime:DeleteAttendee',
  DELETE_CDR_BUCKET = 'chime:DeleteCDRBucket',
  DELETE_DELEGATE = 'chime:DeleteDelegate',
  DELETE_DOMAIN = 'chime:DeleteDomain',
  DELETE_EVENTS_CONFIGURATION = 'chime:DeleteEventsConfiguration',
  DELETE_GROUPS = 'chime:DeleteGroups',
  DELETE_MEETING = 'chime:DeleteMeeting',
  DELETE_PHONE_NUMBER = 'chime:DeletePhoneNumber',
  DELETE_PROXY_SESSION = 'chime:DeleteProxySession',
  DELETE_ROOM = 'chime:DeleteRoom',
  DELETE_ROOM_MEMBERSHIP = 'chime:DeleteRoomMembership',
  DELETE_VOICE_CONNECTOR = 'chime:DeleteVoiceConnector',
  DELETE_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:DeleteVoiceConnectorEmergencyCallingConfiguration',
  DELETE_VOICE_CONNECTOR_GROUP = 'chime:DeleteVoiceConnectorGroup',
  DELETE_VOICE_CONNECTOR_ORIGINATION = 'chime:DeleteVoiceConnectorOrigination',
  DELETE_VOICE_CONNECTOR_PROXY = 'chime:DeleteVoiceConnectorProxy',
  DELETE_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:DeleteVoiceConnectorStreamingConfiguration',
  DELETE_VOICE_CONNECTOR_TERMINATION = 'chime:DeleteVoiceConnectorTermination',
  DELETE_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:DeleteVoiceConnectorTerminationCredentials',
  DISASSOCIATE_PHONE_NUMBER_FROM_USER = 'chime:DisassociatePhoneNumberFromUser',
  DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR = 'chime:DisassociatePhoneNumbersFromVoiceConnector',
  DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR_GROUP = 'chime:DisassociatePhoneNumbersFromVoiceConnectorGroup',
  DISASSOCIATE_SIGNIN_DELEGATE_GROUPS_FROM_ACCOUNT = 'chime:DisassociateSigninDelegateGroupsFromAccount',
  DISCONNECT_DIRECTORY = 'chime:DisconnectDirectory',
  GET_ACCOUNT = 'chime:GetAccount',
  GET_ACCOUNT_RESOURCE = 'chime:GetAccountResource',
  GET_ACCOUNT_SETTINGS = 'chime:GetAccountSettings',
  GET_ACCOUNT_WITH_OPEN_ID_CONFIG = 'chime:GetAccountWithOpenIdConfig',
  GET_ATTENDEE = 'chime:GetAttendee',
  GET_BOT = 'chime:GetBot',
  GET_CDR_BUCKET = 'chime:GetCDRBucket',
  GET_DOMAIN = 'chime:GetDomain',
  GET_EVENTS_CONFIGURATION = 'chime:GetEventsConfiguration',
  GET_GLOBAL_SETTINGS = 'chime:GetGlobalSettings',
  GET_MEETING = 'chime:GetMeeting',
  GET_MEETING_DETAIL = 'chime:GetMeetingDetail',
  GET_PHONE_NUMBER = 'chime:GetPhoneNumber',
  GET_PHONE_NUMBER_ORDER = 'chime:GetPhoneNumberOrder',
  GET_PHONE_NUMBER_SETTINGS = 'chime:GetPhoneNumberSettings',
  GET_PROXY_SESSION = 'chime:GetProxySession',
  GET_RETENTION_SETTINGS = 'chime:GetRetentionSettings',
  GET_ROOM = 'chime:GetRoom',
  GET_TELEPHONY_LIMITS = 'chime:GetTelephonyLimits',
  GET_USER = 'chime:GetUser',
  GET_USER_ACTIVITY_REPORT_DATA = 'chime:GetUserActivityReportData',
  GET_USER_BY_EMAIL = 'chime:GetUserByEmail',
  GET_USER_SETTINGS = 'chime:GetUserSettings',
  GET_VOICE_CONNECTOR = 'chime:GetVoiceConnector',
  GET_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:GetVoiceConnectorEmergencyCallingConfiguration',
  GET_VOICE_CONNECTOR_GROUP = 'chime:GetVoiceConnectorGroup',
  GET_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'chime:GetVoiceConnectorLoggingConfiguration',
  GET_VOICE_CONNECTOR_ORIGINATION = 'chime:GetVoiceConnectorOrigination',
  GET_VOICE_CONNECTOR_PROXY = 'chime:GetVoiceConnectorProxy',
  GET_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:GetVoiceConnectorStreamingConfiguration',
  GET_VOICE_CONNECTOR_TERMINATION = 'chime:GetVoiceConnectorTermination',
  GET_VOICE_CONNECTOR_TERMINATION_HEALTH = 'chime:GetVoiceConnectorTerminationHealth',
  INVITE_DELEGATE = 'chime:InviteDelegate',
  INVITE_USERS = 'chime:InviteUsers',
  INVITE_USERS_FROM_PROVIDER = 'chime:InviteUsersFromProvider',
  LIST_ACCOUNT_USAGE_REPORT_DATA = 'chime:ListAccountUsageReportData',
  LIST_ACCOUNTS = 'chime:ListAccounts',
  LIST_API_KEYS = 'chime:ListApiKeys',
  LIST_ATTENDEE_TAGS = 'chime:ListAttendeeTags',
  LIST_ATTENDEES = 'chime:ListAttendees',
  LIST_BOTS = 'chime:ListBots',
  LIST_CDR_BUCKET = 'chime:ListCDRBucket',
  LIST_CALLING_REGIONS = 'chime:ListCallingRegions',
  LIST_DELEGATES = 'chime:ListDelegates',
  LIST_DIRECTORIES = 'chime:ListDirectories',
  LIST_DOMAINS = 'chime:ListDomains',
  LIST_GROUPS = 'chime:ListGroups',
  LIST_MEETING_EVENTS = 'chime:ListMeetingEvents',
  LIST_MEETING_TAGS = 'chime:ListMeetingTags',
  LIST_MEETINGS = 'chime:ListMeetings',
  LIST_MEETINGS_REPORT_DATA = 'chime:ListMeetingsReportData',
  LIST_PHONE_NUMBER_ORDERS = 'chime:ListPhoneNumberOrders',
  LIST_PHONE_NUMBERS = 'chime:ListPhoneNumbers',
  LIST_PROXY_SESSIONS = 'chime:ListProxySessions',
  LIST_ROOM_MEMBERSHIPS = 'chime:ListRoomMemberships',
  LIST_ROOMS = 'chime:ListRooms',
  LIST_TAGS_FOR_RESOURCE = 'chime:ListTagsForResource',
  LIST_USERS = 'chime:ListUsers',
  LIST_VOICE_CONNECTOR_GROUPS = 'chime:ListVoiceConnectorGroups',
  LIST_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:ListVoiceConnectorTerminationCredentials',
  LIST_VOICE_CONNECTORS = 'chime:ListVoiceConnectors',
  LOGOUT_USER = 'chime:LogoutUser',
  PUT_EVENTS_CONFIGURATION = 'chime:PutEventsConfiguration',
  PUT_RETENTION_SETTINGS = 'chime:PutRetentionSettings',
  PUT_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:PutVoiceConnectorEmergencyCallingConfiguration',
  PUT_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'chime:PutVoiceConnectorLoggingConfiguration',
  PUT_VOICE_CONNECTOR_ORIGINATION = 'chime:PutVoiceConnectorOrigination',
  PUT_VOICE_CONNECTOR_PROXY = 'chime:PutVoiceConnectorProxy',
  PUT_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:PutVoiceConnectorStreamingConfiguration',
  PUT_VOICE_CONNECTOR_TERMINATION = 'chime:PutVoiceConnectorTermination',
  PUT_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:PutVoiceConnectorTerminationCredentials',
  REDACT_CONVERSATION_MESSAGE = 'chime:RedactConversationMessage',
  REDACT_ROOM_MESSAGE = 'chime:RedactRoomMessage',
  REGENERATE_SECURITY_TOKEN = 'chime:RegenerateSecurityToken',
  RENAME_ACCOUNT = 'chime:RenameAccount',
  RENEW_DELEGATE = 'chime:RenewDelegate',
  RESET_ACCOUNT_RESOURCE = 'chime:ResetAccountResource',
  RESET_PERSONAL_PIN = 'chime:ResetPersonalPIN',
  RESTORE_PHONE_NUMBER = 'chime:RestorePhoneNumber',
  RETRIEVE_DATA_EXPORTS = 'chime:RetrieveDataExports',
  SEARCH_AVAILABLE_PHONE_NUMBERS = 'chime:SearchAvailablePhoneNumbers',
  START_DATA_EXPORT = 'chime:StartDataExport',
  SUBMIT_SUPPORT_REQUEST = 'chime:SubmitSupportRequest',
  SUSPEND_USERS = 'chime:SuspendUsers',
  TAG_ATTENDEE = 'chime:TagAttendee',
  TAG_MEETING = 'chime:TagMeeting',
  TAG_RESOURCE = 'chime:TagResource',
  UNAUTHORIZE_DIRECTORY = 'chime:UnauthorizeDirectory',
  UNTAG_ATTENDEE = 'chime:UntagAttendee',
  UNTAG_MEETING = 'chime:UntagMeeting',
  UNTAG_RESOURCE = 'chime:UntagResource',
  UPDATE_ACCOUNT = 'chime:UpdateAccount',
  UPDATE_ACCOUNT_OPEN_ID_CONFIG = 'chime:UpdateAccountOpenIdConfig',
  UPDATE_ACCOUNT_RESOURCE = 'chime:UpdateAccountResource',
  UPDATE_ACCOUNT_SETTINGS = 'chime:UpdateAccountSettings',
  UPDATE_BOT = 'chime:UpdateBot',
  UPDATE_CDR_SETTINGS = 'chime:UpdateCDRSettings',
  UPDATE_GLOBAL_SETTINGS = 'chime:UpdateGlobalSettings',
  UPDATE_PHONE_NUMBER = 'chime:UpdatePhoneNumber',
  UPDATE_PHONE_NUMBER_SETTINGS = 'chime:UpdatePhoneNumberSettings',
  UPDATE_PROXY_SESSION = 'chime:UpdateProxySession',
  UPDATE_ROOM = 'chime:UpdateRoom',
  UPDATE_ROOM_MEMBERSHIP = 'chime:UpdateRoomMembership',
  UPDATE_SUPPORTED_LICENSES = 'chime:UpdateSupportedLicenses',
  UPDATE_USER = 'chime:UpdateUser',
  UPDATE_USER_LICENSES = 'chime:UpdateUserLicenses',
  UPDATE_USER_SETTINGS = 'chime:UpdateUserSettings',
  UPDATE_VOICE_CONNECTOR = 'chime:UpdateVoiceConnector',
  UPDATE_VOICE_CONNECTOR_GROUP = 'chime:UpdateVoiceConnectorGroup',
  VALIDATE_ACCOUNT_RESOURCE = 'chime:ValidateAccountResource',
}
export enum ELASTICACHE {
  ADD_TAGS_TO_RESOURCE = 'elasticache:AddTagsToResource',
  AUTHORIZE_CACHE_SECURITY_GROUP_INGRESS = 'elasticache:AuthorizeCacheSecurityGroupIngress',
  BATCH_APPLY_UPDATE_ACTION = 'elasticache:BatchApplyUpdateAction',
  BATCH_STOP_UPDATE_ACTION = 'elasticache:BatchStopUpdateAction',
  COMPLETE_MIGRATION = 'elasticache:CompleteMigration',
  COPY_SNAPSHOT = 'elasticache:CopySnapshot',
  CREATE_CACHE_CLUSTER = 'elasticache:CreateCacheCluster',
  CREATE_CACHE_PARAMETER_GROUP = 'elasticache:CreateCacheParameterGroup',
  CREATE_CACHE_SECURITY_GROUP = 'elasticache:CreateCacheSecurityGroup',
  CREATE_CACHE_SUBNET_GROUP = 'elasticache:CreateCacheSubnetGroup',
  CREATE_GLOBAL_REPLICATION_GROUP = 'elasticache:CreateGlobalReplicationGroup',
  CREATE_REPLICATION_GROUP = 'elasticache:CreateReplicationGroup',
  CREATE_SNAPSHOT = 'elasticache:CreateSnapshot',
  DECREASE_NODE_GROUPS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:DecreaseNodeGroupsInGlobalReplicationGroup',
  DECREASE_REPLICA_COUNT = 'elasticache:DecreaseReplicaCount',
  DELETE_CACHE_CLUSTER = 'elasticache:DeleteCacheCluster',
  DELETE_CACHE_PARAMETER_GROUP = 'elasticache:DeleteCacheParameterGroup',
  DELETE_CACHE_SECURITY_GROUP = 'elasticache:DeleteCacheSecurityGroup',
  DELETE_CACHE_SUBNET_GROUP = 'elasticache:DeleteCacheSubnetGroup',
  DELETE_GLOBAL_REPLICATION_GROUP = 'elasticache:DeleteGlobalReplicationGroup',
  DELETE_REPLICATION_GROUP = 'elasticache:DeleteReplicationGroup',
  DELETE_SNAPSHOT = 'elasticache:DeleteSnapshot',
  DESCRIBE_CACHE_CLUSTERS = 'elasticache:DescribeCacheClusters',
  DESCRIBE_CACHE_ENGINE_VERSIONS = 'elasticache:DescribeCacheEngineVersions',
  DESCRIBE_CACHE_PARAMETER_GROUPS = 'elasticache:DescribeCacheParameterGroups',
  DESCRIBE_CACHE_PARAMETERS = 'elasticache:DescribeCacheParameters',
  DESCRIBE_CACHE_SECURITY_GROUPS = 'elasticache:DescribeCacheSecurityGroups',
  DESCRIBE_CACHE_SUBNET_GROUPS = 'elasticache:DescribeCacheSubnetGroups',
  DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'elasticache:DescribeEngineDefaultParameters',
  DESCRIBE_EVENTS = 'elasticache:DescribeEvents',
  DESCRIBE_GLOBAL_REPLICATION_GROUPS = 'elasticache:DescribeGlobalReplicationGroups',
  DESCRIBE_REPLICATION_GROUPS = 'elasticache:DescribeReplicationGroups',
  DESCRIBE_RESERVED_CACHE_NODES = 'elasticache:DescribeReservedCacheNodes',
  DESCRIBE_RESERVED_CACHE_NODES_OFFERINGS = 'elasticache:DescribeReservedCacheNodesOfferings',
  DESCRIBE_SERVICE_UPDATES = 'elasticache:DescribeServiceUpdates',
  DESCRIBE_SNAPSHOTS = 'elasticache:DescribeSnapshots',
  DESCRIBE_UPDATE_ACTIONS = 'elasticache:DescribeUpdateActions',
  DISASSOCIATE_GLOBAL_REPLICATION_GROUP = 'elasticache:DisassociateGlobalReplicationGroup',
  FAILOVER_GLOBAL_REPLICATION_GROUP = 'elasticache:FailoverGlobalReplicationGroup',
  INCREASE_NODE_GROUPS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:IncreaseNodeGroupsInGlobalReplicationGroup',
  INCREASE_REPLICA_COUNT = 'elasticache:IncreaseReplicaCount',
  LIST_ALLOWED_NODE_TYPE_MODIFICATIONS = 'elasticache:ListAllowedNodeTypeModifications',
  LIST_TAGS_FOR_RESOURCE = 'elasticache:ListTagsForResource',
  MODIFY_CACHE_CLUSTER = 'elasticache:ModifyCacheCluster',
  MODIFY_CACHE_PARAMETER_GROUP = 'elasticache:ModifyCacheParameterGroup',
  MODIFY_CACHE_SUBNET_GROUP = 'elasticache:ModifyCacheSubnetGroup',
  MODIFY_GLOBAL_REPLICATION_GROUP = 'elasticache:ModifyGlobalReplicationGroup',
  MODIFY_REPLICATION_GROUP = 'elasticache:ModifyReplicationGroup',
  MODIFY_REPLICATION_GROUP_SHARD_CONFIGURATION = 'elasticache:ModifyReplicationGroupShardConfiguration',
  PURCHASE_RESERVED_CACHE_NODES_OFFERING = 'elasticache:PurchaseReservedCacheNodesOffering',
  REBALANCE_SLOTS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:RebalanceSlotsInGlobalReplicationGroup',
  REBOOT_CACHE_CLUSTER = 'elasticache:RebootCacheCluster',
  REMOVE_TAGS_FROM_RESOURCE = 'elasticache:RemoveTagsFromResource',
  RESET_CACHE_PARAMETER_GROUP = 'elasticache:ResetCacheParameterGroup',
  REVOKE_CACHE_SECURITY_GROUP_INGRESS = 'elasticache:RevokeCacheSecurityGroupIngress',
  START_MIGRATION = 'elasticache:StartMigration',
  TEST_FAILOVER = 'elasticache:TestFailover',
}
export enum KINESIS_FIREHOSE {
  CREATE_DELIVERY_STREAM = 'firehose:CreateDeliveryStream',
  DELETE_DELIVERY_STREAM = 'firehose:DeleteDeliveryStream',
  DESCRIBE_DELIVERY_STREAM = 'firehose:DescribeDeliveryStream',
  LIST_DELIVERY_STREAMS = 'firehose:ListDeliveryStreams',
  LIST_TAGS_FOR_DELIVERY_STREAM = 'firehose:ListTagsForDeliveryStream',
  PUT_RECORD = 'firehose:PutRecord',
  PUT_RECORD_BATCH = 'firehose:PutRecordBatch',
  START_DELIVERY_STREAM_ENCRYPTION = 'firehose:StartDeliveryStreamEncryption',
  STOP_DELIVERY_STREAM_ENCRYPTION = 'firehose:StopDeliveryStreamEncryption',
  TAG_DELIVERY_STREAM = 'firehose:TagDeliveryStream',
  UNTAG_DELIVERY_STREAM = 'firehose:UntagDeliveryStream',
  UPDATE_DESTINATION = 'firehose:UpdateDestination',
}
export enum MECHANICAL_TURK {
  ACCEPT_QUALIFICATION_REQUEST = 'mechanicalturk:AcceptQualificationRequest',
  APPROVE_ASSIGNMENT = 'mechanicalturk:ApproveAssignment',
  ASSOCIATE_QUALIFICATION_WITH_WORKER = 'mechanicalturk:AssociateQualificationWithWorker',
  CREATE_ADDITIONAL_ASSIGNMENTS_FOR_HIT = 'mechanicalturk:CreateAdditionalAssignmentsForHIT',
  CREATE_HIT = 'mechanicalturk:CreateHIT',
  CREATE_HIT_TYPE = 'mechanicalturk:CreateHITType',
  CREATE_HIT_WITH_HIT_TYPE = 'mechanicalturk:CreateHITWithHITType',
  CREATE_QUALIFICATION_TYPE = 'mechanicalturk:CreateQualificationType',
  CREATE_WORKER_BLOCK = 'mechanicalturk:CreateWorkerBlock',
  DELETE_HIT = 'mechanicalturk:DeleteHIT',
  DELETE_QUALIFICATION_TYPE = 'mechanicalturk:DeleteQualificationType',
  DELETE_WORKER_BLOCK = 'mechanicalturk:DeleteWorkerBlock',
  DISASSOCIATE_QUALIFICATION_FROM_WORKER = 'mechanicalturk:DisassociateQualificationFromWorker',
  GET_ACCOUNT_BALANCE = 'mechanicalturk:GetAccountBalance',
  GET_ASSIGNMENT = 'mechanicalturk:GetAssignment',
  GET_FILE_UPLOAD_URL = 'mechanicalturk:GetFileUploadURL',
  GET_HIT = 'mechanicalturk:GetHIT',
  GET_QUALIFICATION_SCORE = 'mechanicalturk:GetQualificationScore',
  GET_QUALIFICATION_TYPE = 'mechanicalturk:GetQualificationType',
  LIST_ASSIGNMENTS_FOR_HIT = 'mechanicalturk:ListAssignmentsForHIT',
  LIST_BONUS_PAYMENTS = 'mechanicalturk:ListBonusPayments',
  LIST_HI_TS = 'mechanicalturk:ListHITs',
  LIST_HI_TS_FOR_QUALIFICATION_TYPE = 'mechanicalturk:ListHITsForQualificationType',
  LIST_QUALIFICATION_REQUESTS = 'mechanicalturk:ListQualificationRequests',
  LIST_QUALIFICATION_TYPES = 'mechanicalturk:ListQualificationTypes',
  LIST_REVIEW_POLICY_RESULTS_FOR_HIT = 'mechanicalturk:ListReviewPolicyResultsForHIT',
  LIST_REVIEWABLE_HI_TS = 'mechanicalturk:ListReviewableHITs',
  LIST_WORKER_BLOCKS = 'mechanicalturk:ListWorkerBlocks',
  LIST_WORKERS_WITH_QUALIFICATION_TYPE = 'mechanicalturk:ListWorkersWithQualificationType',
  NOTIFY_WORKERS = 'mechanicalturk:NotifyWorkers',
  REJECT_ASSIGNMENT = 'mechanicalturk:RejectAssignment',
  REJECT_QUALIFICATION_REQUEST = 'mechanicalturk:RejectQualificationRequest',
  SEND_BONUS = 'mechanicalturk:SendBonus',
  SEND_TEST_EVENT_NOTIFICATION = 'mechanicalturk:SendTestEventNotification',
  UPDATE_EXPIRATION_FOR_HIT = 'mechanicalturk:UpdateExpirationForHIT',
  UPDATE_HIT_REVIEW_STATUS = 'mechanicalturk:UpdateHITReviewStatus',
  UPDATE_HIT_TYPE_OF_HIT = 'mechanicalturk:UpdateHITTypeOfHIT',
  UPDATE_NOTIFICATION_SETTINGS = 'mechanicalturk:UpdateNotificationSettings',
  UPDATE_QUALIFICATION_TYPE = 'mechanicalturk:UpdateQualificationType',
}
export enum STORAGE_GATEWAY {
  ACTIVATE_GATEWAY = 'storagegateway:ActivateGateway',
  ADD_CACHE = 'storagegateway:AddCache',
  ADD_TAGS_TO_RESOURCE = 'storagegateway:AddTagsToResource',
  ADD_UPLOAD_BUFFER = 'storagegateway:AddUploadBuffer',
  ADD_WORKING_STORAGE = 'storagegateway:AddWorkingStorage',
  ATTACH_VOLUME = 'storagegateway:AttachVolume',
  CANCEL_ARCHIVAL = 'storagegateway:CancelArchival',
  CANCEL_RETRIEVAL = 'storagegateway:CancelRetrieval',
  CREATE_CACHEDI_SCSI_VOLUME = 'storagegateway:CreateCachediSCSIVolume',
  CREATE_NFS_FILE_SHARE = 'storagegateway:CreateNFSFileShare',
  CREATE_SMB_FILE_SHARE = 'storagegateway:CreateSMBFileShare',
  CREATE_SNAPSHOT = 'storagegateway:CreateSnapshot',
  CREATE_SNAPSHOT_FROM_VOLUME_RECOVERY_POINT = 'storagegateway:CreateSnapshotFromVolumeRecoveryPoint',
  CREATE_STOREDI_SCSI_VOLUME = 'storagegateway:CreateStorediSCSIVolume',
  CREATE_TAPE_WITH_BARCODE = 'storagegateway:CreateTapeWithBarcode',
  CREATE_TAPES = 'storagegateway:CreateTapes',
  DELETE_BANDWIDTH_RATE_LIMIT = 'storagegateway:DeleteBandwidthRateLimit',
  DELETE_CHAP_CREDENTIALS = 'storagegateway:DeleteChapCredentials',
  DELETE_FILE_SHARE = 'storagegateway:DeleteFileShare',
  DELETE_GATEWAY = 'storagegateway:DeleteGateway',
  DELETE_SNAPSHOT_SCHEDULE = 'storagegateway:DeleteSnapshotSchedule',
  DELETE_TAPE = 'storagegateway:DeleteTape',
  DELETE_TAPE_ARCHIVE = 'storagegateway:DeleteTapeArchive',
  DELETE_VOLUME = 'storagegateway:DeleteVolume',
  DESCRIBE_BANDWIDTH_RATE_LIMIT = 'storagegateway:DescribeBandwidthRateLimit',
  DESCRIBE_CACHE = 'storagegateway:DescribeCache',
  DESCRIBE_CACHEDI_SCSI_VOLUMES = 'storagegateway:DescribeCachediSCSIVolumes',
  DESCRIBE_CHAP_CREDENTIALS = 'storagegateway:DescribeChapCredentials',
  DESCRIBE_GATEWAY_INFORMATION = 'storagegateway:DescribeGatewayInformation',
  DESCRIBE_MAINTENANCE_START_TIME = 'storagegateway:DescribeMaintenanceStartTime',
  DESCRIBE_NFS_FILE_SHARES = 'storagegateway:DescribeNFSFileShares',
  DESCRIBE_SMB_FILE_SHARES = 'storagegateway:DescribeSMBFileShares',
  DESCRIBE_SMB_SETTINGS = 'storagegateway:DescribeSMBSettings',
  DESCRIBE_SNAPSHOT_SCHEDULE = 'storagegateway:DescribeSnapshotSchedule',
  DESCRIBE_STOREDI_SCSI_VOLUMES = 'storagegateway:DescribeStorediSCSIVolumes',
  DESCRIBE_TAPE_ARCHIVES = 'storagegateway:DescribeTapeArchives',
  DESCRIBE_TAPE_RECOVERY_POINTS = 'storagegateway:DescribeTapeRecoveryPoints',
  DESCRIBE_TAPES = 'storagegateway:DescribeTapes',
  DESCRIBE_UPLOAD_BUFFER = 'storagegateway:DescribeUploadBuffer',
  DESCRIBE_VTL_DEVICES = 'storagegateway:DescribeVTLDevices',
  DESCRIBE_WORKING_STORAGE = 'storagegateway:DescribeWorkingStorage',
  DETACH_VOLUME = 'storagegateway:DetachVolume',
  DISABLE_GATEWAY = 'storagegateway:DisableGateway',
  JOIN_DOMAIN = 'storagegateway:JoinDomain',
  LIST_FILE_SHARES = 'storagegateway:ListFileShares',
  LIST_GATEWAYS = 'storagegateway:ListGateways',
  LIST_LOCAL_DISKS = 'storagegateway:ListLocalDisks',
  LIST_TAGS_FOR_RESOURCE = 'storagegateway:ListTagsForResource',
  LIST_TAPES = 'storagegateway:ListTapes',
  LIST_VOLUME_INITIATORS = 'storagegateway:ListVolumeInitiators',
  LIST_VOLUME_RECOVERY_POINTS = 'storagegateway:ListVolumeRecoveryPoints',
  LIST_VOLUMES = 'storagegateway:ListVolumes',
  NOTIFY_WHEN_UPLOADED = 'storagegateway:NotifyWhenUploaded',
  REFRESH_CACHE = 'storagegateway:RefreshCache',
  REMOVE_TAGS_FROM_RESOURCE = 'storagegateway:RemoveTagsFromResource',
  RESET_CACHE = 'storagegateway:ResetCache',
  RETRIEVE_TAPE_ARCHIVE = 'storagegateway:RetrieveTapeArchive',
  RETRIEVE_TAPE_RECOVERY_POINT = 'storagegateway:RetrieveTapeRecoveryPoint',
  SET_LOCAL_CONSOLE_PASSWORD = 'storagegateway:SetLocalConsolePassword',
  SET_SMB_GUEST_PASSWORD = 'storagegateway:SetSMBGuestPassword',
  SHUTDOWN_GATEWAY = 'storagegateway:ShutdownGateway',
  START_GATEWAY = 'storagegateway:StartGateway',
  UPDATE_BANDWIDTH_RATE_LIMIT = 'storagegateway:UpdateBandwidthRateLimit',
  UPDATE_CHAP_CREDENTIALS = 'storagegateway:UpdateChapCredentials',
  UPDATE_GATEWAY_INFORMATION = 'storagegateway:UpdateGatewayInformation',
  UPDATE_GATEWAY_SOFTWARE_NOW = 'storagegateway:UpdateGatewaySoftwareNow',
  UPDATE_MAINTENANCE_START_TIME = 'storagegateway:UpdateMaintenanceStartTime',
  UPDATE_NFS_FILE_SHARE = 'storagegateway:UpdateNFSFileShare',
  UPDATE_SMB_FILE_SHARE = 'storagegateway:UpdateSMBFileShare',
  UPDATE_SNAPSHOT_SCHEDULE = 'storagegateway:UpdateSnapshotSchedule',
  UPDATE_VTL_DEVICE_TYPE = 'storagegateway:UpdateVTLDeviceType',
}
export enum ELASTIC_MAPREDUCE {
  ADD_INSTANCE_FLEET = 'elasticmapreduce:AddInstanceFleet',
  ADD_INSTANCE_GROUPS = 'elasticmapreduce:AddInstanceGroups',
  ADD_JOB_FLOW_STEPS = 'elasticmapreduce:AddJobFlowSteps',
  ADD_TAGS = 'elasticmapreduce:AddTags',
  CANCEL_STEPS = 'elasticmapreduce:CancelSteps',
  CREATE_EDITOR = 'elasticmapreduce:CreateEditor',
  CREATE_SECURITY_CONFIGURATION = 'elasticmapreduce:CreateSecurityConfiguration',
  DELETE_EDITOR = 'elasticmapreduce:DeleteEditor',
  DELETE_SECURITY_CONFIGURATION = 'elasticmapreduce:DeleteSecurityConfiguration',
  DESCRIBE_CLUSTER = 'elasticmapreduce:DescribeCluster',
  DESCRIBE_EDITOR = 'elasticmapreduce:DescribeEditor',
  DESCRIBE_JOB_FLOWS = 'elasticmapreduce:DescribeJobFlows',
  DESCRIBE_SECURITY_CONFIGURATION = 'elasticmapreduce:DescribeSecurityConfiguration',
  DESCRIBE_STEP = 'elasticmapreduce:DescribeStep',
  GET_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'elasticmapreduce:GetBlockPublicAccessConfiguration',
  GET_MANAGED_SCALING_POLICY = 'elasticmapreduce:GetManagedScalingPolicy',
  LIST_BOOTSTRAP_ACTIONS = 'elasticmapreduce:ListBootstrapActions',
  LIST_CLUSTERS = 'elasticmapreduce:ListClusters',
  LIST_EDITORS = 'elasticmapreduce:ListEditors',
  LIST_INSTANCE_FLEETS = 'elasticmapreduce:ListInstanceFleets',
  LIST_INSTANCE_GROUPS = 'elasticmapreduce:ListInstanceGroups',
  LIST_INSTANCES = 'elasticmapreduce:ListInstances',
  LIST_SECURITY_CONFIGURATIONS = 'elasticmapreduce:ListSecurityConfigurations',
  LIST_STEPS = 'elasticmapreduce:ListSteps',
  MODIFY_CLUSTER = 'elasticmapreduce:ModifyCluster',
  MODIFY_INSTANCE_FLEET = 'elasticmapreduce:ModifyInstanceFleet',
  MODIFY_INSTANCE_GROUPS = 'elasticmapreduce:ModifyInstanceGroups',
  OPEN_EDITOR_IN_CONSOLE = 'elasticmapreduce:OpenEditorInConsole',
  PUT_AUTO_SCALING_POLICY = 'elasticmapreduce:PutAutoScalingPolicy',
  PUT_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'elasticmapreduce:PutBlockPublicAccessConfiguration',
  PUT_MANAGED_SCALING_POLICY = 'elasticmapreduce:PutManagedScalingPolicy',
  REMOVE_AUTO_SCALING_POLICY = 'elasticmapreduce:RemoveAutoScalingPolicy',
  REMOVE_MANAGED_SCALING_POLICY = 'elasticmapreduce:RemoveManagedScalingPolicy',
  REMOVE_TAGS = 'elasticmapreduce:RemoveTags',
  RUN_JOB_FLOW = 'elasticmapreduce:RunJobFlow',
  SET_TERMINATION_PROTECTION = 'elasticmapreduce:SetTerminationProtection',
  START_EDITOR = 'elasticmapreduce:StartEditor',
  STOP_EDITOR = 'elasticmapreduce:StopEditor',
  TERMINATE_JOB_FLOWS = 'elasticmapreduce:TerminateJobFlows',
  VIEW_EVENTS_FROM_ALL_CLUSTERS_IN_CONSOLE = 'elasticmapreduce:ViewEventsFromAllClustersInConsole',
}
export enum BATCH {
  CANCEL_JOB = 'batch:CancelJob',
  CREATE_COMPUTE_ENVIRONMENT = 'batch:CreateComputeEnvironment',
  CREATE_JOB_QUEUE = 'batch:CreateJobQueue',
  DELETE_COMPUTE_ENVIRONMENT = 'batch:DeleteComputeEnvironment',
  DELETE_JOB_QUEUE = 'batch:DeleteJobQueue',
  DEREGISTER_JOB_DEFINITION = 'batch:DeregisterJobDefinition',
  DESCRIBE_COMPUTE_ENVIRONMENTS = 'batch:DescribeComputeEnvironments',
  DESCRIBE_JOB_DEFINITIONS = 'batch:DescribeJobDefinitions',
  DESCRIBE_JOB_QUEUES = 'batch:DescribeJobQueues',
  DESCRIBE_JOBS = 'batch:DescribeJobs',
  LIST_JOBS = 'batch:ListJobs',
  REGISTER_JOB_DEFINITION = 'batch:RegisterJobDefinition',
  SUBMIT_JOB = 'batch:SubmitJob',
  TERMINATE_JOB = 'batch:TerminateJob',
  UPDATE_COMPUTE_ENVIRONMENT = 'batch:UpdateComputeEnvironment',
  UPDATE_JOB_QUEUE = 'batch:UpdateJobQueue',
}
export enum IOT_EVENTS {
  BATCH_PUT_MESSAGE = 'iotevents:BatchPutMessage',
  BATCH_UPDATE_DETECTOR = 'iotevents:BatchUpdateDetector',
  CREATE_DETECTOR_MODEL = 'iotevents:CreateDetectorModel',
  CREATE_INPUT = 'iotevents:CreateInput',
  DELETE_DETECTOR_MODEL = 'iotevents:DeleteDetectorModel',
  DELETE_INPUT = 'iotevents:DeleteInput',
  DESCRIBE_DETECTOR = 'iotevents:DescribeDetector',
  DESCRIBE_DETECTOR_MODEL = 'iotevents:DescribeDetectorModel',
  DESCRIBE_INPUT = 'iotevents:DescribeInput',
  DESCRIBE_LOGGING_OPTIONS = 'iotevents:DescribeLoggingOptions',
  LIST_DETECTOR_MODEL_VERSIONS = 'iotevents:ListDetectorModelVersions',
  LIST_DETECTOR_MODELS = 'iotevents:ListDetectorModels',
  LIST_DETECTORS = 'iotevents:ListDetectors',
  LIST_INPUTS = 'iotevents:ListInputs',
  LIST_TAGS_FOR_RESOURCE = 'iotevents:ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'iotevents:PutLoggingOptions',
  TAG_RESOURCE = 'iotevents:TagResource',
  UNTAG_RESOURCE = 'iotevents:UntagResource',
  UPDATE_DETECTOR_MODEL = 'iotevents:UpdateDetectorModel',
  UPDATE_INPUT = 'iotevents:UpdateInput',
  UPDATE_INPUT_ROUTING = 'iotevents:UpdateInputRouting',
}
export enum CLOUDTRAIL {
  ADD_TAGS = 'cloudtrail:AddTags',
  CREATE_TRAIL = 'cloudtrail:CreateTrail',
  DELETE_TRAIL = 'cloudtrail:DeleteTrail',
  DESCRIBE_TRAILS = 'cloudtrail:DescribeTrails',
  GET_EVENT_SELECTORS = 'cloudtrail:GetEventSelectors',
  GET_INSIGHT_SELECTORS = 'cloudtrail:GetInsightSelectors',
  GET_TRAIL = 'cloudtrail:GetTrail',
  GET_TRAIL_STATUS = 'cloudtrail:GetTrailStatus',
  LIST_PUBLIC_KEYS = 'cloudtrail:ListPublicKeys',
  LIST_TAGS = 'cloudtrail:ListTags',
  LIST_TRAILS = 'cloudtrail:ListTrails',
  LOOKUP_EVENTS = 'cloudtrail:LookupEvents',
  PUT_EVENT_SELECTORS = 'cloudtrail:PutEventSelectors',
  PUT_INSIGHT_SELECTORS = 'cloudtrail:PutInsightSelectors',
  REMOVE_TAGS = 'cloudtrail:RemoveTags',
  START_LOGGING = 'cloudtrail:StartLogging',
  STOP_LOGGING = 'cloudtrail:StopLogging',
  UPDATE_TRAIL = 'cloudtrail:UpdateTrail',
}
export enum DYNAMODB {
  BATCH_GET_ITEM = 'dynamodb:BatchGetItem',
  BATCH_WRITE_ITEM = 'dynamodb:BatchWriteItem',
  CONDITION_CHECK_ITEM = 'dynamodb:ConditionCheckItem',
  CREATE_BACKUP = 'dynamodb:CreateBackup',
  CREATE_GLOBAL_TABLE = 'dynamodb:CreateGlobalTable',
  CREATE_TABLE = 'dynamodb:CreateTable',
  CREATE_TABLE_REPLICA = 'dynamodb:CreateTableReplica',
  DELETE_BACKUP = 'dynamodb:DeleteBackup',
  DELETE_ITEM = 'dynamodb:DeleteItem',
  DELETE_TABLE = 'dynamodb:DeleteTable',
  DELETE_TABLE_REPLICA = 'dynamodb:DeleteTableReplica',
  DESCRIBE_BACKUP = 'dynamodb:DescribeBackup',
  DESCRIBE_CONTINUOUS_BACKUPS = 'dynamodb:DescribeContinuousBackups',
  DESCRIBE_CONTRIBUTOR_INSIGHTS = 'dynamodb:DescribeContributorInsights',
  DESCRIBE_GLOBAL_TABLE = 'dynamodb:DescribeGlobalTable',
  DESCRIBE_GLOBAL_TABLE_SETTINGS = 'dynamodb:DescribeGlobalTableSettings',
  DESCRIBE_LIMITS = 'dynamodb:DescribeLimits',
  DESCRIBE_RESERVED_CAPACITY = 'dynamodb:DescribeReservedCapacity',
  DESCRIBE_RESERVED_CAPACITY_OFFERINGS = 'dynamodb:DescribeReservedCapacityOfferings',
  DESCRIBE_STREAM = 'dynamodb:DescribeStream',
  DESCRIBE_TABLE = 'dynamodb:DescribeTable',
  DESCRIBE_TABLE_REPLICA_AUTO_SCALING = 'dynamodb:DescribeTableReplicaAutoScaling',
  DESCRIBE_TIME_TO_LIVE = 'dynamodb:DescribeTimeToLive',
  GET_ITEM = 'dynamodb:GetItem',
  GET_RECORDS = 'dynamodb:GetRecords',
  GET_SHARD_ITERATOR = 'dynamodb:GetShardIterator',
  LIST_BACKUPS = 'dynamodb:ListBackups',
  LIST_CONTRIBUTOR_INSIGHTS = 'dynamodb:ListContributorInsights',
  LIST_GLOBAL_TABLES = 'dynamodb:ListGlobalTables',
  LIST_STREAMS = 'dynamodb:ListStreams',
  LIST_TABLES = 'dynamodb:ListTables',
  LIST_TAGS_OF_RESOURCE = 'dynamodb:ListTagsOfResource',
  PURCHASE_RESERVED_CAPACITY_OFFERINGS = 'dynamodb:PurchaseReservedCapacityOfferings',
  PUT_ITEM = 'dynamodb:PutItem',
  QUERY = 'dynamodb:Query',
  RESTORE_TABLE_FROM_BACKUP = 'dynamodb:RestoreTableFromBackup',
  RESTORE_TABLE_TO_POINT_IN_TIME = 'dynamodb:RestoreTableToPointInTime',
  SCAN = 'dynamodb:Scan',
  TAG_RESOURCE = 'dynamodb:TagResource',
  UNTAG_RESOURCE = 'dynamodb:UntagResource',
  UPDATE_CONTINUOUS_BACKUPS = 'dynamodb:UpdateContinuousBackups',
  UPDATE_CONTRIBUTOR_INSIGHTS = 'dynamodb:UpdateContributorInsights',
  UPDATE_GLOBAL_TABLE = 'dynamodb:UpdateGlobalTable',
  UPDATE_GLOBAL_TABLE_SETTINGS = 'dynamodb:UpdateGlobalTableSettings',
  UPDATE_ITEM = 'dynamodb:UpdateItem',
  UPDATE_TABLE = 'dynamodb:UpdateTable',
  UPDATE_TABLE_REPLICA_AUTO_SCALING = 'dynamodb:UpdateTableReplicaAutoScaling',
  UPDATE_TIME_TO_LIVE = 'dynamodb:UpdateTimeToLive',
}
export enum ELASTICSEARCH_SERVICE {
  ACCEPT_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:AcceptInboundCrossClusterSearchConnection',
  ADD_TAGS = 'es:AddTags',
  CREATE_ELASTICSEARCH_DOMAIN = 'es:CreateElasticsearchDomain',
  CREATE_ELASTICSEARCH_SERVICE_ROLE = 'es:CreateElasticsearchServiceRole',
  CREATE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:CreateOutboundCrossClusterSearchConnection',
  DELETE_ELASTICSEARCH_DOMAIN = 'es:DeleteElasticsearchDomain',
  DELETE_ELASTICSEARCH_SERVICE_ROLE = 'es:DeleteElasticsearchServiceRole',
  DELETE_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:DeleteInboundCrossClusterSearchConnection',
  DELETE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:DeleteOutboundCrossClusterSearchConnection',
  DESCRIBE_ELASTICSEARCH_DOMAIN = 'es:DescribeElasticsearchDomain',
  DESCRIBE_ELASTICSEARCH_DOMAIN_CONFIG = 'es:DescribeElasticsearchDomainConfig',
  DESCRIBE_ELASTICSEARCH_DOMAINS = 'es:DescribeElasticsearchDomains',
  DESCRIBE_ELASTICSEARCH_INSTANCE_TYPE_LIMITS = 'es:DescribeElasticsearchInstanceTypeLimits',
  DESCRIBE_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTIONS = 'es:DescribeInboundCrossClusterSearchConnections',
  DESCRIBE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTIONS = 'es:DescribeOutboundCrossClusterSearchConnections',
  DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERINGS = 'es:DescribeReservedElasticsearchInstanceOfferings',
  DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCES = 'es:DescribeReservedElasticsearchInstances',
  ES_CROSS_CLUSTER_GET = 'es:ESCrossClusterGet',
  ES_HTTP_DELETE = 'es:ESHttpDelete',
  ES_HTTP_GET = 'es:ESHttpGet',
  ES_HTTP_HEAD = 'es:ESHttpHead',
  ES_HTTP_PATCH = 'es:ESHttpPatch',
  ES_HTTP_POST = 'es:ESHttpPost',
  ES_HTTP_PUT = 'es:ESHttpPut',
  GET_COMPATIBLE_ELASTICSEARCH_VERSIONS = 'es:GetCompatibleElasticsearchVersions',
  GET_UPGRADE_HISTORY = 'es:GetUpgradeHistory',
  GET_UPGRADE_STATUS = 'es:GetUpgradeStatus',
  LIST_DOMAIN_NAMES = 'es:ListDomainNames',
  LIST_ELASTICSEARCH_INSTANCE_TYPE_DETAILS = 'es:ListElasticsearchInstanceTypeDetails',
  LIST_ELASTICSEARCH_INSTANCE_TYPES = 'es:ListElasticsearchInstanceTypes',
  LIST_ELASTICSEARCH_VERSIONS = 'es:ListElasticsearchVersions',
  LIST_TAGS = 'es:ListTags',
  PURCHASE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERING = 'es:PurchaseReservedElasticsearchInstanceOffering',
  REJECT_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:RejectInboundCrossClusterSearchConnection',
  REMOVE_TAGS = 'es:RemoveTags',
  UPDATE_ELASTICSEARCH_DOMAIN_CONFIG = 'es:UpdateElasticsearchDomainConfig',
  UPGRADE_ELASTICSEARCH_DOMAIN = 'es:UpgradeElasticsearchDomain',
}
export enum DEEPRACER {
  CLONE_REINFORCEMENT_LEARNING_MODEL = 'deepracer:CloneReinforcementLearningModel',
  CREATE_ACCOUNT_RESOURCES = 'deepracer:CreateAccountResources',
  CREATE_LEADERBOARD_SUBMISSION = 'deepracer:CreateLeaderboardSubmission',
  CREATE_REINFORCEMENT_LEARNING_MODEL = 'deepracer:CreateReinforcementLearningModel',
  DELETE_ACCOUNT_RESOURCES = 'deepracer:DeleteAccountResources',
  DELETE_MODEL = 'deepracer:DeleteModel',
  GET_ACCOUNT_RESOURCES = 'deepracer:GetAccountResources',
  GET_ALIAS = 'deepracer:GetAlias',
  GET_EVALUATION = 'deepracer:GetEvaluation',
  GET_LATEST_USER_SUBMISSION = 'deepracer:GetLatestUserSubmission',
  GET_LEADERBOARD = 'deepracer:GetLeaderboard',
  GET_MODEL = 'deepracer:GetModel',
  GET_RANKED_USER_SUBMISSION = 'deepracer:GetRankedUserSubmission',
  GET_TRACK = 'deepracer:GetTrack',
  GET_TRAINING_JOB = 'deepracer:GetTrainingJob',
  LIST_EVALUATIONS = 'deepracer:ListEvaluations',
  LIST_LEADERBOARD_SUBMISSIONS = 'deepracer:ListLeaderboardSubmissions',
  LIST_LEADERBOARDS = 'deepracer:ListLeaderboards',
  LIST_MODELS = 'deepracer:ListModels',
  LIST_TRACKS = 'deepracer:ListTracks',
  LIST_TRAINING_JOBS = 'deepracer:ListTrainingJobs',
  SET_ALIAS = 'deepracer:SetAlias',
  START_EVALUATION = 'deepracer:StartEvaluation',
  STOP_EVALUATION = 'deepracer:StopEvaluation',
  STOP_TRAINING_REINFORCEMENT_LEARNING_MODEL = 'deepracer:StopTrainingReinforcementLearningModel',
  TEST_REWARD_FUNCTION = 'deepracer:TestRewardFunction',
}
export enum BUDGET_SERVICE {
  MODIFY_BUDGET = 'budgets:ModifyBudget',
  VIEW_BUDGET = 'budgets:ViewBudget',
}
export enum EVENTBRIDGE_SCHEMAS {
  CREATE_DISCOVERER = 'schemas:CreateDiscoverer',
  CREATE_REGISTRY = 'schemas:CreateRegistry',
  CREATE_SCHEMA = 'schemas:CreateSchema',
  DELETE_DISCOVERER = 'schemas:DeleteDiscoverer',
  DELETE_REGISTRY = 'schemas:DeleteRegistry',
  DELETE_RESOURCE_POLICY = 'schemas:DeleteResourcePolicy',
  DELETE_SCHEMA = 'schemas:DeleteSchema',
  DELETE_SCHEMA_VERSION = 'schemas:DeleteSchemaVersion',
  DESCRIBE_CODE_BINDING = 'schemas:DescribeCodeBinding',
  DESCRIBE_DISCOVERER = 'schemas:DescribeDiscoverer',
  DESCRIBE_REGISTRY = 'schemas:DescribeRegistry',
  DESCRIBE_SCHEMA = 'schemas:DescribeSchema',
  GET_CODE_BINDING_SOURCE = 'schemas:GetCodeBindingSource',
  GET_DISCOVERED_SCHEMA = 'schemas:GetDiscoveredSchema',
  GET_RESOURCE_POLICY = 'schemas:GetResourcePolicy',
  LIST_DISCOVERERS = 'schemas:ListDiscoverers',
  LIST_REGISTRIES = 'schemas:ListRegistries',
  LIST_SCHEMA_VERSIONS = 'schemas:ListSchemaVersions',
  LIST_SCHEMAS = 'schemas:ListSchemas',
  LIST_TAGS_FOR_RESOURCE = 'schemas:ListTagsForResource',
  PUT_CODE_BINDING = 'schemas:PutCodeBinding',
  PUT_RESOURCE_POLICY = 'schemas:PutResourcePolicy',
  SEARCH_SCHEMAS = 'schemas:SearchSchemas',
  START_DISCOVERER = 'schemas:StartDiscoverer',
  STOP_DISCOVERER = 'schemas:StopDiscoverer',
  TAG_RESOURCE = 'schemas:TagResource',
  UNTAG_RESOURCE = 'schemas:UntagResource',
  UPDATE_DISCOVERER = 'schemas:UpdateDiscoverer',
  UPDATE_REGISTRY = 'schemas:UpdateRegistry',
  UPDATE_SCHEMA = 'schemas:UpdateSchema',
}
export enum NETWORK_MANAGER {
  ASSOCIATE_CUSTOMER_GATEWAY = 'networkmanager:AssociateCustomerGateway',
  ASSOCIATE_LINK = 'networkmanager:AssociateLink',
  CREATE_DEVICE = 'networkmanager:CreateDevice',
  CREATE_GLOBAL_NETWORK = 'networkmanager:CreateGlobalNetwork',
  CREATE_LINK = 'networkmanager:CreateLink',
  CREATE_SITE = 'networkmanager:CreateSite',
  DELETE_DEVICE = 'networkmanager:DeleteDevice',
  DELETE_GLOBAL_NETWORK = 'networkmanager:DeleteGlobalNetwork',
  DELETE_LINK = 'networkmanager:DeleteLink',
  DELETE_SITE = 'networkmanager:DeleteSite',
  DEREGISTER_TRANSIT_GATEWAY = 'networkmanager:DeregisterTransitGateway',
  DESCRIBE_GLOBAL_NETWORKS = 'networkmanager:DescribeGlobalNetworks',
  DISASSOCIATE_CUSTOMER_GATEWAY = 'networkmanager:DisassociateCustomerGateway',
  DISASSOCIATE_LINK = 'networkmanager:DisassociateLink',
  GET_CUSTOMER_GATEWAY_ASSOCIATIONS = 'networkmanager:GetCustomerGatewayAssociations',
  GET_DEVICES = 'networkmanager:GetDevices',
  GET_LINK_ASSOCIATIONS = 'networkmanager:GetLinkAssociations',
  GET_LINKS = 'networkmanager:GetLinks',
  GET_SITES = 'networkmanager:GetSites',
  GET_TRANSIT_GATEWAY_REGISTRATIONS = 'networkmanager:GetTransitGatewayRegistrations',
  LIST_TAGS_FOR_RESOURCE = 'networkmanager:ListTagsForResource',
  REGISTER_TRANSIT_GATEWAY = 'networkmanager:RegisterTransitGateway',
  TAG_RESOURCE = 'networkmanager:TagResource',
  UNTAG_RESOURCE = 'networkmanager:UntagResource',
  UPDATE_DEVICE = 'networkmanager:UpdateDevice',
  UPDATE_GLOBAL_NETWORK = 'networkmanager:UpdateGlobalNetwork',
  UPDATE_LINK = 'networkmanager:UpdateLink',
  UPDATE_SITE = 'networkmanager:UpdateSite',
}
export enum SUPPORT {
  ADD_ATTACHMENTS_TO_SET = 'support:AddAttachmentsToSet',
  ADD_COMMUNICATION_TO_CASE = 'support:AddCommunicationToCase',
  CREATE_CASE = 'support:CreateCase',
  DESCRIBE_ATTACHMENT = 'support:DescribeAttachment',
  DESCRIBE_CASE_ATTRIBUTES = 'support:DescribeCaseAttributes',
  DESCRIBE_CASES = 'support:DescribeCases',
  DESCRIBE_COMMUNICATIONS = 'support:DescribeCommunications',
  DESCRIBE_ISSUE_TYPES = 'support:DescribeIssueTypes',
  DESCRIBE_SERVICES = 'support:DescribeServices',
  DESCRIBE_SEVERITY_LEVELS = 'support:DescribeSeverityLevels',
  DESCRIBE_SUPPORT_LEVEL = 'support:DescribeSupportLevel',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_REFRESH_STATUSES = 'support:DescribeTrustedAdvisorCheckRefreshStatuses',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_RESULT = 'support:DescribeTrustedAdvisorCheckResult',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_SUMMARIES = 'support:DescribeTrustedAdvisorCheckSummaries',
  DESCRIBE_TRUSTED_ADVISOR_CHECKS = 'support:DescribeTrustedAdvisorChecks',
  INITIATE_CALL_FOR_CASE = 'support:InitiateCallForCase',
  INITIATE_CHAT_FOR_CASE = 'support:InitiateChatForCase',
  PUT_CASE_ATTRIBUTES = 'support:PutCaseAttributes',
  RATE_CASE_COMMUNICATION = 'support:RateCaseCommunication',
  REFRESH_TRUSTED_ADVISOR_CHECK = 'support:RefreshTrustedAdvisorCheck',
  RESOLVE_CASE = 'support:ResolveCase',
  SEARCH_FOR_CASES = 'support:SearchForCases',
}
export enum COGNITO_IDENTITY {
  CREATE_IDENTITY_POOL = 'cognito-identity:CreateIdentityPool',
  DELETE_IDENTITIES = 'cognito-identity:DeleteIdentities',
  DELETE_IDENTITY_POOL = 'cognito-identity:DeleteIdentityPool',
  DESCRIBE_IDENTITY = 'cognito-identity:DescribeIdentity',
  DESCRIBE_IDENTITY_POOL = 'cognito-identity:DescribeIdentityPool',
  GET_CREDENTIALS_FOR_IDENTITY = 'cognito-identity:GetCredentialsForIdentity',
  GET_ID = 'cognito-identity:GetId',
  GET_IDENTITY_POOL_ROLES = 'cognito-identity:GetIdentityPoolRoles',
  GET_OPEN_ID_TOKEN = 'cognito-identity:GetOpenIdToken',
  GET_OPEN_ID_TOKEN_FOR_DEVELOPER_IDENTITY = 'cognito-identity:GetOpenIdTokenForDeveloperIdentity',
  LIST_IDENTITIES = 'cognito-identity:ListIdentities',
  LIST_IDENTITY_POOLS = 'cognito-identity:ListIdentityPools',
  LIST_TAGS_FOR_RESOURCE = 'cognito-identity:ListTagsForResource',
  LOOKUP_DEVELOPER_IDENTITY = 'cognito-identity:LookupDeveloperIdentity',
  MERGE_DEVELOPER_IDENTITIES = 'cognito-identity:MergeDeveloperIdentities',
  SET_IDENTITY_POOL_ROLES = 'cognito-identity:SetIdentityPoolRoles',
  TAG_RESOURCE = 'cognito-identity:TagResource',
  UNLINK_DEVELOPER_IDENTITY = 'cognito-identity:UnlinkDeveloperIdentity',
  UNLINK_IDENTITY = 'cognito-identity:UnlinkIdentity',
  UNTAG_RESOURCE = 'cognito-identity:UntagResource',
  UPDATE_IDENTITY_POOL = 'cognito-identity:UpdateIdentityPool',
}
export enum POLLY {
  DELETE_LEXICON = 'polly:DeleteLexicon',
  DESCRIBE_VOICES = 'polly:DescribeVoices',
  GET_LEXICON = 'polly:GetLexicon',
  GET_SPEECH_SYNTHESIS_TASK = 'polly:GetSpeechSynthesisTask',
  LIST_LEXICONS = 'polly:ListLexicons',
  LIST_SPEECH_SYNTHESIS_TASKS = 'polly:ListSpeechSynthesisTasks',
  PUT_LEXICON = 'polly:PutLexicon',
  START_SPEECH_SYNTHESIS_TASK = 'polly:StartSpeechSynthesisTask',
  SYNTHESIZE_SPEECH = 'polly:SynthesizeSpeech',
}
export enum APPCONFIG {
  CREATE_APPLICATION = 'appconfig:CreateApplication',
  CREATE_CONFIGURATION_PROFILE = 'appconfig:CreateConfigurationProfile',
  CREATE_DEPLOYMENT_STRATEGY = 'appconfig:CreateDeploymentStrategy',
  CREATE_ENVIRONMENT = 'appconfig:CreateEnvironment',
  CREATE_HOSTED_CONFIGURATION_VERSION = 'appconfig:CreateHostedConfigurationVersion',
  DELETE_APPLICATION = 'appconfig:DeleteApplication',
  DELETE_CONFIGURATION_PROFILE = 'appconfig:DeleteConfigurationProfile',
  DELETE_DEPLOYMENT_STRATEGY = 'appconfig:DeleteDeploymentStrategy',
  DELETE_ENVIRONMENT = 'appconfig:DeleteEnvironment',
  DELETE_HOSTED_CONFIGURATION_VERSION = 'appconfig:DeleteHostedConfigurationVersion',
  GET_APPLICATION = 'appconfig:GetApplication',
  GET_CONFIGURATION = 'appconfig:GetConfiguration',
  GET_CONFIGURATION_PROFILE = 'appconfig:GetConfigurationProfile',
  GET_DEPLOYMENT = 'appconfig:GetDeployment',
  GET_DEPLOYMENT_STRATEGY = 'appconfig:GetDeploymentStrategy',
  GET_ENVIRONMENT = 'appconfig:GetEnvironment',
  GET_HOSTED_CONFIGURATION_VERSION = 'appconfig:GetHostedConfigurationVersion',
  LIST_APPLICATIONS = 'appconfig:ListApplications',
  LIST_CONFIGURATION_PROFILES = 'appconfig:ListConfigurationProfiles',
  LIST_DEPLOYMENT_STRATEGIES = 'appconfig:ListDeploymentStrategies',
  LIST_DEPLOYMENTS = 'appconfig:ListDeployments',
  LIST_ENVIRONMENTS = 'appconfig:ListEnvironments',
  LIST_HOSTED_CONFIGURATION_VERSIONS = 'appconfig:ListHostedConfigurationVersions',
  LIST_TAGS_FOR_RESOURCE = 'appconfig:ListTagsForResource',
  START_DEPLOYMENT = 'appconfig:StartDeployment',
  STOP_DEPLOYMENT = 'appconfig:StopDeployment',
  TAG_RESOURCE = 'appconfig:TagResource',
  UNTAG_RESOURCE = 'appconfig:UntagResource',
  UPDATE_APPLICATION = 'appconfig:UpdateApplication',
  UPDATE_CONFIGURATION_PROFILE = 'appconfig:UpdateConfigurationProfile',
  UPDATE_DEPLOYMENT_STRATEGY = 'appconfig:UpdateDeploymentStrategy',
  UPDATE_ENVIRONMENT = 'appconfig:UpdateEnvironment',
  VALIDATE_CONFIGURATION = 'appconfig:ValidateConfiguration',
}
export enum LICENSE_MANAGER {
  CREATE_LICENSE_CONFIGURATION = 'license-manager:CreateLicenseConfiguration',
  DELETE_LICENSE_CONFIGURATION = 'license-manager:DeleteLicenseConfiguration',
  GET_LICENSE_CONFIGURATION = 'license-manager:GetLicenseConfiguration',
  GET_SERVICE_SETTINGS = 'license-manager:GetServiceSettings',
  LIST_ASSOCIATIONS_FOR_LICENSE_CONFIGURATION = 'license-manager:ListAssociationsForLicenseConfiguration',
  LIST_LICENSE_CONFIGURATIONS = 'license-manager:ListLicenseConfigurations',
  LIST_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'license-manager:ListLicenseSpecificationsForResource',
  LIST_RESOURCE_INVENTORY = 'license-manager:ListResourceInventory',
  LIST_TAGS_FOR_RESOURCE = 'license-manager:ListTagsForResource',
  LIST_USAGE_FOR_LICENSE_CONFIGURATION = 'license-manager:ListUsageForLicenseConfiguration',
  TAG_RESOURCE = 'license-manager:TagResource',
  UNTAG_RESOURCE = 'license-manager:UntagResource',
  UPDATE_LICENSE_CONFIGURATION = 'license-manager:UpdateLicenseConfiguration',
  UPDATE_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'license-manager:UpdateLicenseSpecificationsForResource',
  UPDATE_SERVICE_SETTINGS = 'license-manager:UpdateServiceSettings',
}
export enum ALEXA_FOR_BUSINESS {
  APPROVE_SKILL = 'a4b:ApproveSkill',
  ASSOCIATE_CONTACT_WITH_ADDRESS_BOOK = 'a4b:AssociateContactWithAddressBook',
  ASSOCIATE_DEVICE_WITH_ROOM = 'a4b:AssociateDeviceWithRoom',
  ASSOCIATE_SKILL_GROUP_WITH_ROOM = 'a4b:AssociateSkillGroupWithRoom',
  ASSOCIATE_SKILL_WITH_SKILL_GROUP = 'a4b:AssociateSkillWithSkillGroup',
  ASSOCIATE_SKILL_WITH_USERS = 'a4b:AssociateSkillWithUsers',
  COMPLETE_REGISTRATION = 'a4b:CompleteRegistration',
  CREATE_ADDRESS_BOOK = 'a4b:CreateAddressBook',
  CREATE_BUSINESS_REPORT_SCHEDULE = 'a4b:CreateBusinessReportSchedule',
  CREATE_CONFERENCE_PROVIDER = 'a4b:CreateConferenceProvider',
  CREATE_CONTACT = 'a4b:CreateContact',
  CREATE_PROFILE = 'a4b:CreateProfile',
  CREATE_ROOM = 'a4b:CreateRoom',
  CREATE_SKILL_GROUP = 'a4b:CreateSkillGroup',
  CREATE_USER = 'a4b:CreateUser',
  DELETE_ADDRESS_BOOK = 'a4b:DeleteAddressBook',
  DELETE_BUSINESS_REPORT_SCHEDULE = 'a4b:DeleteBusinessReportSchedule',
  DELETE_CONFERENCE_PROVIDER = 'a4b:DeleteConferenceProvider',
  DELETE_CONTACT = 'a4b:DeleteContact',
  DELETE_DEVICE = 'a4b:DeleteDevice',
  DELETE_PROFILE = 'a4b:DeleteProfile',
  DELETE_ROOM = 'a4b:DeleteRoom',
  DELETE_ROOM_SKILL_PARAMETER = 'a4b:DeleteRoomSkillParameter',
  DELETE_SKILL_AUTHORIZATION = 'a4b:DeleteSkillAuthorization',
  DELETE_SKILL_GROUP = 'a4b:DeleteSkillGroup',
  DELETE_USER = 'a4b:DeleteUser',
  DISASSOCIATE_CONTACT_FROM_ADDRESS_BOOK = 'a4b:DisassociateContactFromAddressBook',
  DISASSOCIATE_DEVICE_FROM_ROOM = 'a4b:DisassociateDeviceFromRoom',
  DISASSOCIATE_SKILL_FROM_SKILL_GROUP = 'a4b:DisassociateSkillFromSkillGroup',
  DISASSOCIATE_SKILL_FROM_USERS = 'a4b:DisassociateSkillFromUsers',
  DISASSOCIATE_SKILL_GROUP_FROM_ROOM = 'a4b:DisassociateSkillGroupFromRoom',
  FORGET_SMART_HOME_APPLIANCES = 'a4b:ForgetSmartHomeAppliances',
  GET_ADDRESS_BOOK = 'a4b:GetAddressBook',
  GET_CONFERENCE_PREFERENCE = 'a4b:GetConferencePreference',
  GET_CONFERENCE_PROVIDER = 'a4b:GetConferenceProvider',
  GET_CONTACT = 'a4b:GetContact',
  GET_DEVICE = 'a4b:GetDevice',
  GET_NETWORK_PROFILE = 'a4b:GetNetworkProfile',
  GET_PROFILE = 'a4b:GetProfile',
  GET_ROOM = 'a4b:GetRoom',
  GET_ROOM_SKILL_PARAMETER = 'a4b:GetRoomSkillParameter',
  GET_SKILL_GROUP = 'a4b:GetSkillGroup',
  LIST_BUSINESS_REPORT_SCHEDULES = 'a4b:ListBusinessReportSchedules',
  LIST_CONFERENCE_PROVIDERS = 'a4b:ListConferenceProviders',
  LIST_DEVICE_EVENTS = 'a4b:ListDeviceEvents',
  LIST_SKILLS = 'a4b:ListSkills',
  LIST_SKILLS_STORE_CATEGORIES = 'a4b:ListSkillsStoreCategories',
  LIST_SKILLS_STORE_SKILLS_BY_CATEGORY = 'a4b:ListSkillsStoreSkillsByCategory',
  LIST_SMART_HOME_APPLIANCES = 'a4b:ListSmartHomeAppliances',
  LIST_TAGS = 'a4b:ListTags',
  PUT_CONFERENCE_PREFERENCE = 'a4b:PutConferencePreference',
  PUT_DEVICE_SETUP_EVENTS = 'a4b:PutDeviceSetupEvents',
  PUT_ROOM_SKILL_PARAMETER = 'a4b:PutRoomSkillParameter',
  PUT_SKILL_AUTHORIZATION = 'a4b:PutSkillAuthorization',
  REGISTER_AVS_DEVICE = 'a4b:RegisterAVSDevice',
  REGISTER_DEVICE = 'a4b:RegisterDevice',
  REJECT_SKILL = 'a4b:RejectSkill',
  RESOLVE_ROOM = 'a4b:ResolveRoom',
  REVOKE_INVITATION = 'a4b:RevokeInvitation',
  SEARCH_ADDRESS_BOOKS = 'a4b:SearchAddressBooks',
  SEARCH_CONTACTS = 'a4b:SearchContacts',
  SEARCH_DEVICES = 'a4b:SearchDevices',
  SEARCH_NETWORK_PROFILES = 'a4b:SearchNetworkProfiles',
  SEARCH_PROFILES = 'a4b:SearchProfiles',
  SEARCH_ROOMS = 'a4b:SearchRooms',
  SEARCH_SKILL_GROUPS = 'a4b:SearchSkillGroups',
  SEARCH_USERS = 'a4b:SearchUsers',
  SEND_INVITATION = 'a4b:SendInvitation',
  START_DEVICE_SYNC = 'a4b:StartDeviceSync',
  START_SMART_HOME_APPLIANCE_DISCOVERY = 'a4b:StartSmartHomeApplianceDiscovery',
  TAG_RESOURCE = 'a4b:TagResource',
  UNTAG_RESOURCE = 'a4b:UntagResource',
  UPDATE_ADDRESS_BOOK = 'a4b:UpdateAddressBook',
  UPDATE_BUSINESS_REPORT_SCHEDULE = 'a4b:UpdateBusinessReportSchedule',
  UPDATE_CONFERENCE_PROVIDER = 'a4b:UpdateConferenceProvider',
  UPDATE_CONTACT = 'a4b:UpdateContact',
  UPDATE_DEVICE = 'a4b:UpdateDevice',
  UPDATE_PROFILE = 'a4b:UpdateProfile',
  UPDATE_ROOM = 'a4b:UpdateRoom',
  UPDATE_SKILL_GROUP = 'a4b:UpdateSkillGroup',
}
export enum CERTIFICATE_MANAGER_PRIVATE_CERTIFICATE_AUTHORITY {
  CREATE_CERTIFICATE_AUTHORITY = 'acm-pca:CreateCertificateAuthority',
  CREATE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'acm-pca:CreateCertificateAuthorityAuditReport',
  CREATE_PERMISSION = 'acm-pca:CreatePermission',
  DELETE_CERTIFICATE_AUTHORITY = 'acm-pca:DeleteCertificateAuthority',
  DELETE_PERMISSION = 'acm-pca:DeletePermission',
  DELETE_POLICY = 'acm-pca:DeletePolicy',
  DESCRIBE_CERTIFICATE_AUTHORITY = 'acm-pca:DescribeCertificateAuthority',
  DESCRIBE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'acm-pca:DescribeCertificateAuthorityAuditReport',
  GET_CERTIFICATE = 'acm-pca:GetCertificate',
  GET_CERTIFICATE_AUTHORITY_CERTIFICATE = 'acm-pca:GetCertificateAuthorityCertificate',
  GET_CERTIFICATE_AUTHORITY_CSR = 'acm-pca:GetCertificateAuthorityCsr',
  GET_POLICY = 'acm-pca:GetPolicy',
  IMPORT_CERTIFICATE_AUTHORITY_CERTIFICATE = 'acm-pca:ImportCertificateAuthorityCertificate',
  ISSUE_CERTIFICATE = 'acm-pca:IssueCertificate',
  LIST_CERTIFICATE_AUTHORITIES = 'acm-pca:ListCertificateAuthorities',
  LIST_PERMISSIONS = 'acm-pca:ListPermissions',
  LIST_TAGS = 'acm-pca:ListTags',
  PUT_POLICY = 'acm-pca:PutPolicy',
  RESTORE_CERTIFICATE_AUTHORITY = 'acm-pca:RestoreCertificateAuthority',
  REVOKE_CERTIFICATE = 'acm-pca:RevokeCertificate',
  TAG_CERTIFICATE_AUTHORITY = 'acm-pca:TagCertificateAuthority',
  UNTAG_CERTIFICATE_AUTHORITY = 'acm-pca:UntagCertificateAuthority',
  UPDATE_CERTIFICATE_AUTHORITY = 'acm-pca:UpdateCertificateAuthority',
}
export enum STEP_FUNCTIONS {
  CREATE_ACTIVITY = 'states:CreateActivity',
  CREATE_STATE_MACHINE = 'states:CreateStateMachine',
  DELETE_ACTIVITY = 'states:DeleteActivity',
  DELETE_STATE_MACHINE = 'states:DeleteStateMachine',
  DESCRIBE_ACTIVITY = 'states:DescribeActivity',
  DESCRIBE_EXECUTION = 'states:DescribeExecution',
  DESCRIBE_STATE_MACHINE = 'states:DescribeStateMachine',
  DESCRIBE_STATE_MACHINE_FOR_EXECUTION = 'states:DescribeStateMachineForExecution',
  GET_ACTIVITY_TASK = 'states:GetActivityTask',
  GET_EXECUTION_HISTORY = 'states:GetExecutionHistory',
  LIST_ACTIVITIES = 'states:ListActivities',
  LIST_EXECUTIONS = 'states:ListExecutions',
  LIST_STATE_MACHINES = 'states:ListStateMachines',
  LIST_TAGS_FOR_RESOURCE = 'states:ListTagsForResource',
  SEND_TASK_FAILURE = 'states:SendTaskFailure',
  SEND_TASK_HEARTBEAT = 'states:SendTaskHeartbeat',
  SEND_TASK_SUCCESS = 'states:SendTaskSuccess',
  START_EXECUTION = 'states:StartExecution',
  STOP_EXECUTION = 'states:StopExecution',
  TAG_RESOURCE = 'states:TagResource',
  UNTAG_RESOURCE = 'states:UntagResource',
  UPDATE_STATE_MACHINE = 'states:UpdateStateMachine',
}
export enum MESSAGE_DELIVERY_SERVICE {
  ACKNOWLEDGE_MESSAGE = 'ec2messages:AcknowledgeMessage',
  DELETE_MESSAGE = 'ec2messages:DeleteMessage',
  FAIL_MESSAGE = 'ec2messages:FailMessage',
  GET_ENDPOINT = 'ec2messages:GetEndpoint',
  GET_MESSAGES = 'ec2messages:GetMessages',
  SEND_REPLY = 'ec2messages:SendReply',
}
export enum IOT_GREENGRASS {
  ASSOCIATE_ROLE_TO_GROUP = 'greengrass:AssociateRoleToGroup',
  ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'greengrass:AssociateServiceRoleToAccount',
  CREATE_CONNECTOR_DEFINITION = 'greengrass:CreateConnectorDefinition',
  CREATE_CONNECTOR_DEFINITION_VERSION = 'greengrass:CreateConnectorDefinitionVersion',
  CREATE_CORE_DEFINITION = 'greengrass:CreateCoreDefinition',
  CREATE_CORE_DEFINITION_VERSION = 'greengrass:CreateCoreDefinitionVersion',
  CREATE_DEPLOYMENT = 'greengrass:CreateDeployment',
  CREATE_DEVICE_DEFINITION = 'greengrass:CreateDeviceDefinition',
  CREATE_DEVICE_DEFINITION_VERSION = 'greengrass:CreateDeviceDefinitionVersion',
  CREATE_FUNCTION_DEFINITION = 'greengrass:CreateFunctionDefinition',
  CREATE_FUNCTION_DEFINITION_VERSION = 'greengrass:CreateFunctionDefinitionVersion',
  CREATE_GROUP = 'greengrass:CreateGroup',
  CREATE_GROUP_CERTIFICATE_AUTHORITY = 'greengrass:CreateGroupCertificateAuthority',
  CREATE_GROUP_VERSION = 'greengrass:CreateGroupVersion',
  CREATE_LOGGER_DEFINITION = 'greengrass:CreateLoggerDefinition',
  CREATE_LOGGER_DEFINITION_VERSION = 'greengrass:CreateLoggerDefinitionVersion',
  CREATE_RESOURCE_DEFINITION = 'greengrass:CreateResourceDefinition',
  CREATE_RESOURCE_DEFINITION_VERSION = 'greengrass:CreateResourceDefinitionVersion',
  CREATE_SOFTWARE_UPDATE_JOB = 'greengrass:CreateSoftwareUpdateJob',
  CREATE_SUBSCRIPTION_DEFINITION = 'greengrass:CreateSubscriptionDefinition',
  CREATE_SUBSCRIPTION_DEFINITION_VERSION = 'greengrass:CreateSubscriptionDefinitionVersion',
  DELETE_CONNECTOR_DEFINITION = 'greengrass:DeleteConnectorDefinition',
  DELETE_CORE_DEFINITION = 'greengrass:DeleteCoreDefinition',
  DELETE_DEVICE_DEFINITION = 'greengrass:DeleteDeviceDefinition',
  DELETE_FUNCTION_DEFINITION = 'greengrass:DeleteFunctionDefinition',
  DELETE_GROUP = 'greengrass:DeleteGroup',
  DELETE_LOGGER_DEFINITION = 'greengrass:DeleteLoggerDefinition',
  DELETE_RESOURCE_DEFINITION = 'greengrass:DeleteResourceDefinition',
  DELETE_SUBSCRIPTION_DEFINITION = 'greengrass:DeleteSubscriptionDefinition',
  DISASSOCIATE_ROLE_FROM_GROUP = 'greengrass:DisassociateRoleFromGroup',
  DISASSOCIATE_SERVICE_ROLE_FROM_ACCOUNT = 'greengrass:DisassociateServiceRoleFromAccount',
  DISCOVER = 'greengrass:Discover',
  GET_ASSOCIATED_ROLE = 'greengrass:GetAssociatedRole',
  GET_BULK_DEPLOYMENT_STATUS = 'greengrass:GetBulkDeploymentStatus',
  GET_CONNECTIVITY_INFO = 'greengrass:GetConnectivityInfo',
  GET_CONNECTOR_DEFINITION = 'greengrass:GetConnectorDefinition',
  GET_CONNECTOR_DEFINITION_VERSION = 'greengrass:GetConnectorDefinitionVersion',
  GET_CORE_DEFINITION = 'greengrass:GetCoreDefinition',
  GET_CORE_DEFINITION_VERSION = 'greengrass:GetCoreDefinitionVersion',
  GET_DEPLOYMENT_STATUS = 'greengrass:GetDeploymentStatus',
  GET_DEVICE_DEFINITION = 'greengrass:GetDeviceDefinition',
  GET_DEVICE_DEFINITION_VERSION = 'greengrass:GetDeviceDefinitionVersion',
  GET_FUNCTION_DEFINITION = 'greengrass:GetFunctionDefinition',
  GET_FUNCTION_DEFINITION_VERSION = 'greengrass:GetFunctionDefinitionVersion',
  GET_GROUP = 'greengrass:GetGroup',
  GET_GROUP_CERTIFICATE_AUTHORITY = 'greengrass:GetGroupCertificateAuthority',
  GET_GROUP_CERTIFICATE_CONFIGURATION = 'greengrass:GetGroupCertificateConfiguration',
  GET_GROUP_VERSION = 'greengrass:GetGroupVersion',
  GET_LOGGER_DEFINITION = 'greengrass:GetLoggerDefinition',
  GET_LOGGER_DEFINITION_VERSION = 'greengrass:GetLoggerDefinitionVersion',
  GET_RESOURCE_DEFINITION = 'greengrass:GetResourceDefinition',
  GET_RESOURCE_DEFINITION_VERSION = 'greengrass:GetResourceDefinitionVersion',
  GET_SERVICE_ROLE_FOR_ACCOUNT = 'greengrass:GetServiceRoleForAccount',
  GET_SUBSCRIPTION_DEFINITION = 'greengrass:GetSubscriptionDefinition',
  GET_SUBSCRIPTION_DEFINITION_VERSION = 'greengrass:GetSubscriptionDefinitionVersion',
  LIST_BULK_DEPLOYMENT_DETAILED_REPORTS = 'greengrass:ListBulkDeploymentDetailedReports',
  LIST_BULK_DEPLOYMENTS = 'greengrass:ListBulkDeployments',
  LIST_CONNECTOR_DEFINITION_VERSIONS = 'greengrass:ListConnectorDefinitionVersions',
  LIST_CONNECTOR_DEFINITIONS = 'greengrass:ListConnectorDefinitions',
  LIST_CORE_DEFINITION_VERSIONS = 'greengrass:ListCoreDefinitionVersions',
  LIST_CORE_DEFINITIONS = 'greengrass:ListCoreDefinitions',
  LIST_DEPLOYMENTS = 'greengrass:ListDeployments',
  LIST_DEVICE_DEFINITION_VERSIONS = 'greengrass:ListDeviceDefinitionVersions',
  LIST_DEVICE_DEFINITIONS = 'greengrass:ListDeviceDefinitions',
  LIST_FUNCTION_DEFINITION_VERSIONS = 'greengrass:ListFunctionDefinitionVersions',
  LIST_FUNCTION_DEFINITIONS = 'greengrass:ListFunctionDefinitions',
  LIST_GROUP_CERTIFICATE_AUTHORITIES = 'greengrass:ListGroupCertificateAuthorities',
  LIST_GROUP_VERSIONS = 'greengrass:ListGroupVersions',
  LIST_GROUPS = 'greengrass:ListGroups',
  LIST_LOGGER_DEFINITION_VERSIONS = 'greengrass:ListLoggerDefinitionVersions',
  LIST_LOGGER_DEFINITIONS = 'greengrass:ListLoggerDefinitions',
  LIST_RESOURCE_DEFINITION_VERSIONS = 'greengrass:ListResourceDefinitionVersions',
  LIST_RESOURCE_DEFINITIONS = 'greengrass:ListResourceDefinitions',
  LIST_SUBSCRIPTION_DEFINITION_VERSIONS = 'greengrass:ListSubscriptionDefinitionVersions',
  LIST_SUBSCRIPTION_DEFINITIONS = 'greengrass:ListSubscriptionDefinitions',
  LIST_TAGS_FOR_RESOURCE = 'greengrass:ListTagsForResource',
  RESET_DEPLOYMENTS = 'greengrass:ResetDeployments',
  START_BULK_DEPLOYMENT = 'greengrass:StartBulkDeployment',
  STOP_BULK_DEPLOYMENT = 'greengrass:StopBulkDeployment',
  TAG_RESOURCE = 'greengrass:TagResource',
  UNTAG_RESOURCE = 'greengrass:UntagResource',
  UPDATE_CONNECTIVITY_INFO = 'greengrass:UpdateConnectivityInfo',
  UPDATE_CONNECTOR_DEFINITION = 'greengrass:UpdateConnectorDefinition',
  UPDATE_CORE_DEFINITION = 'greengrass:UpdateCoreDefinition',
  UPDATE_DEVICE_DEFINITION = 'greengrass:UpdateDeviceDefinition',
  UPDATE_FUNCTION_DEFINITION = 'greengrass:UpdateFunctionDefinition',
  UPDATE_GROUP = 'greengrass:UpdateGroup',
  UPDATE_GROUP_CERTIFICATE_CONFIGURATION = 'greengrass:UpdateGroupCertificateConfiguration',
  UPDATE_LOGGER_DEFINITION = 'greengrass:UpdateLoggerDefinition',
  UPDATE_RESOURCE_DEFINITION = 'greengrass:UpdateResourceDefinition',
  UPDATE_SUBSCRIPTION_DEFINITION = 'greengrass:UpdateSubscriptionDefinition',
}
export enum REDSHIFT {
  ACCEPT_RESERVED_NODE_EXCHANGE = 'redshift:AcceptReservedNodeExchange',
  AUTHORIZE_CLUSTER_SECURITY_GROUP_INGRESS = 'redshift:AuthorizeClusterSecurityGroupIngress',
  AUTHORIZE_SNAPSHOT_ACCESS = 'redshift:AuthorizeSnapshotAccess',
  BATCH_DELETE_CLUSTER_SNAPSHOTS = 'redshift:BatchDeleteClusterSnapshots',
  BATCH_MODIFY_CLUSTER_SNAPSHOTS = 'redshift:BatchModifyClusterSnapshots',
  CANCEL_QUERY = 'redshift:CancelQuery',
  CANCEL_QUERY_SESSION = 'redshift:CancelQuerySession',
  CANCEL_RESIZE = 'redshift:CancelResize',
  COPY_CLUSTER_SNAPSHOT = 'redshift:CopyClusterSnapshot',
  CREATE_CLUSTER = 'redshift:CreateCluster',
  CREATE_CLUSTER_PARAMETER_GROUP = 'redshift:CreateClusterParameterGroup',
  CREATE_CLUSTER_SECURITY_GROUP = 'redshift:CreateClusterSecurityGroup',
  CREATE_CLUSTER_SNAPSHOT = 'redshift:CreateClusterSnapshot',
  CREATE_CLUSTER_SUBNET_GROUP = 'redshift:CreateClusterSubnetGroup',
  CREATE_CLUSTER_USER = 'redshift:CreateClusterUser',
  CREATE_EVENT_SUBSCRIPTION = 'redshift:CreateEventSubscription',
  CREATE_HSM_CLIENT_CERTIFICATE = 'redshift:CreateHsmClientCertificate',
  CREATE_HSM_CONFIGURATION = 'redshift:CreateHsmConfiguration',
  CREATE_SAVED_QUERY = 'redshift:CreateSavedQuery',
  CREATE_SCHEDULED_ACTION = 'redshift:CreateScheduledAction',
  CREATE_SNAPSHOT_COPY_GRANT = 'redshift:CreateSnapshotCopyGrant',
  CREATE_SNAPSHOT_SCHEDULE = 'redshift:CreateSnapshotSchedule',
  CREATE_TAGS = 'redshift:CreateTags',
  DELETE_CLUSTER = 'redshift:DeleteCluster',
  DELETE_CLUSTER_PARAMETER_GROUP = 'redshift:DeleteClusterParameterGroup',
  DELETE_CLUSTER_SECURITY_GROUP = 'redshift:DeleteClusterSecurityGroup',
  DELETE_CLUSTER_SNAPSHOT = 'redshift:DeleteClusterSnapshot',
  DELETE_CLUSTER_SUBNET_GROUP = 'redshift:DeleteClusterSubnetGroup',
  DELETE_EVENT_SUBSCRIPTION = 'redshift:DeleteEventSubscription',
  DELETE_HSM_CLIENT_CERTIFICATE = 'redshift:DeleteHsmClientCertificate',
  DELETE_HSM_CONFIGURATION = 'redshift:DeleteHsmConfiguration',
  DELETE_SAVED_QUERIES = 'redshift:DeleteSavedQueries',
  DELETE_SCHEDULED_ACTION = 'redshift:DeleteScheduledAction',
  DELETE_SNAPSHOT_COPY_GRANT = 'redshift:DeleteSnapshotCopyGrant',
  DELETE_SNAPSHOT_SCHEDULE = 'redshift:DeleteSnapshotSchedule',
  DELETE_TAGS = 'redshift:DeleteTags',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'redshift:DescribeAccountAttributes',
  DESCRIBE_CLUSTER_DB_REVISIONS = 'redshift:DescribeClusterDbRevisions',
  DESCRIBE_CLUSTER_PARAMETER_GROUPS = 'redshift:DescribeClusterParameterGroups',
  DESCRIBE_CLUSTER_PARAMETERS = 'redshift:DescribeClusterParameters',
  DESCRIBE_CLUSTER_SECURITY_GROUPS = 'redshift:DescribeClusterSecurityGroups',
  DESCRIBE_CLUSTER_SNAPSHOTS = 'redshift:DescribeClusterSnapshots',
  DESCRIBE_CLUSTER_SUBNET_GROUPS = 'redshift:DescribeClusterSubnetGroups',
  DESCRIBE_CLUSTER_TRACKS = 'redshift:DescribeClusterTracks',
  DESCRIBE_CLUSTER_VERSIONS = 'redshift:DescribeClusterVersions',
  DESCRIBE_CLUSTERS = 'redshift:DescribeClusters',
  DESCRIBE_DEFAULT_CLUSTER_PARAMETERS = 'redshift:DescribeDefaultClusterParameters',
  DESCRIBE_EVENT_CATEGORIES = 'redshift:DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'redshift:DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'redshift:DescribeEvents',
  DESCRIBE_HSM_CLIENT_CERTIFICATES = 'redshift:DescribeHsmClientCertificates',
  DESCRIBE_HSM_CONFIGURATIONS = 'redshift:DescribeHsmConfigurations',
  DESCRIBE_LOGGING_STATUS = 'redshift:DescribeLoggingStatus',
  DESCRIBE_NODE_CONFIGURATION_OPTIONS = 'redshift:DescribeNodeConfigurationOptions',
  DESCRIBE_ORDERABLE_CLUSTER_OPTIONS = 'redshift:DescribeOrderableClusterOptions',
  DESCRIBE_QUERY = 'redshift:DescribeQuery',
  DESCRIBE_RESERVED_NODE_OFFERINGS = 'redshift:DescribeReservedNodeOfferings',
  DESCRIBE_RESERVED_NODES = 'redshift:DescribeReservedNodes',
  DESCRIBE_RESIZE = 'redshift:DescribeResize',
  DESCRIBE_SAVED_QUERIES = 'redshift:DescribeSavedQueries',
  DESCRIBE_SCHEDULED_ACTIONS = 'redshift:DescribeScheduledActions',
  DESCRIBE_SNAPSHOT_COPY_GRANTS = 'redshift:DescribeSnapshotCopyGrants',
  DESCRIBE_SNAPSHOT_SCHEDULES = 'redshift:DescribeSnapshotSchedules',
  DESCRIBE_STORAGE = 'redshift:DescribeStorage',
  DESCRIBE_TABLE = 'redshift:DescribeTable',
  DESCRIBE_TABLE_RESTORE_STATUS = 'redshift:DescribeTableRestoreStatus',
  DESCRIBE_TAGS = 'redshift:DescribeTags',
  DISABLE_LOGGING = 'redshift:DisableLogging',
  DISABLE_SNAPSHOT_COPY = 'redshift:DisableSnapshotCopy',
  ENABLE_LOGGING = 'redshift:EnableLogging',
  ENABLE_SNAPSHOT_COPY = 'redshift:EnableSnapshotCopy',
  EXECUTE_QUERY = 'redshift:ExecuteQuery',
  FETCH_RESULTS = 'redshift:FetchResults',
  GET_CLUSTER_CREDENTIALS = 'redshift:GetClusterCredentials',
  GET_RESERVED_NODE_EXCHANGE_OFFERINGS = 'redshift:GetReservedNodeExchangeOfferings',
  JOIN_GROUP = 'redshift:JoinGroup',
  LIST_DATABASES = 'redshift:ListDatabases',
  LIST_SAVED_QUERIES = 'redshift:ListSavedQueries',
  LIST_SCHEMAS = 'redshift:ListSchemas',
  LIST_TABLES = 'redshift:ListTables',
  MODIFY_CLUSTER = 'redshift:ModifyCluster',
  MODIFY_CLUSTER_DB_REVISION = 'redshift:ModifyClusterDbRevision',
  MODIFY_CLUSTER_IAM_ROLES = 'redshift:ModifyClusterIamRoles',
  MODIFY_CLUSTER_MAINTENANCE = 'redshift:ModifyClusterMaintenance',
  MODIFY_CLUSTER_PARAMETER_GROUP = 'redshift:ModifyClusterParameterGroup',
  MODIFY_CLUSTER_SNAPSHOT = 'redshift:ModifyClusterSnapshot',
  MODIFY_CLUSTER_SNAPSHOT_SCHEDULE = 'redshift:ModifyClusterSnapshotSchedule',
  MODIFY_CLUSTER_SUBNET_GROUP = 'redshift:ModifyClusterSubnetGroup',
  MODIFY_EVENT_SUBSCRIPTION = 'redshift:ModifyEventSubscription',
  MODIFY_SAVED_QUERY = 'redshift:ModifySavedQuery',
  MODIFY_SCHEDULED_ACTION = 'redshift:ModifyScheduledAction',
  MODIFY_SNAPSHOT_COPY_RETENTION_PERIOD = 'redshift:ModifySnapshotCopyRetentionPeriod',
  MODIFY_SNAPSHOT_SCHEDULE = 'redshift:ModifySnapshotSchedule',
  PAUSE_CLUSTER = 'redshift:PauseCluster',
  PURCHASE_RESERVED_NODE_OFFERING = 'redshift:PurchaseReservedNodeOffering',
  REBOOT_CLUSTER = 'redshift:RebootCluster',
  RESET_CLUSTER_PARAMETER_GROUP = 'redshift:ResetClusterParameterGroup',
  RESIZE_CLUSTER = 'redshift:ResizeCluster',
  RESTORE_FROM_CLUSTER_SNAPSHOT = 'redshift:RestoreFromClusterSnapshot',
  RESTORE_TABLE_FROM_CLUSTER_SNAPSHOT = 'redshift:RestoreTableFromClusterSnapshot',
  RESUME_CLUSTER = 'redshift:ResumeCluster',
  REVOKE_CLUSTER_SECURITY_GROUP_INGRESS = 'redshift:RevokeClusterSecurityGroupIngress',
  REVOKE_SNAPSHOT_ACCESS = 'redshift:RevokeSnapshotAccess',
  ROTATE_ENCRYPTION_KEY = 'redshift:RotateEncryptionKey',
  VIEW_QUERIES_FROM_CONSOLE = 'redshift:ViewQueriesFromConsole',
  VIEW_QUERIES_IN_CONSOLE = 'redshift:ViewQueriesInConsole',
}
export enum WORKDOCS {
  ABORT_DOCUMENT_VERSION_UPLOAD = 'workdocs:AbortDocumentVersionUpload',
  ACTIVATE_USER = 'workdocs:ActivateUser',
  ADD_RESOURCE_PERMISSIONS = 'workdocs:AddResourcePermissions',
  ADD_USER_TO_GROUP = 'workdocs:AddUserToGroup',
  CHECK_ALIAS = 'workdocs:CheckAlias',
  CREATE_COMMENT = 'workdocs:CreateComment',
  CREATE_CUSTOM_METADATA = 'workdocs:CreateCustomMetadata',
  CREATE_FOLDER = 'workdocs:CreateFolder',
  CREATE_INSTANCE = 'workdocs:CreateInstance',
  CREATE_LABELS = 'workdocs:CreateLabels',
  CREATE_NOTIFICATION_SUBSCRIPTION = 'workdocs:CreateNotificationSubscription',
  CREATE_USER = 'workdocs:CreateUser',
  DEACTIVATE_USER = 'workdocs:DeactivateUser',
  DELETE_COMMENT = 'workdocs:DeleteComment',
  DELETE_CUSTOM_METADATA = 'workdocs:DeleteCustomMetadata',
  DELETE_DOCUMENT = 'workdocs:DeleteDocument',
  DELETE_FOLDER = 'workdocs:DeleteFolder',
  DELETE_FOLDER_CONTENTS = 'workdocs:DeleteFolderContents',
  DELETE_INSTANCE = 'workdocs:DeleteInstance',
  DELETE_LABELS = 'workdocs:DeleteLabels',
  DELETE_NOTIFICATION_SUBSCRIPTION = 'workdocs:DeleteNotificationSubscription',
  DELETE_USER = 'workdocs:DeleteUser',
  DEREGISTER_DIRECTORY = 'workdocs:DeregisterDirectory',
  DESCRIBE_ACTIVITIES = 'workdocs:DescribeActivities',
  DESCRIBE_AVAILABLE_DIRECTORIES = 'workdocs:DescribeAvailableDirectories',
  DESCRIBE_COMMENTS = 'workdocs:DescribeComments',
  DESCRIBE_DOCUMENT_VERSIONS = 'workdocs:DescribeDocumentVersions',
  DESCRIBE_FOLDER_CONTENTS = 'workdocs:DescribeFolderContents',
  DESCRIBE_GROUPS = 'workdocs:DescribeGroups',
  DESCRIBE_INSTANCES = 'workdocs:DescribeInstances',
  DESCRIBE_NOTIFICATION_SUBSCRIPTIONS = 'workdocs:DescribeNotificationSubscriptions',
  DESCRIBE_RESOURCE_PERMISSIONS = 'workdocs:DescribeResourcePermissions',
  DESCRIBE_ROOT_FOLDERS = 'workdocs:DescribeRootFolders',
  DESCRIBE_USERS = 'workdocs:DescribeUsers',
  DOWNLOAD_DOCUMENT_VERSION = 'workdocs:DownloadDocumentVersion',
  GET_CURRENT_USER = 'workdocs:GetCurrentUser',
  GET_DOCUMENT = 'workdocs:GetDocument',
  GET_DOCUMENT_PATH = 'workdocs:GetDocumentPath',
  GET_DOCUMENT_VERSION = 'workdocs:GetDocumentVersion',
  GET_FOLDER = 'workdocs:GetFolder',
  GET_FOLDER_PATH = 'workdocs:GetFolderPath',
  GET_RESOURCES = 'workdocs:GetResources',
  INITIATE_DOCUMENT_VERSION_UPLOAD = 'workdocs:InitiateDocumentVersionUpload',
  REGISTER_DIRECTORY = 'workdocs:RegisterDirectory',
  REMOVE_ALL_RESOURCE_PERMISSIONS = 'workdocs:RemoveAllResourcePermissions',
  REMOVE_RESOURCE_PERMISSION = 'workdocs:RemoveResourcePermission',
  UPDATE_DOCUMENT = 'workdocs:UpdateDocument',
  UPDATE_DOCUMENT_VERSION = 'workdocs:UpdateDocumentVersion',
  UPDATE_FOLDER = 'workdocs:UpdateFolder',
  UPDATE_INSTANCE_ALIAS = 'workdocs:UpdateInstanceAlias',
  UPDATE_USER = 'workdocs:UpdateUser',
}
export enum MARKETPLACE_MANAGEMENT_PORTAL {
  UPLOAD_FILES = 'aws-marketplace-management:uploadFiles',
  VIEW_MARKETING = 'aws-marketplace-management:viewMarketing',
  VIEW_REPORTS = 'aws-marketplace-management:viewReports',
  VIEW_SETTINGS = 'aws-marketplace-management:viewSettings',
  VIEW_SUPPORT = 'aws-marketplace-management:viewSupport',
}
export enum COMPREHEND_MEDICAL {
  DETECT_ENTITIES = 'comprehendmedical:DetectEntities',
  DETECT_PHI = 'comprehendmedical:DetectPHI',
}
export enum DEEPCOMPOSER {
  ASSOCIATE_COUPON = 'deepcomposer:AssociateCoupon',
  CREATE_AUDIO = 'deepcomposer:CreateAudio',
  CREATE_COMPOSITION = 'deepcomposer:CreateComposition',
  CREATE_MODEL = 'deepcomposer:CreateModel',
  DELETE_COMPOSITION = 'deepcomposer:DeleteComposition',
  DELETE_MODEL = 'deepcomposer:DeleteModel',
  GET_COMPOSITION = 'deepcomposer:GetComposition',
  GET_MODEL = 'deepcomposer:GetModel',
  GET_SAMPLE_MODEL = 'deepcomposer:GetSampleModel',
  LIST_COMPOSITIONS = 'deepcomposer:ListCompositions',
  LIST_MODELS = 'deepcomposer:ListModels',
  LIST_SAMPLE_MODELS = 'deepcomposer:ListSampleModels',
  LIST_TAGS_FOR_RESOURCE = 'deepcomposer:ListTagsForResource',
  LIST_TRAINING_TOPICS = 'deepcomposer:ListTrainingTopics',
  TAG_RESOURCE = 'deepcomposer:TagResource',
  UNTAG_RESOURCE = 'deepcomposer:UntagResource',
  UPDATE_COMPOSITION = 'deepcomposer:UpdateComposition',
  UPDATE_MODEL = 'deepcomposer:UpdateModel',
}
export enum MANAGED_BLOCKCHAIN {
  CREATE_MEMBER = 'managedblockchain:CreateMember',
  CREATE_NETWORK = 'managedblockchain:CreateNetwork',
  CREATE_NODE = 'managedblockchain:CreateNode',
  CREATE_PROPOSAL = 'managedblockchain:CreateProposal',
  DELETE_MEMBER = 'managedblockchain:DeleteMember',
  DELETE_NODE = 'managedblockchain:DeleteNode',
  GET_MEMBER = 'managedblockchain:GetMember',
  GET_NETWORK = 'managedblockchain:GetNetwork',
  GET_NODE = 'managedblockchain:GetNode',
  GET_PROPOSAL = 'managedblockchain:GetProposal',
  LIST_INVITATIONS = 'managedblockchain:ListInvitations',
  LIST_MEMBERS = 'managedblockchain:ListMembers',
  LIST_NETWORKS = 'managedblockchain:ListNetworks',
  LIST_NODES = 'managedblockchain:ListNodes',
  LIST_PROPOSAL_VOTES = 'managedblockchain:ListProposalVotes',
  LIST_PROPOSALS = 'managedblockchain:ListProposals',
  REJECT_INVITATION = 'managedblockchain:RejectInvitation',
  UPDATE_MEMBER = 'managedblockchain:UpdateMember',
  UPDATE_NODE = 'managedblockchain:UpdateNode',
  VOTE_ON_PROPOSAL = 'managedblockchain:VoteOnProposal',
}
export enum WAF {
  CREATE_BYTE_MATCH_SET = 'waf:CreateByteMatchSet',
  CREATE_GEO_MATCH_SET = 'waf:CreateGeoMatchSet',
  CREATE_IP_SET = 'waf:CreateIPSet',
  CREATE_RATE_BASED_RULE = 'waf:CreateRateBasedRule',
  CREATE_REGEX_MATCH_SET = 'waf:CreateRegexMatchSet',
  CREATE_REGEX_PATTERN_SET = 'waf:CreateRegexPatternSet',
  CREATE_RULE = 'waf:CreateRule',
  CREATE_RULE_GROUP = 'waf:CreateRuleGroup',
  CREATE_SIZE_CONSTRAINT_SET = 'waf:CreateSizeConstraintSet',
  CREATE_SQL_INJECTION_MATCH_SET = 'waf:CreateSqlInjectionMatchSet',
  CREATE_WEB_ACL = 'waf:CreateWebACL',
  CREATE_WEB_ACL_MIGRATION_STACK = 'waf:CreateWebACLMigrationStack',
  CREATE_XSS_MATCH_SET = 'waf:CreateXssMatchSet',
  DELETE_BYTE_MATCH_SET = 'waf:DeleteByteMatchSet',
  DELETE_GEO_MATCH_SET = 'waf:DeleteGeoMatchSet',
  DELETE_IP_SET = 'waf:DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'waf:DeleteLoggingConfiguration',
  DELETE_PERMISSION_POLICY = 'waf:DeletePermissionPolicy',
  DELETE_RATE_BASED_RULE = 'waf:DeleteRateBasedRule',
  DELETE_REGEX_MATCH_SET = 'waf:DeleteRegexMatchSet',
  DELETE_REGEX_PATTERN_SET = 'waf:DeleteRegexPatternSet',
  DELETE_RULE = 'waf:DeleteRule',
  DELETE_RULE_GROUP = 'waf:DeleteRuleGroup',
  DELETE_SIZE_CONSTRAINT_SET = 'waf:DeleteSizeConstraintSet',
  DELETE_SQL_INJECTION_MATCH_SET = 'waf:DeleteSqlInjectionMatchSet',
  DELETE_WEB_ACL = 'waf:DeleteWebACL',
  DELETE_XSS_MATCH_SET = 'waf:DeleteXssMatchSet',
  GET_BYTE_MATCH_SET = 'waf:GetByteMatchSet',
  GET_CHANGE_TOKEN = 'waf:GetChangeToken',
  GET_CHANGE_TOKEN_STATUS = 'waf:GetChangeTokenStatus',
  GET_GEO_MATCH_SET = 'waf:GetGeoMatchSet',
  GET_IP_SET = 'waf:GetIPSet',
  GET_LOGGING_CONFIGURATION = 'waf:GetLoggingConfiguration',
  GET_PERMISSION_POLICY = 'waf:GetPermissionPolicy',
  GET_RATE_BASED_RULE = 'waf:GetRateBasedRule',
  GET_RATE_BASED_RULE_MANAGED_KEYS = 'waf:GetRateBasedRuleManagedKeys',
  GET_REGEX_MATCH_SET = 'waf:GetRegexMatchSet',
  GET_REGEX_PATTERN_SET = 'waf:GetRegexPatternSet',
  GET_RULE = 'waf:GetRule',
  GET_RULE_GROUP = 'waf:GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'waf:GetSampledRequests',
  GET_SIZE_CONSTRAINT_SET = 'waf:GetSizeConstraintSet',
  GET_SQL_INJECTION_MATCH_SET = 'waf:GetSqlInjectionMatchSet',
  GET_WEB_ACL = 'waf:GetWebACL',
  GET_XSS_MATCH_SET = 'waf:GetXssMatchSet',
  LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'waf:ListActivatedRulesInRuleGroup',
  LIST_BYTE_MATCH_SETS = 'waf:ListByteMatchSets',
  LIST_GEO_MATCH_SETS = 'waf:ListGeoMatchSets',
  LIST_IP_SETS = 'waf:ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'waf:ListLoggingConfigurations',
  LIST_RATE_BASED_RULES = 'waf:ListRateBasedRules',
  LIST_REGEX_MATCH_SETS = 'waf:ListRegexMatchSets',
  LIST_REGEX_PATTERN_SETS = 'waf:ListRegexPatternSets',
  LIST_RULE_GROUPS = 'waf:ListRuleGroups',
  LIST_RULES = 'waf:ListRules',
  LIST_SIZE_CONSTRAINT_SETS = 'waf:ListSizeConstraintSets',
  LIST_SQL_INJECTION_MATCH_SETS = 'waf:ListSqlInjectionMatchSets',
  LIST_SUBSCRIBED_RULE_GROUPS = 'waf:ListSubscribedRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'waf:ListTagsForResource',
  LIST_WEB_AC_LS = 'waf:ListWebACLs',
  LIST_XSS_MATCH_SETS = 'waf:ListXssMatchSets',
  PUT_LOGGING_CONFIGURATION = 'waf:PutLoggingConfiguration',
  PUT_PERMISSION_POLICY = 'waf:PutPermissionPolicy',
  TAG_RESOURCE = 'waf:TagResource',
  UNTAG_RESOURCE = 'waf:UntagResource',
  UPDATE_BYTE_MATCH_SET = 'waf:UpdateByteMatchSet',
  UPDATE_GEO_MATCH_SET = 'waf:UpdateGeoMatchSet',
  UPDATE_IP_SET = 'waf:UpdateIPSet',
  UPDATE_RATE_BASED_RULE = 'waf:UpdateRateBasedRule',
  UPDATE_REGEX_MATCH_SET = 'waf:UpdateRegexMatchSet',
  UPDATE_REGEX_PATTERN_SET = 'waf:UpdateRegexPatternSet',
  UPDATE_RULE = 'waf:UpdateRule',
  UPDATE_RULE_GROUP = 'waf:UpdateRuleGroup',
  UPDATE_SIZE_CONSTRAINT_SET = 'waf:UpdateSizeConstraintSet',
  UPDATE_SQL_INJECTION_MATCH_SET = 'waf:UpdateSqlInjectionMatchSet',
  UPDATE_WEB_ACL = 'waf:UpdateWebACL',
  UPDATE_XSS_MATCH_SET = 'waf:UpdateXssMatchSet',
}
export enum APPSTREAM_20 {
  ASSOCIATE_FLEET = 'appstream:AssociateFleet',
  BATCH_ASSOCIATE_USER_STACK = 'appstream:BatchAssociateUserStack',
  BATCH_DISASSOCIATE_USER_STACK = 'appstream:BatchDisassociateUserStack',
  COPY_IMAGE = 'appstream:CopyImage',
  CREATE_DIRECTORY_CONFIG = 'appstream:CreateDirectoryConfig',
  CREATE_FLEET = 'appstream:CreateFleet',
  CREATE_IMAGE_BUILDER = 'appstream:CreateImageBuilder',
  CREATE_IMAGE_BUILDER_STREAMING_URL = 'appstream:CreateImageBuilderStreamingURL',
  CREATE_STACK = 'appstream:CreateStack',
  CREATE_STREAMING_URL = 'appstream:CreateStreamingURL',
  CREATE_USAGE_REPORT_SUBSCRIPTION = 'appstream:CreateUsageReportSubscription',
  CREATE_USER = 'appstream:CreateUser',
  DELETE_DIRECTORY_CONFIG = 'appstream:DeleteDirectoryConfig',
  DELETE_FLEET = 'appstream:DeleteFleet',
  DELETE_IMAGE = 'appstream:DeleteImage',
  DELETE_IMAGE_BUILDER = 'appstream:DeleteImageBuilder',
  DELETE_IMAGE_PERMISSIONS = 'appstream:DeleteImagePermissions',
  DELETE_STACK = 'appstream:DeleteStack',
  DELETE_USAGE_REPORT_SUBSCRIPTION = 'appstream:DeleteUsageReportSubscription',
  DELETE_USER = 'appstream:DeleteUser',
  DESCRIBE_DIRECTORY_CONFIGS = 'appstream:DescribeDirectoryConfigs',
  DESCRIBE_FLEETS = 'appstream:DescribeFleets',
  DESCRIBE_IMAGE_BUILDERS = 'appstream:DescribeImageBuilders',
  DESCRIBE_IMAGE_PERMISSIONS = 'appstream:DescribeImagePermissions',
  DESCRIBE_IMAGES = 'appstream:DescribeImages',
  DESCRIBE_SESSIONS = 'appstream:DescribeSessions',
  DESCRIBE_STACKS = 'appstream:DescribeStacks',
  DESCRIBE_USAGE_REPORT_SUBSCRIPTIONS = 'appstream:DescribeUsageReportSubscriptions',
  DESCRIBE_USER_STACK_ASSOCIATIONS = 'appstream:DescribeUserStackAssociations',
  DESCRIBE_USERS = 'appstream:DescribeUsers',
  DISABLE_USER = 'appstream:DisableUser',
  DISASSOCIATE_FLEET = 'appstream:DisassociateFleet',
  ENABLE_USER = 'appstream:EnableUser',
  EXPIRE_SESSION = 'appstream:ExpireSession',
  GET_IMAGE_BUILDERS = 'appstream:GetImageBuilders',
  GET_PARAMETERS_FOR_THEME_ASSET_UPLOAD = 'appstream:GetParametersForThemeAssetUpload',
  LIST_ASSOCIATED_FLEETS = 'appstream:ListAssociatedFleets',
  LIST_ASSOCIATED_STACKS = 'appstream:ListAssociatedStacks',
  LIST_TAGS_FOR_RESOURCE = 'appstream:ListTagsForResource',
  START_FLEET = 'appstream:StartFleet',
  START_IMAGE_BUILDER = 'appstream:StartImageBuilder',
  STOP_FLEET = 'appstream:StopFleet',
  STOP_IMAGE_BUILDER = 'appstream:StopImageBuilder',
  STREAM = 'appstream:Stream',
  TAG_RESOURCE = 'appstream:TagResource',
  UNTAG_RESOURCE = 'appstream:UntagResource',
  UPDATE_DIRECTORY_CONFIG = 'appstream:UpdateDirectoryConfig',
  UPDATE_FLEET = 'appstream:UpdateFleet',
  UPDATE_IMAGE_PERMISSIONS = 'appstream:UpdateImagePermissions',
  UPDATE_STACK = 'appstream:UpdateStack',
}
export enum QUICKSIGHT {
  CREATE_ADMIN = 'quicksight:CreateAdmin',
  CREATE_DASHBOARD = 'quicksight:CreateDashboard',
  CREATE_GROUP = 'quicksight:CreateGroup',
  CREATE_GROUP_MEMBERSHIP = 'quicksight:CreateGroupMembership',
  CREATE_IAM_POLICY_ASSIGNMENT = 'quicksight:CreateIAMPolicyAssignment',
  CREATE_READER = 'quicksight:CreateReader',
  CREATE_TEMPLATE = 'quicksight:CreateTemplate',
  CREATE_TEMPLATE_ALIAS = 'quicksight:CreateTemplateAlias',
  CREATE_THEME = 'quicksight:CreateTheme',
  CREATE_THEME_ALIAS = 'quicksight:CreateThemeAlias',
  CREATE_USER = 'quicksight:CreateUser',
  DELETE_DASHBOARD = 'quicksight:DeleteDashboard',
  DELETE_GROUP = 'quicksight:DeleteGroup',
  DELETE_GROUP_MEMBERSHIP = 'quicksight:DeleteGroupMembership',
  DELETE_IAM_POLICY_ASSIGNMENT = 'quicksight:DeleteIAMPolicyAssignment',
  DELETE_TEMPLATE = 'quicksight:DeleteTemplate',
  DELETE_TEMPLATE_ALIAS = 'quicksight:DeleteTemplateAlias',
  DELETE_THEME = 'quicksight:DeleteTheme',
  DELETE_THEME_ALIAS = 'quicksight:DeleteThemeAlias',
  DELETE_USER = 'quicksight:DeleteUser',
  DELETE_USER_BY_PRINCIPAL_ID = 'quicksight:DeleteUserByPrincipalId',
  DESCRIBE_DASHBOARD = 'quicksight:DescribeDashboard',
  DESCRIBE_DASHBOARD_PERMISSIONS = 'quicksight:DescribeDashboardPermissions',
  DESCRIBE_GROUP = 'quicksight:DescribeGroup',
  DESCRIBE_IAM_POLICY_ASSIGNMENT = 'quicksight:DescribeIAMPolicyAssignment',
  DESCRIBE_TEMPLATE = 'quicksight:DescribeTemplate',
  DESCRIBE_TEMPLATE_ALIAS = 'quicksight:DescribeTemplateAlias',
  DESCRIBE_TEMPLATE_PERMISSIONS = 'quicksight:DescribeTemplatePermissions',
  DESCRIBE_THEME = 'quicksight:DescribeTheme',
  DESCRIBE_THEME_ALIAS = 'quicksight:DescribeThemeAlias',
  DESCRIBE_THEME_PERMISSIONS = 'quicksight:DescribeThemePermissions',
  DESCRIBE_USER = 'quicksight:DescribeUser',
  GET_AUTH_CODE = 'quicksight:GetAuthCode',
  GET_DASHBOARD_EMBED_URL = 'quicksight:GetDashboardEmbedUrl',
  GET_GROUP_MAPPING = 'quicksight:GetGroupMapping',
  LIST_DASHBOARD_VERSIONS = 'quicksight:ListDashboardVersions',
  LIST_DASHBOARDS = 'quicksight:ListDashboards',
  LIST_GROUP_MEMBERSHIPS = 'quicksight:ListGroupMemberships',
  LIST_GROUPS = 'quicksight:ListGroups',
  LIST_IAM_POLICY_ASSIGNMENTS = 'quicksight:ListIAMPolicyAssignments',
  LIST_IAM_POLICY_ASSIGNMENTS_FOR_USER = 'quicksight:ListIAMPolicyAssignmentsForUser',
  LIST_TAGS_FOR_RESOURCE = 'quicksight:ListTagsForResource',
  LIST_TEMPLATE_ALIASES = 'quicksight:ListTemplateAliases',
  LIST_TEMPLATE_VERSIONS = 'quicksight:ListTemplateVersions',
  LIST_TEMPLATES = 'quicksight:ListTemplates',
  LIST_THEME_ALIASES = 'quicksight:ListThemeAliases',
  LIST_THEME_VERSIONS = 'quicksight:ListThemeVersions',
  LIST_THEMES = 'quicksight:ListThemes',
  LIST_USER_GROUPS = 'quicksight:ListUserGroups',
  LIST_USERS = 'quicksight:ListUsers',
  REGISTER_USER = 'quicksight:RegisterUser',
  SEARCH_DIRECTORY_GROUPS = 'quicksight:SearchDirectoryGroups',
  SET_GROUP_MAPPING = 'quicksight:SetGroupMapping',
  SUBSCRIBE = 'quicksight:Subscribe',
  TAG_RESOURCE = 'quicksight:TagResource',
  UNSUBSCRIBE = 'quicksight:Unsubscribe',
  UNTAG_RESOURCE = 'quicksight:UntagResource',
  UPDATE_DASHBOARD = 'quicksight:UpdateDashboard',
  UPDATE_DASHBOARD_PERMISSIONS = 'quicksight:UpdateDashboardPermissions',
  UPDATE_DASHBOARD_PUBLISHED_VERSION = 'quicksight:UpdateDashboardPublishedVersion',
  UPDATE_GROUP = 'quicksight:UpdateGroup',
  UPDATE_IAM_POLICY_ASSIGNMENT = 'quicksight:UpdateIAMPolicyAssignment',
  UPDATE_TEMPLATE = 'quicksight:UpdateTemplate',
  UPDATE_TEMPLATE_ALIAS = 'quicksight:UpdateTemplateAlias',
  UPDATE_TEMPLATE_PERMISSIONS = 'quicksight:UpdateTemplatePermissions',
  UPDATE_THEME = 'quicksight:UpdateTheme',
  UPDATE_THEME_ALIAS = 'quicksight:UpdateThemeAlias',
  UPDATE_THEME_PERMISSIONS = 'quicksight:UpdateThemePermissions',
  UPDATE_USER = 'quicksight:UpdateUser',
}
export enum WAF_V2 {
  ASSOCIATE_WEB_ACL = 'wafv2:AssociateWebACL',
  CHECK_CAPACITY = 'wafv2:CheckCapacity',
  CREATE_IP_SET = 'wafv2:CreateIPSet',
  CREATE_REGEX_PATTERN_SET = 'wafv2:CreateRegexPatternSet',
  CREATE_RULE_GROUP = 'wafv2:CreateRuleGroup',
  CREATE_WEB_ACL = 'wafv2:CreateWebACL',
  DELETE_FIREWALL_MANAGER_RULE_GROUPS = 'wafv2:DeleteFirewallManagerRuleGroups',
  DELETE_IP_SET = 'wafv2:DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'wafv2:DeleteLoggingConfiguration',
  DELETE_PERMISSION_POLICY = 'wafv2:DeletePermissionPolicy',
  DELETE_REGEX_PATTERN_SET = 'wafv2:DeleteRegexPatternSet',
  DELETE_RULE_GROUP = 'wafv2:DeleteRuleGroup',
  DELETE_WEB_ACL = 'wafv2:DeleteWebACL',
  DESCRIBE_MANAGED_RULE_GROUP = 'wafv2:DescribeManagedRuleGroup',
  DISASSOCIATE_FIREWALL_MANAGER = 'wafv2:DisassociateFirewallManager',
  DISASSOCIATE_WEB_ACL = 'wafv2:DisassociateWebACL',
  GET_IP_SET = 'wafv2:GetIPSet',
  GET_LOGGING_CONFIGURATION = 'wafv2:GetLoggingConfiguration',
  GET_PERMISSION_POLICY = 'wafv2:GetPermissionPolicy',
  GET_RATE_BASED_STATEMENT_MANAGED_KEYS = 'wafv2:GetRateBasedStatementManagedKeys',
  GET_REGEX_PATTERN_SET = 'wafv2:GetRegexPatternSet',
  GET_RULE_GROUP = 'wafv2:GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'wafv2:GetSampledRequests',
  GET_WEB_ACL = 'wafv2:GetWebACL',
  GET_WEB_ACL_FOR_RESOURCE = 'wafv2:GetWebACLForResource',
  LIST_AVAILABLE_MANAGED_RULE_GROUPS = 'wafv2:ListAvailableManagedRuleGroups',
  LIST_IP_SETS = 'wafv2:ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'wafv2:ListLoggingConfigurations',
  LIST_REGEX_PATTERN_SETS = 'wafv2:ListRegexPatternSets',
  LIST_RESOURCES_FOR_WEB_ACL = 'wafv2:ListResourcesForWebACL',
  LIST_RULE_GROUPS = 'wafv2:ListRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'wafv2:ListTagsForResource',
  LIST_WEB_AC_LS = 'wafv2:ListWebACLs',
  PUT_FIREWALL_MANAGER_RULE_GROUPS = 'wafv2:PutFirewallManagerRuleGroups',
  PUT_LOGGING_CONFIGURATION = 'wafv2:PutLoggingConfiguration',
  PUT_PERMISSION_POLICY = 'wafv2:PutPermissionPolicy',
  TAG_RESOURCE = 'wafv2:TagResource',
  UNTAG_RESOURCE = 'wafv2:UntagResource',
  UPDATE_IP_SET = 'wafv2:UpdateIPSet',
  UPDATE_REGEX_PATTERN_SET = 'wafv2:UpdateRegexPatternSet',
  UPDATE_RULE_GROUP = 'wafv2:UpdateRuleGroup',
  UPDATE_WEB_ACL = 'wafv2:UpdateWebACL',
}
export enum WORKSPACES_APPLICATION_MANAGER {
  AUTHENTICATE_PACKAGER = 'wam:AuthenticatePackager',
}
export enum DATA_LIFECYCLE_MANAGER {
  CREATE_LIFECYCLE_POLICY = 'dlm:CreateLifecyclePolicy',
  DELETE_LIFECYCLE_POLICY = 'dlm:DeleteLifecyclePolicy',
  GET_LIFECYCLE_POLICIES = 'dlm:GetLifecyclePolicies',
  GET_LIFECYCLE_POLICY = 'dlm:GetLifecyclePolicy',
  LIST_TAGS_FOR_RESOURCE = 'dlm:ListTagsForResource',
  TAG_RESOURCE = 'dlm:TagResource',
  UNTAG_RESOURCE = 'dlm:UntagResource',
  UPDATE_LIFECYCLE_POLICY = 'dlm:UpdateLifecyclePolicy',
}
export enum WELLARCHITECTED_TOOL {
  CREATE_WORKLOAD = 'wellarchitected:CreateWorkload',
  CREATE_WORKLOAD_SHARE = 'wellarchitected:CreateWorkloadShare',
  DELETE_WORKLOAD = 'wellarchitected:DeleteWorkload',
  GET_WORKLOAD = 'wellarchitected:GetWorkload',
  LIST_WORKLOADS = 'wellarchitected:ListWorkloads',
}
export enum CONNECTOR_SERVICE {
  GET_CONNECTOR_HEALTH = 'awsconnector:GetConnectorHealth',
  REGISTER_CONNECTOR = 'awsconnector:RegisterConnector',
  VALIDATE_CONNECTOR_ID = 'awsconnector:ValidateConnectorId',
}
export enum KENDRA {
  BATCH_DELETE_DOCUMENT = 'kendra:BatchDeleteDocument',
  BATCH_PUT_DOCUMENT = 'kendra:BatchPutDocument',
  CREATE_DATA_SOURCE = 'kendra:CreateDataSource',
  CREATE_FAQ = 'kendra:CreateFaq',
  CREATE_INDEX = 'kendra:CreateIndex',
  DELETE_DATA_SOURCE = 'kendra:DeleteDataSource',
  DELETE_FAQ = 'kendra:DeleteFaq',
  DELETE_INDEX = 'kendra:DeleteIndex',
  DESCRIBE_DATA_SOURCE = 'kendra:DescribeDataSource',
  DESCRIBE_FAQ = 'kendra:DescribeFaq',
  DESCRIBE_INDEX = 'kendra:DescribeIndex',
  LIST_DATA_SOURCE_SYNC_JOBS = 'kendra:ListDataSourceSyncJobs',
  LIST_DATA_SOURCES = 'kendra:ListDataSources',
  LIST_FAQS = 'kendra:ListFaqs',
  LIST_INDICES = 'kendra:ListIndices',
  LIST_TAGS_FOR_RESOURCE = 'kendra:ListTagsForResource',
  QUERY = 'kendra:Query',
  START_DATA_SOURCE_SYNC_JOB = 'kendra:StartDataSourceSyncJob',
  STOP_DATA_SOURCE_SYNC_JOB = 'kendra:StopDataSourceSyncJob',
  SUBMIT_FEEDBACK = 'kendra:SubmitFeedback',
  TAG_RESOURCE = 'kendra:TagResource',
  UNTAG_RESOURCE = 'kendra:UntagResource',
  UPDATE_DATA_SOURCE = 'kendra:UpdateDataSource',
  UPDATE_INDEX = 'kendra:UpdateIndex',
}
export enum INTERACTIVE_VIDEO_SERVICE {
  BATCH_GET_CHANNEL = 'ivs:BatchGetChannel',
  BATCH_GET_STREAM_KEY = 'ivs:BatchGetStreamKey',
  CREATE_CHANNEL = 'ivs:CreateChannel',
  CREATE_STREAM_KEY = 'ivs:CreateStreamKey',
  DELETE_CHANNEL = 'ivs:DeleteChannel',
  DELETE_PLAYBACK_KEY_PAIR = 'ivs:DeletePlaybackKeyPair',
  DELETE_STREAM_KEY = 'ivs:DeleteStreamKey',
  GET_CHANNEL = 'ivs:GetChannel',
  GET_PLAYBACK_KEY_PAIR = 'ivs:GetPlaybackKeyPair',
  GET_STREAM = 'ivs:GetStream',
  GET_STREAM_KEY = 'ivs:GetStreamKey',
  IMPORT_PLAYBACK_KEY_PAIR = 'ivs:ImportPlaybackKeyPair',
  LIST_CHANNELS = 'ivs:ListChannels',
  LIST_PLAYBACK_KEY_PAIRS = 'ivs:ListPlaybackKeyPairs',
  LIST_STREAM_KEYS = 'ivs:ListStreamKeys',
  LIST_STREAMS = 'ivs:ListStreams',
  LIST_TAGS_FOR_RESOURCE = 'ivs:ListTagsForResource',
  PUT_METADATA = 'ivs:PutMetadata',
  STOP_STREAM = 'ivs:StopStream',
  TAG_RESOURCE = 'ivs:TagResource',
  UNTAG_RESOURCE = 'ivs:UntagResource',
  UPDATE_CHANNEL = 'ivs:UpdateChannel',
}
export enum LIGHTSAIL {
  ALLOCATE_STATIC_IP = 'lightsail:AllocateStaticIp',
  ATTACH_DISK = 'lightsail:AttachDisk',
  ATTACH_INSTANCES_TO_LOAD_BALANCER = 'lightsail:AttachInstancesToLoadBalancer',
  ATTACH_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:AttachLoadBalancerTlsCertificate',
  ATTACH_STATIC_IP = 'lightsail:AttachStaticIp',
  CLOSE_INSTANCE_PUBLIC_PORTS = 'lightsail:CloseInstancePublicPorts',
  COPY_SNAPSHOT = 'lightsail:CopySnapshot',
  CREATE_CLOUD_FORMATION_STACK = 'lightsail:CreateCloudFormationStack',
  CREATE_DISK = 'lightsail:CreateDisk',
  CREATE_DISK_FROM_SNAPSHOT = 'lightsail:CreateDiskFromSnapshot',
  CREATE_DISK_SNAPSHOT = 'lightsail:CreateDiskSnapshot',
  CREATE_DOMAIN = 'lightsail:CreateDomain',
  CREATE_DOMAIN_ENTRY = 'lightsail:CreateDomainEntry',
  CREATE_INSTANCE_SNAPSHOT = 'lightsail:CreateInstanceSnapshot',
  CREATE_INSTANCES = 'lightsail:CreateInstances',
  CREATE_INSTANCES_FROM_SNAPSHOT = 'lightsail:CreateInstancesFromSnapshot',
  CREATE_KEY_PAIR = 'lightsail:CreateKeyPair',
  CREATE_LOAD_BALANCER = 'lightsail:CreateLoadBalancer',
  CREATE_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:CreateLoadBalancerTlsCertificate',
  CREATE_RELATIONAL_DATABASE = 'lightsail:CreateRelationalDatabase',
  CREATE_RELATIONAL_DATABASE_FROM_SNAPSHOT = 'lightsail:CreateRelationalDatabaseFromSnapshot',
  CREATE_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:CreateRelationalDatabaseSnapshot',
  DELETE_DISK = 'lightsail:DeleteDisk',
  DELETE_DISK_SNAPSHOT = 'lightsail:DeleteDiskSnapshot',
  DELETE_DOMAIN = 'lightsail:DeleteDomain',
  DELETE_DOMAIN_ENTRY = 'lightsail:DeleteDomainEntry',
  DELETE_INSTANCE = 'lightsail:DeleteInstance',
  DELETE_INSTANCE_SNAPSHOT = 'lightsail:DeleteInstanceSnapshot',
  DELETE_KEY_PAIR = 'lightsail:DeleteKeyPair',
  DELETE_KNOWN_HOST_KEYS = 'lightsail:DeleteKnownHostKeys',
  DELETE_LOAD_BALANCER = 'lightsail:DeleteLoadBalancer',
  DELETE_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:DeleteLoadBalancerTlsCertificate',
  DELETE_RELATIONAL_DATABASE = 'lightsail:DeleteRelationalDatabase',
  DELETE_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:DeleteRelationalDatabaseSnapshot',
  DETACH_DISK = 'lightsail:DetachDisk',
  DETACH_INSTANCES_FROM_LOAD_BALANCER = 'lightsail:DetachInstancesFromLoadBalancer',
  DETACH_STATIC_IP = 'lightsail:DetachStaticIp',
  DOWNLOAD_DEFAULT_KEY_PAIR = 'lightsail:DownloadDefaultKeyPair',
  EXPORT_SNAPSHOT = 'lightsail:ExportSnapshot',
  GET_ACTIVE_NAMES = 'lightsail:GetActiveNames',
  GET_BLUEPRINTS = 'lightsail:GetBlueprints',
  GET_BUNDLES = 'lightsail:GetBundles',
  GET_CLOUD_FORMATION_STACK_RECORDS = 'lightsail:GetCloudFormationStackRecords',
  GET_DISK = 'lightsail:GetDisk',
  GET_DISK_SNAPSHOT = 'lightsail:GetDiskSnapshot',
  GET_DISK_SNAPSHOTS = 'lightsail:GetDiskSnapshots',
  GET_DISKS = 'lightsail:GetDisks',
  GET_DOMAIN = 'lightsail:GetDomain',
  GET_DOMAINS = 'lightsail:GetDomains',
  GET_EXPORT_SNAPSHOT_RECORDS = 'lightsail:GetExportSnapshotRecords',
  GET_INSTANCE = 'lightsail:GetInstance',
  GET_INSTANCE_ACCESS_DETAILS = 'lightsail:GetInstanceAccessDetails',
  GET_INSTANCE_METRIC_DATA = 'lightsail:GetInstanceMetricData',
  GET_INSTANCE_PORT_STATES = 'lightsail:GetInstancePortStates',
  GET_INSTANCE_SNAPSHOT = 'lightsail:GetInstanceSnapshot',
  GET_INSTANCE_SNAPSHOTS = 'lightsail:GetInstanceSnapshots',
  GET_INSTANCE_STATE = 'lightsail:GetInstanceState',
  GET_INSTANCES = 'lightsail:GetInstances',
  GET_KEY_PAIR = 'lightsail:GetKeyPair',
  GET_KEY_PAIRS = 'lightsail:GetKeyPairs',
  GET_LOAD_BALANCER = 'lightsail:GetLoadBalancer',
  GET_LOAD_BALANCER_METRIC_DATA = 'lightsail:GetLoadBalancerMetricData',
  GET_LOAD_BALANCER_TLS_CERTIFICATES = 'lightsail:GetLoadBalancerTlsCertificates',
  GET_LOAD_BALANCERS = 'lightsail:GetLoadBalancers',
  GET_OPERATION = 'lightsail:GetOperation',
  GET_OPERATIONS = 'lightsail:GetOperations',
  GET_OPERATIONS_FOR_RESOURCE = 'lightsail:GetOperationsForResource',
  GET_REGIONS = 'lightsail:GetRegions',
  GET_RELATIONAL_DATABASE = 'lightsail:GetRelationalDatabase',
  GET_RELATIONAL_DATABASE_BLUEPRINTS = 'lightsail:GetRelationalDatabaseBlueprints',
  GET_RELATIONAL_DATABASE_BUNDLES = 'lightsail:GetRelationalDatabaseBundles',
  GET_RELATIONAL_DATABASE_EVENTS = 'lightsail:GetRelationalDatabaseEvents',
  GET_RELATIONAL_DATABASE_LOG_EVENTS = 'lightsail:GetRelationalDatabaseLogEvents',
  GET_RELATIONAL_DATABASE_LOG_STREAMS = 'lightsail:GetRelationalDatabaseLogStreams',
  GET_RELATIONAL_DATABASE_MASTER_USER_PASSWORD = 'lightsail:GetRelationalDatabaseMasterUserPassword',
  GET_RELATIONAL_DATABASE_METRIC_DATA = 'lightsail:GetRelationalDatabaseMetricData',
  GET_RELATIONAL_DATABASE_PARAMETERS = 'lightsail:GetRelationalDatabaseParameters',
  GET_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:GetRelationalDatabaseSnapshot',
  GET_RELATIONAL_DATABASE_SNAPSHOTS = 'lightsail:GetRelationalDatabaseSnapshots',
  GET_RELATIONAL_DATABASES = 'lightsail:GetRelationalDatabases',
  GET_STATIC_IP = 'lightsail:GetStaticIp',
  GET_STATIC_IPS = 'lightsail:GetStaticIps',
  IMPORT_KEY_PAIR = 'lightsail:ImportKeyPair',
  IS_VPC_PEERED = 'lightsail:IsVpcPeered',
  OPEN_INSTANCE_PUBLIC_PORTS = 'lightsail:OpenInstancePublicPorts',
  PEER_VPC = 'lightsail:PeerVpc',
  PUT_INSTANCE_PUBLIC_PORTS = 'lightsail:PutInstancePublicPorts',
  REBOOT_INSTANCE = 'lightsail:RebootInstance',
  REBOOT_RELATIONAL_DATABASE = 'lightsail:RebootRelationalDatabase',
  RELEASE_STATIC_IP = 'lightsail:ReleaseStaticIp',
  START_INSTANCE = 'lightsail:StartInstance',
  START_RELATIONAL_DATABASE = 'lightsail:StartRelationalDatabase',
  STOP_INSTANCE = 'lightsail:StopInstance',
  STOP_RELATIONAL_DATABASE = 'lightsail:StopRelationalDatabase',
  TAG_RESOURCE = 'lightsail:TagResource',
  UNPEER_VPC = 'lightsail:UnpeerVpc',
  UNTAG_RESOURCE = 'lightsail:UntagResource',
  UPDATE_DOMAIN_ENTRY = 'lightsail:UpdateDomainEntry',
  UPDATE_LOAD_BALANCER_ATTRIBUTE = 'lightsail:UpdateLoadBalancerAttribute',
  UPDATE_RELATIONAL_DATABASE = 'lightsail:UpdateRelationalDatabase',
  UPDATE_RELATIONAL_DATABASE_PARAMETERS = 'lightsail:UpdateRelationalDatabaseParameters',
}
export enum BACKUP_STORAGE {
  MOUNT_CAPSULE = 'backup-storage:MountCapsule',
}
export enum COGNITO_SYNC {
  BULK_PUBLISH = 'cognito-sync:BulkPublish',
  DELETE_DATASET = 'cognito-sync:DeleteDataset',
  DESCRIBE_DATASET = 'cognito-sync:DescribeDataset',
  DESCRIBE_IDENTITY_POOL_USAGE = 'cognito-sync:DescribeIdentityPoolUsage',
  DESCRIBE_IDENTITY_USAGE = 'cognito-sync:DescribeIdentityUsage',
  GET_BULK_PUBLISH_DETAILS = 'cognito-sync:GetBulkPublishDetails',
  GET_COGNITO_EVENTS = 'cognito-sync:GetCognitoEvents',
  GET_IDENTITY_POOL_CONFIGURATION = 'cognito-sync:GetIdentityPoolConfiguration',
  LIST_DATASETS = 'cognito-sync:ListDatasets',
  LIST_IDENTITY_POOL_USAGE = 'cognito-sync:ListIdentityPoolUsage',
  LIST_RECORDS = 'cognito-sync:ListRecords',
  QUERY_RECORDS = 'cognito-sync:QueryRecords',
  REGISTER_DEVICE = 'cognito-sync:RegisterDevice',
  SET_COGNITO_EVENTS = 'cognito-sync:SetCognitoEvents',
  SET_DATASET_CONFIGURATION = 'cognito-sync:SetDatasetConfiguration',
  SET_IDENTITY_POOL_CONFIGURATION = 'cognito-sync:SetIdentityPoolConfiguration',
  SUBSCRIBE_TO_DATASET = 'cognito-sync:SubscribeToDataset',
  UNSUBSCRIBE_FROM_DATASET = 'cognito-sync:UnsubscribeFromDataset',
  UPDATE_RECORDS = 'cognito-sync:UpdateRecords',
}
export enum CLOUDSEARCH {
  ADD_TAGS = 'cloudsearch:AddTags',
  BUILD_SUGGESTERS = 'cloudsearch:BuildSuggesters',
  CREATE_DOMAIN = 'cloudsearch:CreateDomain',
  DEFINE_ANALYSIS_SCHEME = 'cloudsearch:DefineAnalysisScheme',
  DEFINE_EXPRESSION = 'cloudsearch:DefineExpression',
  DEFINE_INDEX_FIELD = 'cloudsearch:DefineIndexField',
  DEFINE_SUGGESTER = 'cloudsearch:DefineSuggester',
  DELETE_ANALYSIS_SCHEME = 'cloudsearch:DeleteAnalysisScheme',
  DELETE_DOMAIN = 'cloudsearch:DeleteDomain',
  DELETE_EXPRESSION = 'cloudsearch:DeleteExpression',
  DELETE_INDEX_FIELD = 'cloudsearch:DeleteIndexField',
  DELETE_SUGGESTER = 'cloudsearch:DeleteSuggester',
  DESCRIBE_ANALYSIS_SCHEMES = 'cloudsearch:DescribeAnalysisSchemes',
  DESCRIBE_AVAILABILITY_OPTIONS = 'cloudsearch:DescribeAvailabilityOptions',
  DESCRIBE_DOMAIN_ENDPOINT_OPTIONS = 'cloudsearch:DescribeDomainEndpointOptions',
  DESCRIBE_DOMAINS = 'cloudsearch:DescribeDomains',
  DESCRIBE_EXPRESSIONS = 'cloudsearch:DescribeExpressions',
  DESCRIBE_INDEX_FIELDS = 'cloudsearch:DescribeIndexFields',
  DESCRIBE_SCALING_PARAMETERS = 'cloudsearch:DescribeScalingParameters',
  DESCRIBE_SERVICE_ACCESS_POLICIES = 'cloudsearch:DescribeServiceAccessPolicies',
  DESCRIBE_SUGGESTERS = 'cloudsearch:DescribeSuggesters',
  INDEX_DOCUMENTS = 'cloudsearch:IndexDocuments',
  LIST_DOMAIN_NAMES = 'cloudsearch:ListDomainNames',
  LIST_TAGS = 'cloudsearch:ListTags',
  REMOVE_TAGS = 'cloudsearch:RemoveTags',
  UPDATE_AVAILABILITY_OPTIONS = 'cloudsearch:UpdateAvailabilityOptions',
  UPDATE_DOMAIN_ENDPOINT_OPTIONS = 'cloudsearch:UpdateDomainEndpointOptions',
  UPDATE_SCALING_PARAMETERS = 'cloudsearch:UpdateScalingParameters',
  UPDATE_SERVICE_ACCESS_POLICIES = 'cloudsearch:UpdateServiceAccessPolicies',
  DOCUMENT = 'cloudsearch:document',
  SEARCH = 'cloudsearch:search',
  SUGGEST = 'cloudsearch:suggest',
}
export enum ELASTIC_TRANSCODER {
  CANCEL_JOB = 'elastictranscoder:CancelJob',
  CREATE_JOB = 'elastictranscoder:CreateJob',
  CREATE_PIPELINE = 'elastictranscoder:CreatePipeline',
  CREATE_PRESET = 'elastictranscoder:CreatePreset',
  DELETE_PIPELINE = 'elastictranscoder:DeletePipeline',
  DELETE_PRESET = 'elastictranscoder:DeletePreset',
  LIST_JOBS_BY_PIPELINE = 'elastictranscoder:ListJobsByPipeline',
  LIST_JOBS_BY_STATUS = 'elastictranscoder:ListJobsByStatus',
  LIST_PIPELINES = 'elastictranscoder:ListPipelines',
  LIST_PRESETS = 'elastictranscoder:ListPresets',
  READ_JOB = 'elastictranscoder:ReadJob',
  READ_PIPELINE = 'elastictranscoder:ReadPipeline',
  READ_PRESET = 'elastictranscoder:ReadPreset',
  TEST_ROLE = 'elastictranscoder:TestRole',
  UPDATE_PIPELINE = 'elastictranscoder:UpdatePipeline',
  UPDATE_PIPELINE_NOTIFICATIONS = 'elastictranscoder:UpdatePipelineNotifications',
  UPDATE_PIPELINE_STATUS = 'elastictranscoder:UpdatePipelineStatus',
}
export enum PRICE_LIST {
  DESCRIBE_SERVICES = 'pricing:DescribeServices',
  GET_ATTRIBUTE_VALUES = 'pricing:GetAttributeValues',
  GET_PRODUCTS = 'pricing:GetProducts',
}
export enum BACKUP {
  COPY_INTO_BACKUP_VAULT = 'backup:CopyIntoBackupVault',
  CREATE_BACKUP_PLAN = 'backup:CreateBackupPlan',
  CREATE_BACKUP_SELECTION = 'backup:CreateBackupSelection',
  CREATE_BACKUP_VAULT = 'backup:CreateBackupVault',
  DELETE_BACKUP_PLAN = 'backup:DeleteBackupPlan',
  DELETE_BACKUP_SELECTION = 'backup:DeleteBackupSelection',
  DELETE_BACKUP_VAULT = 'backup:DeleteBackupVault',
  DELETE_BACKUP_VAULT_ACCESS_POLICY = 'backup:DeleteBackupVaultAccessPolicy',
  DELETE_BACKUP_VAULT_NOTIFICATIONS = 'backup:DeleteBackupVaultNotifications',
  DELETE_RECOVERY_POINT = 'backup:DeleteRecoveryPoint',
  DESCRIBE_BACKUP_JOB = 'backup:DescribeBackupJob',
  DESCRIBE_BACKUP_VAULT = 'backup:DescribeBackupVault',
  DESCRIBE_COPY_JOB = 'backup:DescribeCopyJob',
  DESCRIBE_PROTECTED_RESOURCE = 'backup:DescribeProtectedResource',
  DESCRIBE_RECOVERY_POINT = 'backup:DescribeRecoveryPoint',
  DESCRIBE_REGION_SETTINGS = 'backup:DescribeRegionSettings',
  DESCRIBE_RESTORE_JOB = 'backup:DescribeRestoreJob',
  EXPORT_BACKUP_PLAN_TEMPLATE = 'backup:ExportBackupPlanTemplate',
  GET_BACKUP_PLAN = 'backup:GetBackupPlan',
  GET_BACKUP_PLAN_FROM_JSON = 'backup:GetBackupPlanFromJSON',
  GET_BACKUP_PLAN_FROM_TEMPLATE = 'backup:GetBackupPlanFromTemplate',
  GET_BACKUP_SELECTION = 'backup:GetBackupSelection',
  GET_BACKUP_VAULT_ACCESS_POLICY = 'backup:GetBackupVaultAccessPolicy',
  GET_BACKUP_VAULT_NOTIFICATIONS = 'backup:GetBackupVaultNotifications',
  GET_RECOVERY_POINT_RESTORE_METADATA = 'backup:GetRecoveryPointRestoreMetadata',
  GET_SUPPORTED_RESOURCE_TYPES = 'backup:GetSupportedResourceTypes',
  LIST_BACKUP_JOBS = 'backup:ListBackupJobs',
  LIST_BACKUP_PLAN_TEMPLATES = 'backup:ListBackupPlanTemplates',
  LIST_BACKUP_PLAN_VERSIONS = 'backup:ListBackupPlanVersions',
  LIST_BACKUP_PLANS = 'backup:ListBackupPlans',
  LIST_BACKUP_SELECTIONS = 'backup:ListBackupSelections',
  LIST_BACKUP_VAULTS = 'backup:ListBackupVaults',
  LIST_COPY_JOBS = 'backup:ListCopyJobs',
  LIST_PROTECTED_RESOURCES = 'backup:ListProtectedResources',
  LIST_RECOVERY_POINTS_BY_BACKUP_VAULT = 'backup:ListRecoveryPointsByBackupVault',
  LIST_RECOVERY_POINTS_BY_RESOURCE = 'backup:ListRecoveryPointsByResource',
  LIST_RESTORE_JOBS = 'backup:ListRestoreJobs',
  LIST_TAGS = 'backup:ListTags',
  PUT_BACKUP_VAULT_ACCESS_POLICY = 'backup:PutBackupVaultAccessPolicy',
  PUT_BACKUP_VAULT_NOTIFICATIONS = 'backup:PutBackupVaultNotifications',
  START_BACKUP_JOB = 'backup:StartBackupJob',
  START_COPY_JOB = 'backup:StartCopyJob',
  START_RESTORE_JOB = 'backup:StartRestoreJob',
  STOP_BACKUP_JOB = 'backup:StopBackupJob',
  TAG_RESOURCE = 'backup:TagResource',
  UNTAG_RESOURCE = 'backup:UntagResource',
  UPDATE_BACKUP_PLAN = 'backup:UpdateBackupPlan',
  UPDATE_RECOVERY_POINT_LIFECYCLE = 'backup:UpdateRecoveryPointLifecycle',
  UPDATE_REGION_SETTINGS = 'backup:UpdateRegionSettings',
}
export enum MOBILE_ANALYTICS {
  GET_FINANCIAL_REPORTS = 'mobileanalytics:GetFinancialReports',
  GET_REPORTS = 'mobileanalytics:GetReports',
  PUT_EVENTS = 'mobileanalytics:PutEvents',
}
export enum BRAKET {
  CANCEL_QUANTUM_TASK = 'braket:CancelQuantumTask',
  CREATE_QUANTUM_TASK = 'braket:CreateQuantumTask',
  GET_DEVICE = 'braket:GetDevice',
  GET_QUANTUM_TASK = 'braket:GetQuantumTask',
  SEARCH_DEVICES = 'braket:SearchDevices',
  SEARCH_QUANTUM_TASKS = 'braket:SearchQuantumTasks',
}
export enum IOT_DEVICE_TESTER {
  CHECK_VERSION = 'iot-device-tester:CheckVersion',
  DOWNLOAD_TEST_SUITE = 'iot-device-tester:DownloadTestSuite',
  LATEST_IDT = 'iot-device-tester:LatestIdt',
  SEND_METRICS = 'iot-device-tester:SendMetrics',
  SUPPORTED_VERSION = 'iot-device-tester:SupportedVersion',
}
export enum DATABASE_MIGRATION_SERVICE {
  ADD_TAGS_TO_RESOURCE = 'dms:AddTagsToResource',
  APPLY_PENDING_MAINTENANCE_ACTION = 'dms:ApplyPendingMaintenanceAction',
  CREATE_ENDPOINT = 'dms:CreateEndpoint',
  CREATE_EVENT_SUBSCRIPTION = 'dms:CreateEventSubscription',
  CREATE_REPLICATION_INSTANCE = 'dms:CreateReplicationInstance',
  CREATE_REPLICATION_SUBNET_GROUP = 'dms:CreateReplicationSubnetGroup',
  CREATE_REPLICATION_TASK = 'dms:CreateReplicationTask',
  DELETE_CERTIFICATE = 'dms:DeleteCertificate',
  DELETE_ENDPOINT = 'dms:DeleteEndpoint',
  DELETE_EVENT_SUBSCRIPTION = 'dms:DeleteEventSubscription',
  DELETE_REPLICATION_INSTANCE = 'dms:DeleteReplicationInstance',
  DELETE_REPLICATION_SUBNET_GROUP = 'dms:DeleteReplicationSubnetGroup',
  DELETE_REPLICATION_TASK = 'dms:DeleteReplicationTask',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'dms:DescribeAccountAttributes',
  DESCRIBE_CERTIFICATES = 'dms:DescribeCertificates',
  DESCRIBE_CONNECTIONS = 'dms:DescribeConnections',
  DESCRIBE_ENDPOINT_TYPES = 'dms:DescribeEndpointTypes',
  DESCRIBE_ENDPOINTS = 'dms:DescribeEndpoints',
  DESCRIBE_EVENT_CATEGORIES = 'dms:DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'dms:DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'dms:DescribeEvents',
  DESCRIBE_ORDERABLE_REPLICATION_INSTANCES = 'dms:DescribeOrderableReplicationInstances',
  DESCRIBE_REFRESH_SCHEMAS_STATUS = 'dms:DescribeRefreshSchemasStatus',
  DESCRIBE_REPLICATION_INSTANCE_TASK_LOGS = 'dms:DescribeReplicationInstanceTaskLogs',
  DESCRIBE_REPLICATION_INSTANCES = 'dms:DescribeReplicationInstances',
  DESCRIBE_REPLICATION_SUBNET_GROUPS = 'dms:DescribeReplicationSubnetGroups',
  DESCRIBE_REPLICATION_TASK_ASSESSMENT_RESULTS = 'dms:DescribeReplicationTaskAssessmentResults',
  DESCRIBE_REPLICATION_TASKS = 'dms:DescribeReplicationTasks',
  DESCRIBE_SCHEMAS = 'dms:DescribeSchemas',
  DESCRIBE_TABLE_STATISTICS = 'dms:DescribeTableStatistics',
  IMPORT_CERTIFICATE = 'dms:ImportCertificate',
  LIST_TAGS_FOR_RESOURCE = 'dms:ListTagsForResource',
  MODIFY_ENDPOINT = 'dms:ModifyEndpoint',
  MODIFY_EVENT_SUBSCRIPTION = 'dms:ModifyEventSubscription',
  MODIFY_REPLICATION_INSTANCE = 'dms:ModifyReplicationInstance',
  MODIFY_REPLICATION_SUBNET_GROUP = 'dms:ModifyReplicationSubnetGroup',
  MODIFY_REPLICATION_TASK = 'dms:ModifyReplicationTask',
  REBOOT_REPLICATION_INSTANCE = 'dms:RebootReplicationInstance',
  REFRESH_SCHEMAS = 'dms:RefreshSchemas',
  RELOAD_TABLES = 'dms:ReloadTables',
  REMOVE_TAGS_FROM_RESOURCE = 'dms:RemoveTagsFromResource',
  START_REPLICATION_TASK = 'dms:StartReplicationTask',
  START_REPLICATION_TASK_ASSESSMENT = 'dms:StartReplicationTaskAssessment',
  STOP_REPLICATION_TASK = 'dms:StopReplicationTask',
  TEST_CONNECTION = 'dms:TestConnection',
}
export enum SESSION_MANAGER_MESSAGE_GATEWAY_SERVICE {
  CREATE_CONTROL_CHANNEL = 'ssmmessages:CreateControlChannel',
  CREATE_DATA_CHANNEL = 'ssmmessages:CreateDataChannel',
  OPEN_CONTROL_CHANNEL = 'ssmmessages:OpenControlChannel',
  OPEN_DATA_CHANNEL = 'ssmmessages:OpenDataChannel',
}
export enum ARTIFACT {
  ACCEPT_AGREEMENT = 'artifact:AcceptAgreement',
  DOWNLOAD_AGREEMENT = 'artifact:DownloadAgreement',
  GET = 'artifact:Get',
  TERMINATE_AGREEMENT = 'artifact:TerminateAgreement',
}
export enum TRANSCRIBE {
  CREATE_LANGUAGE_MODEL = 'transcribe:CreateLanguageModel',
  CREATE_MEDICAL_VOCABULARY = 'transcribe:CreateMedicalVocabulary',
  CREATE_VOCABULARY = 'transcribe:CreateVocabulary',
  CREATE_VOCABULARY_FILTER = 'transcribe:CreateVocabularyFilter',
  DELETE_LANGUAGE_MODEL = 'transcribe:DeleteLanguageModel',
  DELETE_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:DeleteMedicalTranscriptionJob',
  DELETE_MEDICAL_VOCABULARY = 'transcribe:DeleteMedicalVocabulary',
  DELETE_TRANSCRIPTION_JOB = 'transcribe:DeleteTranscriptionJob',
  DELETE_VOCABULARY = 'transcribe:DeleteVocabulary',
  DELETE_VOCABULARY_FILTER = 'transcribe:DeleteVocabularyFilter',
  DESCRIBE_LANGUAGE_MODEL = 'transcribe:DescribeLanguageModel',
  GET_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:GetMedicalTranscriptionJob',
  GET_MEDICAL_VOCABULARY = 'transcribe:GetMedicalVocabulary',
  GET_TRANSCRIPTION_JOB = 'transcribe:GetTranscriptionJob',
  GET_VOCABULARY = 'transcribe:GetVocabulary',
  GET_VOCABULARY_FILTER = 'transcribe:GetVocabularyFilter',
  LIST_LANGUAGE_MODELS = 'transcribe:ListLanguageModels',
  LIST_MEDICAL_TRANSCRIPTION_JOBS = 'transcribe:ListMedicalTranscriptionJobs',
  LIST_MEDICAL_VOCABULARIES = 'transcribe:ListMedicalVocabularies',
  LIST_TRANSCRIPTION_JOBS = 'transcribe:ListTranscriptionJobs',
  LIST_VOCABULARIES = 'transcribe:ListVocabularies',
  LIST_VOCABULARY_FILTERS = 'transcribe:ListVocabularyFilters',
  START_MEDICAL_STREAM_TRANSCRIPTION = 'transcribe:StartMedicalStreamTranscription',
  START_MEDICAL_STREAM_TRANSCRIPTION_WEB_SOCKET = 'transcribe:StartMedicalStreamTranscriptionWebSocket',
  START_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:StartMedicalTranscriptionJob',
  START_STREAM_TRANSCRIPTION = 'transcribe:StartStreamTranscription',
  START_STREAM_TRANSCRIPTION_WEB_SOCKET = 'transcribe:StartStreamTranscriptionWebSocket',
  START_TRANSCRIPTION_JOB = 'transcribe:StartTranscriptionJob',
  UPDATE_MEDICAL_VOCABULARY = 'transcribe:UpdateMedicalVocabulary',
  UPDATE_VOCABULARY = 'transcribe:UpdateVocabulary',
  UPDATE_VOCABULARY_FILTER = 'transcribe:UpdateVocabularyFilter',
}
export enum IQ_PERMISSIONS {
  APPROVE_ACCESS_GRANT = 'iq-permission:ApproveAccessGrant',
}
export enum ELEMENTAL_MEDIAPACKAGE_VOD {
  CREATE_ASSET = 'mediapackage-vod:CreateAsset',
  CREATE_PACKAGING_CONFIGURATION = 'mediapackage-vod:CreatePackagingConfiguration',
  CREATE_PACKAGING_GROUP = 'mediapackage-vod:CreatePackagingGroup',
  DELETE_ASSET = 'mediapackage-vod:DeleteAsset',
  DELETE_PACKAGING_CONFIGURATION = 'mediapackage-vod:DeletePackagingConfiguration',
  DELETE_PACKAGING_GROUP = 'mediapackage-vod:DeletePackagingGroup',
  DESCRIBE_ASSET = 'mediapackage-vod:DescribeAsset',
  DESCRIBE_PACKAGING_CONFIGURATION = 'mediapackage-vod:DescribePackagingConfiguration',
  DESCRIBE_PACKAGING_GROUP = 'mediapackage-vod:DescribePackagingGroup',
  LIST_ASSETS = 'mediapackage-vod:ListAssets',
  LIST_PACKAGING_CONFIGURATIONS = 'mediapackage-vod:ListPackagingConfigurations',
  LIST_PACKAGING_GROUPS = 'mediapackage-vod:ListPackagingGroups',
}
export enum DEVICE_FARM {
  CREATE_DEVICE_POOL = 'devicefarm:CreateDevicePool',
  CREATE_INSTANCE_PROFILE = 'devicefarm:CreateInstanceProfile',
  CREATE_NETWORK_PROFILE = 'devicefarm:CreateNetworkProfile',
  CREATE_PROJECT = 'devicefarm:CreateProject',
  CREATE_REMOTE_ACCESS_SESSION = 'devicefarm:CreateRemoteAccessSession',
  CREATE_TEST_GRID_PROJECT = 'devicefarm:CreateTestGridProject',
  CREATE_TEST_GRID_URL = 'devicefarm:CreateTestGridUrl',
  CREATE_UPLOAD = 'devicefarm:CreateUpload',
  CREATE_VPCE_CONFIGURATION = 'devicefarm:CreateVPCEConfiguration',
  DELETE_DEVICE_POOL = 'devicefarm:DeleteDevicePool',
  DELETE_INSTANCE_PROFILE = 'devicefarm:DeleteInstanceProfile',
  DELETE_NETWORK_PROFILE = 'devicefarm:DeleteNetworkProfile',
  DELETE_PROJECT = 'devicefarm:DeleteProject',
  DELETE_REMOTE_ACCESS_SESSION = 'devicefarm:DeleteRemoteAccessSession',
  DELETE_RUN = 'devicefarm:DeleteRun',
  DELETE_TEST_GRID_PROJECT = 'devicefarm:DeleteTestGridProject',
  DELETE_UPLOAD = 'devicefarm:DeleteUpload',
  DELETE_VPCE_CONFIGURATION = 'devicefarm:DeleteVPCEConfiguration',
  GET_ACCOUNT_SETTINGS = 'devicefarm:GetAccountSettings',
  GET_DEVICE = 'devicefarm:GetDevice',
  GET_DEVICE_INSTANCE = 'devicefarm:GetDeviceInstance',
  GET_DEVICE_POOL = 'devicefarm:GetDevicePool',
  GET_DEVICE_POOL_COMPATIBILITY = 'devicefarm:GetDevicePoolCompatibility',
  GET_INSTANCE_PROFILE = 'devicefarm:GetInstanceProfile',
  GET_JOB = 'devicefarm:GetJob',
  GET_NETWORK_PROFILE = 'devicefarm:GetNetworkProfile',
  GET_OFFERING_STATUS = 'devicefarm:GetOfferingStatus',
  GET_PROJECT = 'devicefarm:GetProject',
  GET_REMOTE_ACCESS_SESSION = 'devicefarm:GetRemoteAccessSession',
  GET_RUN = 'devicefarm:GetRun',
  GET_SUITE = 'devicefarm:GetSuite',
  GET_TEST = 'devicefarm:GetTest',
  GET_TEST_GRID_PROJECT = 'devicefarm:GetTestGridProject',
  GET_TEST_GRID_SESSION = 'devicefarm:GetTestGridSession',
  GET_UPLOAD = 'devicefarm:GetUpload',
  GET_VPCE_CONFIGURATION = 'devicefarm:GetVPCEConfiguration',
  INSTALL_TO_REMOTE_ACCESS_SESSION = 'devicefarm:InstallToRemoteAccessSession',
  LIST_ARTIFACTS = 'devicefarm:ListArtifacts',
  LIST_DEVICE_INSTANCES = 'devicefarm:ListDeviceInstances',
  LIST_DEVICE_POOLS = 'devicefarm:ListDevicePools',
  LIST_DEVICES = 'devicefarm:ListDevices',
  LIST_INSTANCE_PROFILES = 'devicefarm:ListInstanceProfiles',
  LIST_JOBS = 'devicefarm:ListJobs',
  LIST_NETWORK_PROFILES = 'devicefarm:ListNetworkProfiles',
  LIST_OFFERING_PROMOTIONS = 'devicefarm:ListOfferingPromotions',
  LIST_OFFERING_TRANSACTIONS = 'devicefarm:ListOfferingTransactions',
  LIST_OFFERINGS = 'devicefarm:ListOfferings',
  LIST_PROJECTS = 'devicefarm:ListProjects',
  LIST_REMOTE_ACCESS_SESSIONS = 'devicefarm:ListRemoteAccessSessions',
  LIST_RUNS = 'devicefarm:ListRuns',
  LIST_SAMPLES = 'devicefarm:ListSamples',
  LIST_SUITES = 'devicefarm:ListSuites',
  LIST_TAGS_FOR_RESOURCE = 'devicefarm:ListTagsForResource',
  LIST_TEST_GRID_PROJECTS = 'devicefarm:ListTestGridProjects',
  LIST_TEST_GRID_SESSION_ACTIONS = 'devicefarm:ListTestGridSessionActions',
  LIST_TEST_GRID_SESSION_ARTIFACTS = 'devicefarm:ListTestGridSessionArtifacts',
  LIST_TEST_GRID_SESSIONS = 'devicefarm:ListTestGridSessions',
  LIST_TESTS = 'devicefarm:ListTests',
  LIST_UNIQUE_PROBLEMS = 'devicefarm:ListUniqueProblems',
  LIST_UPLOADS = 'devicefarm:ListUploads',
  LIST_VPCE_CONFIGURATIONS = 'devicefarm:ListVPCEConfigurations',
  PURCHASE_OFFERING = 'devicefarm:PurchaseOffering',
  RENEW_OFFERING = 'devicefarm:RenewOffering',
  SCHEDULE_RUN = 'devicefarm:ScheduleRun',
  STOP_JOB = 'devicefarm:StopJob',
  STOP_REMOTE_ACCESS_SESSION = 'devicefarm:StopRemoteAccessSession',
  STOP_RUN = 'devicefarm:StopRun',
  TAG_RESOURCE = 'devicefarm:TagResource',
  UNTAG_RESOURCE = 'devicefarm:UntagResource',
  UPDATE_DEVICE_INSTANCE = 'devicefarm:UpdateDeviceInstance',
  UPDATE_DEVICE_POOL = 'devicefarm:UpdateDevicePool',
  UPDATE_INSTANCE_PROFILE = 'devicefarm:UpdateInstanceProfile',
  UPDATE_NETWORK_PROFILE = 'devicefarm:UpdateNetworkProfile',
  UPDATE_PROJECT = 'devicefarm:UpdateProject',
  UPDATE_TEST_GRID_PROJECT = 'devicefarm:UpdateTestGridProject',
  UPDATE_UPLOAD = 'devicefarm:UpdateUpload',
  UPDATE_VPCE_CONFIGURATION = 'devicefarm:UpdateVPCEConfiguration',
}
export enum GROUND_STATION {
  CANCEL_CONTACT = 'groundstation:CancelContact',
  CREATE_CONFIG = 'groundstation:CreateConfig',
  CREATE_DATAFLOW_ENDPOINT_GROUP = 'groundstation:CreateDataflowEndpointGroup',
  CREATE_MISSION_PROFILE = 'groundstation:CreateMissionProfile',
  DELETE_CONFIG = 'groundstation:DeleteConfig',
  DELETE_DATAFLOW_ENDPOINT_GROUP = 'groundstation:DeleteDataflowEndpointGroup',
  DELETE_MISSION_PROFILE = 'groundstation:DeleteMissionProfile',
  DESCRIBE_CONTACT = 'groundstation:DescribeContact',
  GET_CONFIG = 'groundstation:GetConfig',
  GET_DATAFLOW_ENDPOINT_GROUP = 'groundstation:GetDataflowEndpointGroup',
  GET_MINUTE_USAGE = 'groundstation:GetMinuteUsage',
  GET_MISSION_PROFILE = 'groundstation:GetMissionProfile',
  GET_SATELLITE = 'groundstation:GetSatellite',
  LIST_CONFIGS = 'groundstation:ListConfigs',
  LIST_CONTACTS = 'groundstation:ListContacts',
  LIST_DATAFLOW_ENDPOINT_GROUPS = 'groundstation:ListDataflowEndpointGroups',
  LIST_GROUND_STATIONS = 'groundstation:ListGroundStations',
  LIST_MISSION_PROFILES = 'groundstation:ListMissionProfiles',
  LIST_SATELLITES = 'groundstation:ListSatellites',
  LIST_TAGS_FOR_RESOURCE = 'groundstation:ListTagsForResource',
  RESERVE_CONTACT = 'groundstation:ReserveContact',
  TAG_RESOURCE = 'groundstation:TagResource',
  UNTAG_RESOURCE = 'groundstation:UntagResource',
  UPDATE_CONFIG = 'groundstation:UpdateConfig',
  UPDATE_MISSION_PROFILE = 'groundstation:UpdateMissionProfile',
}
export enum CODE_SIGNING_FOR_FREERTOS {
  CANCEL_SIGNING_PROFILE = 'signer:CancelSigningProfile',
  DESCRIBE_SIGNING_JOB = 'signer:DescribeSigningJob',
  GET_SIGNING_PLATFORM = 'signer:GetSigningPlatform',
  GET_SIGNING_PROFILE = 'signer:GetSigningProfile',
  LIST_SIGNING_JOBS = 'signer:ListSigningJobs',
  LIST_SIGNING_PLATFORMS = 'signer:ListSigningPlatforms',
  LIST_SIGNING_PROFILES = 'signer:ListSigningProfiles',
  LIST_TAGS_FOR_RESOURCE = 'signer:ListTagsForResource',
  PUT_SIGNING_PROFILE = 'signer:PutSigningProfile',
  START_SIGNING_JOB = 'signer:StartSigningJob',
  TAG_RESOURCE = 'signer:TagResource',
  UNTAG_RESOURCE = 'signer:UntagResource',
}
export enum PURCHASE_ORDERS_CONSOLE {
  MODIFY_PURCHASE_ORDERS = 'purchase-orders:ModifyPurchaseOrders',
  VIEW_PURCHASE_ORDERS = 'purchase-orders:ViewPurchaseOrders',
}
export enum RESOURCE_GROUPS {
  CREATE_GROUP = 'resource-groups:CreateGroup',
  DELETE_GROUP = 'resource-groups:DeleteGroup',
  GET_GROUP = 'resource-groups:GetGroup',
  GET_GROUP_QUERY = 'resource-groups:GetGroupQuery',
  GET_TAGS = 'resource-groups:GetTags',
  LIST_GROUP_RESOURCES = 'resource-groups:ListGroupResources',
  LIST_GROUPS = 'resource-groups:ListGroups',
  SEARCH_RESOURCES = 'resource-groups:SearchResources',
  TAG = 'resource-groups:Tag',
  UNTAG = 'resource-groups:Untag',
  UPDATE_GROUP = 'resource-groups:UpdateGroup',
  UPDATE_GROUP_QUERY = 'resource-groups:UpdateGroupQuery',
}
export enum HONEYCODE {
  APPROVE_TEAM_ASSOCIATION = 'honeycode:ApproveTeamAssociation',
  GET_SCREEN_DATA = 'honeycode:GetScreenData',
  INVOKE_SCREEN_AUTOMATION = 'honeycode:InvokeScreenAutomation',
  LIST_TEAM_ASSOCIATIONS = 'honeycode:ListTeamAssociations',
  REJECT_TEAM_ASSOCIATION = 'honeycode:RejectTeamAssociation',
}
export enum IQ {
  CREATE_PROJECT = 'iq:CreateProject',
}
export enum MANAGE_API_GATEWAY {
  DELETE = 'apigateway:DELETE',
  GET = 'apigateway:GET',
  PATCH = 'apigateway:PATCH',
  POST = 'apigateway:POST',
  PUT = 'apigateway:PUT',
  SET_WEB_ACL = 'apigateway:SetWebACL',
  UPDATE_REST_API_POLICY = 'apigateway:UpdateRestApiPolicy',
}
export enum ELEMENTAL_ACTIVATIONS {
  DOWNLOAD_SOFTWARE = 'elemental-activations:DownloadSoftware',
  GENERATE_LICENSES = 'elemental-activations:GenerateLicenses',
  GET_ACTIVATION = 'elemental-activations:GetActivation',
  LIST_TAGS_FOR_RESOURCE = 'elemental-activations:ListTagsForResource',
  TAG_RESOURCE = 'elemental-activations:TagResource',
  UNTAG_RESOURCE = 'elemental-activations:UntagResource',
}
export enum APP_MESH {
  CREATE_GATEWAY_ROUTE = 'appmesh:CreateGatewayRoute',
  CREATE_MESH = 'appmesh:CreateMesh',
  CREATE_ROUTE = 'appmesh:CreateRoute',
  CREATE_VIRTUAL_GATEWAY = 'appmesh:CreateVirtualGateway',
  CREATE_VIRTUAL_NODE = 'appmesh:CreateVirtualNode',
  CREATE_VIRTUAL_ROUTER = 'appmesh:CreateVirtualRouter',
  CREATE_VIRTUAL_SERVICE = 'appmesh:CreateVirtualService',
  DELETE_GATEWAY_ROUTE = 'appmesh:DeleteGatewayRoute',
  DELETE_MESH = 'appmesh:DeleteMesh',
  DELETE_ROUTE = 'appmesh:DeleteRoute',
  DELETE_VIRTUAL_GATEWAY = 'appmesh:DeleteVirtualGateway',
  DELETE_VIRTUAL_NODE = 'appmesh:DeleteVirtualNode',
  DELETE_VIRTUAL_ROUTER = 'appmesh:DeleteVirtualRouter',
  DELETE_VIRTUAL_SERVICE = 'appmesh:DeleteVirtualService',
  DESCRIBE_GATEWAY_ROUTE = 'appmesh:DescribeGatewayRoute',
  DESCRIBE_MESH = 'appmesh:DescribeMesh',
  DESCRIBE_ROUTE = 'appmesh:DescribeRoute',
  DESCRIBE_VIRTUAL_GATEWAY = 'appmesh:DescribeVirtualGateway',
  DESCRIBE_VIRTUAL_NODE = 'appmesh:DescribeVirtualNode',
  DESCRIBE_VIRTUAL_ROUTER = 'appmesh:DescribeVirtualRouter',
  DESCRIBE_VIRTUAL_SERVICE = 'appmesh:DescribeVirtualService',
  LIST_GATEWAY_ROUTES = 'appmesh:ListGatewayRoutes',
  LIST_MESHES = 'appmesh:ListMeshes',
  LIST_ROUTES = 'appmesh:ListRoutes',
  LIST_TAGS_FOR_RESOURCE = 'appmesh:ListTagsForResource',
  LIST_VIRTUAL_GATEWAYS = 'appmesh:ListVirtualGateways',
  LIST_VIRTUAL_NODES = 'appmesh:ListVirtualNodes',
  LIST_VIRTUAL_ROUTERS = 'appmesh:ListVirtualRouters',
  LIST_VIRTUAL_SERVICES = 'appmesh:ListVirtualServices',
  STREAM_AGGREGATED_RESOURCES = 'appmesh:StreamAggregatedResources',
  TAG_RESOURCE = 'appmesh:TagResource',
  UNTAG_RESOURCE = 'appmesh:UntagResource',
  UPDATE_GATEWAY_ROUTE = 'appmesh:UpdateGatewayRoute',
  UPDATE_MESH = 'appmesh:UpdateMesh',
  UPDATE_ROUTE = 'appmesh:UpdateRoute',
  UPDATE_VIRTUAL_GATEWAY = 'appmesh:UpdateVirtualGateway',
  UPDATE_VIRTUAL_NODE = 'appmesh:UpdateVirtualNode',
  UPDATE_VIRTUAL_ROUTER = 'appmesh:UpdateVirtualRouter',
  UPDATE_VIRTUAL_SERVICE = 'appmesh:UpdateVirtualService',
}
export enum DATABASE_QUERY_METADATA_SERVICE {
  CREATE_FAVORITE_QUERY = 'dbqms:CreateFavoriteQuery',
  CREATE_QUERY_HISTORY = 'dbqms:CreateQueryHistory',
  DELETE_FAVORITE_QUERIES = 'dbqms:DeleteFavoriteQueries',
  DELETE_QUERY_HISTORY = 'dbqms:DeleteQueryHistory',
  DESCRIBE_FAVORITE_QUERIES = 'dbqms:DescribeFavoriteQueries',
  DESCRIBE_QUERY_HISTORY = 'dbqms:DescribeQueryHistory',
  GET_QUERY_STRING = 'dbqms:GetQueryString',
  UPDATE_FAVORITE_QUERY = 'dbqms:UpdateFavoriteQuery',
  UPDATE_QUERY_HISTORY = 'dbqms:UpdateQueryHistory',
}
export enum MANAGED_STREAMING_FOR_APACHE_KAFKA {
  BATCH_ASSOCIATE_SCRAM_SECRET = 'kafka:BatchAssociateScramSecret',
  BATCH_DISASSOCIATE_SCRAM_SECRET = 'kafka:BatchDisassociateScramSecret',
  CREATE_CLUSTER = 'kafka:CreateCluster',
  CREATE_CONFIGURATION = 'kafka:CreateConfiguration',
  DELETE_CLUSTER = 'kafka:DeleteCluster',
  DELETE_CONFIGURATION = 'kafka:DeleteConfiguration',
  DESCRIBE_CLUSTER = 'kafka:DescribeCluster',
  DESCRIBE_CLUSTER_OPERATION = 'kafka:DescribeClusterOperation',
  DESCRIBE_CONFIGURATION = 'kafka:DescribeConfiguration',
  DESCRIBE_CONFIGURATION_REVISION = 'kafka:DescribeConfigurationRevision',
  GET_BOOTSTRAP_BROKERS = 'kafka:GetBootstrapBrokers',
  GET_COMPATIBLE_KAFKA_VERSIONS = 'kafka:GetCompatibleKafkaVersions',
  LIST_CLUSTER_OPERATIONS = 'kafka:ListClusterOperations',
  LIST_CLUSTERS = 'kafka:ListClusters',
  LIST_CONFIGURATIONS = 'kafka:ListConfigurations',
  LIST_NODES = 'kafka:ListNodes',
  LIST_SCRAM_SECRETS = 'kafka:ListScramSecrets',
  LIST_TAGS_FOR_RESOURCE = 'kafka:ListTagsForResource',
  TAG_RESOURCE = 'kafka:TagResource',
  UNTAG_RESOURCE = 'kafka:UntagResource',
  UPDATE_BROKER_COUNT = 'kafka:UpdateBrokerCount',
  UPDATE_BROKER_STORAGE = 'kafka:UpdateBrokerStorage',
  UPDATE_CLUSTER_CONFIGURATION = 'kafka:UpdateClusterConfiguration',
  UPDATE_CLUSTER_KAFKA_VERSION = 'kafka:UpdateClusterKafkaVersion',
  UPDATE_CONFIGURATION = 'kafka:UpdateConfiguration',
  UPDATE_MONITORING = 'kafka:UpdateMonitoring',
}
export enum CODEGURU_REVIEWER {
  ASSOCIATE_REPOSITORY = 'codeguru-reviewer:AssociateRepository',
  CREATE_CONNECTION_TOKEN = 'codeguru-reviewer:CreateConnectionToken',
  DESCRIBE_CODE_REVIEW = 'codeguru-reviewer:DescribeCodeReview',
  DESCRIBE_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:DescribeRecommendationFeedback',
  DESCRIBE_REPOSITORY_ASSOCIATION = 'codeguru-reviewer:DescribeRepositoryAssociation',
  DISASSOCIATE_REPOSITORY = 'codeguru-reviewer:DisassociateRepository',
  GET_METRICS_DATA = 'codeguru-reviewer:GetMetricsData',
  LIST_CODE_REVIEWS = 'codeguru-reviewer:ListCodeReviews',
  LIST_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:ListRecommendationFeedback',
  LIST_RECOMMENDATIONS = 'codeguru-reviewer:ListRecommendations',
  LIST_REPOSITORY_ASSOCIATIONS = 'codeguru-reviewer:ListRepositoryAssociations',
  LIST_THIRD_PARTY_REPOSITORIES = 'codeguru-reviewer:ListThirdPartyRepositories',
  PUT_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:PutRecommendationFeedback',
}
export enum PINPOINT_SMS_AND_VOICE_SERVICE {
  CREATE_CONFIGURATION_SET = 'sms-voice:CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:CreateConfigurationSetEventDestination',
  DELETE_CONFIGURATION_SET = 'sms-voice:DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:DeleteConfigurationSetEventDestination',
  GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'sms-voice:GetConfigurationSetEventDestinations',
  LIST_CONFIGURATION_SETS = 'sms-voice:ListConfigurationSets',
  SEND_VOICE_MESSAGE = 'sms-voice:SendVoiceMessage',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:UpdateConfigurationSetEventDestination',
}
export enum CLOUDWATCH {
  DELETE_ALARMS = 'cloudwatch:DeleteAlarms',
  DELETE_ANOMALY_DETECTOR = 'cloudwatch:DeleteAnomalyDetector',
  DELETE_DASHBOARDS = 'cloudwatch:DeleteDashboards',
  DELETE_INSIGHT_RULES = 'cloudwatch:DeleteInsightRules',
  DESCRIBE_ALARM_HISTORY = 'cloudwatch:DescribeAlarmHistory',
  DESCRIBE_ALARMS = 'cloudwatch:DescribeAlarms',
  DESCRIBE_ALARMS_FOR_METRIC = 'cloudwatch:DescribeAlarmsForMetric',
  DESCRIBE_ANOMALY_DETECTORS = 'cloudwatch:DescribeAnomalyDetectors',
  DESCRIBE_INSIGHT_RULES = 'cloudwatch:DescribeInsightRules',
  DISABLE_ALARM_ACTIONS = 'cloudwatch:DisableAlarmActions',
  DISABLE_INSIGHT_RULES = 'cloudwatch:DisableInsightRules',
  ENABLE_ALARM_ACTIONS = 'cloudwatch:EnableAlarmActions',
  ENABLE_INSIGHT_RULES = 'cloudwatch:EnableInsightRules',
  GET_DASHBOARD = 'cloudwatch:GetDashboard',
  GET_INSIGHT_RULE_REPORT = 'cloudwatch:GetInsightRuleReport',
  GET_METRIC_DATA = 'cloudwatch:GetMetricData',
  GET_METRIC_STATISTICS = 'cloudwatch:GetMetricStatistics',
  GET_METRIC_WIDGET_IMAGE = 'cloudwatch:GetMetricWidgetImage',
  LIST_DASHBOARDS = 'cloudwatch:ListDashboards',
  LIST_METRICS = 'cloudwatch:ListMetrics',
  LIST_TAGS_FOR_RESOURCE = 'cloudwatch:ListTagsForResource',
  PUT_ANOMALY_DETECTOR = 'cloudwatch:PutAnomalyDetector',
  PUT_DASHBOARD = 'cloudwatch:PutDashboard',
  PUT_INSIGHT_RULE = 'cloudwatch:PutInsightRule',
  PUT_METRIC_ALARM = 'cloudwatch:PutMetricAlarm',
  PUT_METRIC_DATA = 'cloudwatch:PutMetricData',
  SET_ALARM_STATE = 'cloudwatch:SetAlarmState',
  TAG_RESOURCE = 'cloudwatch:TagResource',
  UNTAG_RESOURCE = 'cloudwatch:UntagResource',
}
export enum EC2_AUTO_SCALING {
  ATTACH_INSTANCES = 'autoscaling:AttachInstances',
  ATTACH_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:AttachLoadBalancerTargetGroups',
  ATTACH_LOAD_BALANCERS = 'autoscaling:AttachLoadBalancers',
  BATCH_DELETE_SCHEDULED_ACTION = 'autoscaling:BatchDeleteScheduledAction',
  BATCH_PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'autoscaling:BatchPutScheduledUpdateGroupAction',
  CANCEL_INSTANCE_REFRESH = 'autoscaling:CancelInstanceRefresh',
  COMPLETE_LIFECYCLE_ACTION = 'autoscaling:CompleteLifecycleAction',
  CREATE_AUTO_SCALING_GROUP = 'autoscaling:CreateAutoScalingGroup',
  CREATE_LAUNCH_CONFIGURATION = 'autoscaling:CreateLaunchConfiguration',
  CREATE_OR_UPDATE_TAGS = 'autoscaling:CreateOrUpdateTags',
  DELETE_AUTO_SCALING_GROUP = 'autoscaling:DeleteAutoScalingGroup',
  DELETE_LAUNCH_CONFIGURATION = 'autoscaling:DeleteLaunchConfiguration',
  DELETE_LIFECYCLE_HOOK = 'autoscaling:DeleteLifecycleHook',
  DELETE_NOTIFICATION_CONFIGURATION = 'autoscaling:DeleteNotificationConfiguration',
  DELETE_POLICY = 'autoscaling:DeletePolicy',
  DELETE_SCHEDULED_ACTION = 'autoscaling:DeleteScheduledAction',
  DELETE_TAGS = 'autoscaling:DeleteTags',
  DESCRIBE_ACCOUNT_LIMITS = 'autoscaling:DescribeAccountLimits',
  DESCRIBE_ADJUSTMENT_TYPES = 'autoscaling:DescribeAdjustmentTypes',
  DESCRIBE_AUTO_SCALING_GROUPS = 'autoscaling:DescribeAutoScalingGroups',
  DESCRIBE_AUTO_SCALING_INSTANCES = 'autoscaling:DescribeAutoScalingInstances',
  DESCRIBE_AUTO_SCALING_NOTIFICATION_TYPES = 'autoscaling:DescribeAutoScalingNotificationTypes',
  DESCRIBE_INSTANCE_REFRESHES = 'autoscaling:DescribeInstanceRefreshes',
  DESCRIBE_LAUNCH_CONFIGURATIONS = 'autoscaling:DescribeLaunchConfigurations',
  DESCRIBE_LIFECYCLE_HOOK_TYPES = 'autoscaling:DescribeLifecycleHookTypes',
  DESCRIBE_LIFECYCLE_HOOKS = 'autoscaling:DescribeLifecycleHooks',
  DESCRIBE_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:DescribeLoadBalancerTargetGroups',
  DESCRIBE_LOAD_BALANCERS = 'autoscaling:DescribeLoadBalancers',
  DESCRIBE_METRIC_COLLECTION_TYPES = 'autoscaling:DescribeMetricCollectionTypes',
  DESCRIBE_NOTIFICATION_CONFIGURATIONS = 'autoscaling:DescribeNotificationConfigurations',
  DESCRIBE_POLICIES = 'autoscaling:DescribePolicies',
  DESCRIBE_SCALING_ACTIVITIES = 'autoscaling:DescribeScalingActivities',
  DESCRIBE_SCALING_PROCESS_TYPES = 'autoscaling:DescribeScalingProcessTypes',
  DESCRIBE_SCHEDULED_ACTIONS = 'autoscaling:DescribeScheduledActions',
  DESCRIBE_TAGS = 'autoscaling:DescribeTags',
  DESCRIBE_TERMINATION_POLICY_TYPES = 'autoscaling:DescribeTerminationPolicyTypes',
  DETACH_INSTANCES = 'autoscaling:DetachInstances',
  DETACH_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:DetachLoadBalancerTargetGroups',
  DETACH_LOAD_BALANCERS = 'autoscaling:DetachLoadBalancers',
  DISABLE_METRICS_COLLECTION = 'autoscaling:DisableMetricsCollection',
  ENABLE_METRICS_COLLECTION = 'autoscaling:EnableMetricsCollection',
  ENTER_STANDBY = 'autoscaling:EnterStandby',
  EXECUTE_POLICY = 'autoscaling:ExecutePolicy',
  EXIT_STANDBY = 'autoscaling:ExitStandby',
  PUT_LIFECYCLE_HOOK = 'autoscaling:PutLifecycleHook',
  PUT_NOTIFICATION_CONFIGURATION = 'autoscaling:PutNotificationConfiguration',
  PUT_SCALING_POLICY = 'autoscaling:PutScalingPolicy',
  PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'autoscaling:PutScheduledUpdateGroupAction',
  RECORD_LIFECYCLE_ACTION_HEARTBEAT = 'autoscaling:RecordLifecycleActionHeartbeat',
  RESUME_PROCESSES = 'autoscaling:ResumeProcesses',
  SET_DESIRED_CAPACITY = 'autoscaling:SetDesiredCapacity',
  SET_INSTANCE_HEALTH = 'autoscaling:SetInstanceHealth',
  SET_INSTANCE_PROTECTION = 'autoscaling:SetInstanceProtection',
  START_INSTANCE_REFRESH = 'autoscaling:StartInstanceRefresh',
  SUSPEND_PROCESSES = 'autoscaling:SuspendProcesses',
  TERMINATE_INSTANCE_IN_AUTO_SCALING_GROUP = 'autoscaling:TerminateInstanceInAutoScalingGroup',
  UPDATE_AUTO_SCALING_GROUP = 'autoscaling:UpdateAutoScalingGroup',
}
export enum SNOWBALL {
  CANCEL_CLUSTER = 'snowball:CancelCluster',
  CANCEL_JOB = 'snowball:CancelJob',
  CREATE_ADDRESS = 'snowball:CreateAddress',
  CREATE_CLUSTER = 'snowball:CreateCluster',
  CREATE_JOB = 'snowball:CreateJob',
  DESCRIBE_ADDRESS = 'snowball:DescribeAddress',
  DESCRIBE_ADDRESSES = 'snowball:DescribeAddresses',
  DESCRIBE_CLUSTER = 'snowball:DescribeCluster',
  DESCRIBE_JOB = 'snowball:DescribeJob',
  GET_JOB_MANIFEST = 'snowball:GetJobManifest',
  GET_JOB_UNLOCK_CODE = 'snowball:GetJobUnlockCode',
  GET_SNOWBALL_USAGE = 'snowball:GetSnowballUsage',
  LIST_CLUSTER_JOBS = 'snowball:ListClusterJobs',
  LIST_CLUSTERS = 'snowball:ListClusters',
  LIST_JOBS = 'snowball:ListJobs',
  UPDATE_CLUSTER = 'snowball:UpdateCluster',
  UPDATE_JOB = 'snowball:UpdateJob',
}
export enum SHIELD {
  ASSOCIATE_DRT_LOG_BUCKET = 'shield:AssociateDRTLogBucket',
  ASSOCIATE_DRT_ROLE = 'shield:AssociateDRTRole',
  CREATE_PROTECTION = 'shield:CreateProtection',
  CREATE_SUBSCRIPTION = 'shield:CreateSubscription',
  DELETE_PROTECTION = 'shield:DeleteProtection',
  DELETE_SUBSCRIPTION = 'shield:DeleteSubscription',
  DESCRIBE_ATTACK = 'shield:DescribeAttack',
  DESCRIBE_DRT_ACCESS = 'shield:DescribeDRTAccess',
  DESCRIBE_EMERGENCY_CONTACT_SETTINGS = 'shield:DescribeEmergencyContactSettings',
  DESCRIBE_PROTECTION = 'shield:DescribeProtection',
  DESCRIBE_SUBSCRIPTION = 'shield:DescribeSubscription',
  DISASSOCIATE_DRT_LOG_BUCKET = 'shield:DisassociateDRTLogBucket',
  DISASSOCIATE_DRT_ROLE = 'shield:DisassociateDRTRole',
  GET_SUBSCRIPTION_STATE = 'shield:GetSubscriptionState',
  LIST_ATTACKS = 'shield:ListAttacks',
  LIST_PROTECTIONS = 'shield:ListProtections',
  UPDATE_EMERGENCY_CONTACT_SETTINGS = 'shield:UpdateEmergencyContactSettings',
  UPDATE_SUBSCRIPTION = 'shield:UpdateSubscription',
}
export enum SECRETS_MANAGER {
  CANCEL_ROTATE_SECRET = 'secretsmanager:CancelRotateSecret',
  CREATE_SECRET = 'secretsmanager:CreateSecret',
  DELETE_RESOURCE_POLICY = 'secretsmanager:DeleteResourcePolicy',
  DELETE_SECRET = 'secretsmanager:DeleteSecret',
  DESCRIBE_SECRET = 'secretsmanager:DescribeSecret',
  GET_RANDOM_PASSWORD = 'secretsmanager:GetRandomPassword',
  GET_RESOURCE_POLICY = 'secretsmanager:GetResourcePolicy',
  GET_SECRET_VALUE = 'secretsmanager:GetSecretValue',
  LIST_SECRET_VERSION_IDS = 'secretsmanager:ListSecretVersionIds',
  LIST_SECRETS = 'secretsmanager:ListSecrets',
  PUT_RESOURCE_POLICY = 'secretsmanager:PutResourcePolicy',
  PUT_SECRET_VALUE = 'secretsmanager:PutSecretValue',
  RESTORE_SECRET = 'secretsmanager:RestoreSecret',
  ROTATE_SECRET = 'secretsmanager:RotateSecret',
  TAG_RESOURCE = 'secretsmanager:TagResource',
  UNTAG_RESOURCE = 'secretsmanager:UntagResource',
  UPDATE_SECRET = 'secretsmanager:UpdateSecret',
  UPDATE_SECRET_VERSION_STAGE = 'secretsmanager:UpdateSecretVersionStage',
  VALIDATE_RESOURCE_POLICY = 'secretsmanager:ValidateResourcePolicy',
}
export enum APPLICATION_AUTO_SCALING {
  DELETE_SCALING_POLICY = 'application-autoscaling:DeleteScalingPolicy',
  DELETE_SCHEDULED_ACTION = 'application-autoscaling:DeleteScheduledAction',
  DEREGISTER_SCALABLE_TARGET = 'application-autoscaling:DeregisterScalableTarget',
  DESCRIBE_SCALABLE_TARGETS = 'application-autoscaling:DescribeScalableTargets',
  DESCRIBE_SCALING_ACTIVITIES = 'application-autoscaling:DescribeScalingActivities',
  DESCRIBE_SCALING_POLICIES = 'application-autoscaling:DescribeScalingPolicies',
  DESCRIBE_SCHEDULED_ACTIONS = 'application-autoscaling:DescribeScheduledActions',
  PUT_SCALING_POLICY = 'application-autoscaling:PutScalingPolicy',
  PUT_SCHEDULED_ACTION = 'application-autoscaling:PutScheduledAction',
  REGISTER_SCALABLE_TARGET = 'application-autoscaling:RegisterScalableTarget',
}
export enum FSX {
  CANCEL_DATA_REPOSITORY_TASK = 'fsx:CancelDataRepositoryTask',
  CREATE_BACKUP = 'fsx:CreateBackup',
  CREATE_DATA_REPOSITORY_TASK = 'fsx:CreateDataRepositoryTask',
  CREATE_FILE_SYSTEM = 'fsx:CreateFileSystem',
  CREATE_FILE_SYSTEM_FROM_BACKUP = 'fsx:CreateFileSystemFromBackup',
  DELETE_BACKUP = 'fsx:DeleteBackup',
  DELETE_FILE_SYSTEM = 'fsx:DeleteFileSystem',
  DESCRIBE_BACKUPS = 'fsx:DescribeBackups',
  DESCRIBE_DATA_REPOSITORY_TASKS = 'fsx:DescribeDataRepositoryTasks',
  DESCRIBE_FILE_SYSTEMS = 'fsx:DescribeFileSystems',
  LIST_TAGS_FOR_RESOURCE = 'fsx:ListTagsForResource',
  TAG_RESOURCE = 'fsx:TagResource',
  UNTAG_RESOURCE = 'fsx:UntagResource',
  UPDATE_FILE_SYSTEM = 'fsx:UpdateFileSystem',
}
export enum AMPLIFY {
  CREATE_APP = 'amplify:CreateApp',
  CREATE_BACKEND_ENVIRONMENT = 'amplify:CreateBackendEnvironment',
  CREATE_BRANCH = 'amplify:CreateBranch',
  CREATE_DEPLOYMENT = 'amplify:CreateDeployment',
  CREATE_DOMAIN_ASSOCIATION = 'amplify:CreateDomainAssociation',
  CREATE_WEB_HOOK = 'amplify:CreateWebHook',
  DELETE_APP = 'amplify:DeleteApp',
  DELETE_BACKEND_ENVIRONMENT = 'amplify:DeleteBackendEnvironment',
  DELETE_BRANCH = 'amplify:DeleteBranch',
  DELETE_DOMAIN_ASSOCIATION = 'amplify:DeleteDomainAssociation',
  DELETE_JOB = 'amplify:DeleteJob',
  DELETE_WEB_HOOK = 'amplify:DeleteWebHook',
  GENERATE_ACCESS_LOGS = 'amplify:GenerateAccessLogs',
  GET_APP = 'amplify:GetApp',
  GET_ARTIFACT_URL = 'amplify:GetArtifactUrl',
  GET_BACKEND_ENVIRONMENT = 'amplify:GetBackendEnvironment',
  GET_BRANCH = 'amplify:GetBranch',
  GET_DOMAIN_ASSOCIATION = 'amplify:GetDomainAssociation',
  GET_JOB = 'amplify:GetJob',
  GET_WEB_HOOK = 'amplify:GetWebHook',
  LIST_APPS = 'amplify:ListApps',
  LIST_ARTIFACTS = 'amplify:ListArtifacts',
  LIST_BACKEND_ENVIRONMENTS = 'amplify:ListBackendEnvironments',
  LIST_BRANCHES = 'amplify:ListBranches',
  LIST_DOMAIN_ASSOCIATIONS = 'amplify:ListDomainAssociations',
  LIST_JOBS = 'amplify:ListJobs',
  LIST_WEB_HOOKS = 'amplify:ListWebHooks',
  START_DEPLOYMENT = 'amplify:StartDeployment',
  START_JOB = 'amplify:StartJob',
  STOP_JOB = 'amplify:StopJob',
  TAG_RESOURCE = 'amplify:TagResource',
  UNTAG_RESOURCE = 'amplify:UntagResource',
  UPDATE_APP = 'amplify:UpdateApp',
  UPDATE_BRANCH = 'amplify:UpdateBranch',
  UPDATE_DOMAIN_ASSOCIATION = 'amplify:UpdateDomainAssociation',
  UPDATE_WEB_HOOK = 'amplify:UpdateWebHook',
}
export enum APP_MESH_PREVIEW {
  CREATE_GATEWAY_ROUTE = 'appmesh-preview:CreateGatewayRoute',
  CREATE_MESH = 'appmesh-preview:CreateMesh',
  CREATE_ROUTE = 'appmesh-preview:CreateRoute',
  CREATE_VIRTUAL_GATEWAY = 'appmesh-preview:CreateVirtualGateway',
  CREATE_VIRTUAL_NODE = 'appmesh-preview:CreateVirtualNode',
  CREATE_VIRTUAL_ROUTER = 'appmesh-preview:CreateVirtualRouter',
  CREATE_VIRTUAL_SERVICE = 'appmesh-preview:CreateVirtualService',
  DELETE_GATEWAY_ROUTE = 'appmesh-preview:DeleteGatewayRoute',
  DELETE_MESH = 'appmesh-preview:DeleteMesh',
  DELETE_ROUTE = 'appmesh-preview:DeleteRoute',
  DELETE_VIRTUAL_GATEWAY = 'appmesh-preview:DeleteVirtualGateway',
  DELETE_VIRTUAL_NODE = 'appmesh-preview:DeleteVirtualNode',
  DELETE_VIRTUAL_ROUTER = 'appmesh-preview:DeleteVirtualRouter',
  DELETE_VIRTUAL_SERVICE = 'appmesh-preview:DeleteVirtualService',
  DESCRIBE_GATEWAY_ROUTE = 'appmesh-preview:DescribeGatewayRoute',
  DESCRIBE_MESH = 'appmesh-preview:DescribeMesh',
  DESCRIBE_ROUTE = 'appmesh-preview:DescribeRoute',
  DESCRIBE_VIRTUAL_GATEWAY = 'appmesh-preview:DescribeVirtualGateway',
  DESCRIBE_VIRTUAL_NODE = 'appmesh-preview:DescribeVirtualNode',
  DESCRIBE_VIRTUAL_ROUTER = 'appmesh-preview:DescribeVirtualRouter',
  DESCRIBE_VIRTUAL_SERVICE = 'appmesh-preview:DescribeVirtualService',
  LIST_GATEWAY_ROUTES = 'appmesh-preview:ListGatewayRoutes',
  LIST_MESHES = 'appmesh-preview:ListMeshes',
  LIST_ROUTES = 'appmesh-preview:ListRoutes',
  LIST_VIRTUAL_GATEWAYS = 'appmesh-preview:ListVirtualGateways',
  LIST_VIRTUAL_NODES = 'appmesh-preview:ListVirtualNodes',
  LIST_VIRTUAL_ROUTERS = 'appmesh-preview:ListVirtualRouters',
  LIST_VIRTUAL_SERVICES = 'appmesh-preview:ListVirtualServices',
  STREAM_AGGREGATED_RESOURCES = 'appmesh-preview:StreamAggregatedResources',
  UPDATE_GATEWAY_ROUTE = 'appmesh-preview:UpdateGatewayRoute',
  UPDATE_MESH = 'appmesh-preview:UpdateMesh',
  UPDATE_ROUTE = 'appmesh-preview:UpdateRoute',
  UPDATE_VIRTUAL_GATEWAY = 'appmesh-preview:UpdateVirtualGateway',
  UPDATE_VIRTUAL_NODE = 'appmesh-preview:UpdateVirtualNode',
  UPDATE_VIRTUAL_ROUTER = 'appmesh-preview:UpdateVirtualRouter',
  UPDATE_VIRTUAL_SERVICE = 'appmesh-preview:UpdateVirtualService',
}
export enum KINESIS_VIDEO_STREAMS {
  CONNECT_AS_MASTER = 'kinesisvideo:ConnectAsMaster',
  CONNECT_AS_VIEWER = 'kinesisvideo:ConnectAsViewer',
  CREATE_SIGNALING_CHANNEL = 'kinesisvideo:CreateSignalingChannel',
  CREATE_STREAM = 'kinesisvideo:CreateStream',
  DELETE_SIGNALING_CHANNEL = 'kinesisvideo:DeleteSignalingChannel',
  DELETE_STREAM = 'kinesisvideo:DeleteStream',
  DESCRIBE_SIGNALING_CHANNEL = 'kinesisvideo:DescribeSignalingChannel',
  DESCRIBE_STREAM = 'kinesisvideo:DescribeStream',
  GET_CLIP = 'kinesisvideo:GetClip',
  GET_DASH_STREAMING_SESSION_URL = 'kinesisvideo:GetDASHStreamingSessionURL',
  GET_DATA_ENDPOINT = 'kinesisvideo:GetDataEndpoint',
  GET_HLS_STREAMING_SESSION_URL = 'kinesisvideo:GetHLSStreamingSessionURL',
  GET_ICE_SERVER_CONFIG = 'kinesisvideo:GetIceServerConfig',
  GET_MEDIA = 'kinesisvideo:GetMedia',
  GET_MEDIA_FOR_FRAGMENT_LIST = 'kinesisvideo:GetMediaForFragmentList',
  GET_SIGNALING_CHANNEL_ENDPOINT = 'kinesisvideo:GetSignalingChannelEndpoint',
  LIST_FRAGMENTS = 'kinesisvideo:ListFragments',
  LIST_SIGNALING_CHANNELS = 'kinesisvideo:ListSignalingChannels',
  LIST_STREAMS = 'kinesisvideo:ListStreams',
  LIST_TAGS_FOR_RESOURCE = 'kinesisvideo:ListTagsForResource',
  LIST_TAGS_FOR_STREAM = 'kinesisvideo:ListTagsForStream',
  PUT_MEDIA = 'kinesisvideo:PutMedia',
  SEND_ALEXA_OFFER_TO_MASTER = 'kinesisvideo:SendAlexaOfferToMaster',
  TAG_RESOURCE = 'kinesisvideo:TagResource',
  TAG_STREAM = 'kinesisvideo:TagStream',
  UNTAG_RESOURCE = 'kinesisvideo:UntagResource',
  UNTAG_STREAM = 'kinesisvideo:UntagStream',
  UPDATE_DATA_RETENTION = 'kinesisvideo:UpdateDataRetention',
  UPDATE_SIGNALING_CHANNEL = 'kinesisvideo:UpdateSignalingChannel',
  UPDATE_STREAM = 'kinesisvideo:UpdateStream',
}
export enum API_GATEWAY {
  INVALIDATE_CACHE = 'execute-api:InvalidateCache',
  INVOKE = 'execute-api:Invoke',
  MANAGE_CONNECTIONS = 'execute-api:ManageConnections',
}
export enum ELEMENTAL_MEDIALIVE {
  BATCH_UPDATE_SCHEDULE = 'medialive:BatchUpdateSchedule',
  CREATE_CHANNEL = 'medialive:CreateChannel',
  CREATE_INPUT = 'medialive:CreateInput',
  CREATE_INPUT_SECURITY_GROUP = 'medialive:CreateInputSecurityGroup',
  CREATE_MULTIPLEX = 'medialive:CreateMultiplex',
  CREATE_TAGS = 'medialive:CreateTags',
  DELETE_CHANNEL = 'medialive:DeleteChannel',
  DELETE_INPUT = 'medialive:DeleteInput',
  DELETE_INPUT_SECURITY_GROUP = 'medialive:DeleteInputSecurityGroup',
  DELETE_MULTIPLEX = 'medialive:DeleteMultiplex',
  DELETE_RESERVATION = 'medialive:DeleteReservation',
  DELETE_TAGS = 'medialive:DeleteTags',
  DESCRIBE_CHANNEL = 'medialive:DescribeChannel',
  DESCRIBE_INPUT = 'medialive:DescribeInput',
  DESCRIBE_INPUT_DEVICE = 'medialive:DescribeInputDevice',
  DESCRIBE_INPUT_DEVICE_THUMBNAIL = 'medialive:DescribeInputDeviceThumbnail',
  DESCRIBE_INPUT_SECURITY_GROUP = 'medialive:DescribeInputSecurityGroup',
  DESCRIBE_MULTIPLEX = 'medialive:DescribeMultiplex',
  DESCRIBE_OFFERING = 'medialive:DescribeOffering',
  DESCRIBE_RESERVATION = 'medialive:DescribeReservation',
  DESCRIBE_SCHEDULE = 'medialive:DescribeSchedule',
  LIST_CHANNELS = 'medialive:ListChannels',
  LIST_INPUT_DEVICES = 'medialive:ListInputDevices',
  LIST_INPUT_SECURITY_GROUPS = 'medialive:ListInputSecurityGroups',
  LIST_INPUTS = 'medialive:ListInputs',
  LIST_MULTIPLEXES = 'medialive:ListMultiplexes',
  LIST_OFFERINGS = 'medialive:ListOfferings',
  LIST_RESERVATIONS = 'medialive:ListReservations',
  LIST_TAGS_FOR_RESOURCE = 'medialive:ListTagsForResource',
  PURCHASE_OFFERING = 'medialive:PurchaseOffering',
  START_CHANNEL = 'medialive:StartChannel',
  START_MULTIPLEX = 'medialive:StartMultiplex',
  STOP_CHANNEL = 'medialive:StopChannel',
  STOP_MULTIPLEX = 'medialive:StopMultiplex',
  UPDATE_CHANNEL = 'medialive:UpdateChannel',
  UPDATE_CHANNEL_CLASS = 'medialive:UpdateChannelClass',
  UPDATE_INPUT = 'medialive:UpdateInput',
  UPDATE_INPUT_DEVICE = 'medialive:UpdateInputDevice',
  UPDATE_INPUT_SECURITY_GROUP = 'medialive:UpdateInputSecurityGroup',
  UPDATE_MULTIPLEX = 'medialive:UpdateMultiplex',
  UPDATE_RESERVATION = 'medialive:UpdateReservation',
}
export enum KEY_MANAGEMENT_SERVICE {
  CANCEL_KEY_DELETION = 'kms:CancelKeyDeletion',
  CONNECT_CUSTOM_KEY_STORE = 'kms:ConnectCustomKeyStore',
  CREATE_ALIAS = 'kms:CreateAlias',
  CREATE_CUSTOM_KEY_STORE = 'kms:CreateCustomKeyStore',
  CREATE_GRANT = 'kms:CreateGrant',
  CREATE_KEY = 'kms:CreateKey',
  DECRYPT = 'kms:Decrypt',
  DELETE_ALIAS = 'kms:DeleteAlias',
  DELETE_CUSTOM_KEY_STORE = 'kms:DeleteCustomKeyStore',
  DELETE_IMPORTED_KEY_MATERIAL = 'kms:DeleteImportedKeyMaterial',
  DESCRIBE_CUSTOM_KEY_STORES = 'kms:DescribeCustomKeyStores',
  DESCRIBE_KEY = 'kms:DescribeKey',
  DISABLE_KEY = 'kms:DisableKey',
  DISABLE_KEY_ROTATION = 'kms:DisableKeyRotation',
  DISCONNECT_CUSTOM_KEY_STORE = 'kms:DisconnectCustomKeyStore',
  ENABLE_KEY = 'kms:EnableKey',
  ENABLE_KEY_ROTATION = 'kms:EnableKeyRotation',
  ENCRYPT = 'kms:Encrypt',
  GENERATE_DATA_KEY = 'kms:GenerateDataKey',
  GENERATE_DATA_KEY_PAIR = 'kms:GenerateDataKeyPair',
  GENERATE_DATA_KEY_PAIR_WITHOUT_PLAINTEXT = 'kms:GenerateDataKeyPairWithoutPlaintext',
  GENERATE_DATA_KEY_WITHOUT_PLAINTEXT = 'kms:GenerateDataKeyWithoutPlaintext',
  GENERATE_RANDOM = 'kms:GenerateRandom',
  GET_KEY_POLICY = 'kms:GetKeyPolicy',
  GET_KEY_ROTATION_STATUS = 'kms:GetKeyRotationStatus',
  GET_PARAMETERS_FOR_IMPORT = 'kms:GetParametersForImport',
  GET_PUBLIC_KEY = 'kms:GetPublicKey',
  IMPORT_KEY_MATERIAL = 'kms:ImportKeyMaterial',
  LIST_ALIASES = 'kms:ListAliases',
  LIST_GRANTS = 'kms:ListGrants',
  LIST_KEY_POLICIES = 'kms:ListKeyPolicies',
  LIST_KEYS = 'kms:ListKeys',
  LIST_RESOURCE_TAGS = 'kms:ListResourceTags',
  LIST_RETIRABLE_GRANTS = 'kms:ListRetirableGrants',
  PUT_KEY_POLICY = 'kms:PutKeyPolicy',
  RE_ENCRYPT_FROM = 'kms:ReEncryptFrom',
  RE_ENCRYPT_TO = 'kms:ReEncryptTo',
  RETIRE_GRANT = 'kms:RetireGrant',
  REVOKE_GRANT = 'kms:RevokeGrant',
  SCHEDULE_KEY_DELETION = 'kms:ScheduleKeyDeletion',
  SIGN = 'kms:Sign',
  TAG_RESOURCE = 'kms:TagResource',
  UNTAG_RESOURCE = 'kms:UntagResource',
  UPDATE_ALIAS = 'kms:UpdateAlias',
  UPDATE_CUSTOM_KEY_STORE = 'kms:UpdateCustomKeyStore',
  UPDATE_KEY_DESCRIPTION = 'kms:UpdateKeyDescription',
  VERIFY = 'kms:Verify',
}
export enum CLOUDHSM {
  ADD_TAGS_TO_RESOURCE = 'cloudhsm:AddTagsToResource',
  COPY_BACKUP_TO_REGION = 'cloudhsm:CopyBackupToRegion',
  CREATE_CLUSTER = 'cloudhsm:CreateCluster',
  CREATE_HAPG = 'cloudhsm:CreateHapg',
  CREATE_HSM = 'cloudhsm:CreateHsm',
  CREATE_LUNA_CLIENT = 'cloudhsm:CreateLunaClient',
  DELETE_BACKUP = 'cloudhsm:DeleteBackup',
  DELETE_CLUSTER = 'cloudhsm:DeleteCluster',
  DELETE_HAPG = 'cloudhsm:DeleteHapg',
  DELETE_HSM = 'cloudhsm:DeleteHsm',
  DELETE_LUNA_CLIENT = 'cloudhsm:DeleteLunaClient',
  DESCRIBE_BACKUPS = 'cloudhsm:DescribeBackups',
  DESCRIBE_CLUSTERS = 'cloudhsm:DescribeClusters',
  DESCRIBE_HAPG = 'cloudhsm:DescribeHapg',
  DESCRIBE_HSM = 'cloudhsm:DescribeHsm',
  DESCRIBE_LUNA_CLIENT = 'cloudhsm:DescribeLunaClient',
  GET_CONFIG = 'cloudhsm:GetConfig',
  INITIALIZE_CLUSTER = 'cloudhsm:InitializeCluster',
  LIST_AVAILABLE_ZONES = 'cloudhsm:ListAvailableZones',
  LIST_HAPGS = 'cloudhsm:ListHapgs',
  LIST_HSMS = 'cloudhsm:ListHsms',
  LIST_LUNA_CLIENTS = 'cloudhsm:ListLunaClients',
  LIST_TAGS = 'cloudhsm:ListTags',
  LIST_TAGS_FOR_RESOURCE = 'cloudhsm:ListTagsForResource',
  MODIFY_HAPG = 'cloudhsm:ModifyHapg',
  MODIFY_HSM = 'cloudhsm:ModifyHsm',
  MODIFY_LUNA_CLIENT = 'cloudhsm:ModifyLunaClient',
  REMOVE_TAGS_FROM_RESOURCE = 'cloudhsm:RemoveTagsFromResource',
  RESTORE_BACKUP = 'cloudhsm:RestoreBackup',
  TAG_RESOURCE = 'cloudhsm:TagResource',
  UNTAG_RESOURCE = 'cloudhsm:UntagResource',
}
export enum CODEGURU {
  GET_CODE_GURU_FREE_TRIAL_SUMMARY = 'codeguru:GetCodeGuruFreeTrialSummary',
}
export enum EC2 {
  ACCEPT_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'ec2:AcceptReservedInstancesExchangeQuote',
  ACCEPT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:AcceptTransitGatewayPeeringAttachment',
  ACCEPT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:AcceptTransitGatewayVpcAttachment',
  ACCEPT_VPC_ENDPOINT_CONNECTIONS = 'ec2:AcceptVpcEndpointConnections',
  ACCEPT_VPC_PEERING_CONNECTION = 'ec2:AcceptVpcPeeringConnection',
  ADVERTISE_BYOIP_CIDR = 'ec2:AdvertiseByoipCidr',
  ALLOCATE_ADDRESS = 'ec2:AllocateAddress',
  ALLOCATE_HOSTS = 'ec2:AllocateHosts',
  APPLY_SECURITY_GROUPS_TO_CLIENT_VPN_TARGET_NETWORK = 'ec2:ApplySecurityGroupsToClientVpnTargetNetwork',
  ASSIGN_IPV_6_ADDRESSES = 'ec2:AssignIpv6Addresses',
  ASSIGN_PRIVATE_IP_ADDRESSES = 'ec2:AssignPrivateIpAddresses',
  ASSOCIATE_ADDRESS = 'ec2:AssociateAddress',
  ASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'ec2:AssociateClientVpnTargetNetwork',
  ASSOCIATE_DHCP_OPTIONS = 'ec2:AssociateDhcpOptions',
  ASSOCIATE_IAM_INSTANCE_PROFILE = 'ec2:AssociateIamInstanceProfile',
  ASSOCIATE_ROUTE_TABLE = 'ec2:AssociateRouteTable',
  ASSOCIATE_SUBNET_CIDR_BLOCK = 'ec2:AssociateSubnetCidrBlock',
  ASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:AssociateTransitGatewayMulticastDomain',
  ASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:AssociateTransitGatewayRouteTable',
  ASSOCIATE_VPC_CIDR_BLOCK = 'ec2:AssociateVpcCidrBlock',
  ATTACH_CLASSIC_LINK_VPC = 'ec2:AttachClassicLinkVpc',
  ATTACH_INTERNET_GATEWAY = 'ec2:AttachInternetGateway',
  ATTACH_NETWORK_INTERFACE = 'ec2:AttachNetworkInterface',
  ATTACH_VOLUME = 'ec2:AttachVolume',
  ATTACH_VPN_GATEWAY = 'ec2:AttachVpnGateway',
  AUTHORIZE_CLIENT_VPN_INGRESS = 'ec2:AuthorizeClientVpnIngress',
  AUTHORIZE_SECURITY_GROUP_EGRESS = 'ec2:AuthorizeSecurityGroupEgress',
  AUTHORIZE_SECURITY_GROUP_INGRESS = 'ec2:AuthorizeSecurityGroupIngress',
  BUNDLE_INSTANCE = 'ec2:BundleInstance',
  CANCEL_BUNDLE_TASK = 'ec2:CancelBundleTask',
  CANCEL_CAPACITY_RESERVATION = 'ec2:CancelCapacityReservation',
  CANCEL_CONVERSION_TASK = 'ec2:CancelConversionTask',
  CANCEL_EXPORT_TASK = 'ec2:CancelExportTask',
  CANCEL_IMPORT_TASK = 'ec2:CancelImportTask',
  CANCEL_RESERVED_INSTANCES_LISTING = 'ec2:CancelReservedInstancesListing',
  CANCEL_SPOT_FLEET_REQUESTS = 'ec2:CancelSpotFleetRequests',
  CANCEL_SPOT_INSTANCE_REQUESTS = 'ec2:CancelSpotInstanceRequests',
  CONFIRM_PRODUCT_INSTANCE = 'ec2:ConfirmProductInstance',
  COPY_FPGA_IMAGE = 'ec2:CopyFpgaImage',
  COPY_IMAGE = 'ec2:CopyImage',
  COPY_SNAPSHOT = 'ec2:CopySnapshot',
  CREATE_CAPACITY_RESERVATION = 'ec2:CreateCapacityReservation',
  CREATE_CARRIER_GATEWAY = 'ec2:CreateCarrierGateway',
  CREATE_CLIENT_VPN_ENDPOINT = 'ec2:CreateClientVpnEndpoint',
  CREATE_CLIENT_VPN_ROUTE = 'ec2:CreateClientVpnRoute',
  CREATE_CUSTOMER_GATEWAY = 'ec2:CreateCustomerGateway',
  CREATE_DEFAULT_SUBNET = 'ec2:CreateDefaultSubnet',
  CREATE_DEFAULT_VPC = 'ec2:CreateDefaultVpc',
  CREATE_DHCP_OPTIONS = 'ec2:CreateDhcpOptions',
  CREATE_EGRESS_ONLY_INTERNET_GATEWAY = 'ec2:CreateEgressOnlyInternetGateway',
  CREATE_FLEET = 'ec2:CreateFleet',
  CREATE_FLOW_LOGS = 'ec2:CreateFlowLogs',
  CREATE_FPGA_IMAGE = 'ec2:CreateFpgaImage',
  CREATE_IMAGE = 'ec2:CreateImage',
  CREATE_INSTANCE_EXPORT_TASK = 'ec2:CreateInstanceExportTask',
  CREATE_INTERNET_GATEWAY = 'ec2:CreateInternetGateway',
  CREATE_KEY_PAIR = 'ec2:CreateKeyPair',
  CREATE_LAUNCH_TEMPLATE = 'ec2:CreateLaunchTemplate',
  CREATE_LAUNCH_TEMPLATE_VERSION = 'ec2:CreateLaunchTemplateVersion',
  CREATE_LOCAL_GATEWAY_ROUTE = 'ec2:CreateLocalGatewayRoute',
  CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'ec2:CreateLocalGatewayRouteTableVpcAssociation',
  CREATE_MANAGED_PREFIX_LIST = 'ec2:CreateManagedPrefixList',
  CREATE_NAT_GATEWAY = 'ec2:CreateNatGateway',
  CREATE_NETWORK_ACL = 'ec2:CreateNetworkAcl',
  CREATE_NETWORK_ACL_ENTRY = 'ec2:CreateNetworkAclEntry',
  CREATE_NETWORK_INTERFACE = 'ec2:CreateNetworkInterface',
  CREATE_NETWORK_INTERFACE_PERMISSION = 'ec2:CreateNetworkInterfacePermission',
  CREATE_PLACEMENT_GROUP = 'ec2:CreatePlacementGroup',
  CREATE_RESERVED_INSTANCES_LISTING = 'ec2:CreateReservedInstancesListing',
  CREATE_ROUTE = 'ec2:CreateRoute',
  CREATE_ROUTE_TABLE = 'ec2:CreateRouteTable',
  CREATE_SECURITY_GROUP = 'ec2:CreateSecurityGroup',
  CREATE_SNAPSHOT = 'ec2:CreateSnapshot',
  CREATE_SNAPSHOTS = 'ec2:CreateSnapshots',
  CREATE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:CreateSpotDatafeedSubscription',
  CREATE_SUBNET = 'ec2:CreateSubnet',
  CREATE_TAGS = 'ec2:CreateTags',
  CREATE_TRAFFIC_MIRROR_FILTER = 'ec2:CreateTrafficMirrorFilter',
  CREATE_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:CreateTrafficMirrorFilterRule',
  CREATE_TRAFFIC_MIRROR_SESSION = 'ec2:CreateTrafficMirrorSession',
  CREATE_TRAFFIC_MIRROR_TARGET = 'ec2:CreateTrafficMirrorTarget',
  CREATE_TRANSIT_GATEWAY = 'ec2:CreateTransitGateway',
  CREATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:CreateTransitGatewayMulticastDomain',
  CREATE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:CreateTransitGatewayPeeringAttachment',
  CREATE_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:CreateTransitGatewayPrefixListReference',
  CREATE_TRANSIT_GATEWAY_ROUTE = 'ec2:CreateTransitGatewayRoute',
  CREATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:CreateTransitGatewayRouteTable',
  CREATE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:CreateTransitGatewayVpcAttachment',
  CREATE_VOLUME = 'ec2:CreateVolume',
  CREATE_VPC = 'ec2:CreateVpc',
  CREATE_VPC_ENDPOINT = 'ec2:CreateVpcEndpoint',
  CREATE_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'ec2:CreateVpcEndpointConnectionNotification',
  CREATE_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'ec2:CreateVpcEndpointServiceConfiguration',
  CREATE_VPC_PEERING_CONNECTION = 'ec2:CreateVpcPeeringConnection',
  CREATE_VPN_CONNECTION = 'ec2:CreateVpnConnection',
  CREATE_VPN_CONNECTION_ROUTE = 'ec2:CreateVpnConnectionRoute',
  CREATE_VPN_GATEWAY = 'ec2:CreateVpnGateway',
  DELETE_CARRIER_GATEWAY = 'ec2:DeleteCarrierGateway',
  DELETE_CLIENT_VPN_ENDPOINT = 'ec2:DeleteClientVpnEndpoint',
  DELETE_CLIENT_VPN_ROUTE = 'ec2:DeleteClientVpnRoute',
  DELETE_CUSTOMER_GATEWAY = 'ec2:DeleteCustomerGateway',
  DELETE_DHCP_OPTIONS = 'ec2:DeleteDhcpOptions',
  DELETE_EGRESS_ONLY_INTERNET_GATEWAY = 'ec2:DeleteEgressOnlyInternetGateway',
  DELETE_FLEETS = 'ec2:DeleteFleets',
  DELETE_FLOW_LOGS = 'ec2:DeleteFlowLogs',
  DELETE_FPGA_IMAGE = 'ec2:DeleteFpgaImage',
  DELETE_INTERNET_GATEWAY = 'ec2:DeleteInternetGateway',
  DELETE_KEY_PAIR = 'ec2:DeleteKeyPair',
  DELETE_LAUNCH_TEMPLATE = 'ec2:DeleteLaunchTemplate',
  DELETE_LAUNCH_TEMPLATE_VERSIONS = 'ec2:DeleteLaunchTemplateVersions',
  DELETE_LOCAL_GATEWAY_ROUTE = 'ec2:DeleteLocalGatewayRoute',
  DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'ec2:DeleteLocalGatewayRouteTableVpcAssociation',
  DELETE_MANAGED_PREFIX_LIST = 'ec2:DeleteManagedPrefixList',
  DELETE_NAT_GATEWAY = 'ec2:DeleteNatGateway',
  DELETE_NETWORK_ACL = 'ec2:DeleteNetworkAcl',
  DELETE_NETWORK_ACL_ENTRY = 'ec2:DeleteNetworkAclEntry',
  DELETE_NETWORK_INTERFACE = 'ec2:DeleteNetworkInterface',
  DELETE_NETWORK_INTERFACE_PERMISSION = 'ec2:DeleteNetworkInterfacePermission',
  DELETE_PLACEMENT_GROUP = 'ec2:DeletePlacementGroup',
  DELETE_ROUTE = 'ec2:DeleteRoute',
  DELETE_ROUTE_TABLE = 'ec2:DeleteRouteTable',
  DELETE_SECURITY_GROUP = 'ec2:DeleteSecurityGroup',
  DELETE_SNAPSHOT = 'ec2:DeleteSnapshot',
  DELETE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:DeleteSpotDatafeedSubscription',
  DELETE_SUBNET = 'ec2:DeleteSubnet',
  DELETE_TAGS = 'ec2:DeleteTags',
  DELETE_TRAFFIC_MIRROR_FILTER = 'ec2:DeleteTrafficMirrorFilter',
  DELETE_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:DeleteTrafficMirrorFilterRule',
  DELETE_TRAFFIC_MIRROR_SESSION = 'ec2:DeleteTrafficMirrorSession',
  DELETE_TRAFFIC_MIRROR_TARGET = 'ec2:DeleteTrafficMirrorTarget',
  DELETE_TRANSIT_GATEWAY = 'ec2:DeleteTransitGateway',
  DELETE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:DeleteTransitGatewayMulticastDomain',
  DELETE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:DeleteTransitGatewayPeeringAttachment',
  DELETE_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:DeleteTransitGatewayPrefixListReference',
  DELETE_TRANSIT_GATEWAY_ROUTE = 'ec2:DeleteTransitGatewayRoute',
  DELETE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:DeleteTransitGatewayRouteTable',
  DELETE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:DeleteTransitGatewayVpcAttachment',
  DELETE_VOLUME = 'ec2:DeleteVolume',
  DELETE_VPC = 'ec2:DeleteVpc',
  DELETE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'ec2:DeleteVpcEndpointConnectionNotifications',
  DELETE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'ec2:DeleteVpcEndpointServiceConfigurations',
  DELETE_VPC_ENDPOINTS = 'ec2:DeleteVpcEndpoints',
  DELETE_VPC_PEERING_CONNECTION = 'ec2:DeleteVpcPeeringConnection',
  DELETE_VPN_CONNECTION = 'ec2:DeleteVpnConnection',
  DELETE_VPN_CONNECTION_ROUTE = 'ec2:DeleteVpnConnectionRoute',
  DELETE_VPN_GATEWAY = 'ec2:DeleteVpnGateway',
  DEPROVISION_BYOIP_CIDR = 'ec2:DeprovisionByoipCidr',
  DEREGISTER_IMAGE = 'ec2:DeregisterImage',
  DEREGISTER_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:DeregisterInstanceEventNotificationAttributes',
  DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'ec2:DeregisterTransitGatewayMulticastGroupMembers',
  DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'ec2:DeregisterTransitGatewayMulticastGroupSources',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'ec2:DescribeAccountAttributes',
  DESCRIBE_ADDRESSES = 'ec2:DescribeAddresses',
  DESCRIBE_AGGREGATE_ID_FORMAT = 'ec2:DescribeAggregateIdFormat',
  DESCRIBE_AVAILABILITY_ZONES = 'ec2:DescribeAvailabilityZones',
  DESCRIBE_BUNDLE_TASKS = 'ec2:DescribeBundleTasks',
  DESCRIBE_BYOIP_CIDRS = 'ec2:DescribeByoipCidrs',
  DESCRIBE_CAPACITY_RESERVATIONS = 'ec2:DescribeCapacityReservations',
  DESCRIBE_CARRIER_GATEWAYS = 'ec2:DescribeCarrierGateways',
  DESCRIBE_CLASSIC_LINK_INSTANCES = 'ec2:DescribeClassicLinkInstances',
  DESCRIBE_CLIENT_VPN_AUTHORIZATION_RULES = 'ec2:DescribeClientVpnAuthorizationRules',
  DESCRIBE_CLIENT_VPN_CONNECTIONS = 'ec2:DescribeClientVpnConnections',
  DESCRIBE_CLIENT_VPN_ENDPOINTS = 'ec2:DescribeClientVpnEndpoints',
  DESCRIBE_CLIENT_VPN_ROUTES = 'ec2:DescribeClientVpnRoutes',
  DESCRIBE_CLIENT_VPN_TARGET_NETWORKS = 'ec2:DescribeClientVpnTargetNetworks',
  DESCRIBE_COIP_POOLS = 'ec2:DescribeCoipPools',
  DESCRIBE_CONVERSION_TASKS = 'ec2:DescribeConversionTasks',
  DESCRIBE_CUSTOMER_GATEWAYS = 'ec2:DescribeCustomerGateways',
  DESCRIBE_DHCP_OPTIONS = 'ec2:DescribeDhcpOptions',
  DESCRIBE_EGRESS_ONLY_INTERNET_GATEWAYS = 'ec2:DescribeEgressOnlyInternetGateways',
  DESCRIBE_ELASTIC_GPUS = 'ec2:DescribeElasticGpus',
  DESCRIBE_EXPORT_IMAGE_TASKS = 'ec2:DescribeExportImageTasks',
  DESCRIBE_EXPORT_TASKS = 'ec2:DescribeExportTasks',
  DESCRIBE_FAST_SNAPSHOT_RESTORES = 'ec2:DescribeFastSnapshotRestores',
  DESCRIBE_FLEET_HISTORY = 'ec2:DescribeFleetHistory',
  DESCRIBE_FLEET_INSTANCES = 'ec2:DescribeFleetInstances',
  DESCRIBE_FLEETS = 'ec2:DescribeFleets',
  DESCRIBE_FLOW_LOGS = 'ec2:DescribeFlowLogs',
  DESCRIBE_FPGA_IMAGE_ATTRIBUTE = 'ec2:DescribeFpgaImageAttribute',
  DESCRIBE_FPGA_IMAGES = 'ec2:DescribeFpgaImages',
  DESCRIBE_HOST_RESERVATION_OFFERINGS = 'ec2:DescribeHostReservationOfferings',
  DESCRIBE_HOST_RESERVATIONS = 'ec2:DescribeHostReservations',
  DESCRIBE_HOSTS = 'ec2:DescribeHosts',
  DESCRIBE_IAM_INSTANCE_PROFILE_ASSOCIATIONS = 'ec2:DescribeIamInstanceProfileAssociations',
  DESCRIBE_ID_FORMAT = 'ec2:DescribeIdFormat',
  DESCRIBE_IDENTITY_ID_FORMAT = 'ec2:DescribeIdentityIdFormat',
  DESCRIBE_IMAGE_ATTRIBUTE = 'ec2:DescribeImageAttribute',
  DESCRIBE_IMAGES = 'ec2:DescribeImages',
  DESCRIBE_IMPORT_IMAGE_TASKS = 'ec2:DescribeImportImageTasks',
  DESCRIBE_IMPORT_SNAPSHOT_TASKS = 'ec2:DescribeImportSnapshotTasks',
  DESCRIBE_INSTANCE_ATTRIBUTE = 'ec2:DescribeInstanceAttribute',
  DESCRIBE_INSTANCE_CREDIT_SPECIFICATIONS = 'ec2:DescribeInstanceCreditSpecifications',
  DESCRIBE_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:DescribeInstanceEventNotificationAttributes',
  DESCRIBE_INSTANCE_STATUS = 'ec2:DescribeInstanceStatus',
  DESCRIBE_INSTANCE_TYPE_OFFERINGS = 'ec2:DescribeInstanceTypeOfferings',
  DESCRIBE_INSTANCE_TYPES = 'ec2:DescribeInstanceTypes',
  DESCRIBE_INSTANCES = 'ec2:DescribeInstances',
  DESCRIBE_INTERNET_GATEWAYS = 'ec2:DescribeInternetGateways',
  DESCRIBE_KEY_PAIRS = 'ec2:DescribeKeyPairs',
  DESCRIBE_LAUNCH_TEMPLATE_VERSIONS = 'ec2:DescribeLaunchTemplateVersions',
  DESCRIBE_LAUNCH_TEMPLATES = 'ec2:DescribeLaunchTemplates',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATIONS = 'ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATIONS = 'ec2:DescribeLocalGatewayRouteTableVpcAssociations',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLES = 'ec2:DescribeLocalGatewayRouteTables',
  DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUPS = 'ec2:DescribeLocalGatewayVirtualInterfaceGroups',
  DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACES = 'ec2:DescribeLocalGatewayVirtualInterfaces',
  DESCRIBE_LOCAL_GATEWAYS = 'ec2:DescribeLocalGateways',
  DESCRIBE_MANAGED_PREFIX_LISTS = 'ec2:DescribeManagedPrefixLists',
  DESCRIBE_MOVING_ADDRESSES = 'ec2:DescribeMovingAddresses',
  DESCRIBE_NAT_GATEWAYS = 'ec2:DescribeNatGateways',
  DESCRIBE_NETWORK_ACLS = 'ec2:DescribeNetworkAcls',
  DESCRIBE_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:DescribeNetworkInterfaceAttribute',
  DESCRIBE_NETWORK_INTERFACE_PERMISSIONS = 'ec2:DescribeNetworkInterfacePermissions',
  DESCRIBE_NETWORK_INTERFACES = 'ec2:DescribeNetworkInterfaces',
  DESCRIBE_PLACEMENT_GROUPS = 'ec2:DescribePlacementGroups',
  DESCRIBE_PREFIX_LISTS = 'ec2:DescribePrefixLists',
  DESCRIBE_PRINCIPAL_ID_FORMAT = 'ec2:DescribePrincipalIdFormat',
  DESCRIBE_PUBLIC_IPV_4_POOLS = 'ec2:DescribePublicIpv4Pools',
  DESCRIBE_REGIONS = 'ec2:DescribeRegions',
  DESCRIBE_RESERVED_INSTANCES = 'ec2:DescribeReservedInstances',
  DESCRIBE_RESERVED_INSTANCES_LISTINGS = 'ec2:DescribeReservedInstancesListings',
  DESCRIBE_RESERVED_INSTANCES_MODIFICATIONS = 'ec2:DescribeReservedInstancesModifications',
  DESCRIBE_RESERVED_INSTANCES_OFFERINGS = 'ec2:DescribeReservedInstancesOfferings',
  DESCRIBE_ROUTE_TABLES = 'ec2:DescribeRouteTables',
  DESCRIBE_SCHEDULED_INSTANCE_AVAILABILITY = 'ec2:DescribeScheduledInstanceAvailability',
  DESCRIBE_SCHEDULED_INSTANCES = 'ec2:DescribeScheduledInstances',
  DESCRIBE_SECURITY_GROUP_REFERENCES = 'ec2:DescribeSecurityGroupReferences',
  DESCRIBE_SECURITY_GROUPS = 'ec2:DescribeSecurityGroups',
  DESCRIBE_SNAPSHOT_ATTRIBUTE = 'ec2:DescribeSnapshotAttribute',
  DESCRIBE_SNAPSHOTS = 'ec2:DescribeSnapshots',
  DESCRIBE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:DescribeSpotDatafeedSubscription',
  DESCRIBE_SPOT_FLEET_INSTANCES = 'ec2:DescribeSpotFleetInstances',
  DESCRIBE_SPOT_FLEET_REQUEST_HISTORY = 'ec2:DescribeSpotFleetRequestHistory',
  DESCRIBE_SPOT_FLEET_REQUESTS = 'ec2:DescribeSpotFleetRequests',
  DESCRIBE_SPOT_INSTANCE_REQUESTS = 'ec2:DescribeSpotInstanceRequests',
  DESCRIBE_SPOT_PRICE_HISTORY = 'ec2:DescribeSpotPriceHistory',
  DESCRIBE_STALE_SECURITY_GROUPS = 'ec2:DescribeStaleSecurityGroups',
  DESCRIBE_SUBNETS = 'ec2:DescribeSubnets',
  DESCRIBE_TAGS = 'ec2:DescribeTags',
  DESCRIBE_TRAFFIC_MIRROR_FILTERS = 'ec2:DescribeTrafficMirrorFilters',
  DESCRIBE_TRAFFIC_MIRROR_SESSIONS = 'ec2:DescribeTrafficMirrorSessions',
  DESCRIBE_TRAFFIC_MIRROR_TARGETS = 'ec2:DescribeTrafficMirrorTargets',
  DESCRIBE_TRANSIT_GATEWAY_ATTACHMENTS = 'ec2:DescribeTransitGatewayAttachments',
  DESCRIBE_TRANSIT_GATEWAY_MULTICAST_DOMAINS = 'ec2:DescribeTransitGatewayMulticastDomains',
  DESCRIBE_TRANSIT_GATEWAY_PEERING_ATTACHMENTS = 'ec2:DescribeTransitGatewayPeeringAttachments',
  DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLES = 'ec2:DescribeTransitGatewayRouteTables',
  DESCRIBE_TRANSIT_GATEWAY_VPC_ATTACHMENTS = 'ec2:DescribeTransitGatewayVpcAttachments',
  DESCRIBE_TRANSIT_GATEWAYS = 'ec2:DescribeTransitGateways',
  DESCRIBE_VOLUME_ATTRIBUTE = 'ec2:DescribeVolumeAttribute',
  DESCRIBE_VOLUME_STATUS = 'ec2:DescribeVolumeStatus',
  DESCRIBE_VOLUMES = 'ec2:DescribeVolumes',
  DESCRIBE_VOLUMES_MODIFICATIONS = 'ec2:DescribeVolumesModifications',
  DESCRIBE_VPC_ATTRIBUTE = 'ec2:DescribeVpcAttribute',
  DESCRIBE_VPC_CLASSIC_LINK = 'ec2:DescribeVpcClassicLink',
  DESCRIBE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:DescribeVpcClassicLinkDnsSupport',
  DESCRIBE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'ec2:DescribeVpcEndpointConnectionNotifications',
  DESCRIBE_VPC_ENDPOINT_CONNECTIONS = 'ec2:DescribeVpcEndpointConnections',
  DESCRIBE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'ec2:DescribeVpcEndpointServiceConfigurations',
  DESCRIBE_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'ec2:DescribeVpcEndpointServicePermissions',
  DESCRIBE_VPC_ENDPOINT_SERVICES = 'ec2:DescribeVpcEndpointServices',
  DESCRIBE_VPC_ENDPOINTS = 'ec2:DescribeVpcEndpoints',
  DESCRIBE_VPC_PEERING_CONNECTIONS = 'ec2:DescribeVpcPeeringConnections',
  DESCRIBE_VPCS = 'ec2:DescribeVpcs',
  DESCRIBE_VPN_CONNECTIONS = 'ec2:DescribeVpnConnections',
  DESCRIBE_VPN_GATEWAYS = 'ec2:DescribeVpnGateways',
  DETACH_CLASSIC_LINK_VPC = 'ec2:DetachClassicLinkVpc',
  DETACH_INTERNET_GATEWAY = 'ec2:DetachInternetGateway',
  DETACH_NETWORK_INTERFACE = 'ec2:DetachNetworkInterface',
  DETACH_VOLUME = 'ec2:DetachVolume',
  DETACH_VPN_GATEWAY = 'ec2:DetachVpnGateway',
  DISABLE_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:DisableEbsEncryptionByDefault',
  DISABLE_FAST_SNAPSHOT_RESTORES = 'ec2:DisableFastSnapshotRestores',
  DISABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'ec2:DisableTransitGatewayRouteTablePropagation',
  DISABLE_VGW_ROUTE_PROPAGATION = 'ec2:DisableVgwRoutePropagation',
  DISABLE_VPC_CLASSIC_LINK = 'ec2:DisableVpcClassicLink',
  DISABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:DisableVpcClassicLinkDnsSupport',
  DISASSOCIATE_ADDRESS = 'ec2:DisassociateAddress',
  DISASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'ec2:DisassociateClientVpnTargetNetwork',
  DISASSOCIATE_IAM_INSTANCE_PROFILE = 'ec2:DisassociateIamInstanceProfile',
  DISASSOCIATE_ROUTE_TABLE = 'ec2:DisassociateRouteTable',
  DISASSOCIATE_SUBNET_CIDR_BLOCK = 'ec2:DisassociateSubnetCidrBlock',
  DISASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:DisassociateTransitGatewayMulticastDomain',
  DISASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:DisassociateTransitGatewayRouteTable',
  DISASSOCIATE_VPC_CIDR_BLOCK = 'ec2:DisassociateVpcCidrBlock',
  ENABLE_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:EnableEbsEncryptionByDefault',
  ENABLE_FAST_SNAPSHOT_RESTORES = 'ec2:EnableFastSnapshotRestores',
  ENABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'ec2:EnableTransitGatewayRouteTablePropagation',
  ENABLE_VGW_ROUTE_PROPAGATION = 'ec2:EnableVgwRoutePropagation',
  ENABLE_VOLUME_IO = 'ec2:EnableVolumeIO',
  ENABLE_VPC_CLASSIC_LINK = 'ec2:EnableVpcClassicLink',
  ENABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:EnableVpcClassicLinkDnsSupport',
  EXPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ec2:ExportClientVpnClientCertificateRevocationList',
  EXPORT_CLIENT_VPN_CLIENT_CONFIGURATION = 'ec2:ExportClientVpnClientConfiguration',
  EXPORT_IMAGE = 'ec2:ExportImage',
  EXPORT_TRANSIT_GATEWAY_ROUTES = 'ec2:ExportTransitGatewayRoutes',
  GET_CAPACITY_RESERVATION_USAGE = 'ec2:GetCapacityReservationUsage',
  GET_COIP_POOL_USAGE = 'ec2:GetCoipPoolUsage',
  GET_CONSOLE_OUTPUT = 'ec2:GetConsoleOutput',
  GET_CONSOLE_SCREENSHOT = 'ec2:GetConsoleScreenshot',
  GET_DEFAULT_CREDIT_SPECIFICATION = 'ec2:GetDefaultCreditSpecification',
  GET_EBS_DEFAULT_KMS_KEY_ID = 'ec2:GetEbsDefaultKmsKeyId',
  GET_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:GetEbsEncryptionByDefault',
  GET_HOST_RESERVATION_PURCHASE_PREVIEW = 'ec2:GetHostReservationPurchasePreview',
  GET_LAUNCH_TEMPLATE_DATA = 'ec2:GetLaunchTemplateData',
  GET_MANAGED_PREFIX_LIST_ASSOCIATIONS = 'ec2:GetManagedPrefixListAssociations',
  GET_MANAGED_PREFIX_LIST_ENTRIES = 'ec2:GetManagedPrefixListEntries',
  GET_PASSWORD_DATA = 'ec2:GetPasswordData',
  GET_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'ec2:GetReservedInstancesExchangeQuote',
  GET_TRANSIT_GATEWAY_ATTACHMENT_PROPAGATIONS = 'ec2:GetTransitGatewayAttachmentPropagations',
  GET_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS = 'ec2:GetTransitGatewayMulticastDomainAssociations',
  GET_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCES = 'ec2:GetTransitGatewayPrefixListReferences',
  GET_TRANSIT_GATEWAY_ROUTE_TABLE_ASSOCIATIONS = 'ec2:GetTransitGatewayRouteTableAssociations',
  GET_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATIONS = 'ec2:GetTransitGatewayRouteTablePropagations',
  IMPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ec2:ImportClientVpnClientCertificateRevocationList',
  IMPORT_IMAGE = 'ec2:ImportImage',
  IMPORT_INSTANCE = 'ec2:ImportInstance',
  IMPORT_KEY_PAIR = 'ec2:ImportKeyPair',
  IMPORT_SNAPSHOT = 'ec2:ImportSnapshot',
  IMPORT_VOLUME = 'ec2:ImportVolume',
  MODIFY_CAPACITY_RESERVATION = 'ec2:ModifyCapacityReservation',
  MODIFY_CLIENT_VPN_ENDPOINT = 'ec2:ModifyClientVpnEndpoint',
  MODIFY_DEFAULT_CREDIT_SPECIFICATION = 'ec2:ModifyDefaultCreditSpecification',
  MODIFY_EBS_DEFAULT_KMS_KEY_ID = 'ec2:ModifyEbsDefaultKmsKeyId',
  MODIFY_FLEET = 'ec2:ModifyFleet',
  MODIFY_FPGA_IMAGE_ATTRIBUTE = 'ec2:ModifyFpgaImageAttribute',
  MODIFY_HOSTS = 'ec2:ModifyHosts',
  MODIFY_ID_FORMAT = 'ec2:ModifyIdFormat',
  MODIFY_IDENTITY_ID_FORMAT = 'ec2:ModifyIdentityIdFormat',
  MODIFY_IMAGE_ATTRIBUTE = 'ec2:ModifyImageAttribute',
  MODIFY_INSTANCE_ATTRIBUTE = 'ec2:ModifyInstanceAttribute',
  MODIFY_INSTANCE_CAPACITY_RESERVATION_ATTRIBUTES = 'ec2:ModifyInstanceCapacityReservationAttributes',
  MODIFY_INSTANCE_CREDIT_SPECIFICATION = 'ec2:ModifyInstanceCreditSpecification',
  MODIFY_INSTANCE_EVENT_START_TIME = 'ec2:ModifyInstanceEventStartTime',
  MODIFY_INSTANCE_METADATA_OPTIONS = 'ec2:ModifyInstanceMetadataOptions',
  MODIFY_INSTANCE_PLACEMENT = 'ec2:ModifyInstancePlacement',
  MODIFY_LAUNCH_TEMPLATE = 'ec2:ModifyLaunchTemplate',
  MODIFY_MANAGED_PREFIX_LIST = 'ec2:ModifyManagedPrefixList',
  MODIFY_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:ModifyNetworkInterfaceAttribute',
  MODIFY_RESERVED_INSTANCES = 'ec2:ModifyReservedInstances',
  MODIFY_SNAPSHOT_ATTRIBUTE = 'ec2:ModifySnapshotAttribute',
  MODIFY_SPOT_FLEET_REQUEST = 'ec2:ModifySpotFleetRequest',
  MODIFY_SUBNET_ATTRIBUTE = 'ec2:ModifySubnetAttribute',
  MODIFY_TRAFFIC_MIRROR_FILTER_NETWORK_SERVICES = 'ec2:ModifyTrafficMirrorFilterNetworkServices',
  MODIFY_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:ModifyTrafficMirrorFilterRule',
  MODIFY_TRAFFIC_MIRROR_SESSION = 'ec2:ModifyTrafficMirrorSession',
  MODIFY_TRANSIT_GATEWAY = 'ec2:ModifyTransitGateway',
  MODIFY_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:ModifyTransitGatewayPrefixListReference',
  MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:ModifyTransitGatewayVpcAttachment',
  MODIFY_VOLUME = 'ec2:ModifyVolume',
  MODIFY_VOLUME_ATTRIBUTE = 'ec2:ModifyVolumeAttribute',
  MODIFY_VPC_ATTRIBUTE = 'ec2:ModifyVpcAttribute',
  MODIFY_VPC_ENDPOINT = 'ec2:ModifyVpcEndpoint',
  MODIFY_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'ec2:ModifyVpcEndpointConnectionNotification',
  MODIFY_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'ec2:ModifyVpcEndpointServiceConfiguration',
  MODIFY_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'ec2:ModifyVpcEndpointServicePermissions',
  MODIFY_VPC_PEERING_CONNECTION_OPTIONS = 'ec2:ModifyVpcPeeringConnectionOptions',
  MODIFY_VPC_TENANCY = 'ec2:ModifyVpcTenancy',
  MODIFY_VPN_CONNECTION = 'ec2:ModifyVpnConnection',
  MODIFY_VPN_TUNNEL_CERTIFICATE = 'ec2:ModifyVpnTunnelCertificate',
  MODIFY_VPN_TUNNEL_OPTIONS = 'ec2:ModifyVpnTunnelOptions',
  MONITOR_INSTANCES = 'ec2:MonitorInstances',
  MOVE_ADDRESS_TO_VPC = 'ec2:MoveAddressToVpc',
  PROVISION_BYOIP_CIDR = 'ec2:ProvisionByoipCidr',
  PURCHASE_HOST_RESERVATION = 'ec2:PurchaseHostReservation',
  PURCHASE_RESERVED_INSTANCES_OFFERING = 'ec2:PurchaseReservedInstancesOffering',
  PURCHASE_SCHEDULED_INSTANCES = 'ec2:PurchaseScheduledInstances',
  REBOOT_INSTANCES = 'ec2:RebootInstances',
  REGISTER_IMAGE = 'ec2:RegisterImage',
  REGISTER_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:RegisterInstanceEventNotificationAttributes',
  REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'ec2:RegisterTransitGatewayMulticastGroupMembers',
  REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'ec2:RegisterTransitGatewayMulticastGroupSources',
  REJECT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:RejectTransitGatewayPeeringAttachment',
  REJECT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:RejectTransitGatewayVpcAttachment',
  REJECT_VPC_ENDPOINT_CONNECTIONS = 'ec2:RejectVpcEndpointConnections',
  REJECT_VPC_PEERING_CONNECTION = 'ec2:RejectVpcPeeringConnection',
  RELEASE_ADDRESS = 'ec2:ReleaseAddress',
  RELEASE_HOSTS = 'ec2:ReleaseHosts',
  REPLACE_IAM_INSTANCE_PROFILE_ASSOCIATION = 'ec2:ReplaceIamInstanceProfileAssociation',
  REPLACE_NETWORK_ACL_ASSOCIATION = 'ec2:ReplaceNetworkAclAssociation',
  REPLACE_NETWORK_ACL_ENTRY = 'ec2:ReplaceNetworkAclEntry',
  REPLACE_ROUTE = 'ec2:ReplaceRoute',
  REPLACE_ROUTE_TABLE_ASSOCIATION = 'ec2:ReplaceRouteTableAssociation',
  REPLACE_TRANSIT_GATEWAY_ROUTE = 'ec2:ReplaceTransitGatewayRoute',
  REPORT_INSTANCE_STATUS = 'ec2:ReportInstanceStatus',
  REQUEST_SPOT_FLEET = 'ec2:RequestSpotFleet',
  REQUEST_SPOT_INSTANCES = 'ec2:RequestSpotInstances',
  RESET_EBS_DEFAULT_KMS_KEY_ID = 'ec2:ResetEbsDefaultKmsKeyId',
  RESET_FPGA_IMAGE_ATTRIBUTE = 'ec2:ResetFpgaImageAttribute',
  RESET_IMAGE_ATTRIBUTE = 'ec2:ResetImageAttribute',
  RESET_INSTANCE_ATTRIBUTE = 'ec2:ResetInstanceAttribute',
  RESET_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:ResetNetworkInterfaceAttribute',
  RESET_SNAPSHOT_ATTRIBUTE = 'ec2:ResetSnapshotAttribute',
  RESTORE_ADDRESS_TO_CLASSIC = 'ec2:RestoreAddressToClassic',
  RESTORE_MANAGED_PREFIX_LIST_VERSION = 'ec2:RestoreManagedPrefixListVersion',
  REVOKE_CLIENT_VPN_INGRESS = 'ec2:RevokeClientVpnIngress',
  REVOKE_SECURITY_GROUP_EGRESS = 'ec2:RevokeSecurityGroupEgress',
  REVOKE_SECURITY_GROUP_INGRESS = 'ec2:RevokeSecurityGroupIngress',
  RUN_INSTANCES = 'ec2:RunInstances',
  RUN_SCHEDULED_INSTANCES = 'ec2:RunScheduledInstances',
  SEARCH_LOCAL_GATEWAY_ROUTES = 'ec2:SearchLocalGatewayRoutes',
  SEARCH_TRANSIT_GATEWAY_MULTICAST_GROUPS = 'ec2:SearchTransitGatewayMulticastGroups',
  SEARCH_TRANSIT_GATEWAY_ROUTES = 'ec2:SearchTransitGatewayRoutes',
  SEND_DIAGNOSTIC_INTERRUPT = 'ec2:SendDiagnosticInterrupt',
  START_INSTANCES = 'ec2:StartInstances',
  START_VPC_ENDPOINT_SERVICE_PRIVATE_DNS_VERIFICATION = 'ec2:StartVpcEndpointServicePrivateDnsVerification',
  STOP_INSTANCES = 'ec2:StopInstances',
  TERMINATE_CLIENT_VPN_CONNECTIONS = 'ec2:TerminateClientVpnConnections',
  TERMINATE_INSTANCES = 'ec2:TerminateInstances',
  UNASSIGN_IPV_6_ADDRESSES = 'ec2:UnassignIpv6Addresses',
  UNASSIGN_PRIVATE_IP_ADDRESSES = 'ec2:UnassignPrivateIpAddresses',
  UNMONITOR_INSTANCES = 'ec2:UnmonitorInstances',
  UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_EGRESS = 'ec2:UpdateSecurityGroupRuleDescriptionsEgress',
  UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_INGRESS = 'ec2:UpdateSecurityGroupRuleDescriptionsIngress',
  WITHDRAW_BYOIP_CIDR = 'ec2:WithdrawByoipCidr',
}
export enum IMPORT_EXPORT_DISK_SERVICE {
  CANCEL_JOB = 'importexport:CancelJob',
  CREATE_JOB = 'importexport:CreateJob',
  GET_SHIPPING_LABEL = 'importexport:GetShippingLabel',
  GET_STATUS = 'importexport:GetStatus',
  LIST_JOBS = 'importexport:ListJobs',
  UPDATE_JOB = 'importexport:UpdateJob',
}
export enum DATA_PIPELINE {
  ACTIVATE_PIPELINE = 'datapipeline:ActivatePipeline',
  ADD_TAGS = 'datapipeline:AddTags',
  CREATE_PIPELINE = 'datapipeline:CreatePipeline',
  DEACTIVATE_PIPELINE = 'datapipeline:DeactivatePipeline',
  DELETE_PIPELINE = 'datapipeline:DeletePipeline',
  DESCRIBE_OBJECTS = 'datapipeline:DescribeObjects',
  DESCRIBE_PIPELINES = 'datapipeline:DescribePipelines',
  EVALUATE_EXPRESSION = 'datapipeline:EvaluateExpression',
  GET_ACCOUNT_LIMITS = 'datapipeline:GetAccountLimits',
  GET_PIPELINE_DEFINITION = 'datapipeline:GetPipelineDefinition',
  LIST_PIPELINES = 'datapipeline:ListPipelines',
  POLL_FOR_TASK = 'datapipeline:PollForTask',
  PUT_ACCOUNT_LIMITS = 'datapipeline:PutAccountLimits',
  PUT_PIPELINE_DEFINITION = 'datapipeline:PutPipelineDefinition',
  QUERY_OBJECTS = 'datapipeline:QueryObjects',
  REMOVE_TAGS = 'datapipeline:RemoveTags',
  REPORT_TASK_PROGRESS = 'datapipeline:ReportTaskProgress',
  REPORT_TASK_RUNNER_HEARTBEAT = 'datapipeline:ReportTaskRunnerHeartbeat',
  SET_STATUS = 'datapipeline:SetStatus',
  SET_TASK_STATUS = 'datapipeline:SetTaskStatus',
  VALIDATE_PIPELINE_DEFINITION = 'datapipeline:ValidatePipelineDefinition',
}
export enum SERVER_MIGRATION_SERVICE {
  CREATE_APP = 'sms:CreateApp',
  CREATE_REPLICATION_JOB = 'sms:CreateReplicationJob',
  DELETE_APP = 'sms:DeleteApp',
  DELETE_APP_LAUNCH_CONFIGURATION = 'sms:DeleteAppLaunchConfiguration',
  DELETE_APP_REPLICATION_CONFIGURATION = 'sms:DeleteAppReplicationConfiguration',
  DELETE_APP_VALIDATION_CONFIGURATION = 'sms:DeleteAppValidationConfiguration',
  DELETE_REPLICATION_JOB = 'sms:DeleteReplicationJob',
  DELETE_SERVER_CATALOG = 'sms:DeleteServerCatalog',
  DISASSOCIATE_CONNECTOR = 'sms:DisassociateConnector',
  GENERATE_CHANGE_SET = 'sms:GenerateChangeSet',
  GENERATE_TEMPLATE = 'sms:GenerateTemplate',
  GET_APP = 'sms:GetApp',
  GET_APP_LAUNCH_CONFIGURATION = 'sms:GetAppLaunchConfiguration',
  GET_APP_REPLICATION_CONFIGURATION = 'sms:GetAppReplicationConfiguration',
  GET_APP_VALIDATION_CONFIGURATION = 'sms:GetAppValidationConfiguration',
  GET_APP_VALIDATION_OUTPUT = 'sms:GetAppValidationOutput',
  GET_CONNECTORS = 'sms:GetConnectors',
  GET_MESSAGES = 'sms:GetMessages',
  GET_REPLICATION_JOBS = 'sms:GetReplicationJobs',
  GET_REPLICATION_RUNS = 'sms:GetReplicationRuns',
  GET_SERVERS = 'sms:GetServers',
  IMPORT_APP_CATALOG = 'sms:ImportAppCatalog',
  IMPORT_SERVER_CATALOG = 'sms:ImportServerCatalog',
  LAUNCH_APP = 'sms:LaunchApp',
  LIST_APPS = 'sms:ListApps',
  NOTIFY_APP_VALIDATION_OUTPUT = 'sms:NotifyAppValidationOutput',
  PUT_APP_LAUNCH_CONFIGURATION = 'sms:PutAppLaunchConfiguration',
  PUT_APP_REPLICATION_CONFIGURATION = 'sms:PutAppReplicationConfiguration',
  PUT_APP_VALIDATION_CONFIGURATION = 'sms:PutAppValidationConfiguration',
  SEND_MESSAGE = 'sms:SendMessage',
  START_APP_REPLICATION = 'sms:StartAppReplication',
  START_ON_DEMAND_APP_REPLICATION = 'sms:StartOnDemandAppReplication',
  START_ON_DEMAND_REPLICATION_RUN = 'sms:StartOnDemandReplicationRun',
  STOP_APP_REPLICATION = 'sms:StopAppReplication',
  TERMINATE_APP = 'sms:TerminateApp',
  UPDATE_APP = 'sms:UpdateApp',
  UPDATE_REPLICATION_JOB = 'sms:UpdateReplicationJob',
}
export enum CLOUDFORMATION {
  CANCEL_UPDATE_STACK = 'cloudformation:CancelUpdateStack',
  CONTINUE_UPDATE_ROLLBACK = 'cloudformation:ContinueUpdateRollback',
  CREATE_CHANGE_SET = 'cloudformation:CreateChangeSet',
  CREATE_STACK = 'cloudformation:CreateStack',
  CREATE_STACK_INSTANCES = 'cloudformation:CreateStackInstances',
  CREATE_STACK_SET = 'cloudformation:CreateStackSet',
  CREATE_UPLOAD_BUCKET = 'cloudformation:CreateUploadBucket',
  DELETE_CHANGE_SET = 'cloudformation:DeleteChangeSet',
  DELETE_STACK = 'cloudformation:DeleteStack',
  DELETE_STACK_INSTANCES = 'cloudformation:DeleteStackInstances',
  DELETE_STACK_SET = 'cloudformation:DeleteStackSet',
  DEREGISTER_TYPE = 'cloudformation:DeregisterType',
  DESCRIBE_ACCOUNT_LIMITS = 'cloudformation:DescribeAccountLimits',
  DESCRIBE_CHANGE_SET = 'cloudformation:DescribeChangeSet',
  DESCRIBE_STACK_DRIFT_DETECTION_STATUS = 'cloudformation:DescribeStackDriftDetectionStatus',
  DESCRIBE_STACK_EVENTS = 'cloudformation:DescribeStackEvents',
  DESCRIBE_STACK_INSTANCE = 'cloudformation:DescribeStackInstance',
  DESCRIBE_STACK_RESOURCE = 'cloudformation:DescribeStackResource',
  DESCRIBE_STACK_RESOURCE_DRIFTS = 'cloudformation:DescribeStackResourceDrifts',
  DESCRIBE_STACK_RESOURCES = 'cloudformation:DescribeStackResources',
  DESCRIBE_STACK_SET = 'cloudformation:DescribeStackSet',
  DESCRIBE_STACK_SET_OPERATION = 'cloudformation:DescribeStackSetOperation',
  DESCRIBE_STACKS = 'cloudformation:DescribeStacks',
  DESCRIBE_TYPE = 'cloudformation:DescribeType',
  DESCRIBE_TYPE_REGISTRATION = 'cloudformation:DescribeTypeRegistration',
  DETECT_STACK_DRIFT = 'cloudformation:DetectStackDrift',
  DETECT_STACK_RESOURCE_DRIFT = 'cloudformation:DetectStackResourceDrift',
  DETECT_STACK_SET_DRIFT = 'cloudformation:DetectStackSetDrift',
  ESTIMATE_TEMPLATE_COST = 'cloudformation:EstimateTemplateCost',
  EXECUTE_CHANGE_SET = 'cloudformation:ExecuteChangeSet',
  GET_STACK_POLICY = 'cloudformation:GetStackPolicy',
  GET_TEMPLATE = 'cloudformation:GetTemplate',
  GET_TEMPLATE_SUMMARY = 'cloudformation:GetTemplateSummary',
  LIST_CHANGE_SETS = 'cloudformation:ListChangeSets',
  LIST_EXPORTS = 'cloudformation:ListExports',
  LIST_IMPORTS = 'cloudformation:ListImports',
  LIST_STACK_INSTANCES = 'cloudformation:ListStackInstances',
  LIST_STACK_RESOURCES = 'cloudformation:ListStackResources',
  LIST_STACK_SET_OPERATION_RESULTS = 'cloudformation:ListStackSetOperationResults',
  LIST_STACK_SET_OPERATIONS = 'cloudformation:ListStackSetOperations',
  LIST_STACK_SETS = 'cloudformation:ListStackSets',
  LIST_STACKS = 'cloudformation:ListStacks',
  LIST_TYPE_REGISTRATIONS = 'cloudformation:ListTypeRegistrations',
  LIST_TYPE_VERSIONS = 'cloudformation:ListTypeVersions',
  LIST_TYPES = 'cloudformation:ListTypes',
  REGISTER_TYPE = 'cloudformation:RegisterType',
  SET_STACK_POLICY = 'cloudformation:SetStackPolicy',
  SET_TYPE_DEFAULT_VERSION = 'cloudformation:SetTypeDefaultVersion',
  SIGNAL_RESOURCE = 'cloudformation:SignalResource',
  STOP_STACK_SET_OPERATION = 'cloudformation:StopStackSetOperation',
  TAG_RESOURCE = 'cloudformation:TagResource',
  UNTAG_RESOURCE = 'cloudformation:UntagResource',
  UPDATE_STACK = 'cloudformation:UpdateStack',
  UPDATE_STACK_INSTANCES = 'cloudformation:UpdateStackInstances',
  UPDATE_STACK_SET = 'cloudformation:UpdateStackSet',
  UPDATE_TERMINATION_PROTECTION = 'cloudformation:UpdateTerminationProtection',
  VALIDATE_TEMPLATE = 'cloudformation:ValidateTemplate',
}
export enum WORKMAIL_MESSAGE_FLOW {
  GET_RAW_MESSAGE_CONTENT = 'workmailmessageflow:GetRawMessageContent',
}
export enum CHATBOT {
  CREATE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:CreateChimeWebhookConfiguration',
  CREATE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:CreateSlackChannelConfiguration',
  DELETE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:DeleteChimeWebhookConfiguration',
  DELETE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:DeleteSlackChannelConfiguration',
  DESCRIBE_CHIME_WEBHOOK_CONFIGURATIONS = 'chatbot:DescribeChimeWebhookConfigurations',
  DESCRIBE_SLACK_CHANNEL_CONFIGURATIONS = 'chatbot:DescribeSlackChannelConfigurations',
  DESCRIBE_SLACK_CHANNELS = 'chatbot:DescribeSlackChannels',
  DESCRIBE_SLACK_WORKSPACES = 'chatbot:DescribeSlackWorkspaces',
  GET_SLACK_OAUTH_PARAMETERS = 'chatbot:GetSlackOauthParameters',
  REDEEM_SLACK_OAUTH_CODE = 'chatbot:RedeemSlackOauthCode',
  UPDATE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:UpdateChimeWebhookConfiguration',
  UPDATE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:UpdateSlackChannelConfiguration',
}
export enum MACIE {
  ACCEPT_INVITATION = 'macie2:AcceptInvitation',
  ARCHIVE_FINDINGS = 'macie2:ArchiveFindings',
  BATCH_GET_CUSTOM_DATA_IDENTIFIERS = 'macie2:BatchGetCustomDataIdentifiers',
  CREATE_CLASSIFICATION_JOB = 'macie2:CreateClassificationJob',
  CREATE_CUSTOM_DATA_IDENTIFIER = 'macie2:CreateCustomDataIdentifier',
  CREATE_FINDINGS_FILTER = 'macie2:CreateFindingsFilter',
  CREATE_INVITATIONS = 'macie2:CreateInvitations',
  CREATE_MEMBER = 'macie2:CreateMember',
  CREATE_SAMPLE_FINDINGS = 'macie2:CreateSampleFindings',
  DECLINE_INVITATIONS = 'macie2:DeclineInvitations',
  DELETE_CUSTOM_DATA_IDENTIFIER = 'macie2:DeleteCustomDataIdentifier',
  DELETE_FINDINGS_FILTER = 'macie2:DeleteFindingsFilter',
  DELETE_INVITATIONS = 'macie2:DeleteInvitations',
  DELETE_MEMBER = 'macie2:DeleteMember',
  DESCRIBE_BUCKETS = 'macie2:DescribeBuckets',
  DESCRIBE_CLASSIFICATION_JOB = 'macie2:DescribeClassificationJob',
  DESCRIBE_ORGANIZATION_CONFIGURATION = 'macie2:DescribeOrganizationConfiguration',
  DISABLE_MACIE = 'macie2:DisableMacie',
  DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'macie2:DisableOrganizationAdminAccount',
  DISASSOCIATE_FROM_MASTER_ACCOUNT = 'macie2:DisassociateFromMasterAccount',
  DISASSOCIATE_MEMBER = 'macie2:DisassociateMember',
  ENABLE_MACIE = 'macie2:EnableMacie',
  ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'macie2:EnableOrganizationAdminAccount',
  GET_BUCKET_STATISTICS = 'macie2:GetBucketStatistics',
  GET_CLASSIFICATION_EXPORT_CONFIGURATION = 'macie2:GetClassificationExportConfiguration',
  GET_CUSTOM_DATA_IDENTIFIER = 'macie2:GetCustomDataIdentifier',
  GET_FINDING_STATISTICS = 'macie2:GetFindingStatistics',
  GET_FINDINGS = 'macie2:GetFindings',
  GET_FINDINGS_FILTER = 'macie2:GetFindingsFilter',
  GET_INVITATIONS_COUNT = 'macie2:GetInvitationsCount',
  GET_MACIE_SESSION = 'macie2:GetMacieSession',
  GET_MASTER_ACCOUNT = 'macie2:GetMasterAccount',
  GET_MEMBER = 'macie2:GetMember',
  GET_USAGE_STATISTICS = 'macie2:GetUsageStatistics',
  GET_USAGE_TOTALS = 'macie2:GetUsageTotals',
  LIST_CLASSIFICATION_JOBS = 'macie2:ListClassificationJobs',
  LIST_CUSTOM_DATA_IDENTIFIERS = 'macie2:ListCustomDataIdentifiers',
  LIST_FINDINGS = 'macie2:ListFindings',
  LIST_FINDINGS_FILTERS = 'macie2:ListFindingsFilters',
  LIST_INVITATIONS = 'macie2:ListInvitations',
  LIST_MEMBERS = 'macie2:ListMembers',
  LIST_ORGANIZATION_ADMIN_ACCOUNTS = 'macie2:ListOrganizationAdminAccounts',
  LIST_TAGS_FOR_RESOURCES = 'macie2:ListTagsForResources',
  PUT_CLASSIFICATION_EXPORT_CONFIGURATION = 'macie2:PutClassificationExportConfiguration',
  TAG_RESOURCE = 'macie2:TagResource',
  TEST_CUSTOM_DATA_IDENTIFIER = 'macie2:TestCustomDataIdentifier',
  UNARCHIVE_FINDINGS = 'macie2:UnarchiveFindings',
  UNTAG_RESOURCE = 'macie2:UntagResource',
  UPDATE_CLASSIFICATION_JOB = 'macie2:UpdateClassificationJob',
  UPDATE_FINDINGS_FILTER = 'macie2:UpdateFindingsFilter',
  UPDATE_MACIE_SESSION = 'macie2:UpdateMacieSession',
  UPDATE_MEMBER_SESSION = 'macie2:UpdateMemberSession',
  UPDATE_ORGANIZATION_CONFIGURATION = 'macie2:UpdateOrganizationConfiguration',
}
export enum HEALTH_APIS_AND_NOTIFICATIONS {
  DESCRIBE_AFFECTED_ACCOUNTS_FOR_ORGANIZATION = 'health:DescribeAffectedAccountsForOrganization',
  DESCRIBE_AFFECTED_ENTITIES = 'health:DescribeAffectedEntities',
  DESCRIBE_AFFECTED_ENTITIES_FOR_ORGANIZATION = 'health:DescribeAffectedEntitiesForOrganization',
  DESCRIBE_ENTITY_AGGREGATES = 'health:DescribeEntityAggregates',
  DESCRIBE_EVENT_AGGREGATES = 'health:DescribeEventAggregates',
  DESCRIBE_EVENT_DETAILS = 'health:DescribeEventDetails',
  DESCRIBE_EVENT_DETAILS_FOR_ORGANIZATION = 'health:DescribeEventDetailsForOrganization',
  DESCRIBE_EVENT_TYPES = 'health:DescribeEventTypes',
  DESCRIBE_EVENTS = 'health:DescribeEvents',
  DESCRIBE_EVENTS_FOR_ORGANIZATION = 'health:DescribeEventsForOrganization',
  DESCRIBE_HEALTH_SERVICE_STATUS_FOR_ORGANIZATION = 'health:DescribeHealthServiceStatusForOrganization',
  DISABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'health:DisableHealthServiceAccessForOrganization',
  ENABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'health:EnableHealthServiceAccessForOrganization',
}
export enum OUTPOSTS {
  CREATE_OUTPOST = 'outposts:CreateOutpost',
  GET_OUTPOST = 'outposts:GetOutpost',
  GET_OUTPOST_INSTANCE_TYPES = 'outposts:GetOutpostInstanceTypes',
  LIST_OUTPOSTS = 'outposts:ListOutposts',
  LIST_SITES = 'outposts:ListSites',
}
export enum GAMELIFT {
  ACCEPT_MATCH = 'gamelift:AcceptMatch',
  CLAIM_GAME_SERVER = 'gamelift:ClaimGameServer',
  CREATE_ALIAS = 'gamelift:CreateAlias',
  CREATE_BUILD = 'gamelift:CreateBuild',
  CREATE_FLEET = 'gamelift:CreateFleet',
  CREATE_GAME_SERVER_GROUP = 'gamelift:CreateGameServerGroup',
  CREATE_GAME_SESSION = 'gamelift:CreateGameSession',
  CREATE_GAME_SESSION_QUEUE = 'gamelift:CreateGameSessionQueue',
  CREATE_MATCHMAKING_CONFIGURATION = 'gamelift:CreateMatchmakingConfiguration',
  CREATE_MATCHMAKING_RULE_SET = 'gamelift:CreateMatchmakingRuleSet',
  CREATE_PLAYER_SESSION = 'gamelift:CreatePlayerSession',
  CREATE_PLAYER_SESSIONS = 'gamelift:CreatePlayerSessions',
  CREATE_SCRIPT = 'gamelift:CreateScript',
  CREATE_VPC_PEERING_AUTHORIZATION = 'gamelift:CreateVpcPeeringAuthorization',
  CREATE_VPC_PEERING_CONNECTION = 'gamelift:CreateVpcPeeringConnection',
  DELETE_ALIAS = 'gamelift:DeleteAlias',
  DELETE_BUILD = 'gamelift:DeleteBuild',
  DELETE_FLEET = 'gamelift:DeleteFleet',
  DELETE_GAME_SERVER_GROUP = 'gamelift:DeleteGameServerGroup',
  DELETE_GAME_SESSION_QUEUE = 'gamelift:DeleteGameSessionQueue',
  DELETE_MATCHMAKING_CONFIGURATION = 'gamelift:DeleteMatchmakingConfiguration',
  DELETE_MATCHMAKING_RULE_SET = 'gamelift:DeleteMatchmakingRuleSet',
  DELETE_SCALING_POLICY = 'gamelift:DeleteScalingPolicy',
  DELETE_SCRIPT = 'gamelift:DeleteScript',
  DELETE_VPC_PEERING_AUTHORIZATION = 'gamelift:DeleteVpcPeeringAuthorization',
  DELETE_VPC_PEERING_CONNECTION = 'gamelift:DeleteVpcPeeringConnection',
  DEREGISTER_GAME_SERVER = 'gamelift:DeregisterGameServer',
  DESCRIBE_ALIAS = 'gamelift:DescribeAlias',
  DESCRIBE_BUILD = 'gamelift:DescribeBuild',
  DESCRIBE_EC_2_INSTANCE_LIMITS = 'gamelift:DescribeEC2InstanceLimits',
  DESCRIBE_FLEET_ATTRIBUTES = 'gamelift:DescribeFleetAttributes',
  DESCRIBE_FLEET_CAPACITY = 'gamelift:DescribeFleetCapacity',
  DESCRIBE_FLEET_EVENTS = 'gamelift:DescribeFleetEvents',
  DESCRIBE_FLEET_PORT_SETTINGS = 'gamelift:DescribeFleetPortSettings',
  DESCRIBE_FLEET_UTILIZATION = 'gamelift:DescribeFleetUtilization',
  DESCRIBE_GAME_SERVER = 'gamelift:DescribeGameServer',
  DESCRIBE_GAME_SERVER_GROUP = 'gamelift:DescribeGameServerGroup',
  DESCRIBE_GAME_SERVER_INSTANCES = 'gamelift:DescribeGameServerInstances',
  DESCRIBE_GAME_SESSION_DETAILS = 'gamelift:DescribeGameSessionDetails',
  DESCRIBE_GAME_SESSION_PLACEMENT = 'gamelift:DescribeGameSessionPlacement',
  DESCRIBE_GAME_SESSION_QUEUES = 'gamelift:DescribeGameSessionQueues',
  DESCRIBE_GAME_SESSIONS = 'gamelift:DescribeGameSessions',
  DESCRIBE_INSTANCES = 'gamelift:DescribeInstances',
  DESCRIBE_MATCHMAKING = 'gamelift:DescribeMatchmaking',
  DESCRIBE_MATCHMAKING_CONFIGURATIONS = 'gamelift:DescribeMatchmakingConfigurations',
  DESCRIBE_MATCHMAKING_RULE_SETS = 'gamelift:DescribeMatchmakingRuleSets',
  DESCRIBE_PLAYER_SESSIONS = 'gamelift:DescribePlayerSessions',
  DESCRIBE_RUNTIME_CONFIGURATION = 'gamelift:DescribeRuntimeConfiguration',
  DESCRIBE_SCALING_POLICIES = 'gamelift:DescribeScalingPolicies',
  DESCRIBE_SCRIPT = 'gamelift:DescribeScript',
  DESCRIBE_VPC_PEERING_AUTHORIZATIONS = 'gamelift:DescribeVpcPeeringAuthorizations',
  DESCRIBE_VPC_PEERING_CONNECTIONS = 'gamelift:DescribeVpcPeeringConnections',
  GET_GAME_SESSION_LOG_URL = 'gamelift:GetGameSessionLogUrl',
  GET_INSTANCE_ACCESS = 'gamelift:GetInstanceAccess',
  LIST_ALIASES = 'gamelift:ListAliases',
  LIST_BUILDS = 'gamelift:ListBuilds',
  LIST_FLEETS = 'gamelift:ListFleets',
  LIST_GAME_SERVER_GROUPS = 'gamelift:ListGameServerGroups',
  LIST_GAME_SERVERS = 'gamelift:ListGameServers',
  LIST_SCRIPTS = 'gamelift:ListScripts',
  LIST_TAGS_FOR_RESOURCE = 'gamelift:ListTagsForResource',
  PUT_SCALING_POLICY = 'gamelift:PutScalingPolicy',
  REGISTER_GAME_SERVER = 'gamelift:RegisterGameServer',
  REQUEST_UPLOAD_CREDENTIALS = 'gamelift:RequestUploadCredentials',
  RESOLVE_ALIAS = 'gamelift:ResolveAlias',
  RESUME_GAME_SERVER_GROUP = 'gamelift:ResumeGameServerGroup',
  SEARCH_GAME_SESSIONS = 'gamelift:SearchGameSessions',
  START_FLEET_ACTIONS = 'gamelift:StartFleetActions',
  START_GAME_SESSION_PLACEMENT = 'gamelift:StartGameSessionPlacement',
  START_MATCH_BACKFILL = 'gamelift:StartMatchBackfill',
  START_MATCHMAKING = 'gamelift:StartMatchmaking',
  STOP_FLEET_ACTIONS = 'gamelift:StopFleetActions',
  STOP_GAME_SESSION_PLACEMENT = 'gamelift:StopGameSessionPlacement',
  STOP_MATCHMAKING = 'gamelift:StopMatchmaking',
  SUSPEND_GAME_SERVER_GROUP = 'gamelift:SuspendGameServerGroup',
  TAG_RESOURCE = 'gamelift:TagResource',
  UNTAG_RESOURCE = 'gamelift:UntagResource',
  UPDATE_ALIAS = 'gamelift:UpdateAlias',
  UPDATE_BUILD = 'gamelift:UpdateBuild',
  UPDATE_FLEET_ATTRIBUTES = 'gamelift:UpdateFleetAttributes',
  UPDATE_FLEET_CAPACITY = 'gamelift:UpdateFleetCapacity',
  UPDATE_FLEET_PORT_SETTINGS = 'gamelift:UpdateFleetPortSettings',
  UPDATE_GAME_SERVER = 'gamelift:UpdateGameServer',
  UPDATE_GAME_SERVER_GROUP = 'gamelift:UpdateGameServerGroup',
  UPDATE_GAME_SESSION = 'gamelift:UpdateGameSession',
  UPDATE_GAME_SESSION_QUEUE = 'gamelift:UpdateGameSessionQueue',
  UPDATE_MATCHMAKING_CONFIGURATION = 'gamelift:UpdateMatchmakingConfiguration',
  UPDATE_RUNTIME_CONFIGURATION = 'gamelift:UpdateRuntimeConfiguration',
  UPDATE_SCRIPT = 'gamelift:UpdateScript',
  VALIDATE_MATCHMAKING_RULE_SET = 'gamelift:ValidateMatchmakingRuleSet',
}
export enum OPSWORKS_CONFIGURATION_MANAGEMENT {
  ASSOCIATE_NODE = 'opsworks-cm:AssociateNode',
  CREATE_BACKUP = 'opsworks-cm:CreateBackup',
  CREATE_SERVER = 'opsworks-cm:CreateServer',
  DELETE_BACKUP = 'opsworks-cm:DeleteBackup',
  DELETE_SERVER = 'opsworks-cm:DeleteServer',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'opsworks-cm:DescribeAccountAttributes',
  DESCRIBE_BACKUPS = 'opsworks-cm:DescribeBackups',
  DESCRIBE_EVENTS = 'opsworks-cm:DescribeEvents',
  DESCRIBE_NODE_ASSOCIATION_STATUS = 'opsworks-cm:DescribeNodeAssociationStatus',
  DESCRIBE_SERVERS = 'opsworks-cm:DescribeServers',
  DISASSOCIATE_NODE = 'opsworks-cm:DisassociateNode',
  RESTORE_SERVER = 'opsworks-cm:RestoreServer',
  START_MAINTENANCE = 'opsworks-cm:StartMaintenance',
  UPDATE_SERVER = 'opsworks-cm:UpdateServer',
  UPDATE_SERVER_ENGINE_ATTRIBUTES = 'opsworks-cm:UpdateServerEngineAttributes',
}
export enum EC2_INSTANCE_CONNECT {
  SEND_SSH_PUBLIC_KEY = 'ec2-instance-connect:SendSSHPublicKey',
}
export enum RDS_IAM_AUTHENTICATION {
  CONNECT = 'rds-db:connect',
}
export enum APPLICATION_DISCOVERY {
  ASSOCIATE_CONFIGURATION_ITEMS_TO_APPLICATION = 'discovery:AssociateConfigurationItemsToApplication',
  BATCH_DELETE_IMPORT_DATA = 'discovery:BatchDeleteImportData',
  CREATE_APPLICATION = 'discovery:CreateApplication',
  CREATE_TAGS = 'discovery:CreateTags',
  DELETE_APPLICATIONS = 'discovery:DeleteApplications',
  DELETE_TAGS = 'discovery:DeleteTags',
  DESCRIBE_AGENTS = 'discovery:DescribeAgents',
  DESCRIBE_CONFIGURATIONS = 'discovery:DescribeConfigurations',
  DESCRIBE_CONTINUOUS_EXPORTS = 'discovery:DescribeContinuousExports',
  DESCRIBE_EXPORT_CONFIGURATIONS = 'discovery:DescribeExportConfigurations',
  DESCRIBE_EXPORT_TASKS = 'discovery:DescribeExportTasks',
  DESCRIBE_IMPORT_TASKS = 'discovery:DescribeImportTasks',
  DESCRIBE_TAGS = 'discovery:DescribeTags',
  DISASSOCIATE_CONFIGURATION_ITEMS_FROM_APPLICATION = 'discovery:DisassociateConfigurationItemsFromApplication',
  EXPORT_CONFIGURATIONS = 'discovery:ExportConfigurations',
  GET_DISCOVERY_SUMMARY = 'discovery:GetDiscoverySummary',
  LIST_CONFIGURATIONS = 'discovery:ListConfigurations',
  LIST_SERVER_NEIGHBORS = 'discovery:ListServerNeighbors',
  START_CONTINUOUS_EXPORT = 'discovery:StartContinuousExport',
  START_DATA_COLLECTION_BY_AGENT_IDS = 'discovery:StartDataCollectionByAgentIds',
  START_EXPORT_TASK = 'discovery:StartExportTask',
  START_IMPORT_TASK = 'discovery:StartImportTask',
  STOP_CONTINUOUS_EXPORT = 'discovery:StopContinuousExport',
  STOP_DATA_COLLECTION_BY_AGENT_IDS = 'discovery:StopDataCollectionByAgentIds',
  UPDATE_APPLICATION = 'discovery:UpdateApplication',
}
export enum ELASTIC_BLOCK_STORE {
  GET_SNAPSHOT_BLOCK = 'ebs:GetSnapshotBlock',
  LIST_CHANGED_BLOCKS = 'ebs:ListChangedBlocks',
  LIST_SNAPSHOT_BLOCKS = 'ebs:ListSnapshotBlocks',
}
export enum CODECOMMIT {
  ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORY = 'codecommit:AssociateApprovalRuleTemplateWithRepository',
  BATCH_ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORIES = 'codecommit:BatchAssociateApprovalRuleTemplateWithRepositories',
  BATCH_DESCRIBE_MERGE_CONFLICTS = 'codecommit:BatchDescribeMergeConflicts',
  BATCH_DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORIES = 'codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories',
  BATCH_GET_COMMITS = 'codecommit:BatchGetCommits',
  BATCH_GET_PULL_REQUESTS = 'codecommit:BatchGetPullRequests',
  BATCH_GET_REPOSITORIES = 'codecommit:BatchGetRepositories',
  CANCEL_UPLOAD_ARCHIVE = 'codecommit:CancelUploadArchive',
  CREATE_APPROVAL_RULE_TEMPLATE = 'codecommit:CreateApprovalRuleTemplate',
  CREATE_BRANCH = 'codecommit:CreateBranch',
  CREATE_COMMIT = 'codecommit:CreateCommit',
  CREATE_PULL_REQUEST = 'codecommit:CreatePullRequest',
  CREATE_PULL_REQUEST_APPROVAL_RULE = 'codecommit:CreatePullRequestApprovalRule',
  CREATE_REPOSITORY = 'codecommit:CreateRepository',
  CREATE_UNREFERENCED_MERGE_COMMIT = 'codecommit:CreateUnreferencedMergeCommit',
  DELETE_APPROVAL_RULE_TEMPLATE = 'codecommit:DeleteApprovalRuleTemplate',
  DELETE_BRANCH = 'codecommit:DeleteBranch',
  DELETE_COMMENT_CONTENT = 'codecommit:DeleteCommentContent',
  DELETE_FILE = 'codecommit:DeleteFile',
  DELETE_PULL_REQUEST_APPROVAL_RULE = 'codecommit:DeletePullRequestApprovalRule',
  DELETE_REPOSITORY = 'codecommit:DeleteRepository',
  DESCRIBE_MERGE_CONFLICTS = 'codecommit:DescribeMergeConflicts',
  DESCRIBE_PULL_REQUEST_EVENTS = 'codecommit:DescribePullRequestEvents',
  DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORY = 'codecommit:DisassociateApprovalRuleTemplateFromRepository',
  EVALUATE_PULL_REQUEST_APPROVAL_RULES = 'codecommit:EvaluatePullRequestApprovalRules',
  GET_APPROVAL_RULE_TEMPLATE = 'codecommit:GetApprovalRuleTemplate',
  GET_BLOB = 'codecommit:GetBlob',
  GET_BRANCH = 'codecommit:GetBranch',
  GET_COMMENT = 'codecommit:GetComment',
  GET_COMMENT_REACTIONS = 'codecommit:GetCommentReactions',
  GET_COMMENTS_FOR_COMPARED_COMMIT = 'codecommit:GetCommentsForComparedCommit',
  GET_COMMENTS_FOR_PULL_REQUEST = 'codecommit:GetCommentsForPullRequest',
  GET_COMMIT = 'codecommit:GetCommit',
  GET_COMMIT_HISTORY = 'codecommit:GetCommitHistory',
  GET_COMMITS_FROM_MERGE_BASE = 'codecommit:GetCommitsFromMergeBase',
  GET_DIFFERENCES = 'codecommit:GetDifferences',
  GET_FILE = 'codecommit:GetFile',
  GET_FOLDER = 'codecommit:GetFolder',
  GET_MERGE_COMMIT = 'codecommit:GetMergeCommit',
  GET_MERGE_CONFLICTS = 'codecommit:GetMergeConflicts',
  GET_MERGE_OPTIONS = 'codecommit:GetMergeOptions',
  GET_OBJECT_IDENTIFIER = 'codecommit:GetObjectIdentifier',
  GET_PULL_REQUEST = 'codecommit:GetPullRequest',
  GET_PULL_REQUEST_APPROVAL_STATES = 'codecommit:GetPullRequestApprovalStates',
  GET_PULL_REQUEST_OVERRIDE_STATE = 'codecommit:GetPullRequestOverrideState',
  GET_REFERENCES = 'codecommit:GetReferences',
  GET_REPOSITORY = 'codecommit:GetRepository',
  GET_REPOSITORY_TRIGGERS = 'codecommit:GetRepositoryTriggers',
  GET_TREE = 'codecommit:GetTree',
  GET_UPLOAD_ARCHIVE_STATUS = 'codecommit:GetUploadArchiveStatus',
  GIT_PULL = 'codecommit:GitPull',
  GIT_PUSH = 'codecommit:GitPush',
  LIST_APPROVAL_RULE_TEMPLATES = 'codecommit:ListApprovalRuleTemplates',
  LIST_ASSOCIATED_APPROVAL_RULE_TEMPLATES_FOR_REPOSITORY = 'codecommit:ListAssociatedApprovalRuleTemplatesForRepository',
  LIST_BRANCHES = 'codecommit:ListBranches',
  LIST_PULL_REQUESTS = 'codecommit:ListPullRequests',
  LIST_REPOSITORIES = 'codecommit:ListRepositories',
  LIST_REPOSITORIES_FOR_APPROVAL_RULE_TEMPLATE = 'codecommit:ListRepositoriesForApprovalRuleTemplate',
  LIST_TAGS_FOR_RESOURCE = 'codecommit:ListTagsForResource',
  MERGE_BRANCHES_BY_FAST_FORWARD = 'codecommit:MergeBranchesByFastForward',
  MERGE_BRANCHES_BY_SQUASH = 'codecommit:MergeBranchesBySquash',
  MERGE_BRANCHES_BY_THREE_WAY = 'codecommit:MergeBranchesByThreeWay',
  MERGE_PULL_REQUEST_BY_FAST_FORWARD = 'codecommit:MergePullRequestByFastForward',
  MERGE_PULL_REQUEST_BY_SQUASH = 'codecommit:MergePullRequestBySquash',
  MERGE_PULL_REQUEST_BY_THREE_WAY = 'codecommit:MergePullRequestByThreeWay',
  OVERRIDE_PULL_REQUEST_APPROVAL_RULES = 'codecommit:OverridePullRequestApprovalRules',
  POST_COMMENT_FOR_COMPARED_COMMIT = 'codecommit:PostCommentForComparedCommit',
  POST_COMMENT_FOR_PULL_REQUEST = 'codecommit:PostCommentForPullRequest',
  POST_COMMENT_REPLY = 'codecommit:PostCommentReply',
  PUT_COMMENT_REACTION = 'codecommit:PutCommentReaction',
  PUT_FILE = 'codecommit:PutFile',
  PUT_REPOSITORY_TRIGGERS = 'codecommit:PutRepositoryTriggers',
  TAG_RESOURCE = 'codecommit:TagResource',
  TEST_REPOSITORY_TRIGGERS = 'codecommit:TestRepositoryTriggers',
  UNTAG_RESOURCE = 'codecommit:UntagResource',
  UPDATE_APPROVAL_RULE_TEMPLATE_CONTENT = 'codecommit:UpdateApprovalRuleTemplateContent',
  UPDATE_APPROVAL_RULE_TEMPLATE_DESCRIPTION = 'codecommit:UpdateApprovalRuleTemplateDescription',
  UPDATE_APPROVAL_RULE_TEMPLATE_NAME = 'codecommit:UpdateApprovalRuleTemplateName',
  UPDATE_COMMENT = 'codecommit:UpdateComment',
  UPDATE_DEFAULT_BRANCH = 'codecommit:UpdateDefaultBranch',
  UPDATE_PULL_REQUEST_APPROVAL_RULE_CONTENT = 'codecommit:UpdatePullRequestApprovalRuleContent',
  UPDATE_PULL_REQUEST_APPROVAL_STATE = 'codecommit:UpdatePullRequestApprovalState',
  UPDATE_PULL_REQUEST_DESCRIPTION = 'codecommit:UpdatePullRequestDescription',
  UPDATE_PULL_REQUEST_STATUS = 'codecommit:UpdatePullRequestStatus',
  UPDATE_PULL_REQUEST_TITLE = 'codecommit:UpdatePullRequestTitle',
  UPDATE_REPOSITORY_DESCRIPTION = 'codecommit:UpdateRepositoryDescription',
  UPDATE_REPOSITORY_NAME = 'codecommit:UpdateRepositoryName',
  UPLOAD_ARCHIVE = 'codecommit:UploadArchive',
}
export enum CODEGURU_PROFILER {
  ADD_NOTIFICATION_CHANNELS = 'codeguru-profiler:AddNotificationChannels',
  BATCH_GET_FRAME_METRIC_DATA = 'codeguru-profiler:BatchGetFrameMetricData',
  CONFIGURE_AGENT = 'codeguru-profiler:ConfigureAgent',
  CREATE_PROFILING_GROUP = 'codeguru-profiler:CreateProfilingGroup',
  DELETE_PROFILING_GROUP = 'codeguru-profiler:DeleteProfilingGroup',
  DESCRIBE_PROFILING_GROUP = 'codeguru-profiler:DescribeProfilingGroup',
  GET_FINDINGS_REPORT_ACCOUNT_SUMMARY = 'codeguru-profiler:GetFindingsReportAccountSummary',
  GET_NOTIFICATION_CONFIGURATION = 'codeguru-profiler:GetNotificationConfiguration',
  GET_POLICY = 'codeguru-profiler:GetPolicy',
  GET_PROFILE = 'codeguru-profiler:GetProfile',
  GET_RECOMMENDATIONS = 'codeguru-profiler:GetRecommendations',
  LIST_FINDINGS_REPORTS = 'codeguru-profiler:ListFindingsReports',
  LIST_PROFILE_TIMES = 'codeguru-profiler:ListProfileTimes',
  LIST_PROFILING_GROUPS = 'codeguru-profiler:ListProfilingGroups',
  LIST_TAGS_FOR_RESOURCE = 'codeguru-profiler:ListTagsForResource',
  POST_AGENT_PROFILE = 'codeguru-profiler:PostAgentProfile',
  PUT_PERMISSION = 'codeguru-profiler:PutPermission',
  REMOVE_NOTIFICATION_CHANNEL = 'codeguru-profiler:RemoveNotificationChannel',
  REMOVE_PERMISSION = 'codeguru-profiler:RemovePermission',
  SUBMIT_FEEDBACK = 'codeguru-profiler:SubmitFeedback',
  TAG_RESOURCE = 'codeguru-profiler:TagResource',
  UNTAG_RESOURCE = 'codeguru-profiler:UntagResource',
  UPDATE_PROFILING_GROUP = 'codeguru-profiler:UpdateProfilingGroup',
}
export enum SNS {
  ADD_PERMISSION = 'sns:AddPermission',
  CHECK_IF_PHONE_NUMBER_IS_OPTED_OUT = 'sns:CheckIfPhoneNumberIsOptedOut',
  CONFIRM_SUBSCRIPTION = 'sns:ConfirmSubscription',
  CREATE_PLATFORM_APPLICATION = 'sns:CreatePlatformApplication',
  CREATE_PLATFORM_ENDPOINT = 'sns:CreatePlatformEndpoint',
  CREATE_TOPIC = 'sns:CreateTopic',
  DELETE_ENDPOINT = 'sns:DeleteEndpoint',
  DELETE_PLATFORM_APPLICATION = 'sns:DeletePlatformApplication',
  DELETE_TOPIC = 'sns:DeleteTopic',
  GET_ENDPOINT_ATTRIBUTES = 'sns:GetEndpointAttributes',
  GET_PLATFORM_APPLICATION_ATTRIBUTES = 'sns:GetPlatformApplicationAttributes',
  GET_SMS_ATTRIBUTES = 'sns:GetSMSAttributes',
  GET_SUBSCRIPTION_ATTRIBUTES = 'sns:GetSubscriptionAttributes',
  GET_TOPIC_ATTRIBUTES = 'sns:GetTopicAttributes',
  LIST_ENDPOINTS_BY_PLATFORM_APPLICATION = 'sns:ListEndpointsByPlatformApplication',
  LIST_PHONE_NUMBERS_OPTED_OUT = 'sns:ListPhoneNumbersOptedOut',
  LIST_PLATFORM_APPLICATIONS = 'sns:ListPlatformApplications',
  LIST_SUBSCRIPTIONS = 'sns:ListSubscriptions',
  LIST_SUBSCRIPTIONS_BY_TOPIC = 'sns:ListSubscriptionsByTopic',
  LIST_TAGS_FOR_RESOURCE = 'sns:ListTagsForResource',
  LIST_TOPICS = 'sns:ListTopics',
  OPT_IN_PHONE_NUMBER = 'sns:OptInPhoneNumber',
  PUBLISH = 'sns:Publish',
  REMOVE_PERMISSION = 'sns:RemovePermission',
  SET_ENDPOINT_ATTRIBUTES = 'sns:SetEndpointAttributes',
  SET_PLATFORM_APPLICATION_ATTRIBUTES = 'sns:SetPlatformApplicationAttributes',
  SET_SMS_ATTRIBUTES = 'sns:SetSMSAttributes',
  SET_SUBSCRIPTION_ATTRIBUTES = 'sns:SetSubscriptionAttributes',
  SET_TOPIC_ATTRIBUTES = 'sns:SetTopicAttributes',
  SUBSCRIBE = 'sns:Subscribe',
  TAG_RESOURCE = 'sns:TagResource',
  UNSUBSCRIBE = 'sns:Unsubscribe',
  UNTAG_RESOURCE = 'sns:UntagResource',
}
export enum COGNITO_USER_POOLS {
  ADD_CUSTOM_ATTRIBUTES = 'cognito-idp:AddCustomAttributes',
  ADMIN_ADD_USER_TO_GROUP = 'cognito-idp:AdminAddUserToGroup',
  ADMIN_CONFIRM_SIGN_UP = 'cognito-idp:AdminConfirmSignUp',
  ADMIN_CREATE_USER = 'cognito-idp:AdminCreateUser',
  ADMIN_DELETE_USER = 'cognito-idp:AdminDeleteUser',
  ADMIN_DELETE_USER_ATTRIBUTES = 'cognito-idp:AdminDeleteUserAttributes',
  ADMIN_DISABLE_PROVIDER_FOR_USER = 'cognito-idp:AdminDisableProviderForUser',
  ADMIN_DISABLE_USER = 'cognito-idp:AdminDisableUser',
  ADMIN_ENABLE_USER = 'cognito-idp:AdminEnableUser',
  ADMIN_FORGET_DEVICE = 'cognito-idp:AdminForgetDevice',
  ADMIN_GET_DEVICE = 'cognito-idp:AdminGetDevice',
  ADMIN_GET_USER = 'cognito-idp:AdminGetUser',
  ADMIN_INITIATE_AUTH = 'cognito-idp:AdminInitiateAuth',
  ADMIN_LINK_PROVIDER_FOR_USER = 'cognito-idp:AdminLinkProviderForUser',
  ADMIN_LIST_DEVICES = 'cognito-idp:AdminListDevices',
  ADMIN_LIST_GROUPS_FOR_USER = 'cognito-idp:AdminListGroupsForUser',
  ADMIN_LIST_USER_AUTH_EVENTS = 'cognito-idp:AdminListUserAuthEvents',
  ADMIN_REMOVE_USER_FROM_GROUP = 'cognito-idp:AdminRemoveUserFromGroup',
  ADMIN_RESET_USER_PASSWORD = 'cognito-idp:AdminResetUserPassword',
  ADMIN_RESPOND_TO_AUTH_CHALLENGE = 'cognito-idp:AdminRespondToAuthChallenge',
  ADMIN_SET_USER_MFA_PREFERENCE = 'cognito-idp:AdminSetUserMFAPreference',
  ADMIN_SET_USER_PASSWORD = 'cognito-idp:AdminSetUserPassword',
  ADMIN_SET_USER_SETTINGS = 'cognito-idp:AdminSetUserSettings',
  ADMIN_UPDATE_AUTH_EVENT_FEEDBACK = 'cognito-idp:AdminUpdateAuthEventFeedback',
  ADMIN_UPDATE_DEVICE_STATUS = 'cognito-idp:AdminUpdateDeviceStatus',
  ADMIN_UPDATE_USER_ATTRIBUTES = 'cognito-idp:AdminUpdateUserAttributes',
  ADMIN_USER_GLOBAL_SIGN_OUT = 'cognito-idp:AdminUserGlobalSignOut',
  ASSOCIATE_SOFTWARE_TOKEN = 'cognito-idp:AssociateSoftwareToken',
  CHANGE_PASSWORD = 'cognito-idp:ChangePassword',
  CONFIRM_DEVICE = 'cognito-idp:ConfirmDevice',
  CONFIRM_FORGOT_PASSWORD = 'cognito-idp:ConfirmForgotPassword',
  CONFIRM_SIGN_UP = 'cognito-idp:ConfirmSignUp',
  CREATE_GROUP = 'cognito-idp:CreateGroup',
  CREATE_IDENTITY_PROVIDER = 'cognito-idp:CreateIdentityProvider',
  CREATE_RESOURCE_SERVER = 'cognito-idp:CreateResourceServer',
  CREATE_USER_IMPORT_JOB = 'cognito-idp:CreateUserImportJob',
  CREATE_USER_POOL = 'cognito-idp:CreateUserPool',
  CREATE_USER_POOL_CLIENT = 'cognito-idp:CreateUserPoolClient',
  CREATE_USER_POOL_DOMAIN = 'cognito-idp:CreateUserPoolDomain',
  DELETE_GROUP = 'cognito-idp:DeleteGroup',
  DELETE_IDENTITY_PROVIDER = 'cognito-idp:DeleteIdentityProvider',
  DELETE_RESOURCE_SERVER = 'cognito-idp:DeleteResourceServer',
  DELETE_USER = 'cognito-idp:DeleteUser',
  DELETE_USER_ATTRIBUTES = 'cognito-idp:DeleteUserAttributes',
  DELETE_USER_POOL = 'cognito-idp:DeleteUserPool',
  DELETE_USER_POOL_CLIENT = 'cognito-idp:DeleteUserPoolClient',
  DELETE_USER_POOL_DOMAIN = 'cognito-idp:DeleteUserPoolDomain',
  DESCRIBE_IDENTITY_PROVIDER = 'cognito-idp:DescribeIdentityProvider',
  DESCRIBE_RESOURCE_SERVER = 'cognito-idp:DescribeResourceServer',
  DESCRIBE_RISK_CONFIGURATION = 'cognito-idp:DescribeRiskConfiguration',
  DESCRIBE_USER_IMPORT_JOB = 'cognito-idp:DescribeUserImportJob',
  DESCRIBE_USER_POOL = 'cognito-idp:DescribeUserPool',
  DESCRIBE_USER_POOL_CLIENT = 'cognito-idp:DescribeUserPoolClient',
  DESCRIBE_USER_POOL_DOMAIN = 'cognito-idp:DescribeUserPoolDomain',
  FORGET_DEVICE = 'cognito-idp:ForgetDevice',
  FORGOT_PASSWORD = 'cognito-idp:ForgotPassword',
  GET_CSV_HEADER = 'cognito-idp:GetCSVHeader',
  GET_DEVICE = 'cognito-idp:GetDevice',
  GET_GROUP = 'cognito-idp:GetGroup',
  GET_IDENTITY_PROVIDER_BY_IDENTIFIER = 'cognito-idp:GetIdentityProviderByIdentifier',
  GET_SIGNING_CERTIFICATE = 'cognito-idp:GetSigningCertificate',
  GET_UI_CUSTOMIZATION = 'cognito-idp:GetUICustomization',
  GET_USER = 'cognito-idp:GetUser',
  GET_USER_ATTRIBUTE_VERIFICATION_CODE = 'cognito-idp:GetUserAttributeVerificationCode',
  GET_USER_POOL_MFA_CONFIG = 'cognito-idp:GetUserPoolMfaConfig',
  GLOBAL_SIGN_OUT = 'cognito-idp:GlobalSignOut',
  INITIATE_AUTH = 'cognito-idp:InitiateAuth',
  LIST_DEVICES = 'cognito-idp:ListDevices',
  LIST_GROUPS = 'cognito-idp:ListGroups',
  LIST_IDENTITY_PROVIDERS = 'cognito-idp:ListIdentityProviders',
  LIST_RESOURCE_SERVERS = 'cognito-idp:ListResourceServers',
  LIST_TAGS_FOR_RESOURCE = 'cognito-idp:ListTagsForResource',
  LIST_USER_IMPORT_JOBS = 'cognito-idp:ListUserImportJobs',
  LIST_USER_POOL_CLIENTS = 'cognito-idp:ListUserPoolClients',
  LIST_USER_POOLS = 'cognito-idp:ListUserPools',
  LIST_USERS = 'cognito-idp:ListUsers',
  LIST_USERS_IN_GROUP = 'cognito-idp:ListUsersInGroup',
  RESEND_CONFIRMATION_CODE = 'cognito-idp:ResendConfirmationCode',
  RESPOND_TO_AUTH_CHALLENGE = 'cognito-idp:RespondToAuthChallenge',
  SET_RISK_CONFIGURATION = 'cognito-idp:SetRiskConfiguration',
  SET_UI_CUSTOMIZATION = 'cognito-idp:SetUICustomization',
  SET_USER_MFA_PREFERENCE = 'cognito-idp:SetUserMFAPreference',
  SET_USER_POOL_MFA_CONFIG = 'cognito-idp:SetUserPoolMfaConfig',
  SET_USER_SETTINGS = 'cognito-idp:SetUserSettings',
  SIGN_UP = 'cognito-idp:SignUp',
  START_USER_IMPORT_JOB = 'cognito-idp:StartUserImportJob',
  STOP_USER_IMPORT_JOB = 'cognito-idp:StopUserImportJob',
  TAG_RESOURCE = 'cognito-idp:TagResource',
  UNTAG_RESOURCE = 'cognito-idp:UntagResource',
  UPDATE_AUTH_EVENT_FEEDBACK = 'cognito-idp:UpdateAuthEventFeedback',
  UPDATE_DEVICE_STATUS = 'cognito-idp:UpdateDeviceStatus',
  UPDATE_GROUP = 'cognito-idp:UpdateGroup',
  UPDATE_IDENTITY_PROVIDER = 'cognito-idp:UpdateIdentityProvider',
  UPDATE_RESOURCE_SERVER = 'cognito-idp:UpdateResourceServer',
  UPDATE_USER_ATTRIBUTES = 'cognito-idp:UpdateUserAttributes',
  UPDATE_USER_POOL = 'cognito-idp:UpdateUserPool',
  UPDATE_USER_POOL_CLIENT = 'cognito-idp:UpdateUserPoolClient',
  UPDATE_USER_POOL_DOMAIN = 'cognito-idp:UpdateUserPoolDomain',
  VERIFY_SOFTWARE_TOKEN = 'cognito-idp:VerifySoftwareToken',
  VERIFY_USER_ATTRIBUTE = 'cognito-idp:VerifyUserAttribute',
}
export enum TAG_EDITOR {
  LIST_RESOURCE_TYPES = 'resource-explorer:ListResourceTypes',
  LIST_RESOURCES = 'resource-explorer:ListResources',
  LIST_TAGS = 'resource-explorer:ListTags',
}
export enum ELASTIC_BEANSTALK {
  ABORT_ENVIRONMENT_UPDATE = 'elasticbeanstalk:AbortEnvironmentUpdate',
  ADD_TAGS = 'elasticbeanstalk:AddTags',
  APPLY_ENVIRONMENT_MANAGED_ACTION = 'elasticbeanstalk:ApplyEnvironmentManagedAction',
  ASSOCIATE_ENVIRONMENT_OPERATIONS_ROLE = 'elasticbeanstalk:AssociateEnvironmentOperationsRole',
  CHECK_DNS_AVAILABILITY = 'elasticbeanstalk:CheckDNSAvailability',
  COMPOSE_ENVIRONMENTS = 'elasticbeanstalk:ComposeEnvironments',
  CREATE_APPLICATION = 'elasticbeanstalk:CreateApplication',
  CREATE_APPLICATION_VERSION = 'elasticbeanstalk:CreateApplicationVersion',
  CREATE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:CreateConfigurationTemplate',
  CREATE_ENVIRONMENT = 'elasticbeanstalk:CreateEnvironment',
  CREATE_PLATFORM_VERSION = 'elasticbeanstalk:CreatePlatformVersion',
  CREATE_STORAGE_LOCATION = 'elasticbeanstalk:CreateStorageLocation',
  DELETE_APPLICATION = 'elasticbeanstalk:DeleteApplication',
  DELETE_APPLICATION_VERSION = 'elasticbeanstalk:DeleteApplicationVersion',
  DELETE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:DeleteConfigurationTemplate',
  DELETE_ENVIRONMENT_CONFIGURATION = 'elasticbeanstalk:DeleteEnvironmentConfiguration',
  DELETE_PLATFORM_VERSION = 'elasticbeanstalk:DeletePlatformVersion',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'elasticbeanstalk:DescribeAccountAttributes',
  DESCRIBE_APPLICATION_VERSIONS = 'elasticbeanstalk:DescribeApplicationVersions',
  DESCRIBE_APPLICATIONS = 'elasticbeanstalk:DescribeApplications',
  DESCRIBE_CONFIGURATION_OPTIONS = 'elasticbeanstalk:DescribeConfigurationOptions',
  DESCRIBE_CONFIGURATION_SETTINGS = 'elasticbeanstalk:DescribeConfigurationSettings',
  DESCRIBE_ENVIRONMENT_HEALTH = 'elasticbeanstalk:DescribeEnvironmentHealth',
  DESCRIBE_ENVIRONMENT_MANAGED_ACTION_HISTORY = 'elasticbeanstalk:DescribeEnvironmentManagedActionHistory',
  DESCRIBE_ENVIRONMENT_MANAGED_ACTIONS = 'elasticbeanstalk:DescribeEnvironmentManagedActions',
  DESCRIBE_ENVIRONMENT_RESOURCES = 'elasticbeanstalk:DescribeEnvironmentResources',
  DESCRIBE_ENVIRONMENTS = 'elasticbeanstalk:DescribeEnvironments',
  DESCRIBE_EVENTS = 'elasticbeanstalk:DescribeEvents',
  DESCRIBE_INSTANCES_HEALTH = 'elasticbeanstalk:DescribeInstancesHealth',
  DESCRIBE_PLATFORM_VERSION = 'elasticbeanstalk:DescribePlatformVersion',
  DISASSOCIATE_ENVIRONMENT_OPERATIONS_ROLE = 'elasticbeanstalk:DisassociateEnvironmentOperationsRole',
  LIST_AVAILABLE_SOLUTION_STACKS = 'elasticbeanstalk:ListAvailableSolutionStacks',
  LIST_PLATFORM_BRANCHES = 'elasticbeanstalk:ListPlatformBranches',
  LIST_PLATFORM_VERSIONS = 'elasticbeanstalk:ListPlatformVersions',
  LIST_TAGS_FOR_RESOURCE = 'elasticbeanstalk:ListTagsForResource',
  PUT_INSTANCE_STATISTICS = 'elasticbeanstalk:PutInstanceStatistics',
  REBUILD_ENVIRONMENT = 'elasticbeanstalk:RebuildEnvironment',
  REMOVE_TAGS = 'elasticbeanstalk:RemoveTags',
  REQUEST_ENVIRONMENT_INFO = 'elasticbeanstalk:RequestEnvironmentInfo',
  RESTART_APP_SERVER = 'elasticbeanstalk:RestartAppServer',
  RETRIEVE_ENVIRONMENT_INFO = 'elasticbeanstalk:RetrieveEnvironmentInfo',
  SWAP_ENVIRONMENT_CNAM_ES = 'elasticbeanstalk:SwapEnvironmentCNAMEs',
  TERMINATE_ENVIRONMENT = 'elasticbeanstalk:TerminateEnvironment',
  UPDATE_APPLICATION = 'elasticbeanstalk:UpdateApplication',
  UPDATE_APPLICATION_RESOURCE_LIFECYCLE = 'elasticbeanstalk:UpdateApplicationResourceLifecycle',
  UPDATE_APPLICATION_VERSION = 'elasticbeanstalk:UpdateApplicationVersion',
  UPDATE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:UpdateConfigurationTemplate',
  UPDATE_ENVIRONMENT = 'elasticbeanstalk:UpdateEnvironment',
  VALIDATE_CONFIGURATION_SETTINGS = 'elasticbeanstalk:ValidateConfigurationSettings',
}
export enum CLOUDWATCH_APPLICATION_INSIGHTS {
  CREATE_APPLICATION = 'applicationinsights:CreateApplication',
  CREATE_COMPONENT = 'applicationinsights:CreateComponent',
  DELETE_APPLICATION = 'applicationinsights:DeleteApplication',
  DELETE_COMPONENT = 'applicationinsights:DeleteComponent',
  DESCRIBE_APPLICATION = 'applicationinsights:DescribeApplication',
  DESCRIBE_COMPONENT = 'applicationinsights:DescribeComponent',
  DESCRIBE_COMPONENT_CONFIGURATION = 'applicationinsights:DescribeComponentConfiguration',
  DESCRIBE_COMPONENT_CONFIGURATION_RECOMMENDATION = 'applicationinsights:DescribeComponentConfigurationRecommendation',
  DESCRIBE_OBSERVATION = 'applicationinsights:DescribeObservation',
  DESCRIBE_PROBLEM = 'applicationinsights:DescribeProblem',
  DESCRIBE_PROBLEM_OBSERVATIONS = 'applicationinsights:DescribeProblemObservations',
  LIST_APPLICATIONS = 'applicationinsights:ListApplications',
  LIST_COMPONENTS = 'applicationinsights:ListComponents',
  LIST_PROBLEMS = 'applicationinsights:ListProblems',
  UPDATE_APPLICATION = 'applicationinsights:UpdateApplication',
  UPDATE_COMPONENT = 'applicationinsights:UpdateComponent',
  UPDATE_COMPONENT_CONFIGURATION = 'applicationinsights:UpdateComponentConfiguration',
}
export enum ELASTIC_LOAD_BALANCING_V2 {
  ADD_LISTENER_CERTIFICATES = 'elasticloadbalancing:AddListenerCertificates',
  ADD_TAGS = 'elasticloadbalancing:AddTags',
  CREATE_LISTENER = 'elasticloadbalancing:CreateListener',
  CREATE_LOAD_BALANCER = 'elasticloadbalancing:CreateLoadBalancer',
  CREATE_RULE = 'elasticloadbalancing:CreateRule',
  CREATE_TARGET_GROUP = 'elasticloadbalancing:CreateTargetGroup',
  DELETE_LISTENER = 'elasticloadbalancing:DeleteListener',
  DELETE_LOAD_BALANCER = 'elasticloadbalancing:DeleteLoadBalancer',
  DELETE_RULE = 'elasticloadbalancing:DeleteRule',
  DELETE_TARGET_GROUP = 'elasticloadbalancing:DeleteTargetGroup',
  DEREGISTER_TARGETS = 'elasticloadbalancing:DeregisterTargets',
  DESCRIBE_ACCOUNT_LIMITS = 'elasticloadbalancing:DescribeAccountLimits',
  DESCRIBE_LISTENER_CERTIFICATES = 'elasticloadbalancing:DescribeListenerCertificates',
  DESCRIBE_LISTENERS = 'elasticloadbalancing:DescribeListeners',
  DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:DescribeLoadBalancerAttributes',
  DESCRIBE_LOAD_BALANCERS = 'elasticloadbalancing:DescribeLoadBalancers',
  DESCRIBE_RULES = 'elasticloadbalancing:DescribeRules',
  DESCRIBE_SSL_POLICIES = 'elasticloadbalancing:DescribeSSLPolicies',
  DESCRIBE_TAGS = 'elasticloadbalancing:DescribeTags',
  DESCRIBE_TARGET_GROUP_ATTRIBUTES = 'elasticloadbalancing:DescribeTargetGroupAttributes',
  DESCRIBE_TARGET_GROUPS = 'elasticloadbalancing:DescribeTargetGroups',
  DESCRIBE_TARGET_HEALTH = 'elasticloadbalancing:DescribeTargetHealth',
  MODIFY_LISTENER = 'elasticloadbalancing:ModifyListener',
  MODIFY_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:ModifyLoadBalancerAttributes',
  MODIFY_RULE = 'elasticloadbalancing:ModifyRule',
  MODIFY_TARGET_GROUP = 'elasticloadbalancing:ModifyTargetGroup',
  MODIFY_TARGET_GROUP_ATTRIBUTES = 'elasticloadbalancing:ModifyTargetGroupAttributes',
  REGISTER_TARGETS = 'elasticloadbalancing:RegisterTargets',
  REMOVE_LISTENER_CERTIFICATES = 'elasticloadbalancing:RemoveListenerCertificates',
  REMOVE_TAGS = 'elasticloadbalancing:RemoveTags',
  SET_IP_ADDRESS_TYPE = 'elasticloadbalancing:SetIpAddressType',
  SET_RULE_PRIORITIES = 'elasticloadbalancing:SetRulePriorities',
  SET_SECURITY_GROUPS = 'elasticloadbalancing:SetSecurityGroups',
  SET_SUBNETS = 'elasticloadbalancing:SetSubnets',
  SET_WEB_ACL = 'elasticloadbalancing:SetWebAcl',
}
export enum ELASTIC_LOAD_BALANCING {
  ADD_TAGS = 'elasticloadbalancing:AddTags',
  APPLY_SECURITY_GROUPS_TO_LOAD_BALANCER = 'elasticloadbalancing:ApplySecurityGroupsToLoadBalancer',
  ATTACH_LOAD_BALANCER_TO_SUBNETS = 'elasticloadbalancing:AttachLoadBalancerToSubnets',
  CONFIGURE_HEALTH_CHECK = 'elasticloadbalancing:ConfigureHealthCheck',
  CREATE_APP_COOKIE_STICKINESS_POLICY = 'elasticloadbalancing:CreateAppCookieStickinessPolicy',
  CREATE_LB_COOKIE_STICKINESS_POLICY = 'elasticloadbalancing:CreateLBCookieStickinessPolicy',
  CREATE_LOAD_BALANCER = 'elasticloadbalancing:CreateLoadBalancer',
  CREATE_LOAD_BALANCER_LISTENERS = 'elasticloadbalancing:CreateLoadBalancerListeners',
  CREATE_LOAD_BALANCER_POLICY = 'elasticloadbalancing:CreateLoadBalancerPolicy',
  DELETE_LOAD_BALANCER = 'elasticloadbalancing:DeleteLoadBalancer',
  DELETE_LOAD_BALANCER_LISTENERS = 'elasticloadbalancing:DeleteLoadBalancerListeners',
  DELETE_LOAD_BALANCER_POLICY = 'elasticloadbalancing:DeleteLoadBalancerPolicy',
  DEREGISTER_INSTANCES_FROM_LOAD_BALANCER = 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer',
  DESCRIBE_INSTANCE_HEALTH = 'elasticloadbalancing:DescribeInstanceHealth',
  DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:DescribeLoadBalancerAttributes',
  DESCRIBE_LOAD_BALANCER_POLICIES = 'elasticloadbalancing:DescribeLoadBalancerPolicies',
  DESCRIBE_LOAD_BALANCER_POLICY_TYPES = 'elasticloadbalancing:DescribeLoadBalancerPolicyTypes',
  DESCRIBE_LOAD_BALANCERS = 'elasticloadbalancing:DescribeLoadBalancers',
  DESCRIBE_TAGS = 'elasticloadbalancing:DescribeTags',
  DETACH_LOAD_BALANCER_FROM_SUBNETS = 'elasticloadbalancing:DetachLoadBalancerFromSubnets',
  DISABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer',
  ENABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer',
  MODIFY_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:ModifyLoadBalancerAttributes',
  REGISTER_INSTANCES_WITH_LOAD_BALANCER = 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
  REMOVE_TAGS = 'elasticloadbalancing:RemoveTags',
  SET_LOAD_BALANCER_LISTENER_SSL_CERTIFICATE = 'elasticloadbalancing:SetLoadBalancerListenerSSLCertificate',
  SET_LOAD_BALANCER_POLICIES_FOR_BACKEND_SERVER = 'elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer',
  SET_LOAD_BALANCER_POLICIES_OF_LISTENER = 'elasticloadbalancing:SetLoadBalancerPoliciesOfListener',
}
export enum TRANSLATE {
  DELETE_TERMINOLOGY = 'translate:DeleteTerminology',
  DESCRIBE_TEXT_TRANSLATION_JOB = 'translate:DescribeTextTranslationJob',
  GET_TERMINOLOGY = 'translate:GetTerminology',
  IMPORT_TERMINOLOGY = 'translate:ImportTerminology',
  LIST_TERMINOLOGIES = 'translate:ListTerminologies',
  LIST_TEXT_TRANSLATION_JOBS = 'translate:ListTextTranslationJobs',
  START_TEXT_TRANSLATION_JOB = 'translate:StartTextTranslationJob',
  STOP_TEXT_TRANSLATION_JOB = 'translate:StopTextTranslationJob',
  TRANSLATE_TEXT = 'translate:TranslateText',
}
export enum WAF_REGIONAL {
  ASSOCIATE_WEB_ACL = 'waf-regional:AssociateWebACL',
  CREATE_BYTE_MATCH_SET = 'waf-regional:CreateByteMatchSet',
  CREATE_GEO_MATCH_SET = 'waf-regional:CreateGeoMatchSet',
  CREATE_IP_SET = 'waf-regional:CreateIPSet',
  CREATE_RATE_BASED_RULE = 'waf-regional:CreateRateBasedRule',
  CREATE_REGEX_MATCH_SET = 'waf-regional:CreateRegexMatchSet',
  CREATE_REGEX_PATTERN_SET = 'waf-regional:CreateRegexPatternSet',
  CREATE_RULE = 'waf-regional:CreateRule',
  CREATE_RULE_GROUP = 'waf-regional:CreateRuleGroup',
  CREATE_SIZE_CONSTRAINT_SET = 'waf-regional:CreateSizeConstraintSet',
  CREATE_SQL_INJECTION_MATCH_SET = 'waf-regional:CreateSqlInjectionMatchSet',
  CREATE_WEB_ACL = 'waf-regional:CreateWebACL',
  CREATE_WEB_ACL_MIGRATION_STACK = 'waf-regional:CreateWebACLMigrationStack',
  CREATE_XSS_MATCH_SET = 'waf-regional:CreateXssMatchSet',
  DELETE_BYTE_MATCH_SET = 'waf-regional:DeleteByteMatchSet',
  DELETE_GEO_MATCH_SET = 'waf-regional:DeleteGeoMatchSet',
  DELETE_IP_SET = 'waf-regional:DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'waf-regional:DeleteLoggingConfiguration',
  DELETE_PERMISSION_POLICY = 'waf-regional:DeletePermissionPolicy',
  DELETE_RATE_BASED_RULE = 'waf-regional:DeleteRateBasedRule',
  DELETE_REGEX_MATCH_SET = 'waf-regional:DeleteRegexMatchSet',
  DELETE_REGEX_PATTERN_SET = 'waf-regional:DeleteRegexPatternSet',
  DELETE_RULE = 'waf-regional:DeleteRule',
  DELETE_RULE_GROUP = 'waf-regional:DeleteRuleGroup',
  DELETE_SIZE_CONSTRAINT_SET = 'waf-regional:DeleteSizeConstraintSet',
  DELETE_SQL_INJECTION_MATCH_SET = 'waf-regional:DeleteSqlInjectionMatchSet',
  DELETE_WEB_ACL = 'waf-regional:DeleteWebACL',
  DELETE_XSS_MATCH_SET = 'waf-regional:DeleteXssMatchSet',
  DISASSOCIATE_WEB_ACL = 'waf-regional:DisassociateWebACL',
  GET_BYTE_MATCH_SET = 'waf-regional:GetByteMatchSet',
  GET_CHANGE_TOKEN = 'waf-regional:GetChangeToken',
  GET_CHANGE_TOKEN_STATUS = 'waf-regional:GetChangeTokenStatus',
  GET_GEO_MATCH_SET = 'waf-regional:GetGeoMatchSet',
  GET_IP_SET = 'waf-regional:GetIPSet',
  GET_LOGGING_CONFIGURATION = 'waf-regional:GetLoggingConfiguration',
  GET_PERMISSION_POLICY = 'waf-regional:GetPermissionPolicy',
  GET_RATE_BASED_RULE = 'waf-regional:GetRateBasedRule',
  GET_RATE_BASED_RULE_MANAGED_KEYS = 'waf-regional:GetRateBasedRuleManagedKeys',
  GET_REGEX_MATCH_SET = 'waf-regional:GetRegexMatchSet',
  GET_REGEX_PATTERN_SET = 'waf-regional:GetRegexPatternSet',
  GET_RULE = 'waf-regional:GetRule',
  GET_RULE_GROUP = 'waf-regional:GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'waf-regional:GetSampledRequests',
  GET_SIZE_CONSTRAINT_SET = 'waf-regional:GetSizeConstraintSet',
  GET_SQL_INJECTION_MATCH_SET = 'waf-regional:GetSqlInjectionMatchSet',
  GET_WEB_ACL = 'waf-regional:GetWebACL',
  GET_WEB_ACL_FOR_RESOURCE = 'waf-regional:GetWebACLForResource',
  GET_XSS_MATCH_SET = 'waf-regional:GetXssMatchSet',
  LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'waf-regional:ListActivatedRulesInRuleGroup',
  LIST_BYTE_MATCH_SETS = 'waf-regional:ListByteMatchSets',
  LIST_GEO_MATCH_SETS = 'waf-regional:ListGeoMatchSets',
  LIST_IP_SETS = 'waf-regional:ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'waf-regional:ListLoggingConfigurations',
  LIST_RATE_BASED_RULES = 'waf-regional:ListRateBasedRules',
  LIST_REGEX_MATCH_SETS = 'waf-regional:ListRegexMatchSets',
  LIST_REGEX_PATTERN_SETS = 'waf-regional:ListRegexPatternSets',
  LIST_RESOURCES_FOR_WEB_ACL = 'waf-regional:ListResourcesForWebACL',
  LIST_RULE_GROUPS = 'waf-regional:ListRuleGroups',
  LIST_RULES = 'waf-regional:ListRules',
  LIST_SIZE_CONSTRAINT_SETS = 'waf-regional:ListSizeConstraintSets',
  LIST_SQL_INJECTION_MATCH_SETS = 'waf-regional:ListSqlInjectionMatchSets',
  LIST_SUBSCRIBED_RULE_GROUPS = 'waf-regional:ListSubscribedRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'waf-regional:ListTagsForResource',
  LIST_WEB_AC_LS = 'waf-regional:ListWebACLs',
  LIST_XSS_MATCH_SETS = 'waf-regional:ListXssMatchSets',
  PUT_LOGGING_CONFIGURATION = 'waf-regional:PutLoggingConfiguration',
  PUT_PERMISSION_POLICY = 'waf-regional:PutPermissionPolicy',
  TAG_RESOURCE = 'waf-regional:TagResource',
  UNTAG_RESOURCE = 'waf-regional:UntagResource',
  UPDATE_BYTE_MATCH_SET = 'waf-regional:UpdateByteMatchSet',
  UPDATE_GEO_MATCH_SET = 'waf-regional:UpdateGeoMatchSet',
  UPDATE_IP_SET = 'waf-regional:UpdateIPSet',
  UPDATE_RATE_BASED_RULE = 'waf-regional:UpdateRateBasedRule',
  UPDATE_REGEX_MATCH_SET = 'waf-regional:UpdateRegexMatchSet',
  UPDATE_REGEX_PATTERN_SET = 'waf-regional:UpdateRegexPatternSet',
  UPDATE_RULE = 'waf-regional:UpdateRule',
  UPDATE_RULE_GROUP = 'waf-regional:UpdateRuleGroup',
  UPDATE_SIZE_CONSTRAINT_SET = 'waf-regional:UpdateSizeConstraintSet',
  UPDATE_SQL_INJECTION_MATCH_SET = 'waf-regional:UpdateSqlInjectionMatchSet',
  UPDATE_WEB_ACL = 'waf-regional:UpdateWebACL',
  UPDATE_XSS_MATCH_SET = 'waf-regional:UpdateXssMatchSet',
}
export enum ELASTIC_CONTAINER_SERVICE {
  CREATE_CAPACITY_PROVIDER = 'ecs:CreateCapacityProvider',
  CREATE_CLUSTER = 'ecs:CreateCluster',
  CREATE_SERVICE = 'ecs:CreateService',
  CREATE_TASK_SET = 'ecs:CreateTaskSet',
  DELETE_ACCOUNT_SETTING = 'ecs:DeleteAccountSetting',
  DELETE_ATTRIBUTES = 'ecs:DeleteAttributes',
  DELETE_CAPACITY_PROVIDER = 'ecs:DeleteCapacityProvider',
  DELETE_CLUSTER = 'ecs:DeleteCluster',
  DELETE_SERVICE = 'ecs:DeleteService',
  DELETE_TASK_SET = 'ecs:DeleteTaskSet',
  DEREGISTER_CONTAINER_INSTANCE = 'ecs:DeregisterContainerInstance',
  DEREGISTER_TASK_DEFINITION = 'ecs:DeregisterTaskDefinition',
  DESCRIBE_CAPACITY_PROVIDERS = 'ecs:DescribeCapacityProviders',
  DESCRIBE_CLUSTERS = 'ecs:DescribeClusters',
  DESCRIBE_CONTAINER_INSTANCES = 'ecs:DescribeContainerInstances',
  DESCRIBE_SERVICES = 'ecs:DescribeServices',
  DESCRIBE_TASK_DEFINITION = 'ecs:DescribeTaskDefinition',
  DESCRIBE_TASK_SETS = 'ecs:DescribeTaskSets',
  DESCRIBE_TASKS = 'ecs:DescribeTasks',
  DISCOVER_POLL_ENDPOINT = 'ecs:DiscoverPollEndpoint',
  LIST_ACCOUNT_SETTINGS = 'ecs:ListAccountSettings',
  LIST_ATTRIBUTES = 'ecs:ListAttributes',
  LIST_CLUSTERS = 'ecs:ListClusters',
  LIST_CONTAINER_INSTANCES = 'ecs:ListContainerInstances',
  LIST_SERVICES = 'ecs:ListServices',
  LIST_TAGS_FOR_RESOURCE = 'ecs:ListTagsForResource',
  LIST_TASK_DEFINITION_FAMILIES = 'ecs:ListTaskDefinitionFamilies',
  LIST_TASK_DEFINITIONS = 'ecs:ListTaskDefinitions',
  LIST_TASKS = 'ecs:ListTasks',
  POLL = 'ecs:Poll',
  PUT_ACCOUNT_SETTING = 'ecs:PutAccountSetting',
  PUT_ACCOUNT_SETTING_DEFAULT = 'ecs:PutAccountSettingDefault',
  PUT_ATTRIBUTES = 'ecs:PutAttributes',
  PUT_CLUSTER_CAPACITY_PROVIDERS = 'ecs:PutClusterCapacityProviders',
  REGISTER_CONTAINER_INSTANCE = 'ecs:RegisterContainerInstance',
  REGISTER_TASK_DEFINITION = 'ecs:RegisterTaskDefinition',
  RUN_TASK = 'ecs:RunTask',
  START_TASK = 'ecs:StartTask',
  START_TELEMETRY_SESSION = 'ecs:StartTelemetrySession',
  STOP_TASK = 'ecs:StopTask',
  SUBMIT_ATTACHMENT_STATE_CHANGES = 'ecs:SubmitAttachmentStateChanges',
  SUBMIT_CONTAINER_STATE_CHANGE = 'ecs:SubmitContainerStateChange',
  SUBMIT_TASK_STATE_CHANGE = 'ecs:SubmitTaskStateChange',
  TAG_RESOURCE = 'ecs:TagResource',
  UNTAG_RESOURCE = 'ecs:UntagResource',
  UPDATE_CLUSTER_SETTINGS = 'ecs:UpdateClusterSettings',
  UPDATE_CONTAINER_AGENT = 'ecs:UpdateContainerAgent',
  UPDATE_CONTAINER_INSTANCES_STATE = 'ecs:UpdateContainerInstancesState',
  UPDATE_SERVICE = 'ecs:UpdateService',
  UPDATE_SERVICE_PRIMARY_TASK_SET = 'ecs:UpdateServicePrimaryTaskSet',
  UPDATE_TASK_SET = 'ecs:UpdateTaskSet',
}
export enum ELASTIC_CONTAINER_REGISTRY {
  BATCH_CHECK_LAYER_AVAILABILITY = 'ecr:BatchCheckLayerAvailability',
  BATCH_DELETE_IMAGE = 'ecr:BatchDeleteImage',
  BATCH_GET_IMAGE = 'ecr:BatchGetImage',
  COMPLETE_LAYER_UPLOAD = 'ecr:CompleteLayerUpload',
  CREATE_REPOSITORY = 'ecr:CreateRepository',
  DELETE_LIFECYCLE_POLICY = 'ecr:DeleteLifecyclePolicy',
  DELETE_REPOSITORY = 'ecr:DeleteRepository',
  DELETE_REPOSITORY_POLICY = 'ecr:DeleteRepositoryPolicy',
  DESCRIBE_IMAGE_SCAN_FINDINGS = 'ecr:DescribeImageScanFindings',
  DESCRIBE_IMAGES = 'ecr:DescribeImages',
  DESCRIBE_REPOSITORIES = 'ecr:DescribeRepositories',
  GET_AUTHORIZATION_TOKEN = 'ecr:GetAuthorizationToken',
  GET_DOWNLOAD_URL_FOR_LAYER = 'ecr:GetDownloadUrlForLayer',
  GET_LIFECYCLE_POLICY = 'ecr:GetLifecyclePolicy',
  GET_LIFECYCLE_POLICY_PREVIEW = 'ecr:GetLifecyclePolicyPreview',
  GET_REPOSITORY_POLICY = 'ecr:GetRepositoryPolicy',
  INITIATE_LAYER_UPLOAD = 'ecr:InitiateLayerUpload',
  LIST_IMAGES = 'ecr:ListImages',
  LIST_TAGS_FOR_RESOURCE = 'ecr:ListTagsForResource',
  PUT_IMAGE = 'ecr:PutImage',
  PUT_IMAGE_SCANNING_CONFIGURATION = 'ecr:PutImageScanningConfiguration',
  PUT_IMAGE_TAG_MUTABILITY = 'ecr:PutImageTagMutability',
  PUT_LIFECYCLE_POLICY = 'ecr:PutLifecyclePolicy',
  SET_REPOSITORY_POLICY = 'ecr:SetRepositoryPolicy',
  START_IMAGE_SCAN = 'ecr:StartImageScan',
  START_LIFECYCLE_POLICY_PREVIEW = 'ecr:StartLifecyclePolicyPreview',
  TAG_RESOURCE = 'ecr:TagResource',
  UNTAG_RESOURCE = 'ecr:UntagResource',
  UPLOAD_LAYER_PART = 'ecr:UploadLayerPart',
}
export enum DYNAMODB_ACCELERATOR_DAX {
  BATCH_GET_ITEM = 'dax:BatchGetItem',
  BATCH_WRITE_ITEM = 'dax:BatchWriteItem',
  CONDITION_CHECK_ITEM = 'dax:ConditionCheckItem',
  CREATE_CLUSTER = 'dax:CreateCluster',
  CREATE_PARAMETER_GROUP = 'dax:CreateParameterGroup',
  CREATE_SUBNET_GROUP = 'dax:CreateSubnetGroup',
  DECREASE_REPLICATION_FACTOR = 'dax:DecreaseReplicationFactor',
  DELETE_CLUSTER = 'dax:DeleteCluster',
  DELETE_ITEM = 'dax:DeleteItem',
  DELETE_PARAMETER_GROUP = 'dax:DeleteParameterGroup',
  DELETE_SUBNET_GROUP = 'dax:DeleteSubnetGroup',
  DESCRIBE_CLUSTERS = 'dax:DescribeClusters',
  DESCRIBE_DEFAULT_PARAMETERS = 'dax:DescribeDefaultParameters',
  DESCRIBE_EVENTS = 'dax:DescribeEvents',
  DESCRIBE_PARAMETER_GROUPS = 'dax:DescribeParameterGroups',
  DESCRIBE_PARAMETERS = 'dax:DescribeParameters',
  DESCRIBE_SUBNET_GROUPS = 'dax:DescribeSubnetGroups',
  GET_ITEM = 'dax:GetItem',
  INCREASE_REPLICATION_FACTOR = 'dax:IncreaseReplicationFactor',
  LIST_TAGS = 'dax:ListTags',
  PUT_ITEM = 'dax:PutItem',
  QUERY = 'dax:Query',
  REBOOT_NODE = 'dax:RebootNode',
  SCAN = 'dax:Scan',
  TAG_RESOURCE = 'dax:TagResource',
  UNTAG_RESOURCE = 'dax:UntagResource',
  UPDATE_CLUSTER = 'dax:UpdateCluster',
  UPDATE_ITEM = 'dax:UpdateItem',
  UPDATE_PARAMETER_GROUP = 'dax:UpdateParameterGroup',
  UPDATE_SUBNET_GROUP = 'dax:UpdateSubnetGroup',
}
export enum RESOURCE_GROUP_TAGGING_API {
  DESCRIBE_REPORT_CREATION = 'tag:DescribeReportCreation',
  GET_COMPLIANCE_SUMMARY = 'tag:GetComplianceSummary',
  GET_RESOURCES = 'tag:GetResources',
  GET_TAG_KEYS = 'tag:GetTagKeys',
  GET_TAG_VALUES = 'tag:GetTagValues',
  START_REPORT_CREATION = 'tag:StartReportCreation',
  TAG_RESOURCES = 'tag:TagResources',
  UNTAG_RESOURCES = 'tag:UntagResources',
}
export enum CLOUDWATCH_LOGS {
  ASSOCIATE_KMS_KEY = 'logs:AssociateKmsKey',
  CANCEL_EXPORT_TASK = 'logs:CancelExportTask',
  CREATE_EXPORT_TASK = 'logs:CreateExportTask',
  CREATE_LOG_DELIVERY = 'logs:CreateLogDelivery',
  CREATE_LOG_GROUP = 'logs:CreateLogGroup',
  CREATE_LOG_STREAM = 'logs:CreateLogStream',
  DELETE_DESTINATION = 'logs:DeleteDestination',
  DELETE_LOG_DELIVERY = 'logs:DeleteLogDelivery',
  DELETE_LOG_GROUP = 'logs:DeleteLogGroup',
  DELETE_LOG_STREAM = 'logs:DeleteLogStream',
  DELETE_METRIC_FILTER = 'logs:DeleteMetricFilter',
  DELETE_RESOURCE_POLICY = 'logs:DeleteResourcePolicy',
  DELETE_RETENTION_POLICY = 'logs:DeleteRetentionPolicy',
  DELETE_SUBSCRIPTION_FILTER = 'logs:DeleteSubscriptionFilter',
  DESCRIBE_DESTINATIONS = 'logs:DescribeDestinations',
  DESCRIBE_EXPORT_TASKS = 'logs:DescribeExportTasks',
  DESCRIBE_LOG_GROUPS = 'logs:DescribeLogGroups',
  DESCRIBE_LOG_STREAMS = 'logs:DescribeLogStreams',
  DESCRIBE_METRIC_FILTERS = 'logs:DescribeMetricFilters',
  DESCRIBE_QUERIES = 'logs:DescribeQueries',
  DESCRIBE_RESOURCE_POLICIES = 'logs:DescribeResourcePolicies',
  DESCRIBE_SUBSCRIPTION_FILTERS = 'logs:DescribeSubscriptionFilters',
  DISASSOCIATE_KMS_KEY = 'logs:DisassociateKmsKey',
  FILTER_LOG_EVENTS = 'logs:FilterLogEvents',
  GET_LOG_DELIVERY = 'logs:GetLogDelivery',
  GET_LOG_EVENTS = 'logs:GetLogEvents',
  GET_LOG_GROUP_FIELDS = 'logs:GetLogGroupFields',
  GET_LOG_RECORD = 'logs:GetLogRecord',
  GET_QUERY_RESULTS = 'logs:GetQueryResults',
  LIST_LOG_DELIVERIES = 'logs:ListLogDeliveries',
  LIST_TAGS_LOG_GROUP = 'logs:ListTagsLogGroup',
  PUT_DESTINATION = 'logs:PutDestination',
  PUT_DESTINATION_POLICY = 'logs:PutDestinationPolicy',
  PUT_LOG_EVENTS = 'logs:PutLogEvents',
  PUT_METRIC_FILTER = 'logs:PutMetricFilter',
  PUT_RESOURCE_POLICY = 'logs:PutResourcePolicy',
  PUT_RETENTION_POLICY = 'logs:PutRetentionPolicy',
  PUT_SUBSCRIPTION_FILTER = 'logs:PutSubscriptionFilter',
  START_QUERY = 'logs:StartQuery',
  STOP_QUERY = 'logs:StopQuery',
  TAG_LOG_GROUP = 'logs:TagLogGroup',
  TEST_METRIC_FILTER = 'logs:TestMetricFilter',
  UNTAG_LOG_GROUP = 'logs:UntagLogGroup',
  UPDATE_LOG_DELIVERY = 'logs:UpdateLogDelivery',
}
export enum SERVICE_CATALOG {
  ACCEPT_PORTFOLIO_SHARE = 'servicecatalog:AcceptPortfolioShare',
  ASSOCIATE_BUDGET_WITH_RESOURCE = 'servicecatalog:AssociateBudgetWithResource',
  ASSOCIATE_PRINCIPAL_WITH_PORTFOLIO = 'servicecatalog:AssociatePrincipalWithPortfolio',
  ASSOCIATE_PRODUCT_WITH_PORTFOLIO = 'servicecatalog:AssociateProductWithPortfolio',
  ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'servicecatalog:AssociateServiceActionWithProvisioningArtifact',
  ASSOCIATE_TAG_OPTION_WITH_RESOURCE = 'servicecatalog:AssociateTagOptionWithResource',
  BATCH_ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact',
  BATCH_DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact',
  COPY_PRODUCT = 'servicecatalog:CopyProduct',
  CREATE_CONSTRAINT = 'servicecatalog:CreateConstraint',
  CREATE_PORTFOLIO = 'servicecatalog:CreatePortfolio',
  CREATE_PORTFOLIO_SHARE = 'servicecatalog:CreatePortfolioShare',
  CREATE_PRODUCT = 'servicecatalog:CreateProduct',
  CREATE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:CreateProvisionedProductPlan',
  CREATE_PROVISIONING_ARTIFACT = 'servicecatalog:CreateProvisioningArtifact',
  CREATE_SERVICE_ACTION = 'servicecatalog:CreateServiceAction',
  CREATE_TAG_OPTION = 'servicecatalog:CreateTagOption',
  DELETE_CONSTRAINT = 'servicecatalog:DeleteConstraint',
  DELETE_PORTFOLIO = 'servicecatalog:DeletePortfolio',
  DELETE_PORTFOLIO_SHARE = 'servicecatalog:DeletePortfolioShare',
  DELETE_PRODUCT = 'servicecatalog:DeleteProduct',
  DELETE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:DeleteProvisionedProductPlan',
  DELETE_PROVISIONING_ARTIFACT = 'servicecatalog:DeleteProvisioningArtifact',
  DELETE_SERVICE_ACTION = 'servicecatalog:DeleteServiceAction',
  DELETE_TAG_OPTION = 'servicecatalog:DeleteTagOption',
  DESCRIBE_CONSTRAINT = 'servicecatalog:DescribeConstraint',
  DESCRIBE_COPY_PRODUCT_STATUS = 'servicecatalog:DescribeCopyProductStatus',
  DESCRIBE_PORTFOLIO = 'servicecatalog:DescribePortfolio',
  DESCRIBE_PORTFOLIO_SHARE_STATUS = 'servicecatalog:DescribePortfolioShareStatus',
  DESCRIBE_PRODUCT = 'servicecatalog:DescribeProduct',
  DESCRIBE_PRODUCT_AS_ADMIN = 'servicecatalog:DescribeProductAsAdmin',
  DESCRIBE_PRODUCT_VIEW = 'servicecatalog:DescribeProductView',
  DESCRIBE_PROVISIONED_PRODUCT = 'servicecatalog:DescribeProvisionedProduct',
  DESCRIBE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:DescribeProvisionedProductPlan',
  DESCRIBE_PROVISIONING_ARTIFACT = 'servicecatalog:DescribeProvisioningArtifact',
  DESCRIBE_PROVISIONING_PARAMETERS = 'servicecatalog:DescribeProvisioningParameters',
  DESCRIBE_RECORD = 'servicecatalog:DescribeRecord',
  DESCRIBE_SERVICE_ACTION = 'servicecatalog:DescribeServiceAction',
  DESCRIBE_SERVICE_ACTION_EXECUTION_PARAMETERS = 'servicecatalog:DescribeServiceActionExecutionParameters',
  DESCRIBE_TAG_OPTION = 'servicecatalog:DescribeTagOption',
  DISABLE_AWS_ORGANIZATIONS_ACCESS = 'servicecatalog:DisableAWSOrganizationsAccess',
  DISASSOCIATE_BUDGET_FROM_RESOURCE = 'servicecatalog:DisassociateBudgetFromResource',
  DISASSOCIATE_PRINCIPAL_FROM_PORTFOLIO = 'servicecatalog:DisassociatePrincipalFromPortfolio',
  DISASSOCIATE_PRODUCT_FROM_PORTFOLIO = 'servicecatalog:DisassociateProductFromPortfolio',
  DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'servicecatalog:DisassociateServiceActionFromProvisioningArtifact',
  DISASSOCIATE_TAG_OPTION_FROM_RESOURCE = 'servicecatalog:DisassociateTagOptionFromResource',
  ENABLE_AWS_ORGANIZATIONS_ACCESS = 'servicecatalog:EnableAWSOrganizationsAccess',
  EXECUTE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:ExecuteProvisionedProductPlan',
  EXECUTE_PROVISIONED_PRODUCT_SERVICE_ACTION = 'servicecatalog:ExecuteProvisionedProductServiceAction',
  GET_AWS_ORGANIZATIONS_ACCESS_STATUS = 'servicecatalog:GetAWSOrganizationsAccessStatus',
  LIST_ACCEPTED_PORTFOLIO_SHARES = 'servicecatalog:ListAcceptedPortfolioShares',
  LIST_BUDGETS_FOR_RESOURCE = 'servicecatalog:ListBudgetsForResource',
  LIST_CONSTRAINTS_FOR_PORTFOLIO = 'servicecatalog:ListConstraintsForPortfolio',
  LIST_LAUNCH_PATHS = 'servicecatalog:ListLaunchPaths',
  LIST_ORGANIZATION_PORTFOLIO_ACCESS = 'servicecatalog:ListOrganizationPortfolioAccess',
  LIST_PORTFOLIO_ACCESS = 'servicecatalog:ListPortfolioAccess',
  LIST_PORTFOLIOS = 'servicecatalog:ListPortfolios',
  LIST_PORTFOLIOS_FOR_PRODUCT = 'servicecatalog:ListPortfoliosForProduct',
  LIST_PRINCIPALS_FOR_PORTFOLIO = 'servicecatalog:ListPrincipalsForPortfolio',
  LIST_PROVISIONED_PRODUCT_PLANS = 'servicecatalog:ListProvisionedProductPlans',
  LIST_PROVISIONING_ARTIFACTS = 'servicecatalog:ListProvisioningArtifacts',
  LIST_PROVISIONING_ARTIFACTS_FOR_SERVICE_ACTION = 'servicecatalog:ListProvisioningArtifactsForServiceAction',
  LIST_RECORD_HISTORY = 'servicecatalog:ListRecordHistory',
  LIST_RESOURCES_FOR_TAG_OPTION = 'servicecatalog:ListResourcesForTagOption',
  LIST_SERVICE_ACTIONS = 'servicecatalog:ListServiceActions',
  LIST_SERVICE_ACTIONS_FOR_PROVISIONING_ARTIFACT = 'servicecatalog:ListServiceActionsForProvisioningArtifact',
  LIST_STACK_INSTANCES_FOR_PROVISIONED_PRODUCT = 'servicecatalog:ListStackInstancesForProvisionedProduct',
  LIST_TAG_OPTIONS = 'servicecatalog:ListTagOptions',
  PROVISION_PRODUCT = 'servicecatalog:ProvisionProduct',
  REJECT_PORTFOLIO_SHARE = 'servicecatalog:RejectPortfolioShare',
  SCAN_PROVISIONED_PRODUCTS = 'servicecatalog:ScanProvisionedProducts',
  SEARCH_PRODUCTS = 'servicecatalog:SearchProducts',
  SEARCH_PRODUCTS_AS_ADMIN = 'servicecatalog:SearchProductsAsAdmin',
  SEARCH_PROVISIONED_PRODUCTS = 'servicecatalog:SearchProvisionedProducts',
  TERMINATE_PROVISIONED_PRODUCT = 'servicecatalog:TerminateProvisionedProduct',
  UPDATE_CONSTRAINT = 'servicecatalog:UpdateConstraint',
  UPDATE_PORTFOLIO = 'servicecatalog:UpdatePortfolio',
  UPDATE_PRODUCT = 'servicecatalog:UpdateProduct',
  UPDATE_PROVISIONED_PRODUCT = 'servicecatalog:UpdateProvisionedProduct',
  UPDATE_PROVISIONED_PRODUCT_PROPERTIES = 'servicecatalog:UpdateProvisionedProductProperties',
  UPDATE_PROVISIONING_ARTIFACT = 'servicecatalog:UpdateProvisioningArtifact',
  UPDATE_SERVICE_ACTION = 'servicecatalog:UpdateServiceAction',
  UPDATE_TAG_OPTION = 'servicecatalog:UpdateTagOption',
}
export enum MQ {
  CREATE_BROKER = 'mq:CreateBroker',
  CREATE_CONFIGURATION = 'mq:CreateConfiguration',
  CREATE_TAGS = 'mq:CreateTags',
  CREATE_USER = 'mq:CreateUser',
  DELETE_BROKER = 'mq:DeleteBroker',
  DELETE_TAGS = 'mq:DeleteTags',
  DELETE_USER = 'mq:DeleteUser',
  DESCRIBE_BROKER = 'mq:DescribeBroker',
  DESCRIBE_BROKER_ENGINE_TYPES = 'mq:DescribeBrokerEngineTypes',
  DESCRIBE_BROKER_INSTANCE_OPTIONS = 'mq:DescribeBrokerInstanceOptions',
  DESCRIBE_CONFIGURATION = 'mq:DescribeConfiguration',
  DESCRIBE_CONFIGURATION_REVISION = 'mq:DescribeConfigurationRevision',
  DESCRIBE_USER = 'mq:DescribeUser',
  LIST_BROKERS = 'mq:ListBrokers',
  LIST_CONFIGURATION_REVISIONS = 'mq:ListConfigurationRevisions',
  LIST_CONFIGURATIONS = 'mq:ListConfigurations',
  LIST_TAGS = 'mq:ListTags',
  LIST_USERS = 'mq:ListUsers',
  REBOOT_BROKER = 'mq:RebootBroker',
  UPDATE_BROKER = 'mq:UpdateBroker',
  UPDATE_CONFIGURATION = 'mq:UpdateConfiguration',
  UPDATE_USER = 'mq:UpdateUser',
}
export enum PERSONALIZE {
  CREATE_BATCH_INFERENCE_JOB = 'personalize:CreateBatchInferenceJob',
  CREATE_CAMPAIGN = 'personalize:CreateCampaign',
  CREATE_DATASET = 'personalize:CreateDataset',
  CREATE_DATASET_GROUP = 'personalize:CreateDatasetGroup',
  CREATE_DATASET_IMPORT_JOB = 'personalize:CreateDatasetImportJob',
  CREATE_EVENT_TRACKER = 'personalize:CreateEventTracker',
  CREATE_FILTER = 'personalize:CreateFilter',
  CREATE_SCHEMA = 'personalize:CreateSchema',
  CREATE_SOLUTION = 'personalize:CreateSolution',
  CREATE_SOLUTION_VERSION = 'personalize:CreateSolutionVersion',
  DELETE_CAMPAIGN = 'personalize:DeleteCampaign',
  DELETE_DATASET = 'personalize:DeleteDataset',
  DELETE_DATASET_GROUP = 'personalize:DeleteDatasetGroup',
  DELETE_EVENT_TRACKER = 'personalize:DeleteEventTracker',
  DELETE_FILTER = 'personalize:DeleteFilter',
  DELETE_SCHEMA = 'personalize:DeleteSchema',
  DELETE_SOLUTION = 'personalize:DeleteSolution',
  DESCRIBE_ALGORITHM = 'personalize:DescribeAlgorithm',
  DESCRIBE_BATCH_INFERENCE_JOB = 'personalize:DescribeBatchInferenceJob',
  DESCRIBE_CAMPAIGN = 'personalize:DescribeCampaign',
  DESCRIBE_DATASET = 'personalize:DescribeDataset',
  DESCRIBE_DATASET_GROUP = 'personalize:DescribeDatasetGroup',
  DESCRIBE_DATASET_IMPORT_JOB = 'personalize:DescribeDatasetImportJob',
  DESCRIBE_EVENT_TRACKER = 'personalize:DescribeEventTracker',
  DESCRIBE_FEATURE_TRANSFORMATION = 'personalize:DescribeFeatureTransformation',
  DESCRIBE_FILTER = 'personalize:DescribeFilter',
  DESCRIBE_RECIPE = 'personalize:DescribeRecipe',
  DESCRIBE_SCHEMA = 'personalize:DescribeSchema',
  DESCRIBE_SOLUTION = 'personalize:DescribeSolution',
  DESCRIBE_SOLUTION_VERSION = 'personalize:DescribeSolutionVersion',
  GET_PERSONALIZED_RANKING = 'personalize:GetPersonalizedRanking',
  GET_RECOMMENDATIONS = 'personalize:GetRecommendations',
  GET_SOLUTION_METRICS = 'personalize:GetSolutionMetrics',
  LIST_BATCH_INFERENCE_JOBS = 'personalize:ListBatchInferenceJobs',
  LIST_CAMPAIGNS = 'personalize:ListCampaigns',
  LIST_DATASET_GROUPS = 'personalize:ListDatasetGroups',
  LIST_DATASET_IMPORT_JOBS = 'personalize:ListDatasetImportJobs',
  LIST_DATASETS = 'personalize:ListDatasets',
  LIST_EVENT_TRACKERS = 'personalize:ListEventTrackers',
  LIST_FILTERS = 'personalize:ListFilters',
  LIST_RECIPES = 'personalize:ListRecipes',
  LIST_SCHEMAS = 'personalize:ListSchemas',
  LIST_SOLUTION_VERSIONS = 'personalize:ListSolutionVersions',
  LIST_SOLUTIONS = 'personalize:ListSolutions',
  PUT_EVENTS = 'personalize:PutEvents',
  UPDATE_CAMPAIGN = 'personalize:UpdateCampaign',
}
export enum CLOUD9 {
  CREATE_ENVIRONMENT_EC_2 = 'cloud9:CreateEnvironmentEC2',
  CREATE_ENVIRONMENT_MEMBERSHIP = 'cloud9:CreateEnvironmentMembership',
  DELETE_ENVIRONMENT = 'cloud9:DeleteEnvironment',
  DELETE_ENVIRONMENT_MEMBERSHIP = 'cloud9:DeleteEnvironmentMembership',
  DESCRIBE_ENVIRONMENT_MEMBERSHIPS = 'cloud9:DescribeEnvironmentMemberships',
  DESCRIBE_ENVIRONMENT_STATUS = 'cloud9:DescribeEnvironmentStatus',
  DESCRIBE_ENVIRONMENTS = 'cloud9:DescribeEnvironments',
  GET_USER_SETTINGS = 'cloud9:GetUserSettings',
  LIST_ENVIRONMENTS = 'cloud9:ListEnvironments',
  LIST_TAGS_FOR_RESOURCE = 'cloud9:ListTagsForResource',
  TAG_RESOURCE = 'cloud9:TagResource',
  UNTAG_RESOURCE = 'cloud9:UntagResource',
  UPDATE_ENVIRONMENT = 'cloud9:UpdateEnvironment',
  UPDATE_ENVIRONMENT_MEMBERSHIP = 'cloud9:UpdateEnvironmentMembership',
  UPDATE_USER_SETTINGS = 'cloud9:UpdateUserSettings',
}
export enum ELEMENTAL_APPLIANCES_AND_SOFTWARE {
  CREATE_QUOTE = 'elemental-appliances-software:CreateQuote',
  GET_QUOTE = 'elemental-appliances-software:GetQuote',
  LIST_QUOTES = 'elemental-appliances-software:ListQuotes',
  LIST_TAGS_FOR_RESOURCE = 'elemental-appliances-software:ListTagsForResource',
  TAG_RESOURCE = 'elemental-appliances-software:TagResource',
  UNTAG_RESOURCE = 'elemental-appliances-software:UntagResource',
  UPDATE_QUOTE = 'elemental-appliances-software:UpdateQuote',
}
export enum DETECTIVE {
  ACCEPT_INVITATION = 'detective:AcceptInvitation',
  CREATE_GRAPH = 'detective:CreateGraph',
  CREATE_MEMBERS = 'detective:CreateMembers',
  DELETE_GRAPH = 'detective:DeleteGraph',
  DELETE_MEMBERS = 'detective:DeleteMembers',
  DISASSOCIATE_MEMBERSHIP = 'detective:DisassociateMembership',
  GET_FREE_TRIAL_ELIGIBILITY = 'detective:GetFreeTrialEligibility',
  GET_GRAPH_INGEST_STATE = 'detective:GetGraphIngestState',
  GET_MEMBERS = 'detective:GetMembers',
  GET_PRICING_INFORMATION = 'detective:GetPricingInformation',
  GET_USAGE_INFORMATION = 'detective:GetUsageInformation',
  LIST_GRAPHS = 'detective:ListGraphs',
  LIST_INVITATIONS = 'detective:ListInvitations',
  LIST_MEMBERS = 'detective:ListMembers',
  REJECT_INVITATION = 'detective:RejectInvitation',
  SEARCH_GRAPH = 'detective:SearchGraph',
  START_MONITORING_MEMBER = 'detective:StartMonitoringMember',
}
export enum TRANSFER_FOR_SFTP {
  CREATE_SERVER = 'transfer:CreateServer',
  CREATE_USER = 'transfer:CreateUser',
  DELETE_SERVER = 'transfer:DeleteServer',
  DELETE_SSH_PUBLIC_KEY = 'transfer:DeleteSshPublicKey',
  DELETE_USER = 'transfer:DeleteUser',
  DESCRIBE_SERVER = 'transfer:DescribeServer',
  DESCRIBE_USER = 'transfer:DescribeUser',
  IMPORT_SSH_PUBLIC_KEY = 'transfer:ImportSshPublicKey',
  LIST_SERVERS = 'transfer:ListServers',
  LIST_TAGS_FOR_RESOURCE = 'transfer:ListTagsForResource',
  LIST_USERS = 'transfer:ListUsers',
  START_SERVER = 'transfer:StartServer',
  STOP_SERVER = 'transfer:StopServer',
  TAG_RESOURCE = 'transfer:TagResource',
  TEST_IDENTITY_PROVIDER = 'transfer:TestIdentityProvider',
  UNTAG_RESOURCE = 'transfer:UntagResource',
  UPDATE_SERVER = 'transfer:UpdateServer',
  UPDATE_USER = 'transfer:UpdateUser',
}
export enum IAM_ACCESS_ANALYZER {
  CREATE_ANALYZER = 'access-analyzer:CreateAnalyzer',
  CREATE_ARCHIVE_RULE = 'access-analyzer:CreateArchiveRule',
  DELETE_ANALYZER = 'access-analyzer:DeleteAnalyzer',
  DELETE_ARCHIVE_RULE = 'access-analyzer:DeleteArchiveRule',
  GET_ANALYZED_RESOURCE = 'access-analyzer:GetAnalyzedResource',
  GET_ANALYZER = 'access-analyzer:GetAnalyzer',
  GET_ARCHIVE_RULE = 'access-analyzer:GetArchiveRule',
  GET_FINDING = 'access-analyzer:GetFinding',
  LIST_ANALYZED_RESOURCES = 'access-analyzer:ListAnalyzedResources',
  LIST_ANALYZERS = 'access-analyzer:ListAnalyzers',
  LIST_ARCHIVE_RULES = 'access-analyzer:ListArchiveRules',
  LIST_FINDINGS = 'access-analyzer:ListFindings',
  LIST_TAGS_FOR_RESOURCE = 'access-analyzer:ListTagsForResource',
  START_RESOURCE_SCAN = 'access-analyzer:StartResourceScan',
  TAG_RESOURCE = 'access-analyzer:TagResource',
  UNTAG_RESOURCE = 'access-analyzer:UntagResource',
  UPDATE_ARCHIVE_RULE = 'access-analyzer:UpdateArchiveRule',
  UPDATE_FINDINGS = 'access-analyzer:UpdateFindings',
}
export enum TEXTRACT {
  ANALYZE_DOCUMENT = 'textract:AnalyzeDocument',
  DETECT_DOCUMENT_TEXT = 'textract:DetectDocumentText',
  GET_DOCUMENT_ANALYSIS = 'textract:GetDocumentAnalysis',
  GET_DOCUMENT_TEXT_DETECTION = 'textract:GetDocumentTextDetection',
  START_DOCUMENT_ANALYSIS = 'textract:StartDocumentAnalysis',
  START_DOCUMENT_TEXT_DETECTION = 'textract:StartDocumentTextDetection',
}
export enum APPLICATION_DISCOVERY_ARSENAL {
  REGISTER_ON_PREMISES_AGENT = 'arsenal:RegisterOnPremisesAgent',
}
export enum GROUNDTRUTH_LABELING {
  DESCRIBE_CONSOLE_JOB = 'groundtruthlabeling:DescribeConsoleJob',
  LIST_DATASET_OBJECTS = 'groundtruthlabeling:ListDatasetObjects',
  RUN_FILTER_OR_SAMPLE_DATASET_JOB = 'groundtruthlabeling:RunFilterOrSampleDatasetJob',
  RUN_GENERATE_MANIFEST_BY_CRAWLING_JOB = 'groundtruthlabeling:RunGenerateManifestByCrawlingJob',
}
export enum ELEMENTAL_MEDIASTORE {
  CREATE_CONTAINER = 'mediastore:CreateContainer',
  DELETE_CONTAINER = 'mediastore:DeleteContainer',
  DELETE_CONTAINER_POLICY = 'mediastore:DeleteContainerPolicy',
  DELETE_CORS_POLICY = 'mediastore:DeleteCorsPolicy',
  DELETE_LIFECYCLE_POLICY = 'mediastore:DeleteLifecyclePolicy',
  DELETE_METRIC_POLICY = 'mediastore:DeleteMetricPolicy',
  DELETE_OBJECT = 'mediastore:DeleteObject',
  DESCRIBE_CONTAINER = 'mediastore:DescribeContainer',
  DESCRIBE_OBJECT = 'mediastore:DescribeObject',
  GET_CONTAINER_POLICY = 'mediastore:GetContainerPolicy',
  GET_CORS_POLICY = 'mediastore:GetCorsPolicy',
  GET_LIFECYCLE_POLICY = 'mediastore:GetLifecyclePolicy',
  GET_METRIC_POLICY = 'mediastore:GetMetricPolicy',
  GET_OBJECT = 'mediastore:GetObject',
  LIST_CONTAINERS = 'mediastore:ListContainers',
  LIST_ITEMS = 'mediastore:ListItems',
  LIST_TAGS_FOR_RESOURCE = 'mediastore:ListTagsForResource',
  PUT_CONTAINER_POLICY = 'mediastore:PutContainerPolicy',
  PUT_CORS_POLICY = 'mediastore:PutCorsPolicy',
  PUT_LIFECYCLE_POLICY = 'mediastore:PutLifecyclePolicy',
  PUT_METRIC_POLICY = 'mediastore:PutMetricPolicy',
  PUT_OBJECT = 'mediastore:PutObject',
  START_ACCESS_LOGGING = 'mediastore:StartAccessLogging',
  STOP_ACCESS_LOGGING = 'mediastore:StopAccessLogging',
  TAG_RESOURCE = 'mediastore:TagResource',
  UNTAG_RESOURCE = 'mediastore:UntagResource',
}
export enum IOT_1CLICK {
  ASSOCIATE_DEVICE_WITH_PLACEMENT = 'iot1click:AssociateDeviceWithPlacement',
  CLAIM_DEVICES_BY_CLAIM_CODE = 'iot1click:ClaimDevicesByClaimCode',
  CREATE_PLACEMENT = 'iot1click:CreatePlacement',
  CREATE_PROJECT = 'iot1click:CreateProject',
  DELETE_PLACEMENT = 'iot1click:DeletePlacement',
  DELETE_PROJECT = 'iot1click:DeleteProject',
  DESCRIBE_DEVICE = 'iot1click:DescribeDevice',
  DESCRIBE_PLACEMENT = 'iot1click:DescribePlacement',
  DESCRIBE_PROJECT = 'iot1click:DescribeProject',
  DISASSOCIATE_DEVICE_FROM_PLACEMENT = 'iot1click:DisassociateDeviceFromPlacement',
  FINALIZE_DEVICE_CLAIM = 'iot1click:FinalizeDeviceClaim',
  GET_DEVICE_METHODS = 'iot1click:GetDeviceMethods',
  GET_DEVICES_IN_PLACEMENT = 'iot1click:GetDevicesInPlacement',
  INITIATE_DEVICE_CLAIM = 'iot1click:InitiateDeviceClaim',
  INVOKE_DEVICE_METHOD = 'iot1click:InvokeDeviceMethod',
  LIST_DEVICE_EVENTS = 'iot1click:ListDeviceEvents',
  LIST_DEVICES = 'iot1click:ListDevices',
  LIST_PLACEMENTS = 'iot1click:ListPlacements',
  LIST_PROJECTS = 'iot1click:ListProjects',
  LIST_TAGS_FOR_RESOURCE = 'iot1click:ListTagsForResource',
  TAG_RESOURCE = 'iot1click:TagResource',
  UNCLAIM_DEVICE = 'iot1click:UnclaimDevice',
  UNTAG_RESOURCE = 'iot1click:UntagResource',
  UPDATE_DEVICE_STATE = 'iot1click:UpdateDeviceState',
  UPDATE_PLACEMENT = 'iot1click:UpdatePlacement',
  UPDATE_PROJECT = 'iot1click:UpdateProject',
}
export enum CODEPIPELINE {
  ACKNOWLEDGE_JOB = 'codepipeline:AcknowledgeJob',
  ACKNOWLEDGE_THIRD_PARTY_JOB = 'codepipeline:AcknowledgeThirdPartyJob',
  CREATE_CUSTOM_ACTION_TYPE = 'codepipeline:CreateCustomActionType',
  CREATE_PIPELINE = 'codepipeline:CreatePipeline',
  DELETE_CUSTOM_ACTION_TYPE = 'codepipeline:DeleteCustomActionType',
  DELETE_PIPELINE = 'codepipeline:DeletePipeline',
  DELETE_WEBHOOK = 'codepipeline:DeleteWebhook',
  DEREGISTER_WEBHOOK_WITH_THIRD_PARTY = 'codepipeline:DeregisterWebhookWithThirdParty',
  DISABLE_STAGE_TRANSITION = 'codepipeline:DisableStageTransition',
  ENABLE_STAGE_TRANSITION = 'codepipeline:EnableStageTransition',
  GET_JOB_DETAILS = 'codepipeline:GetJobDetails',
  GET_PIPELINE = 'codepipeline:GetPipeline',
  GET_PIPELINE_EXECUTION = 'codepipeline:GetPipelineExecution',
  GET_PIPELINE_STATE = 'codepipeline:GetPipelineState',
  GET_THIRD_PARTY_JOB_DETAILS = 'codepipeline:GetThirdPartyJobDetails',
  LIST_ACTION_EXECUTIONS = 'codepipeline:ListActionExecutions',
  LIST_ACTION_TYPES = 'codepipeline:ListActionTypes',
  LIST_PIPELINE_EXECUTIONS = 'codepipeline:ListPipelineExecutions',
  LIST_PIPELINES = 'codepipeline:ListPipelines',
  LIST_TAGS_FOR_RESOURCE = 'codepipeline:ListTagsForResource',
  LIST_WEBHOOKS = 'codepipeline:ListWebhooks',
  POLL_FOR_JOBS = 'codepipeline:PollForJobs',
  POLL_FOR_THIRD_PARTY_JOBS = 'codepipeline:PollForThirdPartyJobs',
  PUT_ACTION_REVISION = 'codepipeline:PutActionRevision',
  PUT_APPROVAL_RESULT = 'codepipeline:PutApprovalResult',
  PUT_JOB_FAILURE_RESULT = 'codepipeline:PutJobFailureResult',
  PUT_JOB_SUCCESS_RESULT = 'codepipeline:PutJobSuccessResult',
  PUT_THIRD_PARTY_JOB_FAILURE_RESULT = 'codepipeline:PutThirdPartyJobFailureResult',
  PUT_THIRD_PARTY_JOB_SUCCESS_RESULT = 'codepipeline:PutThirdPartyJobSuccessResult',
  PUT_WEBHOOK = 'codepipeline:PutWebhook',
  REGISTER_WEBHOOK_WITH_THIRD_PARTY = 'codepipeline:RegisterWebhookWithThirdParty',
  RETRY_STAGE_EXECUTION = 'codepipeline:RetryStageExecution',
  START_PIPELINE_EXECUTION = 'codepipeline:StartPipelineExecution',
  STOP_PIPELINE_EXECUTION = 'codepipeline:StopPipelineExecution',
  TAG_RESOURCE = 'codepipeline:TagResource',
  UNTAG_RESOURCE = 'codepipeline:UntagResource',
  UPDATE_PIPELINE = 'codepipeline:UpdatePipeline',
}
export enum SECURITY_HUB {
  ACCEPT_INVITATION = 'securityhub:AcceptInvitation',
  BATCH_DISABLE_STANDARDS = 'securityhub:BatchDisableStandards',
  BATCH_ENABLE_STANDARDS = 'securityhub:BatchEnableStandards',
  BATCH_IMPORT_FINDINGS = 'securityhub:BatchImportFindings',
  BATCH_UPDATE_FINDINGS = 'securityhub:BatchUpdateFindings',
  CREATE_ACTION_TARGET = 'securityhub:CreateActionTarget',
  CREATE_INSIGHT = 'securityhub:CreateInsight',
  CREATE_MEMBERS = 'securityhub:CreateMembers',
  DECLINE_INVITATIONS = 'securityhub:DeclineInvitations',
  DELETE_ACTION_TARGET = 'securityhub:DeleteActionTarget',
  DELETE_INSIGHT = 'securityhub:DeleteInsight',
  DELETE_INVITATIONS = 'securityhub:DeleteInvitations',
  DELETE_MEMBERS = 'securityhub:DeleteMembers',
  DESCRIBE_ACTION_TARGETS = 'securityhub:DescribeActionTargets',
  DESCRIBE_HUB = 'securityhub:DescribeHub',
  DESCRIBE_PRODUCTS = 'securityhub:DescribeProducts',
  DESCRIBE_STANDARDS = 'securityhub:DescribeStandards',
  DESCRIBE_STANDARDS_CONTROLS = 'securityhub:DescribeStandardsControls',
  DISABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'securityhub:DisableImportFindingsForProduct',
  DISABLE_SECURITY_HUB = 'securityhub:DisableSecurityHub',
  DISASSOCIATE_FROM_MASTER_ACCOUNT = 'securityhub:DisassociateFromMasterAccount',
  DISASSOCIATE_MEMBERS = 'securityhub:DisassociateMembers',
  ENABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'securityhub:EnableImportFindingsForProduct',
  ENABLE_SECURITY_HUB = 'securityhub:EnableSecurityHub',
  GET_ENABLED_STANDARDS = 'securityhub:GetEnabledStandards',
  GET_FINDINGS = 'securityhub:GetFindings',
  GET_INSIGHT_RESULTS = 'securityhub:GetInsightResults',
  GET_INSIGHTS = 'securityhub:GetInsights',
  GET_INVITATIONS_COUNT = 'securityhub:GetInvitationsCount',
  GET_MASTER_ACCOUNT = 'securityhub:GetMasterAccount',
  GET_MEMBERS = 'securityhub:GetMembers',
  INVITE_MEMBERS = 'securityhub:InviteMembers',
  LIST_ENABLED_PRODUCTS_FOR_IMPORT = 'securityhub:ListEnabledProductsForImport',
  LIST_INVITATIONS = 'securityhub:ListInvitations',
  LIST_MEMBERS = 'securityhub:ListMembers',
  LIST_TAGS_FOR_RESOURCE = 'securityhub:ListTagsForResource',
  TAG_RESOURCE = 'securityhub:TagResource',
  UNTAG_RESOURCE = 'securityhub:UntagResource',
  UPDATE_ACTION_TARGET = 'securityhub:UpdateActionTarget',
  UPDATE_FINDINGS = 'securityhub:UpdateFindings',
  UPDATE_INSIGHT = 'securityhub:UpdateInsight',
  UPDATE_SECURITY_HUB_CONFIGURATION = 'securityhub:UpdateSecurityHubConfiguration',
  UPDATE_STANDARDS_CONTROL = 'securityhub:UpdateStandardsControl',
}
export enum EC2_IMAGE_BUILDER {
  CANCEL_IMAGE_CREATION = 'imagebuilder:CancelImageCreation',
  CREATE_COMPONENT = 'imagebuilder:CreateComponent',
  CREATE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:CreateDistributionConfiguration',
  CREATE_IMAGE = 'imagebuilder:CreateImage',
  CREATE_IMAGE_PIPELINE = 'imagebuilder:CreateImagePipeline',
  CREATE_IMAGE_RECIPE = 'imagebuilder:CreateImageRecipe',
  CREATE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:CreateInfrastructureConfiguration',
  DELETE_COMPONENT = 'imagebuilder:DeleteComponent',
  DELETE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:DeleteDistributionConfiguration',
  DELETE_IMAGE = 'imagebuilder:DeleteImage',
  DELETE_IMAGE_PIPELINE = 'imagebuilder:DeleteImagePipeline',
  DELETE_IMAGE_RECIPE = 'imagebuilder:DeleteImageRecipe',
  DELETE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:DeleteInfrastructureConfiguration',
  GET_COMPONENT = 'imagebuilder:GetComponent',
  GET_COMPONENT_POLICY = 'imagebuilder:GetComponentPolicy',
  GET_DISTRIBUTION_CONFIGURATION = 'imagebuilder:GetDistributionConfiguration',
  GET_IMAGE = 'imagebuilder:GetImage',
  GET_IMAGE_PIPELINE = 'imagebuilder:GetImagePipeline',
  GET_IMAGE_POLICY = 'imagebuilder:GetImagePolicy',
  GET_IMAGE_RECIPE = 'imagebuilder:GetImageRecipe',
  GET_IMAGE_RECIPE_POLICY = 'imagebuilder:GetImageRecipePolicy',
  GET_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:GetInfrastructureConfiguration',
  LIST_COMPONENT_BUILD_VERSIONS = 'imagebuilder:ListComponentBuildVersions',
  LIST_COMPONENTS = 'imagebuilder:ListComponents',
  LIST_DISTRIBUTION_CONFIGURATIONS = 'imagebuilder:ListDistributionConfigurations',
  LIST_IMAGE_BUILD_VERSIONS = 'imagebuilder:ListImageBuildVersions',
  LIST_IMAGE_PIPELINES = 'imagebuilder:ListImagePipelines',
  LIST_IMAGE_RECIPES = 'imagebuilder:ListImageRecipes',
  LIST_IMAGES = 'imagebuilder:ListImages',
  LIST_INFRASTRUCTURE_CONFIGURATIONS = 'imagebuilder:ListInfrastructureConfigurations',
  LIST_TAGS_FOR_RESOURCE = 'imagebuilder:ListTagsForResource',
  PUT_COMPONENT_POLICY = 'imagebuilder:PutComponentPolicy',
  PUT_IMAGE_POLICY = 'imagebuilder:PutImagePolicy',
  PUT_IMAGE_RECIPE_POLICY = 'imagebuilder:PutImageRecipePolicy',
  START_IMAGE_PIPELINE_EXECUTION = 'imagebuilder:StartImagePipelineExecution',
  TAG_RESOURCE = 'imagebuilder:TagResource',
  UNTAG_RESOURCE = 'imagebuilder:UntagResource',
  UPDATE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:UpdateDistributionConfiguration',
  UPDATE_IMAGE_PIPELINE = 'imagebuilder:UpdateImagePipeline',
  UPDATE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:UpdateInfrastructureConfiguration',
}
export enum SQS {
  ADD_PERMISSION = 'sqs:AddPermission',
  CHANGE_MESSAGE_VISIBILITY = 'sqs:ChangeMessageVisibility',
  CHANGE_MESSAGE_VISIBILITY_BATCH = 'sqs:ChangeMessageVisibilityBatch',
  CREATE_QUEUE = 'sqs:CreateQueue',
  DELETE_MESSAGE = 'sqs:DeleteMessage',
  DELETE_MESSAGE_BATCH = 'sqs:DeleteMessageBatch',
  DELETE_QUEUE = 'sqs:DeleteQueue',
  GET_QUEUE_ATTRIBUTES = 'sqs:GetQueueAttributes',
  GET_QUEUE_URL = 'sqs:GetQueueUrl',
  LIST_DEAD_LETTER_SOURCE_QUEUES = 'sqs:ListDeadLetterSourceQueues',
  LIST_QUEUE_TAGS = 'sqs:ListQueueTags',
  LIST_QUEUES = 'sqs:ListQueues',
  PURGE_QUEUE = 'sqs:PurgeQueue',
  RECEIVE_MESSAGE = 'sqs:ReceiveMessage',
  REMOVE_PERMISSION = 'sqs:RemovePermission',
  SEND_MESSAGE = 'sqs:SendMessage',
  SEND_MESSAGE_BATCH = 'sqs:SendMessageBatch',
  SET_QUEUE_ATTRIBUTES = 'sqs:SetQueueAttributes',
  TAG_QUEUE = 'sqs:TagQueue',
  UNTAG_QUEUE = 'sqs:UntagQueue',
}
export enum CLOUD_MAP {
  CREATE_HTTP_NAMESPACE = 'servicediscovery:CreateHttpNamespace',
  CREATE_PRIVATE_DNS_NAMESPACE = 'servicediscovery:CreatePrivateDnsNamespace',
  CREATE_PUBLIC_DNS_NAMESPACE = 'servicediscovery:CreatePublicDnsNamespace',
  CREATE_SERVICE = 'servicediscovery:CreateService',
  DELETE_NAMESPACE = 'servicediscovery:DeleteNamespace',
  DELETE_SERVICE = 'servicediscovery:DeleteService',
  DEREGISTER_INSTANCE = 'servicediscovery:DeregisterInstance',
  DISCOVER_INSTANCES = 'servicediscovery:DiscoverInstances',
  GET_INSTANCE = 'servicediscovery:GetInstance',
  GET_INSTANCES_HEALTH_STATUS = 'servicediscovery:GetInstancesHealthStatus',
  GET_NAMESPACE = 'servicediscovery:GetNamespace',
  GET_OPERATION = 'servicediscovery:GetOperation',
  GET_SERVICE = 'servicediscovery:GetService',
  LIST_INSTANCES = 'servicediscovery:ListInstances',
  LIST_NAMESPACES = 'servicediscovery:ListNamespaces',
  LIST_OPERATIONS = 'servicediscovery:ListOperations',
  LIST_SERVICES = 'servicediscovery:ListServices',
  LIST_TAGS_FOR_RESOURCE = 'servicediscovery:ListTagsForResource',
  REGISTER_INSTANCE = 'servicediscovery:RegisterInstance',
  TAG_RESOURCE = 'servicediscovery:TagResource',
  UNTAG_RESOURCE = 'servicediscovery:UntagResource',
  UPDATE_INSTANCE_CUSTOM_HEALTH_STATUS = 'servicediscovery:UpdateInstanceCustomHealthStatus',
  UPDATE_SERVICE = 'servicediscovery:UpdateService',
}
export enum COMPUTE_OPTIMIZER {
  DESCRIBE_RECOMMENDATION_EXPORT_JOBS = 'compute-optimizer:DescribeRecommendationExportJobs',
  EXPORT_AUTO_SCALING_GROUP_RECOMMENDATIONS = 'compute-optimizer:ExportAutoScalingGroupRecommendations',
  EXPORT_EC_2_INSTANCE_RECOMMENDATIONS = 'compute-optimizer:ExportEC2InstanceRecommendations',
  GET_AUTO_SCALING_GROUP_RECOMMENDATIONS = 'compute-optimizer:GetAutoScalingGroupRecommendations',
  GET_EC_2_INSTANCE_RECOMMENDATIONS = 'compute-optimizer:GetEC2InstanceRecommendations',
  GET_EC_2_RECOMMENDATION_PROJECTED_METRICS = 'compute-optimizer:GetEC2RecommendationProjectedMetrics',
  GET_ENROLLMENT_STATUS = 'compute-optimizer:GetEnrollmentStatus',
  GET_RECOMMENDATION_SUMMARIES = 'compute-optimizer:GetRecommendationSummaries',
  UPDATE_ENROLLMENT_STATUS = 'compute-optimizer:UpdateEnrollmentStatus',
}
export enum GLACIER {
  ABORT_MULTIPART_UPLOAD = 'glacier:AbortMultipartUpload',
  ABORT_VAULT_LOCK = 'glacier:AbortVaultLock',
  ADD_TAGS_TO_VAULT = 'glacier:AddTagsToVault',
  COMPLETE_MULTIPART_UPLOAD = 'glacier:CompleteMultipartUpload',
  COMPLETE_VAULT_LOCK = 'glacier:CompleteVaultLock',
  CREATE_VAULT = 'glacier:CreateVault',
  DELETE_ARCHIVE = 'glacier:DeleteArchive',
  DELETE_VAULT = 'glacier:DeleteVault',
  DELETE_VAULT_ACCESS_POLICY = 'glacier:DeleteVaultAccessPolicy',
  DELETE_VAULT_NOTIFICATIONS = 'glacier:DeleteVaultNotifications',
  DESCRIBE_JOB = 'glacier:DescribeJob',
  DESCRIBE_VAULT = 'glacier:DescribeVault',
  GET_DATA_RETRIEVAL_POLICY = 'glacier:GetDataRetrievalPolicy',
  GET_JOB_OUTPUT = 'glacier:GetJobOutput',
  GET_VAULT_ACCESS_POLICY = 'glacier:GetVaultAccessPolicy',
  GET_VAULT_LOCK = 'glacier:GetVaultLock',
  GET_VAULT_NOTIFICATIONS = 'glacier:GetVaultNotifications',
  INITIATE_JOB = 'glacier:InitiateJob',
  INITIATE_MULTIPART_UPLOAD = 'glacier:InitiateMultipartUpload',
  INITIATE_VAULT_LOCK = 'glacier:InitiateVaultLock',
  LIST_JOBS = 'glacier:ListJobs',
  LIST_MULTIPART_UPLOADS = 'glacier:ListMultipartUploads',
  LIST_PARTS = 'glacier:ListParts',
  LIST_PROVISIONED_CAPACITY = 'glacier:ListProvisionedCapacity',
  LIST_TAGS_FOR_VAULT = 'glacier:ListTagsForVault',
  LIST_VAULTS = 'glacier:ListVaults',
  PURCHASE_PROVISIONED_CAPACITY = 'glacier:PurchaseProvisionedCapacity',
  REMOVE_TAGS_FROM_VAULT = 'glacier:RemoveTagsFromVault',
  SET_DATA_RETRIEVAL_POLICY = 'glacier:SetDataRetrievalPolicy',
  SET_VAULT_ACCESS_POLICY = 'glacier:SetVaultAccessPolicy',
  SET_VAULT_NOTIFICATIONS = 'glacier:SetVaultNotifications',
  UPLOAD_ARCHIVE = 'glacier:UploadArchive',
  UPLOAD_MULTIPART_PART = 'glacier:UploadMultipartPart',
}
export enum REKOGNITION {
  COMPARE_FACES = 'rekognition:CompareFaces',
  CREATE_COLLECTION = 'rekognition:CreateCollection',
  CREATE_PROJECT = 'rekognition:CreateProject',
  CREATE_PROJECT_VERSION = 'rekognition:CreateProjectVersion',
  CREATE_STREAM_PROCESSOR = 'rekognition:CreateStreamProcessor',
  DELETE_COLLECTION = 'rekognition:DeleteCollection',
  DELETE_FACES = 'rekognition:DeleteFaces',
  DELETE_PROJECT = 'rekognition:DeleteProject',
  DELETE_PROJECT_VERSION = 'rekognition:DeleteProjectVersion',
  DELETE_STREAM_PROCESSOR = 'rekognition:DeleteStreamProcessor',
  DESCRIBE_COLLECTION = 'rekognition:DescribeCollection',
  DESCRIBE_PROJECT_VERSIONS = 'rekognition:DescribeProjectVersions',
  DESCRIBE_PROJECTS = 'rekognition:DescribeProjects',
  DESCRIBE_STREAM_PROCESSOR = 'rekognition:DescribeStreamProcessor',
  DETECT_CUSTOM_LABELS = 'rekognition:DetectCustomLabels',
  DETECT_FACES = 'rekognition:DetectFaces',
  DETECT_LABELS = 'rekognition:DetectLabels',
  DETECT_MODERATION_LABELS = 'rekognition:DetectModerationLabels',
  DETECT_TEXT = 'rekognition:DetectText',
  GET_CELEBRITY_INFO = 'rekognition:GetCelebrityInfo',
  GET_CELEBRITY_RECOGNITION = 'rekognition:GetCelebrityRecognition',
  GET_CONTENT_MODERATION = 'rekognition:GetContentModeration',
  GET_FACE_DETECTION = 'rekognition:GetFaceDetection',
  GET_FACE_SEARCH = 'rekognition:GetFaceSearch',
  GET_LABEL_DETECTION = 'rekognition:GetLabelDetection',
  GET_PERSON_TRACKING = 'rekognition:GetPersonTracking',
  GET_SEGMENT_DETECTION = 'rekognition:GetSegmentDetection',
  GET_TEXT_DETECTION = 'rekognition:GetTextDetection',
  INDEX_FACES = 'rekognition:IndexFaces',
  LIST_COLLECTIONS = 'rekognition:ListCollections',
  LIST_FACES = 'rekognition:ListFaces',
  LIST_STREAM_PROCESSORS = 'rekognition:ListStreamProcessors',
  RECOGNIZE_CELEBRITIES = 'rekognition:RecognizeCelebrities',
  SEARCH_FACES = 'rekognition:SearchFaces',
  SEARCH_FACES_BY_IMAGE = 'rekognition:SearchFacesByImage',
  START_CELEBRITY_RECOGNITION = 'rekognition:StartCelebrityRecognition',
  START_CONTENT_MODERATION = 'rekognition:StartContentModeration',
  START_FACE_DETECTION = 'rekognition:StartFaceDetection',
  START_FACE_SEARCH = 'rekognition:StartFaceSearch',
  START_LABEL_DETECTION = 'rekognition:StartLabelDetection',
  START_PERSON_TRACKING = 'rekognition:StartPersonTracking',
  START_PROJECT_VERSION = 'rekognition:StartProjectVersion',
  START_SEGMENT_DETECTION = 'rekognition:StartSegmentDetection',
  START_STREAM_PROCESSOR = 'rekognition:StartStreamProcessor',
  START_TEXT_DETECTION = 'rekognition:StartTextDetection',
  STOP_PROJECT_VERSION = 'rekognition:StopProjectVersion',
  STOP_STREAM_PROCESSOR = 'rekognition:StopStreamProcessor',
}
export enum LAUNCH_WIZARD {
  DELETE_APP = 'launchwizard:DeleteApp',
  DESCRIBE_PROVISIONED_APP = 'launchwizard:DescribeProvisionedApp',
  DESCRIBE_PROVISIONING_EVENTS = 'launchwizard:DescribeProvisioningEvents',
  GET_INFRASTRUCTURE_SUGGESTION = 'launchwizard:GetInfrastructureSuggestion',
  GET_IP_ADDRESS = 'launchwizard:GetIpAddress',
  GET_RESOURCE_COST_ESTIMATE = 'launchwizard:GetResourceCostEstimate',
  LIST_PROVISIONED_APPS = 'launchwizard:ListProvisionedApps',
  START_PROVISIONING = 'launchwizard:StartProvisioning',
}
export enum ELEMENTAL_MEDIACONVERT {
  ASSOCIATE_CERTIFICATE = 'mediaconvert:AssociateCertificate',
  CANCEL_JOB = 'mediaconvert:CancelJob',
  CREATE_JOB = 'mediaconvert:CreateJob',
  CREATE_JOB_TEMPLATE = 'mediaconvert:CreateJobTemplate',
  CREATE_PRESET = 'mediaconvert:CreatePreset',
  CREATE_QUEUE = 'mediaconvert:CreateQueue',
  DELETE_JOB_TEMPLATE = 'mediaconvert:DeleteJobTemplate',
  DELETE_PRESET = 'mediaconvert:DeletePreset',
  DELETE_QUEUE = 'mediaconvert:DeleteQueue',
  DESCRIBE_ENDPOINTS = 'mediaconvert:DescribeEndpoints',
  DISASSOCIATE_CERTIFICATE = 'mediaconvert:DisassociateCertificate',
  GET_JOB = 'mediaconvert:GetJob',
  GET_JOB_TEMPLATE = 'mediaconvert:GetJobTemplate',
  GET_PRESET = 'mediaconvert:GetPreset',
  GET_QUEUE = 'mediaconvert:GetQueue',
  LIST_JOB_TEMPLATES = 'mediaconvert:ListJobTemplates',
  LIST_JOBS = 'mediaconvert:ListJobs',
  LIST_PRESETS = 'mediaconvert:ListPresets',
  LIST_QUEUES = 'mediaconvert:ListQueues',
  LIST_TAGS_FOR_RESOURCE = 'mediaconvert:ListTagsForResource',
  TAG_RESOURCE = 'mediaconvert:TagResource',
  UNTAG_RESOURCE = 'mediaconvert:UntagResource',
  UPDATE_JOB_TEMPLATE = 'mediaconvert:UpdateJobTemplate',
  UPDATE_PRESET = 'mediaconvert:UpdatePreset',
  UPDATE_QUEUE = 'mediaconvert:UpdateQueue',
}
export enum SERVICE_QUOTAS {
  ASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'servicequotas:AssociateServiceQuotaTemplate',
  DELETE_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'servicequotas:DeleteServiceQuotaIncreaseRequestFromTemplate',
  DISASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'servicequotas:DisassociateServiceQuotaTemplate',
  GET_AWS_DEFAULT_SERVICE_QUOTA = 'servicequotas:GetAWSDefaultServiceQuota',
  GET_ASSOCIATION_FOR_SERVICE_QUOTA_TEMPLATE = 'servicequotas:GetAssociationForServiceQuotaTemplate',
  GET_REQUESTED_SERVICE_QUOTA_CHANGE = 'servicequotas:GetRequestedServiceQuotaChange',
  GET_SERVICE_QUOTA = 'servicequotas:GetServiceQuota',
  GET_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'servicequotas:GetServiceQuotaIncreaseRequestFromTemplate',
  LIST_AWS_DEFAULT_SERVICE_QUOTAS = 'servicequotas:ListAWSDefaultServiceQuotas',
  LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY = 'servicequotas:ListRequestedServiceQuotaChangeHistory',
  LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY_BY_QUOTA = 'servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota',
  LIST_SERVICE_QUOTA_INCREASE_REQUESTS_IN_TEMPLATE = 'servicequotas:ListServiceQuotaIncreaseRequestsInTemplate',
  LIST_SERVICE_QUOTAS = 'servicequotas:ListServiceQuotas',
  LIST_SERVICES = 'servicequotas:ListServices',
  PUT_SERVICE_QUOTA_INCREASE_REQUEST_INTO_TEMPLATE = 'servicequotas:PutServiceQuotaIncreaseRequestIntoTemplate',
  REQUEST_SERVICE_QUOTA_INCREASE = 'servicequotas:RequestServiceQuotaIncrease',
}
export enum INSPECTOR {
  ADD_ATTRIBUTES_TO_FINDINGS = 'inspector:AddAttributesToFindings',
  CREATE_ASSESSMENT_TARGET = 'inspector:CreateAssessmentTarget',
  CREATE_ASSESSMENT_TEMPLATE = 'inspector:CreateAssessmentTemplate',
  CREATE_RESOURCE_GROUP = 'inspector:CreateResourceGroup',
  DELETE_ASSESSMENT_RUN = 'inspector:DeleteAssessmentRun',
  DELETE_ASSESSMENT_TARGET = 'inspector:DeleteAssessmentTarget',
  DELETE_ASSESSMENT_TEMPLATE = 'inspector:DeleteAssessmentTemplate',
  DESCRIBE_ASSESSMENT_RUNS = 'inspector:DescribeAssessmentRuns',
  DESCRIBE_ASSESSMENT_TARGETS = 'inspector:DescribeAssessmentTargets',
  DESCRIBE_ASSESSMENT_TEMPLATES = 'inspector:DescribeAssessmentTemplates',
  DESCRIBE_CROSS_ACCOUNT_ACCESS_ROLE = 'inspector:DescribeCrossAccountAccessRole',
  DESCRIBE_FINDINGS = 'inspector:DescribeFindings',
  DESCRIBE_RESOURCE_GROUPS = 'inspector:DescribeResourceGroups',
  DESCRIBE_RULES_PACKAGES = 'inspector:DescribeRulesPackages',
  GET_TELEMETRY_METADATA = 'inspector:GetTelemetryMetadata',
  LIST_ASSESSMENT_RUN_AGENTS = 'inspector:ListAssessmentRunAgents',
  LIST_ASSESSMENT_RUNS = 'inspector:ListAssessmentRuns',
  LIST_ASSESSMENT_TARGETS = 'inspector:ListAssessmentTargets',
  LIST_ASSESSMENT_TEMPLATES = 'inspector:ListAssessmentTemplates',
  LIST_EVENT_SUBSCRIPTIONS = 'inspector:ListEventSubscriptions',
  LIST_FINDINGS = 'inspector:ListFindings',
  LIST_RULES_PACKAGES = 'inspector:ListRulesPackages',
  LIST_TAGS_FOR_RESOURCE = 'inspector:ListTagsForResource',
  PREVIEW_AGENTS = 'inspector:PreviewAgents',
  REGISTER_CROSS_ACCOUNT_ACCESS_ROLE = 'inspector:RegisterCrossAccountAccessRole',
  REMOVE_ATTRIBUTES_FROM_FINDINGS = 'inspector:RemoveAttributesFromFindings',
  SET_TAGS_FOR_RESOURCE = 'inspector:SetTagsForResource',
  START_ASSESSMENT_RUN = 'inspector:StartAssessmentRun',
  STOP_ASSESSMENT_RUN = 'inspector:StopAssessmentRun',
  SUBSCRIBE_TO_EVENT = 'inspector:SubscribeToEvent',
  UNSUBSCRIBE_FROM_EVENT = 'inspector:UnsubscribeFromEvent',
  UPDATE_ASSESSMENT_TARGET = 'inspector:UpdateAssessmentTarget',
}
export enum ROBOMAKER {
  BATCH_DESCRIBE_SIMULATION_JOB = 'robomaker:BatchDescribeSimulationJob',
  CANCEL_DEPLOYMENT_JOB = 'robomaker:CancelDeploymentJob',
  CANCEL_SIMULATION_JOB = 'robomaker:CancelSimulationJob',
  CANCEL_SIMULATION_JOB_BATCH = 'robomaker:CancelSimulationJobBatch',
  CREATE_DEPLOYMENT_JOB = 'robomaker:CreateDeploymentJob',
  CREATE_FLEET = 'robomaker:CreateFleet',
  CREATE_ROBOT = 'robomaker:CreateRobot',
  CREATE_ROBOT_APPLICATION = 'robomaker:CreateRobotApplication',
  CREATE_ROBOT_APPLICATION_VERSION = 'robomaker:CreateRobotApplicationVersion',
  CREATE_SIMULATION_APPLICATION = 'robomaker:CreateSimulationApplication',
  CREATE_SIMULATION_APPLICATION_VERSION = 'robomaker:CreateSimulationApplicationVersion',
  CREATE_SIMULATION_JOB = 'robomaker:CreateSimulationJob',
  DELETE_FLEET = 'robomaker:DeleteFleet',
  DELETE_ROBOT = 'robomaker:DeleteRobot',
  DELETE_ROBOT_APPLICATION = 'robomaker:DeleteRobotApplication',
  DELETE_SIMULATION_APPLICATION = 'robomaker:DeleteSimulationApplication',
  DEREGISTER_ROBOT = 'robomaker:DeregisterRobot',
  DESCRIBE_DEPLOYMENT_JOB = 'robomaker:DescribeDeploymentJob',
  DESCRIBE_FLEET = 'robomaker:DescribeFleet',
  DESCRIBE_ROBOT = 'robomaker:DescribeRobot',
  DESCRIBE_ROBOT_APPLICATION = 'robomaker:DescribeRobotApplication',
  DESCRIBE_SIMULATION_APPLICATION = 'robomaker:DescribeSimulationApplication',
  DESCRIBE_SIMULATION_JOB = 'robomaker:DescribeSimulationJob',
  DESCRIBE_SIMULATION_JOB_BATCH = 'robomaker:DescribeSimulationJobBatch',
  LIST_DEPLOYMENT_JOBS = 'robomaker:ListDeploymentJobs',
  LIST_FLEETS = 'robomaker:ListFleets',
  LIST_ROBOT_APPLICATIONS = 'robomaker:ListRobotApplications',
  LIST_ROBOTS = 'robomaker:ListRobots',
  LIST_SIMULATION_APPLICATIONS = 'robomaker:ListSimulationApplications',
  LIST_SIMULATION_JOB_BATCHES = 'robomaker:ListSimulationJobBatches',
  LIST_SIMULATION_JOBS = 'robomaker:ListSimulationJobs',
  LIST_TAGS_FOR_RESOURCE = 'robomaker:ListTagsForResource',
  REGISTER_ROBOT = 'robomaker:RegisterRobot',
  RESTART_SIMULATION_JOB = 'robomaker:RestartSimulationJob',
  START_SIMULATION_JOB_BATCH = 'robomaker:StartSimulationJobBatch',
  SYNC_DEPLOYMENT_JOB = 'robomaker:SyncDeploymentJob',
  TAG_RESOURCE = 'robomaker:TagResource',
  UNTAG_RESOURCE = 'robomaker:UntagResource',
  UPDATE_ROBOT_APPLICATION = 'robomaker:UpdateRobotApplication',
  UPDATE_SIMULATION_APPLICATION = 'robomaker:UpdateSimulationApplication',
}
export enum QLDB {
  CANCEL_JOURNAL_KINESIS_STREAM = 'qldb:CancelJournalKinesisStream',
  CREATE_LEDGER = 'qldb:CreateLedger',
  DELETE_LEDGER = 'qldb:DeleteLedger',
  DESCRIBE_JOURNAL_KINESIS_STREAM = 'qldb:DescribeJournalKinesisStream',
  DESCRIBE_JOURNAL_S_3_EXPORT = 'qldb:DescribeJournalS3Export',
  DESCRIBE_LEDGER = 'qldb:DescribeLedger',
  EXECUTE_STATEMENT = 'qldb:ExecuteStatement',
  EXPORT_JOURNAL_TO_S_3 = 'qldb:ExportJournalToS3',
  GET_BLOCK = 'qldb:GetBlock',
  GET_DIGEST = 'qldb:GetDigest',
  GET_REVISION = 'qldb:GetRevision',
  INSERT_SAMPLE_DATA = 'qldb:InsertSampleData',
  LIST_JOURNAL_KINESIS_STREAMS_FOR_LEDGER = 'qldb:ListJournalKinesisStreamsForLedger',
  LIST_JOURNAL_S_3_EXPORTS = 'qldb:ListJournalS3Exports',
  LIST_JOURNAL_S_3_EXPORTS_FOR_LEDGER = 'qldb:ListJournalS3ExportsForLedger',
  LIST_LEDGERS = 'qldb:ListLedgers',
  LIST_TAGS_FOR_RESOURCE = 'qldb:ListTagsForResource',
  SEND_COMMAND = 'qldb:SendCommand',
  SHOW_CATALOG = 'qldb:ShowCatalog',
  STREAM_JOURNAL_TO_KINESIS = 'qldb:StreamJournalToKinesis',
  TAG_RESOURCE = 'qldb:TagResource',
  UNTAG_RESOURCE = 'qldb:UntagResource',
  UPDATE_LEDGER = 'qldb:UpdateLedger',
}
export enum CODESTAR {
  ASSOCIATE_TEAM_MEMBER = 'codestar:AssociateTeamMember',
  CREATE_PROJECT = 'codestar:CreateProject',
  CREATE_USER_PROFILE = 'codestar:CreateUserProfile',
  DELETE_EXTENDED_ACCESS = 'codestar:DeleteExtendedAccess',
  DELETE_PROJECT = 'codestar:DeleteProject',
  DELETE_USER_PROFILE = 'codestar:DeleteUserProfile',
  DESCRIBE_PROJECT = 'codestar:DescribeProject',
  DESCRIBE_USER_PROFILE = 'codestar:DescribeUserProfile',
  DISASSOCIATE_TEAM_MEMBER = 'codestar:DisassociateTeamMember',
  GET_EXTENDED_ACCESS = 'codestar:GetExtendedAccess',
  LIST_PROJECTS = 'codestar:ListProjects',
  LIST_RESOURCES = 'codestar:ListResources',
  LIST_TAGS_FOR_PROJECT = 'codestar:ListTagsForProject',
  LIST_TEAM_MEMBERS = 'codestar:ListTeamMembers',
  LIST_USER_PROFILES = 'codestar:ListUserProfiles',
  PUT_EXTENDED_ACCESS = 'codestar:PutExtendedAccess',
  TAG_PROJECT = 'codestar:TagProject',
  UNTAG_PROJECT = 'codestar:UntagProject',
  UPDATE_PROJECT = 'codestar:UpdateProject',
  UPDATE_TEAM_MEMBER = 'codestar:UpdateTeamMember',
  UPDATE_USER_PROFILE = 'codestar:UpdateUserProfile',
}
export enum CODEARTIFACT {
  ASSOCIATE_EXTERNAL_CONNECTION = 'codeartifact:AssociateExternalConnection',
  ASSOCIATE_WITH_DOWNSTREAM_REPOSITORY = 'codeartifact:AssociateWithDownstreamRepository',
  COPY_PACKAGE_VERSIONS = 'codeartifact:CopyPackageVersions',
  CREATE_DOMAIN = 'codeartifact:CreateDomain',
  CREATE_REPOSITORY = 'codeartifact:CreateRepository',
  DELETE_DOMAIN = 'codeartifact:DeleteDomain',
  DELETE_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:DeleteDomainPermissionsPolicy',
  DELETE_PACKAGE_VERSIONS = 'codeartifact:DeletePackageVersions',
  DELETE_REPOSITORY = 'codeartifact:DeleteRepository',
  DELETE_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:DeleteRepositoryPermissionsPolicy',
  DESCRIBE_DOMAIN = 'codeartifact:DescribeDomain',
  DESCRIBE_PACKAGE_VERSION = 'codeartifact:DescribePackageVersion',
  DESCRIBE_REPOSITORY = 'codeartifact:DescribeRepository',
  DISASSOCIATE_EXTERNAL_CONNECTION = 'codeartifact:DisassociateExternalConnection',
  DISPOSE_PACKAGE_VERSIONS = 'codeartifact:DisposePackageVersions',
  GET_AUTHORIZATION_TOKEN = 'codeartifact:GetAuthorizationToken',
  GET_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:GetDomainPermissionsPolicy',
  GET_PACKAGE_VERSION_ASSET = 'codeartifact:GetPackageVersionAsset',
  GET_PACKAGE_VERSION_README = 'codeartifact:GetPackageVersionReadme',
  GET_REPOSITORY_ENDPOINT = 'codeartifact:GetRepositoryEndpoint',
  GET_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:GetRepositoryPermissionsPolicy',
  LIST_DOMAINS = 'codeartifact:ListDomains',
  LIST_PACKAGE_VERSION_ASSETS = 'codeartifact:ListPackageVersionAssets',
  LIST_PACKAGE_VERSION_DEPENDENCIES = 'codeartifact:ListPackageVersionDependencies',
  LIST_PACKAGE_VERSIONS = 'codeartifact:ListPackageVersions',
  LIST_PACKAGES = 'codeartifact:ListPackages',
  LIST_REPOSITORIES = 'codeartifact:ListRepositories',
  LIST_REPOSITORIES_IN_DOMAIN = 'codeartifact:ListRepositoriesInDomain',
  PUBLISH_PACKAGE_VERSION = 'codeartifact:PublishPackageVersion',
  PUT_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:PutDomainPermissionsPolicy',
  PUT_PACKAGE_METADATA = 'codeartifact:PutPackageMetadata',
  PUT_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:PutRepositoryPermissionsPolicy',
  READ_FROM_REPOSITORY = 'codeartifact:ReadFromRepository',
  UPDATE_PACKAGE_VERSIONS_STATUS = 'codeartifact:UpdatePackageVersionsStatus',
  UPDATE_REPOSITORY = 'codeartifact:UpdateRepository',
}
export enum DIRECT_CONNECT {
  ACCEPT_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:AcceptDirectConnectGatewayAssociationProposal',
  ALLOCATE_CONNECTION_ON_INTERCONNECT = 'directconnect:AllocateConnectionOnInterconnect',
  ALLOCATE_HOSTED_CONNECTION = 'directconnect:AllocateHostedConnection',
  ALLOCATE_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:AllocatePrivateVirtualInterface',
  ALLOCATE_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:AllocatePublicVirtualInterface',
  ALLOCATE_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:AllocateTransitVirtualInterface',
  ASSOCIATE_CONNECTION_WITH_LAG = 'directconnect:AssociateConnectionWithLag',
  ASSOCIATE_HOSTED_CONNECTION = 'directconnect:AssociateHostedConnection',
  ASSOCIATE_VIRTUAL_INTERFACE = 'directconnect:AssociateVirtualInterface',
  CONFIRM_CONNECTION = 'directconnect:ConfirmConnection',
  CONFIRM_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:ConfirmPrivateVirtualInterface',
  CONFIRM_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:ConfirmPublicVirtualInterface',
  CONFIRM_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:ConfirmTransitVirtualInterface',
  CREATE_BGP_PEER = 'directconnect:CreateBGPPeer',
  CREATE_CONNECTION = 'directconnect:CreateConnection',
  CREATE_DIRECT_CONNECT_GATEWAY = 'directconnect:CreateDirectConnectGateway',
  CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:CreateDirectConnectGatewayAssociation',
  CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:CreateDirectConnectGatewayAssociationProposal',
  CREATE_INTERCONNECT = 'directconnect:CreateInterconnect',
  CREATE_LAG = 'directconnect:CreateLag',
  CREATE_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:CreatePrivateVirtualInterface',
  CREATE_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:CreatePublicVirtualInterface',
  CREATE_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:CreateTransitVirtualInterface',
  DELETE_BGP_PEER = 'directconnect:DeleteBGPPeer',
  DELETE_CONNECTION = 'directconnect:DeleteConnection',
  DELETE_DIRECT_CONNECT_GATEWAY = 'directconnect:DeleteDirectConnectGateway',
  DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:DeleteDirectConnectGatewayAssociation',
  DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:DeleteDirectConnectGatewayAssociationProposal',
  DELETE_INTERCONNECT = 'directconnect:DeleteInterconnect',
  DELETE_LAG = 'directconnect:DeleteLag',
  DELETE_VIRTUAL_INTERFACE = 'directconnect:DeleteVirtualInterface',
  DESCRIBE_CONNECTION_LOA = 'directconnect:DescribeConnectionLoa',
  DESCRIBE_CONNECTIONS = 'directconnect:DescribeConnections',
  DESCRIBE_CONNECTIONS_ON_INTERCONNECT = 'directconnect:DescribeConnectionsOnInterconnect',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSALS = 'directconnect:DescribeDirectConnectGatewayAssociationProposals',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATIONS = 'directconnect:DescribeDirectConnectGatewayAssociations',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ATTACHMENTS = 'directconnect:DescribeDirectConnectGatewayAttachments',
  DESCRIBE_DIRECT_CONNECT_GATEWAYS = 'directconnect:DescribeDirectConnectGateways',
  DESCRIBE_HOSTED_CONNECTIONS = 'directconnect:DescribeHostedConnections',
  DESCRIBE_INTERCONNECT_LOA = 'directconnect:DescribeInterconnectLoa',
  DESCRIBE_INTERCONNECTS = 'directconnect:DescribeInterconnects',
  DESCRIBE_LAGS = 'directconnect:DescribeLags',
  DESCRIBE_LOA = 'directconnect:DescribeLoa',
  DESCRIBE_LOCATIONS = 'directconnect:DescribeLocations',
  DESCRIBE_TAGS = 'directconnect:DescribeTags',
  DESCRIBE_VIRTUAL_GATEWAYS = 'directconnect:DescribeVirtualGateways',
  DESCRIBE_VIRTUAL_INTERFACES = 'directconnect:DescribeVirtualInterfaces',
  DISASSOCIATE_CONNECTION_FROM_LAG = 'directconnect:DisassociateConnectionFromLag',
  LIST_VIRTUAL_INTERFACE_TEST_HISTORY = 'directconnect:ListVirtualInterfaceTestHistory',
  START_BGP_FAILOVER_TEST = 'directconnect:StartBgpFailoverTest',
  STOP_BGP_FAILOVER_TEST = 'directconnect:StopBgpFailoverTest',
  TAG_RESOURCE = 'directconnect:TagResource',
  UNTAG_RESOURCE = 'directconnect:UntagResource',
  UPDATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:UpdateDirectConnectGatewayAssociation',
  UPDATE_LAG = 'directconnect:UpdateLag',
  UPDATE_VIRTUAL_INTERFACE_ATTRIBUTES = 'directconnect:UpdateVirtualInterfaceAttributes',
}
export enum NEPTUNE {
  CONNECT = 'neptune-db:connect',
}
export enum DATASYNC {
  CANCEL_TASK_EXECUTION = 'datasync:CancelTaskExecution',
  CREATE_AGENT = 'datasync:CreateAgent',
  CREATE_LOCATION_EFS = 'datasync:CreateLocationEfs',
  CREATE_LOCATION_FSX_WINDOWS = 'datasync:CreateLocationFsxWindows',
  CREATE_LOCATION_NFS = 'datasync:CreateLocationNfs',
  CREATE_LOCATION_OBJECT_STORAGE = 'datasync:CreateLocationObjectStorage',
  CREATE_LOCATION_S_3 = 'datasync:CreateLocationS3',
  CREATE_LOCATION_SMB = 'datasync:CreateLocationSmb',
  CREATE_TASK = 'datasync:CreateTask',
  DELETE_AGENT = 'datasync:DeleteAgent',
  DELETE_LOCATION = 'datasync:DeleteLocation',
  DELETE_TASK = 'datasync:DeleteTask',
  DESCRIBE_AGENT = 'datasync:DescribeAgent',
  DESCRIBE_LOCATION_EFS = 'datasync:DescribeLocationEfs',
  DESCRIBE_LOCATION_FSX_WINDOWS = 'datasync:DescribeLocationFsxWindows',
  DESCRIBE_LOCATION_NFS = 'datasync:DescribeLocationNfs',
  DESCRIBE_LOCATION_OBJECT_STORAGE = 'datasync:DescribeLocationObjectStorage',
  DESCRIBE_LOCATION_S_3 = 'datasync:DescribeLocationS3',
  DESCRIBE_LOCATION_SMB = 'datasync:DescribeLocationSmb',
  DESCRIBE_TASK = 'datasync:DescribeTask',
  DESCRIBE_TASK_EXECUTION = 'datasync:DescribeTaskExecution',
  LIST_AGENTS = 'datasync:ListAgents',
  LIST_LOCATIONS = 'datasync:ListLocations',
  LIST_TAGS_FOR_RESOURCE = 'datasync:ListTagsForResource',
  LIST_TASK_EXECUTIONS = 'datasync:ListTaskExecutions',
  LIST_TASKS = 'datasync:ListTasks',
  START_TASK_EXECUTION = 'datasync:StartTaskExecution',
  TAG_RESOURCE = 'datasync:TagResource',
  UNTAG_RESOURCE = 'datasync:UntagResource',
  UPDATE_AGENT = 'datasync:UpdateAgent',
  UPDATE_TASK = 'datasync:UpdateTask',
}
export enum ORGANIZATIONS {
  ACCEPT_HANDSHAKE = 'organizations:AcceptHandshake',
  ATTACH_POLICY = 'organizations:AttachPolicy',
  CANCEL_HANDSHAKE = 'organizations:CancelHandshake',
  CREATE_ACCOUNT = 'organizations:CreateAccount',
  CREATE_GOV_CLOUD_ACCOUNT = 'organizations:CreateGovCloudAccount',
  CREATE_ORGANIZATION = 'organizations:CreateOrganization',
  CREATE_ORGANIZATIONAL_UNIT = 'organizations:CreateOrganizationalUnit',
  CREATE_POLICY = 'organizations:CreatePolicy',
  DECLINE_HANDSHAKE = 'organizations:DeclineHandshake',
  DELETE_ORGANIZATION = 'organizations:DeleteOrganization',
  DELETE_ORGANIZATIONAL_UNIT = 'organizations:DeleteOrganizationalUnit',
  DELETE_POLICY = 'organizations:DeletePolicy',
  DEREGISTER_DELEGATED_ADMINISTRATOR = 'organizations:DeregisterDelegatedAdministrator',
  DESCRIBE_ACCOUNT = 'organizations:DescribeAccount',
  DESCRIBE_CREATE_ACCOUNT_STATUS = 'organizations:DescribeCreateAccountStatus',
  DESCRIBE_EFFECTIVE_POLICY = 'organizations:DescribeEffectivePolicy',
  DESCRIBE_HANDSHAKE = 'organizations:DescribeHandshake',
  DESCRIBE_ORGANIZATION = 'organizations:DescribeOrganization',
  DESCRIBE_ORGANIZATIONAL_UNIT = 'organizations:DescribeOrganizationalUnit',
  DESCRIBE_POLICY = 'organizations:DescribePolicy',
  DETACH_POLICY = 'organizations:DetachPolicy',
  DISABLE_AWS_SERVICE_ACCESS = 'organizations:DisableAWSServiceAccess',
  DISABLE_POLICY_TYPE = 'organizations:DisablePolicyType',
  ENABLE_AWS_SERVICE_ACCESS = 'organizations:EnableAWSServiceAccess',
  ENABLE_ALL_FEATURES = 'organizations:EnableAllFeatures',
  ENABLE_POLICY_TYPE = 'organizations:EnablePolicyType',
  INVITE_ACCOUNT_TO_ORGANIZATION = 'organizations:InviteAccountToOrganization',
  LEAVE_ORGANIZATION = 'organizations:LeaveOrganization',
  LIST_AWS_SERVICE_ACCESS_FOR_ORGANIZATION = 'organizations:ListAWSServiceAccessForOrganization',
  LIST_ACCOUNTS = 'organizations:ListAccounts',
  LIST_ACCOUNTS_FOR_PARENT = 'organizations:ListAccountsForParent',
  LIST_CHILDREN = 'organizations:ListChildren',
  LIST_CREATE_ACCOUNT_STATUS = 'organizations:ListCreateAccountStatus',
  LIST_DELEGATED_ADMINISTRATORS = 'organizations:ListDelegatedAdministrators',
  LIST_DELEGATED_SERVICES_FOR_ACCOUNT = 'organizations:ListDelegatedServicesForAccount',
  LIST_HANDSHAKES_FOR_ACCOUNT = 'organizations:ListHandshakesForAccount',
  LIST_HANDSHAKES_FOR_ORGANIZATION = 'organizations:ListHandshakesForOrganization',
  LIST_ORGANIZATIONAL_UNITS_FOR_PARENT = 'organizations:ListOrganizationalUnitsForParent',
  LIST_PARENTS = 'organizations:ListParents',
  LIST_POLICIES = 'organizations:ListPolicies',
  LIST_POLICIES_FOR_TARGET = 'organizations:ListPoliciesForTarget',
  LIST_ROOTS = 'organizations:ListRoots',
  LIST_TAGS_FOR_RESOURCE = 'organizations:ListTagsForResource',
  LIST_TARGETS_FOR_POLICY = 'organizations:ListTargetsForPolicy',
  MOVE_ACCOUNT = 'organizations:MoveAccount',
  REGISTER_DELEGATED_ADMINISTRATOR = 'organizations:RegisterDelegatedAdministrator',
  REMOVE_ACCOUNT_FROM_ORGANIZATION = 'organizations:RemoveAccountFromOrganization',
  TAG_RESOURCE = 'organizations:TagResource',
  UNTAG_RESOURCE = 'organizations:UntagResource',
  UPDATE_ORGANIZATIONAL_UNIT = 'organizations:UpdateOrganizationalUnit',
  UPDATE_POLICY = 'organizations:UpdatePolicy',
}
export enum PERFORMANCE_INSIGHTS {
  DESCRIBE_DIMENSION_KEYS = 'pi:DescribeDimensionKeys',
  GET_RESOURCE_METRICS = 'pi:GetResourceMetrics',
}
export enum KINESIS_ANALYTICS_V2 {
  ADD_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'kinesisanalytics:AddApplicationCloudWatchLoggingOption',
  ADD_APPLICATION_INPUT = 'kinesisanalytics:AddApplicationInput',
  ADD_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'kinesisanalytics:AddApplicationInputProcessingConfiguration',
  ADD_APPLICATION_OUTPUT = 'kinesisanalytics:AddApplicationOutput',
  ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:AddApplicationReferenceDataSource',
  ADD_APPLICATION_VPC_CONFIGURATION = 'kinesisanalytics:AddApplicationVpcConfiguration',
  CREATE_APPLICATION = 'kinesisanalytics:CreateApplication',
  CREATE_APPLICATION_SNAPSHOT = 'kinesisanalytics:CreateApplicationSnapshot',
  DELETE_APPLICATION = 'kinesisanalytics:DeleteApplication',
  DELETE_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'kinesisanalytics:DeleteApplicationCloudWatchLoggingOption',
  DELETE_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'kinesisanalytics:DeleteApplicationInputProcessingConfiguration',
  DELETE_APPLICATION_OUTPUT = 'kinesisanalytics:DeleteApplicationOutput',
  DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:DeleteApplicationReferenceDataSource',
  DELETE_APPLICATION_SNAPSHOT = 'kinesisanalytics:DeleteApplicationSnapshot',
  DELETE_APPLICATION_VPC_CONFIGURATION = 'kinesisanalytics:DeleteApplicationVpcConfiguration',
  DESCRIBE_APPLICATION = 'kinesisanalytics:DescribeApplication',
  DESCRIBE_APPLICATION_SNAPSHOT = 'kinesisanalytics:DescribeApplicationSnapshot',
  DISCOVER_INPUT_SCHEMA = 'kinesisanalytics:DiscoverInputSchema',
  LIST_APPLICATION_SNAPSHOTS = 'kinesisanalytics:ListApplicationSnapshots',
  LIST_APPLICATIONS = 'kinesisanalytics:ListApplications',
  LIST_TAGS_FOR_RESOURCE = 'kinesisanalytics:ListTagsForResource',
  START_APPLICATION = 'kinesisanalytics:StartApplication',
  STOP_APPLICATION = 'kinesisanalytics:StopApplication',
  TAG_RESOURCE = 'kinesisanalytics:TagResource',
  UNTAG_RESOURCE = 'kinesisanalytics:UntagResource',
  UPDATE_APPLICATION = 'kinesisanalytics:UpdateApplication',
}
export enum KINESIS_ANALYTICS {
  ADD_APPLICATION_INPUT = 'kinesisanalytics:AddApplicationInput',
  ADD_APPLICATION_OUTPUT = 'kinesisanalytics:AddApplicationOutput',
  ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:AddApplicationReferenceDataSource',
  CREATE_APPLICATION = 'kinesisanalytics:CreateApplication',
  DELETE_APPLICATION = 'kinesisanalytics:DeleteApplication',
  DELETE_APPLICATION_OUTPUT = 'kinesisanalytics:DeleteApplicationOutput',
  DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:DeleteApplicationReferenceDataSource',
  DESCRIBE_APPLICATION = 'kinesisanalytics:DescribeApplication',
  DISCOVER_INPUT_SCHEMA = 'kinesisanalytics:DiscoverInputSchema',
  GET_APPLICATION_STATE = 'kinesisanalytics:GetApplicationState',
  LIST_APPLICATIONS = 'kinesisanalytics:ListApplications',
  LIST_TAGS_FOR_RESOURCE = 'kinesisanalytics:ListTagsForResource',
  START_APPLICATION = 'kinesisanalytics:StartApplication',
  STOP_APPLICATION = 'kinesisanalytics:StopApplication',
  TAG_RESOURCE = 'kinesisanalytics:TagResource',
  UNTAG_RESOURCE = 'kinesisanalytics:UntagResource',
  UPDATE_APPLICATION = 'kinesisanalytics:UpdateApplication',
}
export enum ACCOUNTS {
  DISABLE_REGION = 'account:DisableRegion',
  ENABLE_REGION = 'account:EnableRegion',
  LIST_REGIONS = 'account:ListRegions',
}
