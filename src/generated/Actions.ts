export const version = {
	version: '2022-12-30T09:31:39.735Z', 
	hash: 'dc79ebb346e31709d48923d9dbe604c4', 
}; 

export enum COMPREHEND {
	BATCH_DETECT_DOMINANT_LANGUAGE = 'comprehend:BatchDetectDominantLanguage',
	BATCH_DETECT_ENTITIES = 'comprehend:BatchDetectEntities',
	BATCH_DETECT_KEY_PHRASES = 'comprehend:BatchDetectKeyPhrases',
	BATCH_DETECT_SENTIMENT = 'comprehend:BatchDetectSentiment',
	BATCH_DETECT_SYNTAX = 'comprehend:BatchDetectSyntax',
	BATCH_DETECT_TARGETED_SENTIMENT = 'comprehend:BatchDetectTargetedSentiment',
	CLASSIFY_DOCUMENT = 'comprehend:ClassifyDocument',
	CONTAINS_PII_ENTITIES = 'comprehend:ContainsPiiEntities',
	CREATE_DOCUMENT_CLASSIFIER = 'comprehend:CreateDocumentClassifier',
	CREATE_ENDPOINT = 'comprehend:CreateEndpoint',
	CREATE_ENTITY_RECOGNIZER = 'comprehend:CreateEntityRecognizer',
	DELETE_DOCUMENT_CLASSIFIER = 'comprehend:DeleteDocumentClassifier',
	DELETE_ENDPOINT = 'comprehend:DeleteEndpoint',
	DELETE_ENTITY_RECOGNIZER = 'comprehend:DeleteEntityRecognizer',
	DELETE_RESOURCE_POLICY = 'comprehend:DeleteResourcePolicy',
	DESCRIBE_DOCUMENT_CLASSIFICATION_JOB = 'comprehend:DescribeDocumentClassificationJob',
	DESCRIBE_DOCUMENT_CLASSIFIER = 'comprehend:DescribeDocumentClassifier',
	DESCRIBE_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:DescribeDominantLanguageDetectionJob',
	DESCRIBE_ENDPOINT = 'comprehend:DescribeEndpoint',
	DESCRIBE_ENTITIES_DETECTION_JOB = 'comprehend:DescribeEntitiesDetectionJob',
	DESCRIBE_ENTITY_RECOGNIZER = 'comprehend:DescribeEntityRecognizer',
	DESCRIBE_EVENTS_DETECTION_JOB = 'comprehend:DescribeEventsDetectionJob',
	DESCRIBE_KEY_PHRASES_DETECTION_JOB = 'comprehend:DescribeKeyPhrasesDetectionJob',
	DESCRIBE_PII_ENTITIES_DETECTION_JOB = 'comprehend:DescribePiiEntitiesDetectionJob',
	DESCRIBE_RESOURCE_POLICY = 'comprehend:DescribeResourcePolicy',
	DESCRIBE_SENTIMENT_DETECTION_JOB = 'comprehend:DescribeSentimentDetectionJob',
	DESCRIBE_TARGETED_SENTIMENT_DETECTION_JOB = 'comprehend:DescribeTargetedSentimentDetectionJob',
	DESCRIBE_TOPICS_DETECTION_JOB = 'comprehend:DescribeTopicsDetectionJob',
	DETECT_DOMINANT_LANGUAGE = 'comprehend:DetectDominantLanguage',
	DETECT_ENTITIES = 'comprehend:DetectEntities',
	DETECT_KEY_PHRASES = 'comprehend:DetectKeyPhrases',
	DETECT_PII_ENTITIES = 'comprehend:DetectPiiEntities',
	DETECT_SENTIMENT = 'comprehend:DetectSentiment',
	DETECT_SYNTAX = 'comprehend:DetectSyntax',
	DETECT_TARGETED_SENTIMENT = 'comprehend:DetectTargetedSentiment',
	IMPORT_MODEL = 'comprehend:ImportModel',
	LIST_DOCUMENT_CLASSIFICATION_JOBS = 'comprehend:ListDocumentClassificationJobs',
	LIST_DOCUMENT_CLASSIFIER_SUMMARIES = 'comprehend:ListDocumentClassifierSummaries',
	LIST_DOCUMENT_CLASSIFIERS = 'comprehend:ListDocumentClassifiers',
	LIST_DOMINANT_LANGUAGE_DETECTION_JOBS = 'comprehend:ListDominantLanguageDetectionJobs',
	LIST_ENDPOINTS = 'comprehend:ListEndpoints',
	LIST_ENTITIES_DETECTION_JOBS = 'comprehend:ListEntitiesDetectionJobs',
	LIST_ENTITY_RECOGNIZER_SUMMARIES = 'comprehend:ListEntityRecognizerSummaries',
	LIST_ENTITY_RECOGNIZERS = 'comprehend:ListEntityRecognizers',
	LIST_EVENTS_DETECTION_JOBS = 'comprehend:ListEventsDetectionJobs',
	LIST_KEY_PHRASES_DETECTION_JOBS = 'comprehend:ListKeyPhrasesDetectionJobs',
	LIST_PII_ENTITIES_DETECTION_JOBS = 'comprehend:ListPiiEntitiesDetectionJobs',
	LIST_SENTIMENT_DETECTION_JOBS = 'comprehend:ListSentimentDetectionJobs',
	LIST_TAGS_FOR_RESOURCE = 'comprehend:ListTagsForResource',
	LIST_TARGETED_SENTIMENT_DETECTION_JOBS = 'comprehend:ListTargetedSentimentDetectionJobs',
	LIST_TOPICS_DETECTION_JOBS = 'comprehend:ListTopicsDetectionJobs',
	PUT_RESOURCE_POLICY = 'comprehend:PutResourcePolicy',
	START_DOCUMENT_CLASSIFICATION_JOB = 'comprehend:StartDocumentClassificationJob',
	START_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:StartDominantLanguageDetectionJob',
	START_ENTITIES_DETECTION_JOB = 'comprehend:StartEntitiesDetectionJob',
	START_EVENTS_DETECTION_JOB = 'comprehend:StartEventsDetectionJob',
	START_KEY_PHRASES_DETECTION_JOB = 'comprehend:StartKeyPhrasesDetectionJob',
	START_PII_ENTITIES_DETECTION_JOB = 'comprehend:StartPiiEntitiesDetectionJob',
	START_SENTIMENT_DETECTION_JOB = 'comprehend:StartSentimentDetectionJob',
	START_TARGETED_SENTIMENT_DETECTION_JOB = 'comprehend:StartTargetedSentimentDetectionJob',
	START_TOPICS_DETECTION_JOB = 'comprehend:StartTopicsDetectionJob',
	STOP_DOMINANT_LANGUAGE_DETECTION_JOB = 'comprehend:StopDominantLanguageDetectionJob',
	STOP_ENTITIES_DETECTION_JOB = 'comprehend:StopEntitiesDetectionJob',
	STOP_EVENTS_DETECTION_JOB = 'comprehend:StopEventsDetectionJob',
	STOP_KEY_PHRASES_DETECTION_JOB = 'comprehend:StopKeyPhrasesDetectionJob',
	STOP_PII_ENTITIES_DETECTION_JOB = 'comprehend:StopPiiEntitiesDetectionJob',
	STOP_SENTIMENT_DETECTION_JOB = 'comprehend:StopSentimentDetectionJob',
	STOP_TARGETED_SENTIMENT_DETECTION_JOB = 'comprehend:StopTargetedSentimentDetectionJob',
	STOP_TRAINING_DOCUMENT_CLASSIFIER = 'comprehend:StopTrainingDocumentClassifier',
	STOP_TRAINING_ENTITY_RECOGNIZER = 'comprehend:StopTrainingEntityRecognizer',
	TAG_RESOURCE = 'comprehend:TagResource',
	UNTAG_RESOURCE = 'comprehend:UntagResource',
	UPDATE_ENDPOINT = 'comprehend:UpdateEndpoint',
}
export enum ELASTIC_FILE_SYSTEM {
	BACKUP = 'elasticfilesystem:Backup',
	CLIENT_MOUNT = 'elasticfilesystem:ClientMount',
	CLIENT_ROOT_ACCESS = 'elasticfilesystem:ClientRootAccess',
	CLIENT_WRITE = 'elasticfilesystem:ClientWrite',
	CREATE_ACCESS_POINT = 'elasticfilesystem:CreateAccessPoint',
	CREATE_FILE_SYSTEM = 'elasticfilesystem:CreateFileSystem',
	CREATE_MOUNT_TARGET = 'elasticfilesystem:CreateMountTarget',
	CREATE_REPLICATION_CONFIGURATION = 'elasticfilesystem:CreateReplicationConfiguration',
	CREATE_TAGS = 'elasticfilesystem:CreateTags',
	DELETE_ACCESS_POINT = 'elasticfilesystem:DeleteAccessPoint',
	DELETE_FILE_SYSTEM = 'elasticfilesystem:DeleteFileSystem',
	DELETE_FILE_SYSTEM_POLICY = 'elasticfilesystem:DeleteFileSystemPolicy',
	DELETE_MOUNT_TARGET = 'elasticfilesystem:DeleteMountTarget',
	DELETE_REPLICATION_CONFIGURATION = 'elasticfilesystem:DeleteReplicationConfiguration',
	DELETE_TAGS = 'elasticfilesystem:DeleteTags',
	DESCRIBE_ACCESS_POINTS = 'elasticfilesystem:DescribeAccessPoints',
	DESCRIBE_ACCOUNT_PREFERENCES = 'elasticfilesystem:DescribeAccountPreferences',
	DESCRIBE_BACKUP_POLICY = 'elasticfilesystem:DescribeBackupPolicy',
	DESCRIBE_FILE_SYSTEM_POLICY = 'elasticfilesystem:DescribeFileSystemPolicy',
	DESCRIBE_FILE_SYSTEMS = 'elasticfilesystem:DescribeFileSystems',
	DESCRIBE_LIFECYCLE_CONFIGURATION = 'elasticfilesystem:DescribeLifecycleConfiguration',
	DESCRIBE_MOUNT_TARGET_SECURITY_GROUPS = 'elasticfilesystem:DescribeMountTargetSecurityGroups',
	DESCRIBE_MOUNT_TARGETS = 'elasticfilesystem:DescribeMountTargets',
	DESCRIBE_REPLICATION_CONFIGURATIONS = 'elasticfilesystem:DescribeReplicationConfigurations',
	DESCRIBE_TAGS = 'elasticfilesystem:DescribeTags',
	LIST_TAGS_FOR_RESOURCE = 'elasticfilesystem:ListTagsForResource',
	MODIFY_MOUNT_TARGET_SECURITY_GROUPS = 'elasticfilesystem:ModifyMountTargetSecurityGroups',
	PUT_ACCOUNT_PREFERENCES = 'elasticfilesystem:PutAccountPreferences',
	PUT_BACKUP_POLICY = 'elasticfilesystem:PutBackupPolicy',
	PUT_FILE_SYSTEM_POLICY = 'elasticfilesystem:PutFileSystemPolicy',
	PUT_LIFECYCLE_CONFIGURATION = 'elasticfilesystem:PutLifecycleConfiguration',
	RESTORE = 'elasticfilesystem:Restore',
	TAG_RESOURCE = 'elasticfilesystem:TagResource',
	UNTAG_RESOURCE = 'elasticfilesystem:UntagResource',
	UPDATE_FILE_SYSTEM = 'elasticfilesystem:UpdateFileSystem',
}
export enum GLUE {
	BATCH_CREATE_PARTITION = 'glue:BatchCreatePartition',
	BATCH_DELETE_CONNECTION = 'glue:BatchDeleteConnection',
	BATCH_DELETE_PARTITION = 'glue:BatchDeletePartition',
	BATCH_DELETE_TABLE = 'glue:BatchDeleteTable',
	BATCH_DELETE_TABLE_VERSION = 'glue:BatchDeleteTableVersion',
	BATCH_GET_BLUEPRINTS = 'glue:BatchGetBlueprints',
	BATCH_GET_CRAWLERS = 'glue:BatchGetCrawlers',
	BATCH_GET_CUSTOM_ENTITY_TYPES = 'glue:BatchGetCustomEntityTypes',
	BATCH_GET_DEV_ENDPOINTS = 'glue:BatchGetDevEndpoints',
	BATCH_GET_JOBS = 'glue:BatchGetJobs',
	BATCH_GET_PARTITION = 'glue:BatchGetPartition',
	BATCH_GET_TRIGGERS = 'glue:BatchGetTriggers',
	BATCH_GET_WORKFLOWS = 'glue:BatchGetWorkflows',
	BATCH_STOP_JOB_RUN = 'glue:BatchStopJobRun',
	BATCH_UPDATE_PARTITION = 'glue:BatchUpdatePartition',
	CANCEL_DATA_QUALITY_RULE_RECOMMENDATION_RUN = 'glue:CancelDataQualityRuleRecommendationRun',
	CANCEL_DATA_QUALITY_RULESET_EVALUATION_RUN = 'glue:CancelDataQualityRulesetEvaluationRun',
	CANCEL_ML_TASK_RUN = 'glue:CancelMLTaskRun',
	CANCEL_STATEMENT = 'glue:CancelStatement',
	CHECK_SCHEMA_VERSION_VALIDITY = 'glue:CheckSchemaVersionValidity',
	CREATE_BLUEPRINT = 'glue:CreateBlueprint',
	CREATE_CLASSIFIER = 'glue:CreateClassifier',
	CREATE_CONNECTION = 'glue:CreateConnection',
	CREATE_CRAWLER = 'glue:CreateCrawler',
	CREATE_CUSTOM_ENTITY_TYPE = 'glue:CreateCustomEntityType',
	CREATE_DATA_QUALITY_RULESET = 'glue:CreateDataQualityRuleset',
	CREATE_DATABASE = 'glue:CreateDatabase',
	CREATE_DEV_ENDPOINT = 'glue:CreateDevEndpoint',
	CREATE_JOB = 'glue:CreateJob',
	CREATE_ML_TRANSFORM = 'glue:CreateMLTransform',
	CREATE_PARTITION = 'glue:CreatePartition',
	CREATE_PARTITION_INDEX = 'glue:CreatePartitionIndex',
	CREATE_REGISTRY = 'glue:CreateRegistry',
	CREATE_SCHEMA = 'glue:CreateSchema',
	CREATE_SCRIPT = 'glue:CreateScript',
	CREATE_SECURITY_CONFIGURATION = 'glue:CreateSecurityConfiguration',
	CREATE_SESSION = 'glue:CreateSession',
	CREATE_TABLE = 'glue:CreateTable',
	CREATE_TRIGGER = 'glue:CreateTrigger',
	CREATE_USER_DEFINED_FUNCTION = 'glue:CreateUserDefinedFunction',
	CREATE_WORKFLOW = 'glue:CreateWorkflow',
	DELETE_BLUEPRINT = 'glue:DeleteBlueprint',
	DELETE_CLASSIFIER = 'glue:DeleteClassifier',
	DELETE_COLUMN_STATISTICS_FOR_PARTITION = 'glue:DeleteColumnStatisticsForPartition',
	DELETE_COLUMN_STATISTICS_FOR_TABLE = 'glue:DeleteColumnStatisticsForTable',
	DELETE_CONNECTION = 'glue:DeleteConnection',
	DELETE_CRAWLER = 'glue:DeleteCrawler',
	DELETE_CUSTOM_ENTITY_TYPE = 'glue:DeleteCustomEntityType',
	DELETE_DATA_QUALITY_RULESET = 'glue:DeleteDataQualityRuleset',
	DELETE_DATABASE = 'glue:DeleteDatabase',
	DELETE_DEV_ENDPOINT = 'glue:DeleteDevEndpoint',
	DELETE_JOB = 'glue:DeleteJob',
	DELETE_ML_TRANSFORM = 'glue:DeleteMLTransform',
	DELETE_PARTITION = 'glue:DeletePartition',
	DELETE_PARTITION_INDEX = 'glue:DeletePartitionIndex',
	DELETE_REGISTRY = 'glue:DeleteRegistry',
	DELETE_RESOURCE_POLICY = 'glue:DeleteResourcePolicy',
	DELETE_SCHEMA = 'glue:DeleteSchema',
	DELETE_SCHEMA_VERSIONS = 'glue:DeleteSchemaVersions',
	DELETE_SECURITY_CONFIGURATION = 'glue:DeleteSecurityConfiguration',
	DELETE_SESSION = 'glue:DeleteSession',
	DELETE_TABLE = 'glue:DeleteTable',
	DELETE_TABLE_VERSION = 'glue:DeleteTableVersion',
	DELETE_TRIGGER = 'glue:DeleteTrigger',
	DELETE_USER_DEFINED_FUNCTION = 'glue:DeleteUserDefinedFunction',
	DELETE_WORKFLOW = 'glue:DeleteWorkflow',
	DEREGISTER_DATA_PREVIEW = 'glue:DeregisterDataPreview',
	GET_BLUEPRINT = 'glue:GetBlueprint',
	GET_BLUEPRINT_RUN = 'glue:GetBlueprintRun',
	GET_BLUEPRINT_RUNS = 'glue:GetBlueprintRuns',
	GET_CATALOG_IMPORT_STATUS = 'glue:GetCatalogImportStatus',
	GET_CLASSIFIER = 'glue:GetClassifier',
	GET_CLASSIFIERS = 'glue:GetClassifiers',
	GET_COLUMN_STATISTICS_FOR_PARTITION = 'glue:GetColumnStatisticsForPartition',
	GET_COLUMN_STATISTICS_FOR_TABLE = 'glue:GetColumnStatisticsForTable',
	GET_CONNECTION = 'glue:GetConnection',
	GET_CONNECTIONS = 'glue:GetConnections',
	GET_CRAWLER = 'glue:GetCrawler',
	GET_CRAWLER_METRICS = 'glue:GetCrawlerMetrics',
	GET_CRAWLERS = 'glue:GetCrawlers',
	GET_CUSTOM_ENTITY_TYPE = 'glue:GetCustomEntityType',
	GET_DATA_CATALOG_ENCRYPTION_SETTINGS = 'glue:GetDataCatalogEncryptionSettings',
	GET_DATA_QUALITY_RESULT = 'glue:GetDataQualityResult',
	GET_DATA_QUALITY_RULE_RECOMMENDATION_RUN = 'glue:GetDataQualityRuleRecommendationRun',
	GET_DATA_QUALITY_RULESET = 'glue:GetDataQualityRuleset',
	GET_DATA_QUALITY_RULESET_EVALUATION_RUN = 'glue:GetDataQualityRulesetEvaluationRun',
	GET_DATABASE = 'glue:GetDatabase',
	GET_DATABASES = 'glue:GetDatabases',
	GET_DATAFLOW_GRAPH = 'glue:GetDataflowGraph',
	GET_DEV_ENDPOINT = 'glue:GetDevEndpoint',
	GET_DEV_ENDPOINTS = 'glue:GetDevEndpoints',
	GET_JOB = 'glue:GetJob',
	GET_JOB_BOOKMARK = 'glue:GetJobBookmark',
	GET_JOB_RUN = 'glue:GetJobRun',
	GET_JOB_RUNS = 'glue:GetJobRuns',
	GET_JOBS = 'glue:GetJobs',
	GET_ML_TASK_RUN = 'glue:GetMLTaskRun',
	GET_ML_TASK_RUNS = 'glue:GetMLTaskRuns',
	GET_ML_TRANSFORM = 'glue:GetMLTransform',
	GET_ML_TRANSFORMS = 'glue:GetMLTransforms',
	GET_MAPPING = 'glue:GetMapping',
	GET_NOTEBOOK_INSTANCE_STATUS = 'glue:GetNotebookInstanceStatus',
	GET_PARTITION = 'glue:GetPartition',
	GET_PARTITION_INDEXES = 'glue:GetPartitionIndexes',
	GET_PARTITIONS = 'glue:GetPartitions',
	GET_PLAN = 'glue:GetPlan',
	GET_REGISTRY = 'glue:GetRegistry',
	GET_RESOURCE_POLICIES = 'glue:GetResourcePolicies',
	GET_RESOURCE_POLICY = 'glue:GetResourcePolicy',
	GET_SCHEMA = 'glue:GetSchema',
	GET_SCHEMA_BY_DEFINITION = 'glue:GetSchemaByDefinition',
	GET_SCHEMA_VERSION = 'glue:GetSchemaVersion',
	GET_SCHEMA_VERSIONS_DIFF = 'glue:GetSchemaVersionsDiff',
	GET_SECURITY_CONFIGURATION = 'glue:GetSecurityConfiguration',
	GET_SECURITY_CONFIGURATIONS = 'glue:GetSecurityConfigurations',
	GET_SESSION = 'glue:GetSession',
	GET_STATEMENT = 'glue:GetStatement',
	GET_TABLE = 'glue:GetTable',
	GET_TABLE_VERSION = 'glue:GetTableVersion',
	GET_TABLE_VERSIONS = 'glue:GetTableVersions',
	GET_TABLES = 'glue:GetTables',
	GET_TAGS = 'glue:GetTags',
	GET_TRIGGER = 'glue:GetTrigger',
	GET_TRIGGERS = 'glue:GetTriggers',
	GET_USER_DEFINED_FUNCTION = 'glue:GetUserDefinedFunction',
	GET_USER_DEFINED_FUNCTIONS = 'glue:GetUserDefinedFunctions',
	GET_WORKFLOW = 'glue:GetWorkflow',
	GET_WORKFLOW_RUN = 'glue:GetWorkflowRun',
	GET_WORKFLOW_RUN_PROPERTIES = 'glue:GetWorkflowRunProperties',
	GET_WORKFLOW_RUNS = 'glue:GetWorkflowRuns',
	GLUE_NOTEBOOK_AUTHORIZE = 'glue:GlueNotebookAuthorize',
	GLUE_NOTEBOOK_REFRESH_CREDENTIALS = 'glue:GlueNotebookRefreshCredentials',
	IMPORT_CATALOG_TO_GLUE = 'glue:ImportCatalogToGlue',
	LIST_BLUEPRINTS = 'glue:ListBlueprints',
	LIST_CRAWLERS = 'glue:ListCrawlers',
	LIST_CRAWLS = 'glue:ListCrawls',
	LIST_CUSTOM_ENTITY_TYPES = 'glue:ListCustomEntityTypes',
	LIST_DATA_QUALITY_RESULTS = 'glue:ListDataQualityResults',
	LIST_DATA_QUALITY_RULE_RECOMMENDATION_RUNS = 'glue:ListDataQualityRuleRecommendationRuns',
	LIST_DATA_QUALITY_RULESET_EVALUATION_RUNS = 'glue:ListDataQualityRulesetEvaluationRuns',
	LIST_DATA_QUALITY_RULESETS = 'glue:ListDataQualityRulesets',
	LIST_DEV_ENDPOINTS = 'glue:ListDevEndpoints',
	LIST_JOBS = 'glue:ListJobs',
	LIST_ML_TRANSFORMS = 'glue:ListMLTransforms',
	LIST_REGISTRIES = 'glue:ListRegistries',
	LIST_SCHEMA_VERSIONS = 'glue:ListSchemaVersions',
	LIST_SCHEMAS = 'glue:ListSchemas',
	LIST_SESSIONS = 'glue:ListSessions',
	LIST_STATEMENTS = 'glue:ListStatements',
	LIST_TRIGGERS = 'glue:ListTriggers',
	LIST_WORKFLOWS = 'glue:ListWorkflows',
	NOTIFY_EVENT = 'glue:NotifyEvent',
	PUBLISH_DATA_QUALITY = 'glue:PublishDataQuality',
	PUT_DATA_CATALOG_ENCRYPTION_SETTINGS = 'glue:PutDataCatalogEncryptionSettings',
	PUT_RESOURCE_POLICY = 'glue:PutResourcePolicy',
	PUT_SCHEMA_VERSION_METADATA = 'glue:PutSchemaVersionMetadata',
	PUT_WORKFLOW_RUN_PROPERTIES = 'glue:PutWorkflowRunProperties',
	QUERY_SCHEMA_VERSION_METADATA = 'glue:QuerySchemaVersionMetadata',
	REGISTER_SCHEMA_VERSION = 'glue:RegisterSchemaVersion',
	REMOVE_SCHEMA_VERSION_METADATA = 'glue:RemoveSchemaVersionMetadata',
	RESET_JOB_BOOKMARK = 'glue:ResetJobBookmark',
	RESUME_WORKFLOW_RUN = 'glue:ResumeWorkflowRun',
	RUN_STATEMENT = 'glue:RunStatement',
	SEARCH_TABLES = 'glue:SearchTables',
	START_BLUEPRINT_RUN = 'glue:StartBlueprintRun',
	START_CRAWLER = 'glue:StartCrawler',
	START_CRAWLER_SCHEDULE = 'glue:StartCrawlerSchedule',
	START_DATA_QUALITY_RULE_RECOMMENDATION_RUN = 'glue:StartDataQualityRuleRecommendationRun',
	START_DATA_QUALITY_RULESET_EVALUATION_RUN = 'glue:StartDataQualityRulesetEvaluationRun',
	START_EXPORT_LABELS_TASK_RUN = 'glue:StartExportLabelsTaskRun',
	START_IMPORT_LABELS_TASK_RUN = 'glue:StartImportLabelsTaskRun',
	START_JOB_RUN = 'glue:StartJobRun',
	START_ML_EVALUATION_TASK_RUN = 'glue:StartMLEvaluationTaskRun',
	START_ML_LABELING_SET_GENERATION_TASK_RUN = 'glue:StartMLLabelingSetGenerationTaskRun',
	START_NOTEBOOK = 'glue:StartNotebook',
	START_TRIGGER = 'glue:StartTrigger',
	START_WORKFLOW_RUN = 'glue:StartWorkflowRun',
	STOP_CRAWLER = 'glue:StopCrawler',
	STOP_CRAWLER_SCHEDULE = 'glue:StopCrawlerSchedule',
	STOP_SESSION = 'glue:StopSession',
	STOP_TRIGGER = 'glue:StopTrigger',
	STOP_WORKFLOW_RUN = 'glue:StopWorkflowRun',
	TAG_RESOURCE = 'glue:TagResource',
	TERMINATE_NOTEBOOK = 'glue:TerminateNotebook',
	UNTAG_RESOURCE = 'glue:UntagResource',
	UPDATE_BLUEPRINT = 'glue:UpdateBlueprint',
	UPDATE_CLASSIFIER = 'glue:UpdateClassifier',
	UPDATE_COLUMN_STATISTICS_FOR_PARTITION = 'glue:UpdateColumnStatisticsForPartition',
	UPDATE_COLUMN_STATISTICS_FOR_TABLE = 'glue:UpdateColumnStatisticsForTable',
	UPDATE_CONNECTION = 'glue:UpdateConnection',
	UPDATE_CRAWLER = 'glue:UpdateCrawler',
	UPDATE_CRAWLER_SCHEDULE = 'glue:UpdateCrawlerSchedule',
	UPDATE_DATA_QUALITY_RULESET = 'glue:UpdateDataQualityRuleset',
	UPDATE_DATABASE = 'glue:UpdateDatabase',
	UPDATE_DEV_ENDPOINT = 'glue:UpdateDevEndpoint',
	UPDATE_JOB = 'glue:UpdateJob',
	UPDATE_ML_TRANSFORM = 'glue:UpdateMLTransform',
	UPDATE_PARTITION = 'glue:UpdatePartition',
	UPDATE_REGISTRY = 'glue:UpdateRegistry',
	UPDATE_SCHEMA = 'glue:UpdateSchema',
	UPDATE_TABLE = 'glue:UpdateTable',
	UPDATE_TRIGGER = 'glue:UpdateTrigger',
	UPDATE_USER_DEFINED_FUNCTION = 'glue:UpdateUserDefinedFunction',
	UPDATE_WORKFLOW = 'glue:UpdateWorkflow',
	USE_GLUE_STUDIO = 'glue:UseGlueStudio',
	USE_ML_TRANSFORMS = 'glue:UseMLTransforms',
}
export enum CLOUDWATCH_EVIDENTLY {
	BATCH_EVALUATE_FEATURE = 'evidently:BatchEvaluateFeature',
	CREATE_EXPERIMENT = 'evidently:CreateExperiment',
	CREATE_FEATURE = 'evidently:CreateFeature',
	CREATE_LAUNCH = 'evidently:CreateLaunch',
	CREATE_PROJECT = 'evidently:CreateProject',
	CREATE_SEGMENT = 'evidently:CreateSegment',
	DELETE_EXPERIMENT = 'evidently:DeleteExperiment',
	DELETE_FEATURE = 'evidently:DeleteFeature',
	DELETE_LAUNCH = 'evidently:DeleteLaunch',
	DELETE_PROJECT = 'evidently:DeleteProject',
	DELETE_SEGMENT = 'evidently:DeleteSegment',
	EVALUATE_FEATURE = 'evidently:EvaluateFeature',
	GET_EXPERIMENT = 'evidently:GetExperiment',
	GET_EXPERIMENT_RESULTS = 'evidently:GetExperimentResults',
	GET_FEATURE = 'evidently:GetFeature',
	GET_LAUNCH = 'evidently:GetLaunch',
	GET_PROJECT = 'evidently:GetProject',
	GET_SEGMENT = 'evidently:GetSegment',
	LIST_EXPERIMENTS = 'evidently:ListExperiments',
	LIST_FEATURES = 'evidently:ListFeatures',
	LIST_LAUNCHES = 'evidently:ListLaunches',
	LIST_PROJECTS = 'evidently:ListProjects',
	LIST_SEGMENT_REFERENCES = 'evidently:ListSegmentReferences',
	LIST_SEGMENTS = 'evidently:ListSegments',
	LIST_TAGS_FOR_RESOURCE = 'evidently:ListTagsForResource',
	PUT_PROJECT_EVENTS = 'evidently:PutProjectEvents',
	START_EXPERIMENT = 'evidently:StartExperiment',
	START_LAUNCH = 'evidently:StartLaunch',
	STOP_EXPERIMENT = 'evidently:StopExperiment',
	STOP_LAUNCH = 'evidently:StopLaunch',
	TAG_RESOURCE = 'evidently:TagResource',
	TEST_SEGMENT_PATTERN = 'evidently:TestSegmentPattern',
	UNTAG_RESOURCE = 'evidently:UntagResource',
	UPDATE_EXPERIMENT = 'evidently:UpdateExperiment',
	UPDATE_FEATURE = 'evidently:UpdateFeature',
	UPDATE_LAUNCH = 'evidently:UpdateLaunch',
	UPDATE_PROJECT = 'evidently:UpdateProject',
	UPDATE_PROJECT_DATA_DELIVERY = 'evidently:UpdateProjectDataDelivery',
}
export enum SAVINGS_PLANS {
	CREATE_SAVINGS_PLAN = 'savingsplans:CreateSavingsPlan',
	DELETE_QUEUED_SAVINGS_PLAN = 'savingsplans:DeleteQueuedSavingsPlan',
	DESCRIBE_SAVINGS_PLAN_RATES = 'savingsplans:DescribeSavingsPlanRates',
	DESCRIBE_SAVINGS_PLANS = 'savingsplans:DescribeSavingsPlans',
	DESCRIBE_SAVINGS_PLANS_OFFERING_RATES = 'savingsplans:DescribeSavingsPlansOfferingRates',
	DESCRIBE_SAVINGS_PLANS_OFFERINGS = 'savingsplans:DescribeSavingsPlansOfferings',
	LIST_TAGS_FOR_RESOURCE = 'savingsplans:ListTagsForResource',
	TAG_RESOURCE = 'savingsplans:TagResource',
	UNTAG_RESOURCE = 'savingsplans:UntagResource',
}
export enum SYSTEMS_MANAGER {
	ADD_TAGS_TO_RESOURCE = 'ssm:AddTagsToResource',
	ASSOCIATE_OPS_ITEM_RELATED_ITEM = 'ssm:AssociateOpsItemRelatedItem',
	CANCEL_COMMAND = 'ssm:CancelCommand',
	CANCEL_MAINTENANCE_WINDOW_EXECUTION = 'ssm:CancelMaintenanceWindowExecution',
	CREATE_ACTIVATION = 'ssm:CreateActivation',
	CREATE_ASSOCIATION = 'ssm:CreateAssociation',
	CREATE_ASSOCIATION_BATCH = 'ssm:CreateAssociationBatch',
	CREATE_DOCUMENT = 'ssm:CreateDocument',
	CREATE_MAINTENANCE_WINDOW = 'ssm:CreateMaintenanceWindow',
	CREATE_OPS_ITEM = 'ssm:CreateOpsItem',
	CREATE_OPS_METADATA = 'ssm:CreateOpsMetadata',
	CREATE_PATCH_BASELINE = 'ssm:CreatePatchBaseline',
	CREATE_RESOURCE_DATA_SYNC = 'ssm:CreateResourceDataSync',
	DELETE_ACTIVATION = 'ssm:DeleteActivation',
	DELETE_ASSOCIATION = 'ssm:DeleteAssociation',
	DELETE_DOCUMENT = 'ssm:DeleteDocument',
	DELETE_INVENTORY = 'ssm:DeleteInventory',
	DELETE_MAINTENANCE_WINDOW = 'ssm:DeleteMaintenanceWindow',
	DELETE_OPS_METADATA = 'ssm:DeleteOpsMetadata',
	DELETE_PARAMETER = 'ssm:DeleteParameter',
	DELETE_PARAMETERS = 'ssm:DeleteParameters',
	DELETE_PATCH_BASELINE = 'ssm:DeletePatchBaseline',
	DELETE_RESOURCE_DATA_SYNC = 'ssm:DeleteResourceDataSync',
	DEREGISTER_MANAGED_INSTANCE = 'ssm:DeregisterManagedInstance',
	DEREGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:DeregisterPatchBaselineForPatchGroup',
	DEREGISTER_TARGET_FROM_MAINTENANCE_WINDOW = 'ssm:DeregisterTargetFromMaintenanceWindow',
	DEREGISTER_TASK_FROM_MAINTENANCE_WINDOW = 'ssm:DeregisterTaskFromMaintenanceWindow',
	DESCRIBE_ACTIVATIONS = 'ssm:DescribeActivations',
	DESCRIBE_ASSOCIATION = 'ssm:DescribeAssociation',
	DESCRIBE_ASSOCIATION_EXECUTION_TARGETS = 'ssm:DescribeAssociationExecutionTargets',
	DESCRIBE_ASSOCIATION_EXECUTIONS = 'ssm:DescribeAssociationExecutions',
	DESCRIBE_AUTOMATION_EXECUTIONS = 'ssm:DescribeAutomationExecutions',
	DESCRIBE_AUTOMATION_STEP_EXECUTIONS = 'ssm:DescribeAutomationStepExecutions',
	DESCRIBE_AVAILABLE_PATCHES = 'ssm:DescribeAvailablePatches',
	DESCRIBE_DOCUMENT = 'ssm:DescribeDocument',
	DESCRIBE_DOCUMENT_PARAMETERS = 'ssm:DescribeDocumentParameters',
	DESCRIBE_DOCUMENT_PERMISSION = 'ssm:DescribeDocumentPermission',
	DESCRIBE_EFFECTIVE_INSTANCE_ASSOCIATIONS = 'ssm:DescribeEffectiveInstanceAssociations',
	DESCRIBE_EFFECTIVE_PATCHES_FOR_PATCH_BASELINE = 'ssm:DescribeEffectivePatchesForPatchBaseline',
	DESCRIBE_INSTANCE_ASSOCIATIONS_STATUS = 'ssm:DescribeInstanceAssociationsStatus',
	DESCRIBE_INSTANCE_INFORMATION = 'ssm:DescribeInstanceInformation',
	DESCRIBE_INSTANCE_PATCH_STATES = 'ssm:DescribeInstancePatchStates',
	DESCRIBE_INSTANCE_PATCH_STATES_FOR_PATCH_GROUP = 'ssm:DescribeInstancePatchStatesForPatchGroup',
	DESCRIBE_INSTANCE_PATCHES = 'ssm:DescribeInstancePatches',
	DESCRIBE_INSTANCE_PROPERTIES = 'ssm:DescribeInstanceProperties',
	DESCRIBE_INVENTORY_DELETIONS = 'ssm:DescribeInventoryDeletions',
	DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATIONS = 'ssm:DescribeMaintenanceWindowExecutionTaskInvocations',
	DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASKS = 'ssm:DescribeMaintenanceWindowExecutionTasks',
	DESCRIBE_MAINTENANCE_WINDOW_EXECUTIONS = 'ssm:DescribeMaintenanceWindowExecutions',
	DESCRIBE_MAINTENANCE_WINDOW_SCHEDULE = 'ssm:DescribeMaintenanceWindowSchedule',
	DESCRIBE_MAINTENANCE_WINDOW_TARGETS = 'ssm:DescribeMaintenanceWindowTargets',
	DESCRIBE_MAINTENANCE_WINDOW_TASKS = 'ssm:DescribeMaintenanceWindowTasks',
	DESCRIBE_MAINTENANCE_WINDOWS = 'ssm:DescribeMaintenanceWindows',
	DESCRIBE_MAINTENANCE_WINDOWS_FOR_TARGET = 'ssm:DescribeMaintenanceWindowsForTarget',
	DESCRIBE_OPS_ITEMS = 'ssm:DescribeOpsItems',
	DESCRIBE_PARAMETERS = 'ssm:DescribeParameters',
	DESCRIBE_PATCH_BASELINES = 'ssm:DescribePatchBaselines',
	DESCRIBE_PATCH_GROUP_STATE = 'ssm:DescribePatchGroupState',
	DESCRIBE_PATCH_GROUPS = 'ssm:DescribePatchGroups',
	DESCRIBE_PATCH_PROPERTIES = 'ssm:DescribePatchProperties',
	DESCRIBE_SESSIONS = 'ssm:DescribeSessions',
	DISASSOCIATE_OPS_ITEM_RELATED_ITEM = 'ssm:DisassociateOpsItemRelatedItem',
	GET_AUTOMATION_EXECUTION = 'ssm:GetAutomationExecution',
	GET_CALENDAR = 'ssm:GetCalendar',
	GET_CALENDAR_STATE = 'ssm:GetCalendarState',
	GET_COMMAND_INVOCATION = 'ssm:GetCommandInvocation',
	GET_CONNECTION_STATUS = 'ssm:GetConnectionStatus',
	GET_DEFAULT_PATCH_BASELINE = 'ssm:GetDefaultPatchBaseline',
	GET_DEPLOYABLE_PATCH_SNAPSHOT_FOR_INSTANCE = 'ssm:GetDeployablePatchSnapshotForInstance',
	GET_DOCUMENT = 'ssm:GetDocument',
	GET_INVENTORY = 'ssm:GetInventory',
	GET_INVENTORY_SCHEMA = 'ssm:GetInventorySchema',
	GET_MAINTENANCE_WINDOW = 'ssm:GetMaintenanceWindow',
	GET_MAINTENANCE_WINDOW_EXECUTION = 'ssm:GetMaintenanceWindowExecution',
	GET_MAINTENANCE_WINDOW_EXECUTION_TASK = 'ssm:GetMaintenanceWindowExecutionTask',
	GET_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATION = 'ssm:GetMaintenanceWindowExecutionTaskInvocation',
	GET_MAINTENANCE_WINDOW_TASK = 'ssm:GetMaintenanceWindowTask',
	GET_MANIFEST = 'ssm:GetManifest',
	GET_OPS_ITEM = 'ssm:GetOpsItem',
	GET_OPS_METADATA = 'ssm:GetOpsMetadata',
	GET_OPS_SUMMARY = 'ssm:GetOpsSummary',
	GET_PARAMETER = 'ssm:GetParameter',
	GET_PARAMETER_HISTORY = 'ssm:GetParameterHistory',
	GET_PARAMETERS = 'ssm:GetParameters',
	GET_PARAMETERS_BY_PATH = 'ssm:GetParametersByPath',
	GET_PATCH_BASELINE = 'ssm:GetPatchBaseline',
	GET_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:GetPatchBaselineForPatchGroup',
	GET_SERVICE_SETTING = 'ssm:GetServiceSetting',
	LABEL_PARAMETER_VERSION = 'ssm:LabelParameterVersion',
	LIST_ASSOCIATION_VERSIONS = 'ssm:ListAssociationVersions',
	LIST_ASSOCIATIONS = 'ssm:ListAssociations',
	LIST_COMMAND_INVOCATIONS = 'ssm:ListCommandInvocations',
	LIST_COMMANDS = 'ssm:ListCommands',
	LIST_COMPLIANCE_ITEMS = 'ssm:ListComplianceItems',
	LIST_COMPLIANCE_SUMMARIES = 'ssm:ListComplianceSummaries',
	LIST_DOCUMENT_METADATA_HISTORY = 'ssm:ListDocumentMetadataHistory',
	LIST_DOCUMENT_VERSIONS = 'ssm:ListDocumentVersions',
	LIST_DOCUMENTS = 'ssm:ListDocuments',
	LIST_INSTANCE_ASSOCIATIONS = 'ssm:ListInstanceAssociations',
	LIST_INVENTORY_ENTRIES = 'ssm:ListInventoryEntries',
	LIST_OPS_ITEM_EVENTS = 'ssm:ListOpsItemEvents',
	LIST_OPS_ITEM_RELATED_ITEMS = 'ssm:ListOpsItemRelatedItems',
	LIST_OPS_METADATA = 'ssm:ListOpsMetadata',
	LIST_RESOURCE_COMPLIANCE_SUMMARIES = 'ssm:ListResourceComplianceSummaries',
	LIST_RESOURCE_DATA_SYNC = 'ssm:ListResourceDataSync',
	LIST_TAGS_FOR_RESOURCE = 'ssm:ListTagsForResource',
	MODIFY_DOCUMENT_PERMISSION = 'ssm:ModifyDocumentPermission',
	PUT_CALENDAR = 'ssm:PutCalendar',
	PUT_COMPLIANCE_ITEMS = 'ssm:PutComplianceItems',
	PUT_CONFIGURE_PACKAGE_RESULT = 'ssm:PutConfigurePackageResult',
	PUT_INVENTORY = 'ssm:PutInventory',
	PUT_PARAMETER = 'ssm:PutParameter',
	REGISTER_DEFAULT_PATCH_BASELINE = 'ssm:RegisterDefaultPatchBaseline',
	REGISTER_MANAGED_INSTANCE = 'ssm:RegisterManagedInstance',
	REGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'ssm:RegisterPatchBaselineForPatchGroup',
	REGISTER_TARGET_WITH_MAINTENANCE_WINDOW = 'ssm:RegisterTargetWithMaintenanceWindow',
	REGISTER_TASK_WITH_MAINTENANCE_WINDOW = 'ssm:RegisterTaskWithMaintenanceWindow',
	REMOVE_TAGS_FROM_RESOURCE = 'ssm:RemoveTagsFromResource',
	RESET_SERVICE_SETTING = 'ssm:ResetServiceSetting',
	RESUME_SESSION = 'ssm:ResumeSession',
	SEND_AUTOMATION_SIGNAL = 'ssm:SendAutomationSignal',
	SEND_COMMAND = 'ssm:SendCommand',
	START_ASSOCIATIONS_ONCE = 'ssm:StartAssociationsOnce',
	START_AUTOMATION_EXECUTION = 'ssm:StartAutomationExecution',
	START_CHANGE_REQUEST_EXECUTION = 'ssm:StartChangeRequestExecution',
	START_SESSION = 'ssm:StartSession',
	STOP_AUTOMATION_EXECUTION = 'ssm:StopAutomationExecution',
	TERMINATE_SESSION = 'ssm:TerminateSession',
	UNLABEL_PARAMETER_VERSION = 'ssm:UnlabelParameterVersion',
	UPDATE_ASSOCIATION = 'ssm:UpdateAssociation',
	UPDATE_ASSOCIATION_STATUS = 'ssm:UpdateAssociationStatus',
	UPDATE_DOCUMENT = 'ssm:UpdateDocument',
	UPDATE_DOCUMENT_DEFAULT_VERSION = 'ssm:UpdateDocumentDefaultVersion',
	UPDATE_DOCUMENT_METADATA = 'ssm:UpdateDocumentMetadata',
	UPDATE_INSTANCE_ASSOCIATION_STATUS = 'ssm:UpdateInstanceAssociationStatus',
	UPDATE_INSTANCE_INFORMATION = 'ssm:UpdateInstanceInformation',
	UPDATE_MAINTENANCE_WINDOW = 'ssm:UpdateMaintenanceWindow',
	UPDATE_MAINTENANCE_WINDOW_TARGET = 'ssm:UpdateMaintenanceWindowTarget',
	UPDATE_MAINTENANCE_WINDOW_TASK = 'ssm:UpdateMaintenanceWindowTask',
	UPDATE_MANAGED_INSTANCE_ROLE = 'ssm:UpdateManagedInstanceRole',
	UPDATE_OPS_ITEM = 'ssm:UpdateOpsItem',
	UPDATE_OPS_METADATA = 'ssm:UpdateOpsMetadata',
	UPDATE_PATCH_BASELINE = 'ssm:UpdatePatchBaseline',
	UPDATE_RESOURCE_DATA_SYNC = 'ssm:UpdateResourceDataSync',
	UPDATE_SERVICE_SETTING = 'ssm:UpdateServiceSetting',
}
export enum IAM_IDENTITY_CENTER_SUCCESSOR_TO_AWS_SINGLE_SIGNON {
	ASSOCIATE_DIRECTORY = 'sso:AssociateDirectory',
	ASSOCIATE_PROFILE = 'sso:AssociateProfile',
	ATTACH_CUSTOMER_MANAGED_POLICY_REFERENCE_TO_PERMISSION_SET = 'sso:AttachCustomerManagedPolicyReferenceToPermissionSet',
	ATTACH_MANAGED_POLICY_TO_PERMISSION_SET = 'sso:AttachManagedPolicyToPermissionSet',
	CREATE_ACCOUNT_ASSIGNMENT = 'sso:CreateAccountAssignment',
	CREATE_APPLICATION_INSTANCE = 'sso:CreateApplicationInstance',
	CREATE_APPLICATION_INSTANCE_CERTIFICATE = 'sso:CreateApplicationInstanceCertificate',
	CREATE_INSTANCE_ACCESS_CONTROL_ATTRIBUTE_CONFIGURATION = 'sso:CreateInstanceAccessControlAttributeConfiguration',
	CREATE_MANAGED_APPLICATION_INSTANCE = 'sso:CreateManagedApplicationInstance',
	CREATE_PERMISSION_SET = 'sso:CreatePermissionSet',
	CREATE_PROFILE = 'sso:CreateProfile',
	CREATE_TRUST = 'sso:CreateTrust',
	DELETE_ACCOUNT_ASSIGNMENT = 'sso:DeleteAccountAssignment',
	DELETE_APPLICATION_INSTANCE = 'sso:DeleteApplicationInstance',
	DELETE_APPLICATION_INSTANCE_CERTIFICATE = 'sso:DeleteApplicationInstanceCertificate',
	DELETE_INLINE_POLICY_FROM_PERMISSION_SET = 'sso:DeleteInlinePolicyFromPermissionSet',
	DELETE_INSTANCE_ACCESS_CONTROL_ATTRIBUTE_CONFIGURATION = 'sso:DeleteInstanceAccessControlAttributeConfiguration',
	DELETE_MANAGED_APPLICATION_INSTANCE = 'sso:DeleteManagedApplicationInstance',
	DELETE_PERMISSION_SET = 'sso:DeletePermissionSet',
	DELETE_PERMISSIONS_BOUNDARY_FROM_PERMISSION_SET = 'sso:DeletePermissionsBoundaryFromPermissionSet',
	DELETE_PERMISSIONS_POLICY = 'sso:DeletePermissionsPolicy',
	DELETE_PROFILE = 'sso:DeleteProfile',
	DESCRIBE_ACCOUNT_ASSIGNMENT_CREATION_STATUS = 'sso:DescribeAccountAssignmentCreationStatus',
	DESCRIBE_ACCOUNT_ASSIGNMENT_DELETION_STATUS = 'sso:DescribeAccountAssignmentDeletionStatus',
	DESCRIBE_INSTANCE_ACCESS_CONTROL_ATTRIBUTE_CONFIGURATION = 'sso:DescribeInstanceAccessControlAttributeConfiguration',
	DESCRIBE_PERMISSION_SET = 'sso:DescribePermissionSet',
	DESCRIBE_PERMISSION_SET_PROVISIONING_STATUS = 'sso:DescribePermissionSetProvisioningStatus',
	DESCRIBE_PERMISSIONS_POLICIES = 'sso:DescribePermissionsPolicies',
	DESCRIBE_REGISTERED_REGIONS = 'sso:DescribeRegisteredRegions',
	DETACH_CUSTOMER_MANAGED_POLICY_REFERENCE_FROM_PERMISSION_SET = 'sso:DetachCustomerManagedPolicyReferenceFromPermissionSet',
	DETACH_MANAGED_POLICY_FROM_PERMISSION_SET = 'sso:DetachManagedPolicyFromPermissionSet',
	DISASSOCIATE_DIRECTORY = 'sso:DisassociateDirectory',
	DISASSOCIATE_PROFILE = 'sso:DisassociateProfile',
	GET_APPLICATION_INSTANCE = 'sso:GetApplicationInstance',
	GET_APPLICATION_TEMPLATE = 'sso:GetApplicationTemplate',
	GET_INLINE_POLICY_FOR_PERMISSION_SET = 'sso:GetInlinePolicyForPermissionSet',
	GET_MANAGED_APPLICATION_INSTANCE = 'sso:GetManagedApplicationInstance',
	GET_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'sso:GetMfaDeviceManagementForDirectory',
	GET_PERMISSION_SET = 'sso:GetPermissionSet',
	GET_PERMISSIONS_BOUNDARY_FOR_PERMISSION_SET = 'sso:GetPermissionsBoundaryForPermissionSet',
	GET_PERMISSIONS_POLICY = 'sso:GetPermissionsPolicy',
	GET_PROFILE = 'sso:GetProfile',
	GET_SSO_STATUS = 'sso:GetSSOStatus',
	GET_SHARED_SSO_CONFIGURATION = 'sso:GetSharedSsoConfiguration',
	GET_SSO_CONFIGURATION = 'sso:GetSsoConfiguration',
	GET_TRUST = 'sso:GetTrust',
	IMPORT_APPLICATION_INSTANCE_SERVICE_PROVIDER_METADATA = 'sso:ImportApplicationInstanceServiceProviderMetadata',
	LIST_ACCOUNT_ASSIGNMENT_CREATION_STATUS = 'sso:ListAccountAssignmentCreationStatus',
	LIST_ACCOUNT_ASSIGNMENT_DELETION_STATUS = 'sso:ListAccountAssignmentDeletionStatus',
	LIST_ACCOUNT_ASSIGNMENTS = 'sso:ListAccountAssignments',
	LIST_ACCOUNTS_FOR_PROVISIONED_PERMISSION_SET = 'sso:ListAccountsForProvisionedPermissionSet',
	LIST_APPLICATION_INSTANCE_CERTIFICATES = 'sso:ListApplicationInstanceCertificates',
	LIST_APPLICATION_INSTANCES = 'sso:ListApplicationInstances',
	LIST_APPLICATION_TEMPLATES = 'sso:ListApplicationTemplates',
	LIST_APPLICATIONS = 'sso:ListApplications',
	LIST_CUSTOMER_MANAGED_POLICY_REFERENCES_IN_PERMISSION_SET = 'sso:ListCustomerManagedPolicyReferencesInPermissionSet',
	LIST_DIRECTORY_ASSOCIATIONS = 'sso:ListDirectoryAssociations',
	LIST_INSTANCES = 'sso:ListInstances',
	LIST_MANAGED_POLICIES_IN_PERMISSION_SET = 'sso:ListManagedPoliciesInPermissionSet',
	LIST_PERMISSION_SET_PROVISIONING_STATUS = 'sso:ListPermissionSetProvisioningStatus',
	LIST_PERMISSION_SETS = 'sso:ListPermissionSets',
	LIST_PERMISSION_SETS_PROVISIONED_TO_ACCOUNT = 'sso:ListPermissionSetsProvisionedToAccount',
	LIST_PROFILE_ASSOCIATIONS = 'sso:ListProfileAssociations',
	LIST_PROFILES = 'sso:ListProfiles',
	LIST_TAGS_FOR_RESOURCE = 'sso:ListTagsForResource',
	PROVISION_PERMISSION_SET = 'sso:ProvisionPermissionSet',
	PUT_APPLICATION_ASSIGNMENT_CONFIGURATION = 'sso:PutApplicationAssignmentConfiguration',
	PUT_INLINE_POLICY_TO_PERMISSION_SET = 'sso:PutInlinePolicyToPermissionSet',
	PUT_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'sso:PutMfaDeviceManagementForDirectory',
	PUT_PERMISSIONS_BOUNDARY_TO_PERMISSION_SET = 'sso:PutPermissionsBoundaryToPermissionSet',
	PUT_PERMISSIONS_POLICY = 'sso:PutPermissionsPolicy',
	SEARCH_GROUPS = 'sso:SearchGroups',
	SEARCH_USERS = 'sso:SearchUsers',
	START_SSO = 'sso:StartSSO',
	TAG_RESOURCE = 'sso:TagResource',
	UNTAG_RESOURCE = 'sso:UntagResource',
	UPDATE_APPLICATION_INSTANCE_ACTIVE_CERTIFICATE = 'sso:UpdateApplicationInstanceActiveCertificate',
	UPDATE_APPLICATION_INSTANCE_DISPLAY_DATA = 'sso:UpdateApplicationInstanceDisplayData',
	UPDATE_APPLICATION_INSTANCE_RESPONSE_CONFIGURATION = 'sso:UpdateApplicationInstanceResponseConfiguration',
	UPDATE_APPLICATION_INSTANCE_RESPONSE_SCHEMA_CONFIGURATION = 'sso:UpdateApplicationInstanceResponseSchemaConfiguration',
	UPDATE_APPLICATION_INSTANCE_SECURITY_CONFIGURATION = 'sso:UpdateApplicationInstanceSecurityConfiguration',
	UPDATE_APPLICATION_INSTANCE_SERVICE_PROVIDER_CONFIGURATION = 'sso:UpdateApplicationInstanceServiceProviderConfiguration',
	UPDATE_APPLICATION_INSTANCE_STATUS = 'sso:UpdateApplicationInstanceStatus',
	UPDATE_DIRECTORY_ASSOCIATION = 'sso:UpdateDirectoryAssociation',
	UPDATE_INSTANCE_ACCESS_CONTROL_ATTRIBUTE_CONFIGURATION = 'sso:UpdateInstanceAccessControlAttributeConfiguration',
	UPDATE_MANAGED_APPLICATION_INSTANCE_STATUS = 'sso:UpdateManagedApplicationInstanceStatus',
	UPDATE_PERMISSION_SET = 'sso:UpdatePermissionSet',
	UPDATE_PROFILE = 'sso:UpdateProfile',
	UPDATE_SSO_CONFIGURATION = 'sso:UpdateSSOConfiguration',
	UPDATE_TRUST = 'sso:UpdateTrust',
}
export enum IOT {
	ACCEPT_CERTIFICATE_TRANSFER = 'iot:AcceptCertificateTransfer',
	ADD_THING_TO_BILLING_GROUP = 'iot:AddThingToBillingGroup',
	ADD_THING_TO_THING_GROUP = 'iot:AddThingToThingGroup',
	ASSOCIATE_TARGETS_WITH_JOB = 'iot:AssociateTargetsWithJob',
	ATTACH_POLICY = 'iot:AttachPolicy',
	ATTACH_PRINCIPAL_POLICY = 'iot:AttachPrincipalPolicy',
	ATTACH_SECURITY_PROFILE = 'iot:AttachSecurityProfile',
	ATTACH_THING_PRINCIPAL = 'iot:AttachThingPrincipal',
	CANCEL_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:CancelAuditMitigationActionsTask',
	CANCEL_AUDIT_TASK = 'iot:CancelAuditTask',
	CANCEL_CERTIFICATE_TRANSFER = 'iot:CancelCertificateTransfer',
	CANCEL_DETECT_MITIGATION_ACTIONS_TASK = 'iot:CancelDetectMitigationActionsTask',
	CANCEL_JOB = 'iot:CancelJob',
	CANCEL_JOB_EXECUTION = 'iot:CancelJobExecution',
	CLEAR_DEFAULT_AUTHORIZER = 'iot:ClearDefaultAuthorizer',
	CLOSE_TUNNEL = 'iot:CloseTunnel',
	CONFIRM_TOPIC_RULE_DESTINATION = 'iot:ConfirmTopicRuleDestination',
	CONNECT = 'iot:Connect',
	CREATE_AUDIT_SUPPRESSION = 'iot:CreateAuditSuppression',
	CREATE_AUTHORIZER = 'iot:CreateAuthorizer',
	CREATE_BILLING_GROUP = 'iot:CreateBillingGroup',
	CREATE_CERTIFICATE_FROM_CSR = 'iot:CreateCertificateFromCsr',
	CREATE_CUSTOM_METRIC = 'iot:CreateCustomMetric',
	CREATE_DIMENSION = 'iot:CreateDimension',
	CREATE_DOMAIN_CONFIGURATION = 'iot:CreateDomainConfiguration',
	CREATE_DYNAMIC_THING_GROUP = 'iot:CreateDynamicThingGroup',
	CREATE_FLEET_METRIC = 'iot:CreateFleetMetric',
	CREATE_JOB = 'iot:CreateJob',
	CREATE_JOB_TEMPLATE = 'iot:CreateJobTemplate',
	CREATE_KEYS_AND_CERTIFICATE = 'iot:CreateKeysAndCertificate',
	CREATE_MITIGATION_ACTION = 'iot:CreateMitigationAction',
	CREATE_OTA_UPDATE = 'iot:CreateOTAUpdate',
	CREATE_POLICY = 'iot:CreatePolicy',
	CREATE_POLICY_VERSION = 'iot:CreatePolicyVersion',
	CREATE_PROVISIONING_CLAIM = 'iot:CreateProvisioningClaim',
	CREATE_PROVISIONING_TEMPLATE = 'iot:CreateProvisioningTemplate',
	CREATE_PROVISIONING_TEMPLATE_VERSION = 'iot:CreateProvisioningTemplateVersion',
	CREATE_ROLE_ALIAS = 'iot:CreateRoleAlias',
	CREATE_SCHEDULED_AUDIT = 'iot:CreateScheduledAudit',
	CREATE_SECURITY_PROFILE = 'iot:CreateSecurityProfile',
	CREATE_STREAM = 'iot:CreateStream',
	CREATE_THING = 'iot:CreateThing',
	CREATE_THING_GROUP = 'iot:CreateThingGroup',
	CREATE_THING_TYPE = 'iot:CreateThingType',
	CREATE_TOPIC_RULE = 'iot:CreateTopicRule',
	CREATE_TOPIC_RULE_DESTINATION = 'iot:CreateTopicRuleDestination',
	DELETE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:DeleteAccountAuditConfiguration',
	DELETE_AUDIT_SUPPRESSION = 'iot:DeleteAuditSuppression',
	DELETE_AUTHORIZER = 'iot:DeleteAuthorizer',
	DELETE_BILLING_GROUP = 'iot:DeleteBillingGroup',
	DELETE_CA_CERTIFICATE = 'iot:DeleteCACertificate',
	DELETE_CERTIFICATE = 'iot:DeleteCertificate',
	DELETE_CUSTOM_METRIC = 'iot:DeleteCustomMetric',
	DELETE_DIMENSION = 'iot:DeleteDimension',
	DELETE_DOMAIN_CONFIGURATION = 'iot:DeleteDomainConfiguration',
	DELETE_DYNAMIC_THING_GROUP = 'iot:DeleteDynamicThingGroup',
	DELETE_FLEET_METRIC = 'iot:DeleteFleetMetric',
	DELETE_JOB = 'iot:DeleteJob',
	DELETE_JOB_EXECUTION = 'iot:DeleteJobExecution',
	DELETE_JOB_TEMPLATE = 'iot:DeleteJobTemplate',
	DELETE_MITIGATION_ACTION = 'iot:DeleteMitigationAction',
	DELETE_OTA_UPDATE = 'iot:DeleteOTAUpdate',
	DELETE_POLICY = 'iot:DeletePolicy',
	DELETE_POLICY_VERSION = 'iot:DeletePolicyVersion',
	DELETE_PROVISIONING_TEMPLATE = 'iot:DeleteProvisioningTemplate',
	DELETE_PROVISIONING_TEMPLATE_VERSION = 'iot:DeleteProvisioningTemplateVersion',
	DELETE_REGISTRATION_CODE = 'iot:DeleteRegistrationCode',
	DELETE_ROLE_ALIAS = 'iot:DeleteRoleAlias',
	DELETE_SCHEDULED_AUDIT = 'iot:DeleteScheduledAudit',
	DELETE_SECURITY_PROFILE = 'iot:DeleteSecurityProfile',
	DELETE_STREAM = 'iot:DeleteStream',
	DELETE_THING = 'iot:DeleteThing',
	DELETE_THING_GROUP = 'iot:DeleteThingGroup',
	DELETE_THING_SHADOW = 'iot:DeleteThingShadow',
	DELETE_THING_TYPE = 'iot:DeleteThingType',
	DELETE_TOPIC_RULE = 'iot:DeleteTopicRule',
	DELETE_TOPIC_RULE_DESTINATION = 'iot:DeleteTopicRuleDestination',
	DELETE_V_2_LOGGING_LEVEL = 'iot:DeleteV2LoggingLevel',
	DEPRECATE_THING_TYPE = 'iot:DeprecateThingType',
	DESCRIBE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:DescribeAccountAuditConfiguration',
	DESCRIBE_AUDIT_FINDING = 'iot:DescribeAuditFinding',
	DESCRIBE_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:DescribeAuditMitigationActionsTask',
	DESCRIBE_AUDIT_SUPPRESSION = 'iot:DescribeAuditSuppression',
	DESCRIBE_AUDIT_TASK = 'iot:DescribeAuditTask',
	DESCRIBE_AUTHORIZER = 'iot:DescribeAuthorizer',
	DESCRIBE_BILLING_GROUP = 'iot:DescribeBillingGroup',
	DESCRIBE_CA_CERTIFICATE = 'iot:DescribeCACertificate',
	DESCRIBE_CERTIFICATE = 'iot:DescribeCertificate',
	DESCRIBE_CUSTOM_METRIC = 'iot:DescribeCustomMetric',
	DESCRIBE_DEFAULT_AUTHORIZER = 'iot:DescribeDefaultAuthorizer',
	DESCRIBE_DETECT_MITIGATION_ACTIONS_TASK = 'iot:DescribeDetectMitigationActionsTask',
	DESCRIBE_DIMENSION = 'iot:DescribeDimension',
	DESCRIBE_DOMAIN_CONFIGURATION = 'iot:DescribeDomainConfiguration',
	DESCRIBE_ENDPOINT = 'iot:DescribeEndpoint',
	DESCRIBE_EVENT_CONFIGURATIONS = 'iot:DescribeEventConfigurations',
	DESCRIBE_FLEET_METRIC = 'iot:DescribeFleetMetric',
	DESCRIBE_INDEX = 'iot:DescribeIndex',
	DESCRIBE_JOB = 'iot:DescribeJob',
	DESCRIBE_JOB_EXECUTION = 'iot:DescribeJobExecution',
	DESCRIBE_JOB_TEMPLATE = 'iot:DescribeJobTemplate',
	DESCRIBE_MANAGED_JOB_TEMPLATE = 'iot:DescribeManagedJobTemplate',
	DESCRIBE_MITIGATION_ACTION = 'iot:DescribeMitigationAction',
	DESCRIBE_PROVISIONING_TEMPLATE = 'iot:DescribeProvisioningTemplate',
	DESCRIBE_PROVISIONING_TEMPLATE_VERSION = 'iot:DescribeProvisioningTemplateVersion',
	DESCRIBE_ROLE_ALIAS = 'iot:DescribeRoleAlias',
	DESCRIBE_SCHEDULED_AUDIT = 'iot:DescribeScheduledAudit',
	DESCRIBE_SECURITY_PROFILE = 'iot:DescribeSecurityProfile',
	DESCRIBE_STREAM = 'iot:DescribeStream',
	DESCRIBE_THING = 'iot:DescribeThing',
	DESCRIBE_THING_GROUP = 'iot:DescribeThingGroup',
	DESCRIBE_THING_REGISTRATION_TASK = 'iot:DescribeThingRegistrationTask',
	DESCRIBE_THING_TYPE = 'iot:DescribeThingType',
	DESCRIBE_TUNNEL = 'iot:DescribeTunnel',
	DETACH_POLICY = 'iot:DetachPolicy',
	DETACH_PRINCIPAL_POLICY = 'iot:DetachPrincipalPolicy',
	DETACH_SECURITY_PROFILE = 'iot:DetachSecurityProfile',
	DETACH_THING_PRINCIPAL = 'iot:DetachThingPrincipal',
	DISABLE_TOPIC_RULE = 'iot:DisableTopicRule',
	ENABLE_TOPIC_RULE = 'iot:EnableTopicRule',
	GET_BEHAVIOR_MODEL_TRAINING_SUMMARIES = 'iot:GetBehaviorModelTrainingSummaries',
	GET_BUCKETS_AGGREGATION = 'iot:GetBucketsAggregation',
	GET_CARDINALITY = 'iot:GetCardinality',
	GET_EFFECTIVE_POLICIES = 'iot:GetEffectivePolicies',
	GET_INDEXING_CONFIGURATION = 'iot:GetIndexingConfiguration',
	GET_JOB_DOCUMENT = 'iot:GetJobDocument',
	GET_LOGGING_OPTIONS = 'iot:GetLoggingOptions',
	GET_OTA_UPDATE = 'iot:GetOTAUpdate',
	GET_PERCENTILES = 'iot:GetPercentiles',
	GET_POLICY = 'iot:GetPolicy',
	GET_POLICY_VERSION = 'iot:GetPolicyVersion',
	GET_REGISTRATION_CODE = 'iot:GetRegistrationCode',
	GET_RETAINED_MESSAGE = 'iot:GetRetainedMessage',
	GET_STATISTICS = 'iot:GetStatistics',
	GET_THING_SHADOW = 'iot:GetThingShadow',
	GET_TOPIC_RULE = 'iot:GetTopicRule',
	GET_TOPIC_RULE_DESTINATION = 'iot:GetTopicRuleDestination',
	GET_V_2_LOGGING_OPTIONS = 'iot:GetV2LoggingOptions',
	LIST_ACTIVE_VIOLATIONS = 'iot:ListActiveViolations',
	LIST_ATTACHED_POLICIES = 'iot:ListAttachedPolicies',
	LIST_AUDIT_FINDINGS = 'iot:ListAuditFindings',
	LIST_AUDIT_MITIGATION_ACTIONS_EXECUTIONS = 'iot:ListAuditMitigationActionsExecutions',
	LIST_AUDIT_MITIGATION_ACTIONS_TASKS = 'iot:ListAuditMitigationActionsTasks',
	LIST_AUDIT_SUPPRESSIONS = 'iot:ListAuditSuppressions',
	LIST_AUDIT_TASKS = 'iot:ListAuditTasks',
	LIST_AUTHORIZERS = 'iot:ListAuthorizers',
	LIST_BILLING_GROUPS = 'iot:ListBillingGroups',
	LIST_CA_CERTIFICATES = 'iot:ListCACertificates',
	LIST_CERTIFICATES = 'iot:ListCertificates',
	LIST_CERTIFICATES_BY_CA = 'iot:ListCertificatesByCA',
	LIST_CUSTOM_METRICS = 'iot:ListCustomMetrics',
	LIST_DETECT_MITIGATION_ACTIONS_EXECUTIONS = 'iot:ListDetectMitigationActionsExecutions',
	LIST_DETECT_MITIGATION_ACTIONS_TASKS = 'iot:ListDetectMitigationActionsTasks',
	LIST_DIMENSIONS = 'iot:ListDimensions',
	LIST_DOMAIN_CONFIGURATIONS = 'iot:ListDomainConfigurations',
	LIST_FLEET_METRICS = 'iot:ListFleetMetrics',
	LIST_INDICES = 'iot:ListIndices',
	LIST_JOB_EXECUTIONS_FOR_JOB = 'iot:ListJobExecutionsForJob',
	LIST_JOB_EXECUTIONS_FOR_THING = 'iot:ListJobExecutionsForThing',
	LIST_JOB_TEMPLATES = 'iot:ListJobTemplates',
	LIST_JOBS = 'iot:ListJobs',
	LIST_MANAGED_JOB_TEMPLATES = 'iot:ListManagedJobTemplates',
	LIST_METRIC_VALUES = 'iot:ListMetricValues',
	LIST_MITIGATION_ACTIONS = 'iot:ListMitigationActions',
	LIST_NAMED_SHADOWS_FOR_THING = 'iot:ListNamedShadowsForThing',
	LIST_OTA_UPDATES = 'iot:ListOTAUpdates',
	LIST_OUTGOING_CERTIFICATES = 'iot:ListOutgoingCertificates',
	LIST_POLICIES = 'iot:ListPolicies',
	LIST_POLICY_PRINCIPALS = 'iot:ListPolicyPrincipals',
	LIST_POLICY_VERSIONS = 'iot:ListPolicyVersions',
	LIST_PRINCIPAL_POLICIES = 'iot:ListPrincipalPolicies',
	LIST_PRINCIPAL_THINGS = 'iot:ListPrincipalThings',
	LIST_PROVISIONING_TEMPLATE_VERSIONS = 'iot:ListProvisioningTemplateVersions',
	LIST_PROVISIONING_TEMPLATES = 'iot:ListProvisioningTemplates',
	LIST_RETAINED_MESSAGES = 'iot:ListRetainedMessages',
	LIST_ROLE_ALIASES = 'iot:ListRoleAliases',
	LIST_SCHEDULED_AUDITS = 'iot:ListScheduledAudits',
	LIST_SECURITY_PROFILES = 'iot:ListSecurityProfiles',
	LIST_SECURITY_PROFILES_FOR_TARGET = 'iot:ListSecurityProfilesForTarget',
	LIST_STREAMS = 'iot:ListStreams',
	LIST_TAGS_FOR_RESOURCE = 'iot:ListTagsForResource',
	LIST_TARGETS_FOR_POLICY = 'iot:ListTargetsForPolicy',
	LIST_TARGETS_FOR_SECURITY_PROFILE = 'iot:ListTargetsForSecurityProfile',
	LIST_THING_GROUPS = 'iot:ListThingGroups',
	LIST_THING_GROUPS_FOR_THING = 'iot:ListThingGroupsForThing',
	LIST_THING_PRINCIPALS = 'iot:ListThingPrincipals',
	LIST_THING_REGISTRATION_TASK_REPORTS = 'iot:ListThingRegistrationTaskReports',
	LIST_THING_REGISTRATION_TASKS = 'iot:ListThingRegistrationTasks',
	LIST_THING_TYPES = 'iot:ListThingTypes',
	LIST_THINGS = 'iot:ListThings',
	LIST_THINGS_IN_BILLING_GROUP = 'iot:ListThingsInBillingGroup',
	LIST_THINGS_IN_THING_GROUP = 'iot:ListThingsInThingGroup',
	LIST_TOPIC_RULE_DESTINATIONS = 'iot:ListTopicRuleDestinations',
	LIST_TOPIC_RULES = 'iot:ListTopicRules',
	LIST_TUNNELS = 'iot:ListTunnels',
	LIST_V_2_LOGGING_LEVELS = 'iot:ListV2LoggingLevels',
	LIST_VIOLATION_EVENTS = 'iot:ListViolationEvents',
	OPEN_TUNNEL = 'iot:OpenTunnel',
	PUBLISH = 'iot:Publish',
	PUT_VERIFICATION_STATE_ON_VIOLATION = 'iot:PutVerificationStateOnViolation',
	RECEIVE = 'iot:Receive',
	REGISTER_CA_CERTIFICATE = 'iot:RegisterCACertificate',
	REGISTER_CERTIFICATE = 'iot:RegisterCertificate',
	REGISTER_CERTIFICATE_WITHOUT_CA = 'iot:RegisterCertificateWithoutCA',
	REGISTER_THING = 'iot:RegisterThing',
	REJECT_CERTIFICATE_TRANSFER = 'iot:RejectCertificateTransfer',
	REMOVE_THING_FROM_BILLING_GROUP = 'iot:RemoveThingFromBillingGroup',
	REMOVE_THING_FROM_THING_GROUP = 'iot:RemoveThingFromThingGroup',
	REPLACE_TOPIC_RULE = 'iot:ReplaceTopicRule',
	RETAIN_PUBLISH = 'iot:RetainPublish',
	ROTATE_TUNNEL_ACCESS_TOKEN = 'iot:RotateTunnelAccessToken',
	SEARCH_INDEX = 'iot:SearchIndex',
	SET_DEFAULT_AUTHORIZER = 'iot:SetDefaultAuthorizer',
	SET_DEFAULT_POLICY_VERSION = 'iot:SetDefaultPolicyVersion',
	SET_LOGGING_OPTIONS = 'iot:SetLoggingOptions',
	SET_V_2_LOGGING_LEVEL = 'iot:SetV2LoggingLevel',
	SET_V_2_LOGGING_OPTIONS = 'iot:SetV2LoggingOptions',
	START_AUDIT_MITIGATION_ACTIONS_TASK = 'iot:StartAuditMitigationActionsTask',
	START_DETECT_MITIGATION_ACTIONS_TASK = 'iot:StartDetectMitigationActionsTask',
	START_ON_DEMAND_AUDIT_TASK = 'iot:StartOnDemandAuditTask',
	START_THING_REGISTRATION_TASK = 'iot:StartThingRegistrationTask',
	STOP_THING_REGISTRATION_TASK = 'iot:StopThingRegistrationTask',
	SUBSCRIBE = 'iot:Subscribe',
	TAG_RESOURCE = 'iot:TagResource',
	TEST_AUTHORIZATION = 'iot:TestAuthorization',
	TEST_INVOKE_AUTHORIZER = 'iot:TestInvokeAuthorizer',
	TRANSFER_CERTIFICATE = 'iot:TransferCertificate',
	UNTAG_RESOURCE = 'iot:UntagResource',
	UPDATE_ACCOUNT_AUDIT_CONFIGURATION = 'iot:UpdateAccountAuditConfiguration',
	UPDATE_AUDIT_SUPPRESSION = 'iot:UpdateAuditSuppression',
	UPDATE_AUTHORIZER = 'iot:UpdateAuthorizer',
	UPDATE_BILLING_GROUP = 'iot:UpdateBillingGroup',
	UPDATE_CA_CERTIFICATE = 'iot:UpdateCACertificate',
	UPDATE_CERTIFICATE = 'iot:UpdateCertificate',
	UPDATE_CUSTOM_METRIC = 'iot:UpdateCustomMetric',
	UPDATE_DIMENSION = 'iot:UpdateDimension',
	UPDATE_DOMAIN_CONFIGURATION = 'iot:UpdateDomainConfiguration',
	UPDATE_DYNAMIC_THING_GROUP = 'iot:UpdateDynamicThingGroup',
	UPDATE_EVENT_CONFIGURATIONS = 'iot:UpdateEventConfigurations',
	UPDATE_FLEET_METRIC = 'iot:UpdateFleetMetric',
	UPDATE_INDEXING_CONFIGURATION = 'iot:UpdateIndexingConfiguration',
	UPDATE_JOB = 'iot:UpdateJob',
	UPDATE_MITIGATION_ACTION = 'iot:UpdateMitigationAction',
	UPDATE_PROVISIONING_TEMPLATE = 'iot:UpdateProvisioningTemplate',
	UPDATE_ROLE_ALIAS = 'iot:UpdateRoleAlias',
	UPDATE_SCHEDULED_AUDIT = 'iot:UpdateScheduledAudit',
	UPDATE_SECURITY_PROFILE = 'iot:UpdateSecurityProfile',
	UPDATE_STREAM = 'iot:UpdateStream',
	UPDATE_THING = 'iot:UpdateThing',
	UPDATE_THING_GROUP = 'iot:UpdateThingGroup',
	UPDATE_THING_GROUPS_FOR_THING = 'iot:UpdateThingGroupsForThing',
	UPDATE_THING_SHADOW = 'iot:UpdateThingShadow',
	UPDATE_TOPIC_RULE_DESTINATION = 'iot:UpdateTopicRuleDestination',
	VALIDATE_SECURITY_PROFILE_BEHAVIORS = 'iot:ValidateSecurityProfileBehaviors',
}
export enum MIGRATION_HUB {
	ASSOCIATE_CREATED_ARTIFACT = 'mgh:AssociateCreatedArtifact',
	ASSOCIATE_DISCOVERED_RESOURCE = 'mgh:AssociateDiscoveredResource',
	CREATE_HOME_REGION_CONTROL = 'mgh:CreateHomeRegionControl',
	CREATE_PROGRESS_UPDATE_STREAM = 'mgh:CreateProgressUpdateStream',
	DELETE_PROGRESS_UPDATE_STREAM = 'mgh:DeleteProgressUpdateStream',
	DESCRIBE_APPLICATION_STATE = 'mgh:DescribeApplicationState',
	DESCRIBE_HOME_REGION_CONTROLS = 'mgh:DescribeHomeRegionControls',
	DESCRIBE_MIGRATION_TASK = 'mgh:DescribeMigrationTask',
	DISASSOCIATE_CREATED_ARTIFACT = 'mgh:DisassociateCreatedArtifact',
	DISASSOCIATE_DISCOVERED_RESOURCE = 'mgh:DisassociateDiscoveredResource',
	GET_HOME_REGION = 'mgh:GetHomeRegion',
	IMPORT_MIGRATION_TASK = 'mgh:ImportMigrationTask',
	LIST_APPLICATION_STATES = 'mgh:ListApplicationStates',
	LIST_CREATED_ARTIFACTS = 'mgh:ListCreatedArtifacts',
	LIST_DISCOVERED_RESOURCES = 'mgh:ListDiscoveredResources',
	LIST_MIGRATION_TASKS = 'mgh:ListMigrationTasks',
	LIST_PROGRESS_UPDATE_STREAMS = 'mgh:ListProgressUpdateStreams',
	NOTIFY_APPLICATION_STATE = 'mgh:NotifyApplicationState',
	NOTIFY_MIGRATION_TASK_STATE = 'mgh:NotifyMigrationTaskState',
	PUT_RESOURCE_ATTRIBUTES = 'mgh:PutResourceAttributes',
}
export enum FAULT_INJECTION_SIMULATOR {
	CREATE_EXPERIMENT_TEMPLATE = 'fis:CreateExperimentTemplate',
	DELETE_EXPERIMENT_TEMPLATE = 'fis:DeleteExperimentTemplate',
	GET_ACTION = 'fis:GetAction',
	GET_EXPERIMENT = 'fis:GetExperiment',
	GET_EXPERIMENT_TEMPLATE = 'fis:GetExperimentTemplate',
	GET_TARGET_RESOURCE_TYPE = 'fis:GetTargetResourceType',
	INJECT_API_INTERNAL_ERROR = 'fis:InjectApiInternalError',
	INJECT_API_THROTTLE_ERROR = 'fis:InjectApiThrottleError',
	INJECT_API_UNAVAILABLE_ERROR = 'fis:InjectApiUnavailableError',
	LIST_ACTIONS = 'fis:ListActions',
	LIST_EXPERIMENT_TEMPLATES = 'fis:ListExperimentTemplates',
	LIST_EXPERIMENTS = 'fis:ListExperiments',
	LIST_TAGS_FOR_RESOURCE = 'fis:ListTagsForResource',
	LIST_TARGET_RESOURCE_TYPES = 'fis:ListTargetResourceTypes',
	START_EXPERIMENT = 'fis:StartExperiment',
	STOP_EXPERIMENT = 'fis:StopExperiment',
	TAG_RESOURCE = 'fis:TagResource',
	UNTAG_RESOURCE = 'fis:UntagResource',
	UPDATE_EXPERIMENT_TEMPLATE = 'fis:UpdateExperimentTemplate',
}
export enum SERVICE_PROVIDING_MANAGED_PRIVATE_NETWORKS {
	ACKNOWLEDGE_ORDER_RECEIPT = 'private-networks:AcknowledgeOrderReceipt',
	ACTIVATE_DEVICE_IDENTIFIER = 'private-networks:ActivateDeviceIdentifier',
	ACTIVATE_NETWORK_SITE = 'private-networks:ActivateNetworkSite',
	CONFIGURE_ACCESS_POINT = 'private-networks:ConfigureAccessPoint',
	CREATE_NETWORK = 'private-networks:CreateNetwork',
	CREATE_NETWORK_SITE = 'private-networks:CreateNetworkSite',
	DEACTIVATE_DEVICE_IDENTIFIER = 'private-networks:DeactivateDeviceIdentifier',
	DELETE_NETWORK = 'private-networks:DeleteNetwork',
	DELETE_NETWORK_SITE = 'private-networks:DeleteNetworkSite',
	GET_DEVICE_IDENTIFIER = 'private-networks:GetDeviceIdentifier',
	GET_NETWORK = 'private-networks:GetNetwork',
	GET_NETWORK_RESOURCE = 'private-networks:GetNetworkResource',
	GET_NETWORK_SITE = 'private-networks:GetNetworkSite',
	GET_ORDER = 'private-networks:GetOrder',
	LIST_DEVICE_IDENTIFIERS = 'private-networks:ListDeviceIdentifiers',
	LIST_NETWORK_RESOURCES = 'private-networks:ListNetworkResources',
	LIST_NETWORK_SITES = 'private-networks:ListNetworkSites',
	LIST_NETWORKS = 'private-networks:ListNetworks',
	LIST_ORDERS = 'private-networks:ListOrders',
	LIST_TAGS_FOR_RESOURCE = 'private-networks:ListTagsForResource',
	PING = 'private-networks:Ping',
	TAG_RESOURCE = 'private-networks:TagResource',
	UNTAG_RESOURCE = 'private-networks:UntagResource',
	UPDATE_NETWORK_SITE = 'private-networks:UpdateNetworkSite',
	UPDATE_NETWORK_SITE_PLAN = 'private-networks:UpdateNetworkSitePlan',
}
export enum LAMBDA {
	ADD_LAYER_VERSION_PERMISSION = 'lambda:AddLayerVersionPermission',
	ADD_PERMISSION = 'lambda:AddPermission',
	CREATE_ALIAS = 'lambda:CreateAlias',
	CREATE_CODE_SIGNING_CONFIG = 'lambda:CreateCodeSigningConfig',
	CREATE_EVENT_SOURCE_MAPPING = 'lambda:CreateEventSourceMapping',
	CREATE_FUNCTION = 'lambda:CreateFunction',
	CREATE_FUNCTION_URL_CONFIG = 'lambda:CreateFunctionUrlConfig',
	DELETE_ALIAS = 'lambda:DeleteAlias',
	DELETE_CODE_SIGNING_CONFIG = 'lambda:DeleteCodeSigningConfig',
	DELETE_EVENT_SOURCE_MAPPING = 'lambda:DeleteEventSourceMapping',
	DELETE_FUNCTION = 'lambda:DeleteFunction',
	DELETE_FUNCTION_CODE_SIGNING_CONFIG = 'lambda:DeleteFunctionCodeSigningConfig',
	DELETE_FUNCTION_CONCURRENCY = 'lambda:DeleteFunctionConcurrency',
	DELETE_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:DeleteFunctionEventInvokeConfig',
	DELETE_FUNCTION_URL_CONFIG = 'lambda:DeleteFunctionUrlConfig',
	DELETE_LAYER_VERSION = 'lambda:DeleteLayerVersion',
	DELETE_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:DeleteProvisionedConcurrencyConfig',
	DISABLE_REPLICATION = 'lambda:DisableReplication',
	ENABLE_REPLICATION = 'lambda:EnableReplication',
	GET_ACCOUNT_SETTINGS = 'lambda:GetAccountSettings',
	GET_ALIAS = 'lambda:GetAlias',
	GET_CODE_SIGNING_CONFIG = 'lambda:GetCodeSigningConfig',
	GET_EVENT_SOURCE_MAPPING = 'lambda:GetEventSourceMapping',
	GET_FUNCTION = 'lambda:GetFunction',
	GET_FUNCTION_CODE_SIGNING_CONFIG = 'lambda:GetFunctionCodeSigningConfig',
	GET_FUNCTION_CONCURRENCY = 'lambda:GetFunctionConcurrency',
	GET_FUNCTION_CONFIGURATION = 'lambda:GetFunctionConfiguration',
	GET_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:GetFunctionEventInvokeConfig',
	GET_FUNCTION_URL_CONFIG = 'lambda:GetFunctionUrlConfig',
	GET_LAYER_VERSION = 'lambda:GetLayerVersion',
	GET_LAYER_VERSION_POLICY = 'lambda:GetLayerVersionPolicy',
	GET_POLICY = 'lambda:GetPolicy',
	GET_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:GetProvisionedConcurrencyConfig',
	INVOKE_ASYNC = 'lambda:InvokeAsync',
	INVOKE_FUNCTION = 'lambda:InvokeFunction',
	INVOKE_FUNCTION_URL = 'lambda:InvokeFunctionUrl',
	LIST_ALIASES = 'lambda:ListAliases',
	LIST_CODE_SIGNING_CONFIGS = 'lambda:ListCodeSigningConfigs',
	LIST_EVENT_SOURCE_MAPPINGS = 'lambda:ListEventSourceMappings',
	LIST_FUNCTION_EVENT_INVOKE_CONFIGS = 'lambda:ListFunctionEventInvokeConfigs',
	LIST_FUNCTION_URL_CONFIGS = 'lambda:ListFunctionUrlConfigs',
	LIST_FUNCTIONS = 'lambda:ListFunctions',
	LIST_FUNCTIONS_BY_CODE_SIGNING_CONFIG = 'lambda:ListFunctionsByCodeSigningConfig',
	LIST_LAYER_VERSIONS = 'lambda:ListLayerVersions',
	LIST_LAYERS = 'lambda:ListLayers',
	LIST_PROVISIONED_CONCURRENCY_CONFIGS = 'lambda:ListProvisionedConcurrencyConfigs',
	LIST_TAGS = 'lambda:ListTags',
	LIST_VERSIONS_BY_FUNCTION = 'lambda:ListVersionsByFunction',
	PUBLISH_LAYER_VERSION = 'lambda:PublishLayerVersion',
	PUBLISH_VERSION = 'lambda:PublishVersion',
	PUT_FUNCTION_CODE_SIGNING_CONFIG = 'lambda:PutFunctionCodeSigningConfig',
	PUT_FUNCTION_CONCURRENCY = 'lambda:PutFunctionConcurrency',
	PUT_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:PutFunctionEventInvokeConfig',
	PUT_PROVISIONED_CONCURRENCY_CONFIG = 'lambda:PutProvisionedConcurrencyConfig',
	REMOVE_LAYER_VERSION_PERMISSION = 'lambda:RemoveLayerVersionPermission',
	REMOVE_PERMISSION = 'lambda:RemovePermission',
	TAG_RESOURCE = 'lambda:TagResource',
	UNTAG_RESOURCE = 'lambda:UntagResource',
	UPDATE_ALIAS = 'lambda:UpdateAlias',
	UPDATE_CODE_SIGNING_CONFIG = 'lambda:UpdateCodeSigningConfig',
	UPDATE_EVENT_SOURCE_MAPPING = 'lambda:UpdateEventSourceMapping',
	UPDATE_FUNCTION_CODE = 'lambda:UpdateFunctionCode',
	UPDATE_FUNCTION_CODE_SIGNING_CONFIG = 'lambda:UpdateFunctionCodeSigningConfig',
	UPDATE_FUNCTION_CONFIGURATION = 'lambda:UpdateFunctionConfiguration',
	UPDATE_FUNCTION_EVENT_INVOKE_CONFIG = 'lambda:UpdateFunctionEventInvokeConfig',
	UPDATE_FUNCTION_URL_CONFIG = 'lambda:UpdateFunctionUrlConfig',
}
export enum APPLICATION_MIGRATION_SERVICE {
	ARCHIVE_APPLICATION = 'mgn:ArchiveApplication',
	ARCHIVE_WAVE = 'mgn:ArchiveWave',
	ASSOCIATE_APPLICATIONS = 'mgn:AssociateApplications',
	ASSOCIATE_SOURCE_SERVERS = 'mgn:AssociateSourceServers',
	BATCH_CREATE_VOLUME_SNAPSHOT_GROUP_FOR_MGN = 'mgn:BatchCreateVolumeSnapshotGroupForMgn',
	BATCH_DELETE_SNAPSHOT_REQUEST_FOR_MGN = 'mgn:BatchDeleteSnapshotRequestForMgn',
	CHANGE_SERVER_LIFE_CYCLE_STATE = 'mgn:ChangeServerLifeCycleState',
	CREATE_APPLICATION = 'mgn:CreateApplication',
	CREATE_LAUNCH_CONFIGURATION_TEMPLATE = 'mgn:CreateLaunchConfigurationTemplate',
	CREATE_REPLICATION_CONFIGURATION_TEMPLATE = 'mgn:CreateReplicationConfigurationTemplate',
	CREATE_VCENTER_CLIENT_FOR_MGN = 'mgn:CreateVcenterClientForMgn',
	CREATE_WAVE = 'mgn:CreateWave',
	DELETE_APPLICATION = 'mgn:DeleteApplication',
	DELETE_JOB = 'mgn:DeleteJob',
	DELETE_LAUNCH_CONFIGURATION_TEMPLATE = 'mgn:DeleteLaunchConfigurationTemplate',
	DELETE_REPLICATION_CONFIGURATION_TEMPLATE = 'mgn:DeleteReplicationConfigurationTemplate',
	DELETE_SOURCE_SERVER = 'mgn:DeleteSourceServer',
	DELETE_VCENTER_CLIENT = 'mgn:DeleteVcenterClient',
	DELETE_WAVE = 'mgn:DeleteWave',
	DESCRIBE_JOB_LOG_ITEMS = 'mgn:DescribeJobLogItems',
	DESCRIBE_JOBS = 'mgn:DescribeJobs',
	DESCRIBE_LAUNCH_CONFIGURATION_TEMPLATES = 'mgn:DescribeLaunchConfigurationTemplates',
	DESCRIBE_REPLICATION_CONFIGURATION_TEMPLATES = 'mgn:DescribeReplicationConfigurationTemplates',
	DESCRIBE_REPLICATION_SERVER_ASSOCIATIONS_FOR_MGN = 'mgn:DescribeReplicationServerAssociationsForMgn',
	DESCRIBE_SNAPSHOT_REQUESTS_FOR_MGN = 'mgn:DescribeSnapshotRequestsForMgn',
	DESCRIBE_SOURCE_SERVERS = 'mgn:DescribeSourceServers',
	DESCRIBE_VCENTER_CLIENTS = 'mgn:DescribeVcenterClients',
	DISASSOCIATE_APPLICATIONS = 'mgn:DisassociateApplications',
	DISASSOCIATE_SOURCE_SERVERS = 'mgn:DisassociateSourceServers',
	DISCONNECT_FROM_SERVICE = 'mgn:DisconnectFromService',
	FINALIZE_CUTOVER = 'mgn:FinalizeCutover',
	GET_AGENT_COMMAND_FOR_MGN = 'mgn:GetAgentCommandForMgn',
	GET_AGENT_CONFIRMED_RESUME_INFO_FOR_MGN = 'mgn:GetAgentConfirmedResumeInfoForMgn',
	GET_AGENT_INSTALLATION_ASSETS_FOR_MGN = 'mgn:GetAgentInstallationAssetsForMgn',
	GET_AGENT_REPLICATION_INFO_FOR_MGN = 'mgn:GetAgentReplicationInfoForMgn',
	GET_AGENT_RUNTIME_CONFIGURATION_FOR_MGN = 'mgn:GetAgentRuntimeConfigurationForMgn',
	GET_AGENT_SNAPSHOT_CREDITS_FOR_MGN = 'mgn:GetAgentSnapshotCreditsForMgn',
	GET_CHANNEL_COMMANDS_FOR_MGN = 'mgn:GetChannelCommandsForMgn',
	GET_LAUNCH_CONFIGURATION = 'mgn:GetLaunchConfiguration',
	GET_REPLICATION_CONFIGURATION = 'mgn:GetReplicationConfiguration',
	GET_VCENTER_CLIENT_COMMANDS_FOR_MGN = 'mgn:GetVcenterClientCommandsForMgn',
	INITIALIZE_SERVICE = 'mgn:InitializeService',
	ISSUE_CLIENT_CERTIFICATE_FOR_MGN = 'mgn:IssueClientCertificateForMgn',
	LIST_APPLICATIONS = 'mgn:ListApplications',
	LIST_SOURCE_SERVER_ACTIONS = 'mgn:ListSourceServerActions',
	LIST_TAGS_FOR_RESOURCE = 'mgn:ListTagsForResource',
	LIST_TEMPLATE_ACTIONS = 'mgn:ListTemplateActions',
	LIST_WAVES = 'mgn:ListWaves',
	MARK_AS_ARCHIVED = 'mgn:MarkAsArchived',
	NOTIFY_AGENT_AUTHENTICATION_FOR_MGN = 'mgn:NotifyAgentAuthenticationForMgn',
	NOTIFY_AGENT_CONNECTED_FOR_MGN = 'mgn:NotifyAgentConnectedForMgn',
	NOTIFY_AGENT_DISCONNECTED_FOR_MGN = 'mgn:NotifyAgentDisconnectedForMgn',
	NOTIFY_AGENT_REPLICATION_PROGRESS_FOR_MGN = 'mgn:NotifyAgentReplicationProgressForMgn',
	NOTIFY_VCENTER_CLIENT_STARTED_FOR_MGN = 'mgn:NotifyVcenterClientStartedForMgn',
	PUT_SOURCE_SERVER_ACTION = 'mgn:PutSourceServerAction',
	PUT_TEMPLATE_ACTION = 'mgn:PutTemplateAction',
	REGISTER_AGENT_FOR_MGN = 'mgn:RegisterAgentForMgn',
	REMOVE_SOURCE_SERVER_ACTION = 'mgn:RemoveSourceServerAction',
	REMOVE_TEMPLATE_ACTION = 'mgn:RemoveTemplateAction',
	RETRY_DATA_REPLICATION = 'mgn:RetryDataReplication',
	SEND_AGENT_LOGS_FOR_MGN = 'mgn:SendAgentLogsForMgn',
	SEND_AGENT_METRICS_FOR_MGN = 'mgn:SendAgentMetricsForMgn',
	SEND_CHANNEL_COMMAND_RESULT_FOR_MGN = 'mgn:SendChannelCommandResultForMgn',
	SEND_CLIENT_LOGS_FOR_MGN = 'mgn:SendClientLogsForMgn',
	SEND_CLIENT_METRICS_FOR_MGN = 'mgn:SendClientMetricsForMgn',
	SEND_VCENTER_CLIENT_COMMAND_RESULT_FOR_MGN = 'mgn:SendVcenterClientCommandResultForMgn',
	SEND_VCENTER_CLIENT_LOGS_FOR_MGN = 'mgn:SendVcenterClientLogsForMgn',
	SEND_VCENTER_CLIENT_METRICS_FOR_MGN = 'mgn:SendVcenterClientMetricsForMgn',
	START_CUTOVER = 'mgn:StartCutover',
	START_REPLICATION = 'mgn:StartReplication',
	START_TEST = 'mgn:StartTest',
	TAG_RESOURCE = 'mgn:TagResource',
	TERMINATE_TARGET_INSTANCES = 'mgn:TerminateTargetInstances',
	UNARCHIVE_APPLICATION = 'mgn:UnarchiveApplication',
	UNARCHIVE_WAVE = 'mgn:UnarchiveWave',
	UNTAG_RESOURCE = 'mgn:UntagResource',
	UPDATE_AGENT_BACKLOG_FOR_MGN = 'mgn:UpdateAgentBacklogForMgn',
	UPDATE_AGENT_CONVERSION_INFO_FOR_MGN = 'mgn:UpdateAgentConversionInfoForMgn',
	UPDATE_AGENT_REPLICATION_INFO_FOR_MGN = 'mgn:UpdateAgentReplicationInfoForMgn',
	UPDATE_AGENT_REPLICATION_PROCESS_STATE_FOR_MGN = 'mgn:UpdateAgentReplicationProcessStateForMgn',
	UPDATE_AGENT_SOURCE_PROPERTIES_FOR_MGN = 'mgn:UpdateAgentSourcePropertiesForMgn',
	UPDATE_APPLICATION = 'mgn:UpdateApplication',
	UPDATE_LAUNCH_CONFIGURATION = 'mgn:UpdateLaunchConfiguration',
	UPDATE_LAUNCH_CONFIGURATION_TEMPLATE = 'mgn:UpdateLaunchConfigurationTemplate',
	UPDATE_REPLICATION_CONFIGURATION = 'mgn:UpdateReplicationConfiguration',
	UPDATE_REPLICATION_CONFIGURATION_TEMPLATE = 'mgn:UpdateReplicationConfigurationTemplate',
	UPDATE_SOURCE_SERVER_REPLICATION_TYPE = 'mgn:UpdateSourceServerReplicationType',
	UPDATE_WAVE = 'mgn:UpdateWave',
	VERIFY_CLIENT_ROLE_FOR_MGN = 'mgn:VerifyClientRoleForMgn',
}
export enum DATA_EXCHANGE {
	CANCEL_JOB = 'dataexchange:CancelJob',
	CREATE_ASSET = 'dataexchange:CreateAsset',
	CREATE_DATA_SET = 'dataexchange:CreateDataSet',
	CREATE_EVENT_ACTION = 'dataexchange:CreateEventAction',
	CREATE_JOB = 'dataexchange:CreateJob',
	CREATE_REVISION = 'dataexchange:CreateRevision',
	DELETE_ASSET = 'dataexchange:DeleteAsset',
	DELETE_DATA_SET = 'dataexchange:DeleteDataSet',
	DELETE_EVENT_ACTION = 'dataexchange:DeleteEventAction',
	DELETE_REVISION = 'dataexchange:DeleteRevision',
	GET_ASSET = 'dataexchange:GetAsset',
	GET_DATA_SET = 'dataexchange:GetDataSet',
	GET_EVENT_ACTION = 'dataexchange:GetEventAction',
	GET_JOB = 'dataexchange:GetJob',
	GET_REVISION = 'dataexchange:GetRevision',
	LIST_DATA_SET_REVISIONS = 'dataexchange:ListDataSetRevisions',
	LIST_DATA_SETS = 'dataexchange:ListDataSets',
	LIST_EVENT_ACTIONS = 'dataexchange:ListEventActions',
	LIST_JOBS = 'dataexchange:ListJobs',
	LIST_REVISION_ASSETS = 'dataexchange:ListRevisionAssets',
	LIST_TAGS_FOR_RESOURCE = 'dataexchange:ListTagsForResource',
	PUBLISH_DATA_SET = 'dataexchange:PublishDataSet',
	REVOKE_REVISION = 'dataexchange:RevokeRevision',
	SEND_API_ASSET = 'dataexchange:SendApiAsset',
	START_JOB = 'dataexchange:StartJob',
	TAG_RESOURCE = 'dataexchange:TagResource',
	UNTAG_RESOURCE = 'dataexchange:UntagResource',
	UPDATE_ASSET = 'dataexchange:UpdateAsset',
	UPDATE_DATA_SET = 'dataexchange:UpdateDataSet',
	UPDATE_EVENT_ACTION = 'dataexchange:UpdateEventAction',
	UPDATE_REVISION = 'dataexchange:UpdateRevision',
}
export enum MACHINE_LEARNING {
	ADD_TAGS = 'machinelearning:AddTags',
	CREATE_BATCH_PREDICTION = 'machinelearning:CreateBatchPrediction',
	CREATE_DATA_SOURCE_FROM_RDS = 'machinelearning:CreateDataSourceFromRDS',
	CREATE_DATA_SOURCE_FROM_REDSHIFT = 'machinelearning:CreateDataSourceFromRedshift',
	CREATE_DATA_SOURCE_FROM_S_3 = 'machinelearning:CreateDataSourceFromS3',
	CREATE_EVALUATION = 'machinelearning:CreateEvaluation',
	CREATE_ML_MODEL = 'machinelearning:CreateMLModel',
	CREATE_REALTIME_ENDPOINT = 'machinelearning:CreateRealtimeEndpoint',
	DELETE_BATCH_PREDICTION = 'machinelearning:DeleteBatchPrediction',
	DELETE_DATA_SOURCE = 'machinelearning:DeleteDataSource',
	DELETE_EVALUATION = 'machinelearning:DeleteEvaluation',
	DELETE_ML_MODEL = 'machinelearning:DeleteMLModel',
	DELETE_REALTIME_ENDPOINT = 'machinelearning:DeleteRealtimeEndpoint',
	DELETE_TAGS = 'machinelearning:DeleteTags',
	DESCRIBE_BATCH_PREDICTIONS = 'machinelearning:DescribeBatchPredictions',
	DESCRIBE_DATA_SOURCES = 'machinelearning:DescribeDataSources',
	DESCRIBE_EVALUATIONS = 'machinelearning:DescribeEvaluations',
	DESCRIBE_ML_MODELS = 'machinelearning:DescribeMLModels',
	DESCRIBE_TAGS = 'machinelearning:DescribeTags',
	GET_BATCH_PREDICTION = 'machinelearning:GetBatchPrediction',
	GET_DATA_SOURCE = 'machinelearning:GetDataSource',
	GET_EVALUATION = 'machinelearning:GetEvaluation',
	GET_ML_MODEL = 'machinelearning:GetMLModel',
	PREDICT = 'machinelearning:Predict',
	UPDATE_BATCH_PREDICTION = 'machinelearning:UpdateBatchPrediction',
	UPDATE_DATA_SOURCE = 'machinelearning:UpdateDataSource',
	UPDATE_EVALUATION = 'machinelearning:UpdateEvaluation',
	UPDATE_ML_MODEL = 'machinelearning:UpdateMLModel',
}
export enum AUDIT_MANAGER {
	ASSOCIATE_ASSESSMENT_REPORT_EVIDENCE_FOLDER = 'auditmanager:AssociateAssessmentReportEvidenceFolder',
	BATCH_ASSOCIATE_ASSESSMENT_REPORT_EVIDENCE = 'auditmanager:BatchAssociateAssessmentReportEvidence',
	BATCH_CREATE_DELEGATION_BY_ASSESSMENT = 'auditmanager:BatchCreateDelegationByAssessment',
	BATCH_DELETE_DELEGATION_BY_ASSESSMENT = 'auditmanager:BatchDeleteDelegationByAssessment',
	BATCH_DISASSOCIATE_ASSESSMENT_REPORT_EVIDENCE = 'auditmanager:BatchDisassociateAssessmentReportEvidence',
	BATCH_IMPORT_EVIDENCE_TO_ASSESSMENT_CONTROL = 'auditmanager:BatchImportEvidenceToAssessmentControl',
	CREATE_ASSESSMENT = 'auditmanager:CreateAssessment',
	CREATE_ASSESSMENT_FRAMEWORK = 'auditmanager:CreateAssessmentFramework',
	CREATE_ASSESSMENT_REPORT = 'auditmanager:CreateAssessmentReport',
	CREATE_CONTROL = 'auditmanager:CreateControl',
	DELETE_ASSESSMENT = 'auditmanager:DeleteAssessment',
	DELETE_ASSESSMENT_FRAMEWORK = 'auditmanager:DeleteAssessmentFramework',
	DELETE_ASSESSMENT_FRAMEWORK_SHARE = 'auditmanager:DeleteAssessmentFrameworkShare',
	DELETE_ASSESSMENT_REPORT = 'auditmanager:DeleteAssessmentReport',
	DELETE_CONTROL = 'auditmanager:DeleteControl',
	DEREGISTER_ACCOUNT = 'auditmanager:DeregisterAccount',
	DEREGISTER_ORGANIZATION_ADMIN_ACCOUNT = 'auditmanager:DeregisterOrganizationAdminAccount',
	DISASSOCIATE_ASSESSMENT_REPORT_EVIDENCE_FOLDER = 'auditmanager:DisassociateAssessmentReportEvidenceFolder',
	GET_ACCOUNT_STATUS = 'auditmanager:GetAccountStatus',
	GET_ASSESSMENT = 'auditmanager:GetAssessment',
	GET_ASSESSMENT_FRAMEWORK = 'auditmanager:GetAssessmentFramework',
	GET_ASSESSMENT_REPORT_URL = 'auditmanager:GetAssessmentReportUrl',
	GET_CHANGE_LOGS = 'auditmanager:GetChangeLogs',
	GET_CONTROL = 'auditmanager:GetControl',
	GET_DELEGATIONS = 'auditmanager:GetDelegations',
	GET_EVIDENCE = 'auditmanager:GetEvidence',
	GET_EVIDENCE_BY_EVIDENCE_FOLDER = 'auditmanager:GetEvidenceByEvidenceFolder',
	GET_EVIDENCE_FOLDER = 'auditmanager:GetEvidenceFolder',
	GET_EVIDENCE_FOLDERS_BY_ASSESSMENT = 'auditmanager:GetEvidenceFoldersByAssessment',
	GET_EVIDENCE_FOLDERS_BY_ASSESSMENT_CONTROL = 'auditmanager:GetEvidenceFoldersByAssessmentControl',
	GET_INSIGHTS = 'auditmanager:GetInsights',
	GET_INSIGHTS_BY_ASSESSMENT = 'auditmanager:GetInsightsByAssessment',
	GET_ORGANIZATION_ADMIN_ACCOUNT = 'auditmanager:GetOrganizationAdminAccount',
	GET_SERVICES_IN_SCOPE = 'auditmanager:GetServicesInScope',
	GET_SETTINGS = 'auditmanager:GetSettings',
	LIST_ASSESSMENT_CONTROL_INSIGHTS_BY_CONTROL_DOMAIN = 'auditmanager:ListAssessmentControlInsightsByControlDomain',
	LIST_ASSESSMENT_FRAMEWORK_SHARE_REQUESTS = 'auditmanager:ListAssessmentFrameworkShareRequests',
	LIST_ASSESSMENT_FRAMEWORKS = 'auditmanager:ListAssessmentFrameworks',
	LIST_ASSESSMENT_REPORTS = 'auditmanager:ListAssessmentReports',
	LIST_ASSESSMENTS = 'auditmanager:ListAssessments',
	LIST_CONTROL_DOMAIN_INSIGHTS = 'auditmanager:ListControlDomainInsights',
	LIST_CONTROL_DOMAIN_INSIGHTS_BY_ASSESSMENT = 'auditmanager:ListControlDomainInsightsByAssessment',
	LIST_CONTROL_INSIGHTS_BY_CONTROL_DOMAIN = 'auditmanager:ListControlInsightsByControlDomain',
	LIST_CONTROLS = 'auditmanager:ListControls',
	LIST_KEYWORDS_FOR_DATA_SOURCE = 'auditmanager:ListKeywordsForDataSource',
	LIST_NOTIFICATIONS = 'auditmanager:ListNotifications',
	LIST_TAGS_FOR_RESOURCE = 'auditmanager:ListTagsForResource',
	REGISTER_ACCOUNT = 'auditmanager:RegisterAccount',
	REGISTER_ORGANIZATION_ADMIN_ACCOUNT = 'auditmanager:RegisterOrganizationAdminAccount',
	START_ASSESSMENT_FRAMEWORK_SHARE = 'auditmanager:StartAssessmentFrameworkShare',
	TAG_RESOURCE = 'auditmanager:TagResource',
	UNTAG_RESOURCE = 'auditmanager:UntagResource',
	UPDATE_ASSESSMENT = 'auditmanager:UpdateAssessment',
	UPDATE_ASSESSMENT_CONTROL = 'auditmanager:UpdateAssessmentControl',
	UPDATE_ASSESSMENT_CONTROL_SET_STATUS = 'auditmanager:UpdateAssessmentControlSetStatus',
	UPDATE_ASSESSMENT_FRAMEWORK = 'auditmanager:UpdateAssessmentFramework',
	UPDATE_ASSESSMENT_FRAMEWORK_SHARE = 'auditmanager:UpdateAssessmentFrameworkShare',
	UPDATE_ASSESSMENT_STATUS = 'auditmanager:UpdateAssessmentStatus',
	UPDATE_CONTROL = 'auditmanager:UpdateControl',
	UPDATE_SETTINGS = 'auditmanager:UpdateSettings',
	VALIDATE_ASSESSMENT_REPORT_INTEGRITY = 'auditmanager:ValidateAssessmentReportIntegrity',
}
export enum GUARDDUTY {
	ACCEPT_INVITATION = 'guardduty:AcceptInvitation',
	ARCHIVE_FINDINGS = 'guardduty:ArchiveFindings',
	CREATE_DETECTOR = 'guardduty:CreateDetector',
	CREATE_FILTER = 'guardduty:CreateFilter',
	CREATE_IP_SET = 'guardduty:CreateIPSet',
	CREATE_MEMBERS = 'guardduty:CreateMembers',
	CREATE_PUBLISHING_DESTINATION = 'guardduty:CreatePublishingDestination',
	CREATE_SAMPLE_FINDINGS = 'guardduty:CreateSampleFindings',
	CREATE_THREAT_INTEL_SET = 'guardduty:CreateThreatIntelSet',
	DECLINE_INVITATIONS = 'guardduty:DeclineInvitations',
	DELETE_DETECTOR = 'guardduty:DeleteDetector',
	DELETE_FILTER = 'guardduty:DeleteFilter',
	DELETE_IP_SET = 'guardduty:DeleteIPSet',
	DELETE_INVITATIONS = 'guardduty:DeleteInvitations',
	DELETE_MEMBERS = 'guardduty:DeleteMembers',
	DELETE_PUBLISHING_DESTINATION = 'guardduty:DeletePublishingDestination',
	DELETE_THREAT_INTEL_SET = 'guardduty:DeleteThreatIntelSet',
	DESCRIBE_MALWARE_SCANS = 'guardduty:DescribeMalwareScans',
	DESCRIBE_ORGANIZATION_CONFIGURATION = 'guardduty:DescribeOrganizationConfiguration',
	DESCRIBE_PUBLISHING_DESTINATION = 'guardduty:DescribePublishingDestination',
	DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'guardduty:DisableOrganizationAdminAccount',
	DISASSOCIATE_FROM_MASTER_ACCOUNT = 'guardduty:DisassociateFromMasterAccount',
	DISASSOCIATE_MEMBERS = 'guardduty:DisassociateMembers',
	ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'guardduty:EnableOrganizationAdminAccount',
	GET_DETECTOR = 'guardduty:GetDetector',
	GET_FILTER = 'guardduty:GetFilter',
	GET_FINDINGS = 'guardduty:GetFindings',
	GET_FINDINGS_STATISTICS = 'guardduty:GetFindingsStatistics',
	GET_IP_SET = 'guardduty:GetIPSet',
	GET_INVITATIONS_COUNT = 'guardduty:GetInvitationsCount',
	GET_MALWARE_SCAN_SETTINGS = 'guardduty:GetMalwareScanSettings',
	GET_MASTER_ACCOUNT = 'guardduty:GetMasterAccount',
	GET_MEMBER_DETECTORS = 'guardduty:GetMemberDetectors',
	GET_MEMBERS = 'guardduty:GetMembers',
	GET_THREAT_INTEL_SET = 'guardduty:GetThreatIntelSet',
	GET_USAGE_STATISTICS = 'guardduty:GetUsageStatistics',
	INVITE_MEMBERS = 'guardduty:InviteMembers',
	LIST_DETECTORS = 'guardduty:ListDetectors',
	LIST_FILTERS = 'guardduty:ListFilters',
	LIST_FINDINGS = 'guardduty:ListFindings',
	LIST_IP_SETS = 'guardduty:ListIPSets',
	LIST_INVITATIONS = 'guardduty:ListInvitations',
	LIST_MEMBERS = 'guardduty:ListMembers',
	LIST_ORGANIZATION_ADMIN_ACCOUNTS = 'guardduty:ListOrganizationAdminAccounts',
	LIST_PUBLISHING_DESTINATIONS = 'guardduty:ListPublishingDestinations',
	LIST_TAGS_FOR_RESOURCE = 'guardduty:ListTagsForResource',
	LIST_THREAT_INTEL_SETS = 'guardduty:ListThreatIntelSets',
	START_MONITORING_MEMBERS = 'guardduty:StartMonitoringMembers',
	STOP_MONITORING_MEMBERS = 'guardduty:StopMonitoringMembers',
	TAG_RESOURCE = 'guardduty:TagResource',
	UNARCHIVE_FINDINGS = 'guardduty:UnarchiveFindings',
	UNTAG_RESOURCE = 'guardduty:UntagResource',
	UPDATE_DETECTOR = 'guardduty:UpdateDetector',
	UPDATE_FILTER = 'guardduty:UpdateFilter',
	UPDATE_FINDINGS_FEEDBACK = 'guardduty:UpdateFindingsFeedback',
	UPDATE_IP_SET = 'guardduty:UpdateIPSet',
	UPDATE_MALWARE_SCAN_SETTINGS = 'guardduty:UpdateMalwareScanSettings',
	UPDATE_MEMBER_DETECTORS = 'guardduty:UpdateMemberDetectors',
	UPDATE_ORGANIZATION_CONFIGURATION = 'guardduty:UpdateOrganizationConfiguration',
	UPDATE_PUBLISHING_DESTINATION = 'guardduty:UpdatePublishingDestination',
	UPDATE_THREAT_INTEL_SET = 'guardduty:UpdateThreatIntelSet',
}
export enum EVENTBRIDGE {
	ACTIVATE_EVENT_SOURCE = 'events:ActivateEventSource',
	CANCEL_REPLAY = 'events:CancelReplay',
	CREATE_API_DESTINATION = 'events:CreateApiDestination',
	CREATE_ARCHIVE = 'events:CreateArchive',
	CREATE_CONNECTION = 'events:CreateConnection',
	CREATE_ENDPOINT = 'events:CreateEndpoint',
	CREATE_EVENT_BUS = 'events:CreateEventBus',
	CREATE_PARTNER_EVENT_SOURCE = 'events:CreatePartnerEventSource',
	DEACTIVATE_EVENT_SOURCE = 'events:DeactivateEventSource',
	DEAUTHORIZE_CONNECTION = 'events:DeauthorizeConnection',
	DELETE_API_DESTINATION = 'events:DeleteApiDestination',
	DELETE_ARCHIVE = 'events:DeleteArchive',
	DELETE_CONNECTION = 'events:DeleteConnection',
	DELETE_ENDPOINT = 'events:DeleteEndpoint',
	DELETE_EVENT_BUS = 'events:DeleteEventBus',
	DELETE_PARTNER_EVENT_SOURCE = 'events:DeletePartnerEventSource',
	DELETE_RULE = 'events:DeleteRule',
	DESCRIBE_API_DESTINATION = 'events:DescribeApiDestination',
	DESCRIBE_ARCHIVE = 'events:DescribeArchive',
	DESCRIBE_CONNECTION = 'events:DescribeConnection',
	DESCRIBE_ENDPOINT = 'events:DescribeEndpoint',
	DESCRIBE_EVENT_BUS = 'events:DescribeEventBus',
	DESCRIBE_EVENT_SOURCE = 'events:DescribeEventSource',
	DESCRIBE_PARTNER_EVENT_SOURCE = 'events:DescribePartnerEventSource',
	DESCRIBE_REPLAY = 'events:DescribeReplay',
	DESCRIBE_RULE = 'events:DescribeRule',
	DISABLE_RULE = 'events:DisableRule',
	ENABLE_RULE = 'events:EnableRule',
	INVOKE_API_DESTINATION = 'events:InvokeApiDestination',
	LIST_API_DESTINATIONS = 'events:ListApiDestinations',
	LIST_ARCHIVES = 'events:ListArchives',
	LIST_CONNECTIONS = 'events:ListConnections',
	LIST_ENDPOINTS = 'events:ListEndpoints',
	LIST_EVENT_BUSES = 'events:ListEventBuses',
	LIST_EVENT_SOURCES = 'events:ListEventSources',
	LIST_PARTNER_EVENT_SOURCE_ACCOUNTS = 'events:ListPartnerEventSourceAccounts',
	LIST_PARTNER_EVENT_SOURCES = 'events:ListPartnerEventSources',
	LIST_REPLAYS = 'events:ListReplays',
	LIST_RULE_NAMES_BY_TARGET = 'events:ListRuleNamesByTarget',
	LIST_RULES = 'events:ListRules',
	LIST_TAGS_FOR_RESOURCE = 'events:ListTagsForResource',
	LIST_TARGETS_BY_RULE = 'events:ListTargetsByRule',
	PUT_EVENTS = 'events:PutEvents',
	PUT_PARTNER_EVENTS = 'events:PutPartnerEvents',
	PUT_PERMISSION = 'events:PutPermission',
	PUT_RULE = 'events:PutRule',
	PUT_TARGETS = 'events:PutTargets',
	REMOVE_PERMISSION = 'events:RemovePermission',
	REMOVE_TARGETS = 'events:RemoveTargets',
	START_REPLAY = 'events:StartReplay',
	TAG_RESOURCE = 'events:TagResource',
	TEST_EVENT_PATTERN = 'events:TestEventPattern',
	UNTAG_RESOURCE = 'events:UntagResource',
	UPDATE_API_DESTINATION = 'events:UpdateApiDestination',
	UPDATE_ARCHIVE = 'events:UpdateArchive',
	UPDATE_CONNECTION = 'events:UpdateConnection',
	UPDATE_ENDPOINT = 'events:UpdateEndpoint',
}
export enum LEX_V2 {
	BATCH_CREATE_CUSTOM_VOCABULARY_ITEM = 'lex:BatchCreateCustomVocabularyItem',
	BATCH_DELETE_CUSTOM_VOCABULARY_ITEM = 'lex:BatchDeleteCustomVocabularyItem',
	BATCH_UPDATE_CUSTOM_VOCABULARY_ITEM = 'lex:BatchUpdateCustomVocabularyItem',
	BUILD_BOT_LOCALE = 'lex:BuildBotLocale',
	CREATE_BOT = 'lex:CreateBot',
	CREATE_BOT_ALIAS = 'lex:CreateBotAlias',
	CREATE_BOT_CHANNEL = 'lex:CreateBotChannel',
	CREATE_BOT_LOCALE = 'lex:CreateBotLocale',
	CREATE_BOT_VERSION = 'lex:CreateBotVersion',
	CREATE_CUSTOM_VOCABULARY = 'lex:CreateCustomVocabulary',
	CREATE_EXPORT = 'lex:CreateExport',
	CREATE_INTENT = 'lex:CreateIntent',
	CREATE_RESOURCE_POLICY = 'lex:CreateResourcePolicy',
	CREATE_SLOT = 'lex:CreateSlot',
	CREATE_SLOT_TYPE = 'lex:CreateSlotType',
	CREATE_UPLOAD_URL = 'lex:CreateUploadUrl',
	DELETE_BOT = 'lex:DeleteBot',
	DELETE_BOT_ALIAS = 'lex:DeleteBotAlias',
	DELETE_BOT_CHANNEL = 'lex:DeleteBotChannel',
	DELETE_BOT_LOCALE = 'lex:DeleteBotLocale',
	DELETE_BOT_VERSION = 'lex:DeleteBotVersion',
	DELETE_CUSTOM_VOCABULARY = 'lex:DeleteCustomVocabulary',
	DELETE_EXPORT = 'lex:DeleteExport',
	DELETE_IMPORT = 'lex:DeleteImport',
	DELETE_INTENT = 'lex:DeleteIntent',
	DELETE_RESOURCE_POLICY = 'lex:DeleteResourcePolicy',
	DELETE_SESSION = 'lex:DeleteSession',
	DELETE_SLOT = 'lex:DeleteSlot',
	DELETE_SLOT_TYPE = 'lex:DeleteSlotType',
	DELETE_UTTERANCES = 'lex:DeleteUtterances',
	DESCRIBE_BOT = 'lex:DescribeBot',
	DESCRIBE_BOT_ALIAS = 'lex:DescribeBotAlias',
	DESCRIBE_BOT_CHANNEL = 'lex:DescribeBotChannel',
	DESCRIBE_BOT_LOCALE = 'lex:DescribeBotLocale',
	DESCRIBE_BOT_RECOMMENDATION = 'lex:DescribeBotRecommendation',
	DESCRIBE_BOT_VERSION = 'lex:DescribeBotVersion',
	DESCRIBE_CUSTOM_VOCABULARY = 'lex:DescribeCustomVocabulary',
	DESCRIBE_CUSTOM_VOCABULARY_METADATA = 'lex:DescribeCustomVocabularyMetadata',
	DESCRIBE_EXPORT = 'lex:DescribeExport',
	DESCRIBE_IMPORT = 'lex:DescribeImport',
	DESCRIBE_INTENT = 'lex:DescribeIntent',
	DESCRIBE_RESOURCE_POLICY = 'lex:DescribeResourcePolicy',
	DESCRIBE_SLOT = 'lex:DescribeSlot',
	DESCRIBE_SLOT_TYPE = 'lex:DescribeSlotType',
	GET_SESSION = 'lex:GetSession',
	LIST_AGGREGATED_UTTERANCES = 'lex:ListAggregatedUtterances',
	LIST_BOT_ALIASES = 'lex:ListBotAliases',
	LIST_BOT_CHANNELS = 'lex:ListBotChannels',
	LIST_BOT_LOCALES = 'lex:ListBotLocales',
	LIST_BOT_RECOMMENDATIONS = 'lex:ListBotRecommendations',
	LIST_BOT_VERSIONS = 'lex:ListBotVersions',
	LIST_BOTS = 'lex:ListBots',
	LIST_BUILT_IN_INTENTS = 'lex:ListBuiltInIntents',
	LIST_BUILT_IN_SLOT_TYPES = 'lex:ListBuiltInSlotTypes',
	LIST_CUSTOM_VOCABULARY_ITEMS = 'lex:ListCustomVocabularyItems',
	LIST_EXPORTS = 'lex:ListExports',
	LIST_IMPORTS = 'lex:ListImports',
	LIST_INTENTS = 'lex:ListIntents',
	LIST_RECOMMENDED_INTENTS = 'lex:ListRecommendedIntents',
	LIST_SLOT_TYPES = 'lex:ListSlotTypes',
	LIST_SLOTS = 'lex:ListSlots',
	LIST_TAGS_FOR_RESOURCE = 'lex:ListTagsForResource',
	PUT_SESSION = 'lex:PutSession',
	RECOGNIZE_TEXT = 'lex:RecognizeText',
	RECOGNIZE_UTTERANCE = 'lex:RecognizeUtterance',
	SEARCH_ASSOCIATED_TRANSCRIPTS = 'lex:SearchAssociatedTranscripts',
	START_BOT_RECOMMENDATION = 'lex:StartBotRecommendation',
	START_CONVERSATION = 'lex:StartConversation',
	START_IMPORT = 'lex:StartImport',
	STOP_BOT_RECOMMENDATION = 'lex:StopBotRecommendation',
	TAG_RESOURCE = 'lex:TagResource',
	UNTAG_RESOURCE = 'lex:UntagResource',
	UPDATE_BOT = 'lex:UpdateBot',
	UPDATE_BOT_ALIAS = 'lex:UpdateBotAlias',
	UPDATE_BOT_LOCALE = 'lex:UpdateBotLocale',
	UPDATE_BOT_RECOMMENDATION = 'lex:UpdateBotRecommendation',
	UPDATE_CUSTOM_VOCABULARY = 'lex:UpdateCustomVocabulary',
	UPDATE_EXPORT = 'lex:UpdateExport',
	UPDATE_INTENT = 'lex:UpdateIntent',
	UPDATE_RESOURCE_POLICY = 'lex:UpdateResourcePolicy',
	UPDATE_SLOT = 'lex:UpdateSlot',
	UPDATE_SLOT_TYPE = 'lex:UpdateSlotType',
}
export enum LEX {
	CREATE_BOT_VERSION = 'lex:CreateBotVersion',
	CREATE_INTENT_VERSION = 'lex:CreateIntentVersion',
	CREATE_SLOT_TYPE_VERSION = 'lex:CreateSlotTypeVersion',
	DELETE_BOT = 'lex:DeleteBot',
	DELETE_BOT_ALIAS = 'lex:DeleteBotAlias',
	DELETE_BOT_CHANNEL_ASSOCIATION = 'lex:DeleteBotChannelAssociation',
	DELETE_BOT_VERSION = 'lex:DeleteBotVersion',
	DELETE_INTENT = 'lex:DeleteIntent',
	DELETE_INTENT_VERSION = 'lex:DeleteIntentVersion',
	DELETE_SESSION = 'lex:DeleteSession',
	DELETE_SLOT_TYPE = 'lex:DeleteSlotType',
	DELETE_SLOT_TYPE_VERSION = 'lex:DeleteSlotTypeVersion',
	DELETE_UTTERANCES = 'lex:DeleteUtterances',
	GET_BOT = 'lex:GetBot',
	GET_BOT_ALIAS = 'lex:GetBotAlias',
	GET_BOT_ALIASES = 'lex:GetBotAliases',
	GET_BOT_CHANNEL_ASSOCIATION = 'lex:GetBotChannelAssociation',
	GET_BOT_CHANNEL_ASSOCIATIONS = 'lex:GetBotChannelAssociations',
	GET_BOT_VERSIONS = 'lex:GetBotVersions',
	GET_BOTS = 'lex:GetBots',
	GET_BUILTIN_INTENT = 'lex:GetBuiltinIntent',
	GET_BUILTIN_INTENTS = 'lex:GetBuiltinIntents',
	GET_BUILTIN_SLOT_TYPES = 'lex:GetBuiltinSlotTypes',
	GET_EXPORT = 'lex:GetExport',
	GET_IMPORT = 'lex:GetImport',
	GET_INTENT = 'lex:GetIntent',
	GET_INTENT_VERSIONS = 'lex:GetIntentVersions',
	GET_INTENTS = 'lex:GetIntents',
	GET_MIGRATION = 'lex:GetMigration',
	GET_MIGRATIONS = 'lex:GetMigrations',
	GET_SESSION = 'lex:GetSession',
	GET_SLOT_TYPE = 'lex:GetSlotType',
	GET_SLOT_TYPE_VERSIONS = 'lex:GetSlotTypeVersions',
	GET_SLOT_TYPES = 'lex:GetSlotTypes',
	GET_UTTERANCES_VIEW = 'lex:GetUtterancesView',
	LIST_TAGS_FOR_RESOURCE = 'lex:ListTagsForResource',
	POST_CONTENT = 'lex:PostContent',
	POST_TEXT = 'lex:PostText',
	PUT_BOT = 'lex:PutBot',
	PUT_BOT_ALIAS = 'lex:PutBotAlias',
	PUT_INTENT = 'lex:PutIntent',
	PUT_SESSION = 'lex:PutSession',
	PUT_SLOT_TYPE = 'lex:PutSlotType',
	START_IMPORT = 'lex:StartImport',
	START_MIGRATION = 'lex:StartMigration',
	TAG_RESOURCE = 'lex:TagResource',
	UNTAG_RESOURCE = 'lex:UntagResource',
}
export enum PROTON {
	ACCEPT_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:AcceptEnvironmentAccountConnection',
	CANCEL_COMPONENT_DEPLOYMENT = 'proton:CancelComponentDeployment',
	CANCEL_ENVIRONMENT_DEPLOYMENT = 'proton:CancelEnvironmentDeployment',
	CANCEL_SERVICE_INSTANCE_DEPLOYMENT = 'proton:CancelServiceInstanceDeployment',
	CANCEL_SERVICE_PIPELINE_DEPLOYMENT = 'proton:CancelServicePipelineDeployment',
	CREATE_COMPONENT = 'proton:CreateComponent',
	CREATE_ENVIRONMENT = 'proton:CreateEnvironment',
	CREATE_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:CreateEnvironmentAccountConnection',
	CREATE_ENVIRONMENT_TEMPLATE = 'proton:CreateEnvironmentTemplate',
	CREATE_ENVIRONMENT_TEMPLATE_MAJOR_VERSION = 'proton:CreateEnvironmentTemplateMajorVersion',
	CREATE_ENVIRONMENT_TEMPLATE_MINOR_VERSION = 'proton:CreateEnvironmentTemplateMinorVersion',
	CREATE_ENVIRONMENT_TEMPLATE_VERSION = 'proton:CreateEnvironmentTemplateVersion',
	CREATE_REPOSITORY = 'proton:CreateRepository',
	CREATE_SERVICE = 'proton:CreateService',
	CREATE_SERVICE_TEMPLATE = 'proton:CreateServiceTemplate',
	CREATE_SERVICE_TEMPLATE_MAJOR_VERSION = 'proton:CreateServiceTemplateMajorVersion',
	CREATE_SERVICE_TEMPLATE_MINOR_VERSION = 'proton:CreateServiceTemplateMinorVersion',
	CREATE_SERVICE_TEMPLATE_VERSION = 'proton:CreateServiceTemplateVersion',
	CREATE_TEMPLATE_SYNC_CONFIG = 'proton:CreateTemplateSyncConfig',
	DELETE_ACCOUNT_ROLES = 'proton:DeleteAccountRoles',
	DELETE_COMPONENT = 'proton:DeleteComponent',
	DELETE_ENVIRONMENT = 'proton:DeleteEnvironment',
	DELETE_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:DeleteEnvironmentAccountConnection',
	DELETE_ENVIRONMENT_TEMPLATE = 'proton:DeleteEnvironmentTemplate',
	DELETE_ENVIRONMENT_TEMPLATE_MAJOR_VERSION = 'proton:DeleteEnvironmentTemplateMajorVersion',
	DELETE_ENVIRONMENT_TEMPLATE_MINOR_VERSION = 'proton:DeleteEnvironmentTemplateMinorVersion',
	DELETE_ENVIRONMENT_TEMPLATE_VERSION = 'proton:DeleteEnvironmentTemplateVersion',
	DELETE_REPOSITORY = 'proton:DeleteRepository',
	DELETE_SERVICE = 'proton:DeleteService',
	DELETE_SERVICE_TEMPLATE = 'proton:DeleteServiceTemplate',
	DELETE_SERVICE_TEMPLATE_MAJOR_VERSION = 'proton:DeleteServiceTemplateMajorVersion',
	DELETE_SERVICE_TEMPLATE_MINOR_VERSION = 'proton:DeleteServiceTemplateMinorVersion',
	DELETE_SERVICE_TEMPLATE_VERSION = 'proton:DeleteServiceTemplateVersion',
	DELETE_TEMPLATE_SYNC_CONFIG = 'proton:DeleteTemplateSyncConfig',
	GET_ACCOUNT_ROLES = 'proton:GetAccountRoles',
	GET_ACCOUNT_SETTINGS = 'proton:GetAccountSettings',
	GET_COMPONENT = 'proton:GetComponent',
	GET_ENVIRONMENT = 'proton:GetEnvironment',
	GET_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:GetEnvironmentAccountConnection',
	GET_ENVIRONMENT_TEMPLATE = 'proton:GetEnvironmentTemplate',
	GET_ENVIRONMENT_TEMPLATE_MAJOR_VERSION = 'proton:GetEnvironmentTemplateMajorVersion',
	GET_ENVIRONMENT_TEMPLATE_MINOR_VERSION = 'proton:GetEnvironmentTemplateMinorVersion',
	GET_ENVIRONMENT_TEMPLATE_VERSION = 'proton:GetEnvironmentTemplateVersion',
	GET_REPOSITORY = 'proton:GetRepository',
	GET_REPOSITORY_SYNC_STATUS = 'proton:GetRepositorySyncStatus',
	GET_RESOURCE_TEMPLATE_VERSION_STATUS_COUNTS = 'proton:GetResourceTemplateVersionStatusCounts',
	GET_RESOURCES_SUMMARY = 'proton:GetResourcesSummary',
	GET_SERVICE = 'proton:GetService',
	GET_SERVICE_INSTANCE = 'proton:GetServiceInstance',
	GET_SERVICE_TEMPLATE = 'proton:GetServiceTemplate',
	GET_SERVICE_TEMPLATE_MAJOR_VERSION = 'proton:GetServiceTemplateMajorVersion',
	GET_SERVICE_TEMPLATE_MINOR_VERSION = 'proton:GetServiceTemplateMinorVersion',
	GET_SERVICE_TEMPLATE_VERSION = 'proton:GetServiceTemplateVersion',
	GET_TEMPLATE_SYNC_CONFIG = 'proton:GetTemplateSyncConfig',
	GET_TEMPLATE_SYNC_STATUS = 'proton:GetTemplateSyncStatus',
	LIST_COMPONENT_OUTPUTS = 'proton:ListComponentOutputs',
	LIST_COMPONENT_PROVISIONED_RESOURCES = 'proton:ListComponentProvisionedResources',
	LIST_COMPONENTS = 'proton:ListComponents',
	LIST_ENVIRONMENT_ACCOUNT_CONNECTIONS = 'proton:ListEnvironmentAccountConnections',
	LIST_ENVIRONMENT_OUTPUTS = 'proton:ListEnvironmentOutputs',
	LIST_ENVIRONMENT_PROVISIONED_RESOURCES = 'proton:ListEnvironmentProvisionedResources',
	LIST_ENVIRONMENT_TEMPLATE_MAJOR_VERSIONS = 'proton:ListEnvironmentTemplateMajorVersions',
	LIST_ENVIRONMENT_TEMPLATE_MINOR_VERSIONS = 'proton:ListEnvironmentTemplateMinorVersions',
	LIST_ENVIRONMENT_TEMPLATE_VERSIONS = 'proton:ListEnvironmentTemplateVersions',
	LIST_ENVIRONMENT_TEMPLATES = 'proton:ListEnvironmentTemplates',
	LIST_ENVIRONMENTS = 'proton:ListEnvironments',
	LIST_REPOSITORIES = 'proton:ListRepositories',
	LIST_REPOSITORY_SYNC_DEFINITIONS = 'proton:ListRepositorySyncDefinitions',
	LIST_SERVICE_INSTANCE_OUTPUTS = 'proton:ListServiceInstanceOutputs',
	LIST_SERVICE_INSTANCE_PROVISIONED_RESOURCES = 'proton:ListServiceInstanceProvisionedResources',
	LIST_SERVICE_INSTANCES = 'proton:ListServiceInstances',
	LIST_SERVICE_PIPELINE_OUTPUTS = 'proton:ListServicePipelineOutputs',
	LIST_SERVICE_PIPELINE_PROVISIONED_RESOURCES = 'proton:ListServicePipelineProvisionedResources',
	LIST_SERVICE_TEMPLATE_MAJOR_VERSIONS = 'proton:ListServiceTemplateMajorVersions',
	LIST_SERVICE_TEMPLATE_MINOR_VERSIONS = 'proton:ListServiceTemplateMinorVersions',
	LIST_SERVICE_TEMPLATE_VERSIONS = 'proton:ListServiceTemplateVersions',
	LIST_SERVICE_TEMPLATES = 'proton:ListServiceTemplates',
	LIST_SERVICES = 'proton:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'proton:ListTagsForResource',
	NOTIFY_RESOURCE_DEPLOYMENT_STATUS_CHANGE = 'proton:NotifyResourceDeploymentStatusChange',
	REJECT_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:RejectEnvironmentAccountConnection',
	TAG_RESOURCE = 'proton:TagResource',
	UNTAG_RESOURCE = 'proton:UntagResource',
	UPDATE_ACCOUNT_ROLES = 'proton:UpdateAccountRoles',
	UPDATE_ACCOUNT_SETTINGS = 'proton:UpdateAccountSettings',
	UPDATE_COMPONENT = 'proton:UpdateComponent',
	UPDATE_ENVIRONMENT = 'proton:UpdateEnvironment',
	UPDATE_ENVIRONMENT_ACCOUNT_CONNECTION = 'proton:UpdateEnvironmentAccountConnection',
	UPDATE_ENVIRONMENT_TEMPLATE = 'proton:UpdateEnvironmentTemplate',
	UPDATE_ENVIRONMENT_TEMPLATE_MAJOR_VERSION = 'proton:UpdateEnvironmentTemplateMajorVersion',
	UPDATE_ENVIRONMENT_TEMPLATE_MINOR_VERSION = 'proton:UpdateEnvironmentTemplateMinorVersion',
	UPDATE_ENVIRONMENT_TEMPLATE_VERSION = 'proton:UpdateEnvironmentTemplateVersion',
	UPDATE_SERVICE = 'proton:UpdateService',
	UPDATE_SERVICE_INSTANCE = 'proton:UpdateServiceInstance',
	UPDATE_SERVICE_PIPELINE = 'proton:UpdateServicePipeline',
	UPDATE_SERVICE_TEMPLATE = 'proton:UpdateServiceTemplate',
	UPDATE_SERVICE_TEMPLATE_MAJOR_VERSION = 'proton:UpdateServiceTemplateMajorVersion',
	UPDATE_SERVICE_TEMPLATE_MINOR_VERSION = 'proton:UpdateServiceTemplateMinorVersion',
	UPDATE_SERVICE_TEMPLATE_VERSION = 'proton:UpdateServiceTemplateVersion',
	UPDATE_TEMPLATE_SYNC_CONFIG = 'proton:UpdateTemplateSyncConfig',
}
export enum RESOURCE_ACCESS_MANAGER {
	ACCEPT_RESOURCE_SHARE_INVITATION = 'ram:AcceptResourceShareInvitation',
	ASSOCIATE_RESOURCE_SHARE = 'ram:AssociateResourceShare',
	ASSOCIATE_RESOURCE_SHARE_PERMISSION = 'ram:AssociateResourceSharePermission',
	CREATE_RESOURCE_SHARE = 'ram:CreateResourceShare',
	DELETE_RESOURCE_SHARE = 'ram:DeleteResourceShare',
	DISASSOCIATE_RESOURCE_SHARE = 'ram:DisassociateResourceShare',
	DISASSOCIATE_RESOURCE_SHARE_PERMISSION = 'ram:DisassociateResourceSharePermission',
	ENABLE_SHARING_WITH_AWS_ORGANIZATION = 'ram:EnableSharingWithAwsOrganization',
	GET_PERMISSION = 'ram:GetPermission',
	GET_RESOURCE_POLICIES = 'ram:GetResourcePolicies',
	GET_RESOURCE_SHARE_ASSOCIATIONS = 'ram:GetResourceShareAssociations',
	GET_RESOURCE_SHARE_INVITATIONS = 'ram:GetResourceShareInvitations',
	GET_RESOURCE_SHARES = 'ram:GetResourceShares',
	LIST_PENDING_INVITATION_RESOURCES = 'ram:ListPendingInvitationResources',
	LIST_PERMISSION_VERSIONS = 'ram:ListPermissionVersions',
	LIST_PERMISSIONS = 'ram:ListPermissions',
	LIST_PRINCIPALS = 'ram:ListPrincipals',
	LIST_RESOURCE_SHARE_PERMISSIONS = 'ram:ListResourceSharePermissions',
	LIST_RESOURCE_TYPES = 'ram:ListResourceTypes',
	LIST_RESOURCES = 'ram:ListResources',
	PROMOTE_RESOURCE_SHARE_CREATED_FROM_POLICY = 'ram:PromoteResourceShareCreatedFromPolicy',
	REJECT_RESOURCE_SHARE_INVITATION = 'ram:RejectResourceShareInvitation',
	TAG_RESOURCE = 'ram:TagResource',
	UNTAG_RESOURCE = 'ram:UntagResource',
	UPDATE_RESOURCE_SHARE = 'ram:UpdateResourceShare',
}
export enum ELEMENTAL_MEDIACONNECT {
	ADD_FLOW_MEDIA_STREAMS = 'mediaconnect:AddFlowMediaStreams',
	ADD_FLOW_OUTPUTS = 'mediaconnect:AddFlowOutputs',
	ADD_FLOW_SOURCES = 'mediaconnect:AddFlowSources',
	ADD_FLOW_VPC_INTERFACES = 'mediaconnect:AddFlowVpcInterfaces',
	CREATE_FLOW = 'mediaconnect:CreateFlow',
	DELETE_FLOW = 'mediaconnect:DeleteFlow',
	DESCRIBE_FLOW = 'mediaconnect:DescribeFlow',
	DESCRIBE_OFFERING = 'mediaconnect:DescribeOffering',
	DESCRIBE_RESERVATION = 'mediaconnect:DescribeReservation',
	GRANT_FLOW_ENTITLEMENTS = 'mediaconnect:GrantFlowEntitlements',
	LIST_ENTITLEMENTS = 'mediaconnect:ListEntitlements',
	LIST_FLOWS = 'mediaconnect:ListFlows',
	LIST_OFFERINGS = 'mediaconnect:ListOfferings',
	LIST_RESERVATIONS = 'mediaconnect:ListReservations',
	LIST_TAGS_FOR_RESOURCE = 'mediaconnect:ListTagsForResource',
	PURCHASE_OFFERING = 'mediaconnect:PurchaseOffering',
	REMOVE_FLOW_MEDIA_STREAM = 'mediaconnect:RemoveFlowMediaStream',
	REMOVE_FLOW_OUTPUT = 'mediaconnect:RemoveFlowOutput',
	REMOVE_FLOW_SOURCE = 'mediaconnect:RemoveFlowSource',
	REMOVE_FLOW_VPC_INTERFACE = 'mediaconnect:RemoveFlowVpcInterface',
	REVOKE_FLOW_ENTITLEMENT = 'mediaconnect:RevokeFlowEntitlement',
	START_FLOW = 'mediaconnect:StartFlow',
	STOP_FLOW = 'mediaconnect:StopFlow',
	TAG_RESOURCE = 'mediaconnect:TagResource',
	UNTAG_RESOURCE = 'mediaconnect:UntagResource',
	UPDATE_FLOW = 'mediaconnect:UpdateFlow',
	UPDATE_FLOW_ENTITLEMENT = 'mediaconnect:UpdateFlowEntitlement',
	UPDATE_FLOW_MEDIA_STREAM = 'mediaconnect:UpdateFlowMediaStream',
	UPDATE_FLOW_OUTPUT = 'mediaconnect:UpdateFlowOutput',
	UPDATE_FLOW_SOURCE = 'mediaconnect:UpdateFlowSource',
}
export enum S3 {
	ABORT_MULTIPART_UPLOAD = 's3:AbortMultipartUpload',
	BYPASS_GOVERNANCE_RETENTION = 's3:BypassGovernanceRetention',
	CREATE_ACCESS_POINT = 's3:CreateAccessPoint',
	CREATE_ACCESS_POINT_FOR_OBJECT_LAMBDA = 's3:CreateAccessPointForObjectLambda',
	CREATE_BUCKET = 's3:CreateBucket',
	CREATE_JOB = 's3:CreateJob',
	CREATE_MULTI_REGION_ACCESS_POINT = 's3:CreateMultiRegionAccessPoint',
	DELETE_ACCESS_POINT = 's3:DeleteAccessPoint',
	DELETE_ACCESS_POINT_FOR_OBJECT_LAMBDA = 's3:DeleteAccessPointForObjectLambda',
	DELETE_ACCESS_POINT_POLICY = 's3:DeleteAccessPointPolicy',
	DELETE_ACCESS_POINT_POLICY_FOR_OBJECT_LAMBDA = 's3:DeleteAccessPointPolicyForObjectLambda',
	DELETE_BUCKET = 's3:DeleteBucket',
	DELETE_BUCKET_POLICY = 's3:DeleteBucketPolicy',
	DELETE_BUCKET_WEBSITE = 's3:DeleteBucketWebsite',
	DELETE_JOB_TAGGING = 's3:DeleteJobTagging',
	DELETE_MULTI_REGION_ACCESS_POINT = 's3:DeleteMultiRegionAccessPoint',
	DELETE_OBJECT = 's3:DeleteObject',
	DELETE_OBJECT_TAGGING = 's3:DeleteObjectTagging',
	DELETE_OBJECT_VERSION = 's3:DeleteObjectVersion',
	DELETE_OBJECT_VERSION_TAGGING = 's3:DeleteObjectVersionTagging',
	DELETE_STORAGE_LENS_CONFIGURATION = 's3:DeleteStorageLensConfiguration',
	DELETE_STORAGE_LENS_CONFIGURATION_TAGGING = 's3:DeleteStorageLensConfigurationTagging',
	DESCRIBE_JOB = 's3:DescribeJob',
	DESCRIBE_MULTI_REGION_ACCESS_POINT_OPERATION = 's3:DescribeMultiRegionAccessPointOperation',
	GET_ACCELERATE_CONFIGURATION = 's3:GetAccelerateConfiguration',
	GET_ACCESS_POINT = 's3:GetAccessPoint',
	GET_ACCESS_POINT_CONFIGURATION_FOR_OBJECT_LAMBDA = 's3:GetAccessPointConfigurationForObjectLambda',
	GET_ACCESS_POINT_FOR_OBJECT_LAMBDA = 's3:GetAccessPointForObjectLambda',
	GET_ACCESS_POINT_POLICY = 's3:GetAccessPointPolicy',
	GET_ACCESS_POINT_POLICY_FOR_OBJECT_LAMBDA = 's3:GetAccessPointPolicyForObjectLambda',
	GET_ACCESS_POINT_POLICY_STATUS = 's3:GetAccessPointPolicyStatus',
	GET_ACCESS_POINT_POLICY_STATUS_FOR_OBJECT_LAMBDA = 's3:GetAccessPointPolicyStatusForObjectLambda',
	GET_ACCOUNT_PUBLIC_ACCESS_BLOCK = 's3:GetAccountPublicAccessBlock',
	GET_ANALYTICS_CONFIGURATION = 's3:GetAnalyticsConfiguration',
	GET_BUCKET_ACL = 's3:GetBucketAcl',
	GET_BUCKET_CORS = 's3:GetBucketCORS',
	GET_BUCKET_LOCATION = 's3:GetBucketLocation',
	GET_BUCKET_LOGGING = 's3:GetBucketLogging',
	GET_BUCKET_NOTIFICATION = 's3:GetBucketNotification',
	GET_BUCKET_OBJECT_LOCK_CONFIGURATION = 's3:GetBucketObjectLockConfiguration',
	GET_BUCKET_OWNERSHIP_CONTROLS = 's3:GetBucketOwnershipControls',
	GET_BUCKET_POLICY = 's3:GetBucketPolicy',
	GET_BUCKET_POLICY_STATUS = 's3:GetBucketPolicyStatus',
	GET_BUCKET_PUBLIC_ACCESS_BLOCK = 's3:GetBucketPublicAccessBlock',
	GET_BUCKET_REQUEST_PAYMENT = 's3:GetBucketRequestPayment',
	GET_BUCKET_TAGGING = 's3:GetBucketTagging',
	GET_BUCKET_VERSIONING = 's3:GetBucketVersioning',
	GET_BUCKET_WEBSITE = 's3:GetBucketWebsite',
	GET_ENCRYPTION_CONFIGURATION = 's3:GetEncryptionConfiguration',
	GET_INTELLIGENT_TIERING_CONFIGURATION = 's3:GetIntelligentTieringConfiguration',
	GET_INVENTORY_CONFIGURATION = 's3:GetInventoryConfiguration',
	GET_JOB_TAGGING = 's3:GetJobTagging',
	GET_LIFECYCLE_CONFIGURATION = 's3:GetLifecycleConfiguration',
	GET_METRICS_CONFIGURATION = 's3:GetMetricsConfiguration',
	GET_MULTI_REGION_ACCESS_POINT = 's3:GetMultiRegionAccessPoint',
	GET_MULTI_REGION_ACCESS_POINT_POLICY = 's3:GetMultiRegionAccessPointPolicy',
	GET_MULTI_REGION_ACCESS_POINT_POLICY_STATUS = 's3:GetMultiRegionAccessPointPolicyStatus',
	GET_MULTI_REGION_ACCESS_POINT_ROUTES = 's3:GetMultiRegionAccessPointRoutes',
	GET_OBJECT = 's3:GetObject',
	GET_OBJECT_ACL = 's3:GetObjectAcl',
	GET_OBJECT_ATTRIBUTES = 's3:GetObjectAttributes',
	GET_OBJECT_LEGAL_HOLD = 's3:GetObjectLegalHold',
	GET_OBJECT_RETENTION = 's3:GetObjectRetention',
	GET_OBJECT_TAGGING = 's3:GetObjectTagging',
	GET_OBJECT_TORRENT = 's3:GetObjectTorrent',
	GET_OBJECT_VERSION = 's3:GetObjectVersion',
	GET_OBJECT_VERSION_ACL = 's3:GetObjectVersionAcl',
	GET_OBJECT_VERSION_ATTRIBUTES = 's3:GetObjectVersionAttributes',
	GET_OBJECT_VERSION_FOR_REPLICATION = 's3:GetObjectVersionForReplication',
	GET_OBJECT_VERSION_TAGGING = 's3:GetObjectVersionTagging',
	GET_OBJECT_VERSION_TORRENT = 's3:GetObjectVersionTorrent',
	GET_REPLICATION_CONFIGURATION = 's3:GetReplicationConfiguration',
	GET_STORAGE_LENS_CONFIGURATION = 's3:GetStorageLensConfiguration',
	GET_STORAGE_LENS_CONFIGURATION_TAGGING = 's3:GetStorageLensConfigurationTagging',
	GET_STORAGE_LENS_DASHBOARD = 's3:GetStorageLensDashboard',
	INITIATE_REPLICATION = 's3:InitiateReplication',
	LIST_ACCESS_POINTS = 's3:ListAccessPoints',
	LIST_ACCESS_POINTS_FOR_OBJECT_LAMBDA = 's3:ListAccessPointsForObjectLambda',
	LIST_ALL_MY_BUCKETS = 's3:ListAllMyBuckets',
	LIST_BUCKET = 's3:ListBucket',
	LIST_BUCKET_MULTIPART_UPLOADS = 's3:ListBucketMultipartUploads',
	LIST_BUCKET_VERSIONS = 's3:ListBucketVersions',
	LIST_JOBS = 's3:ListJobs',
	LIST_MULTI_REGION_ACCESS_POINTS = 's3:ListMultiRegionAccessPoints',
	LIST_MULTIPART_UPLOAD_PARTS = 's3:ListMultipartUploadParts',
	LIST_STORAGE_LENS_CONFIGURATIONS = 's3:ListStorageLensConfigurations',
	OBJECT_OWNER_OVERRIDE_TO_BUCKET_OWNER = 's3:ObjectOwnerOverrideToBucketOwner',
	PUT_ACCELERATE_CONFIGURATION = 's3:PutAccelerateConfiguration',
	PUT_ACCESS_POINT_CONFIGURATION_FOR_OBJECT_LAMBDA = 's3:PutAccessPointConfigurationForObjectLambda',
	PUT_ACCESS_POINT_POLICY = 's3:PutAccessPointPolicy',
	PUT_ACCESS_POINT_POLICY_FOR_OBJECT_LAMBDA = 's3:PutAccessPointPolicyForObjectLambda',
	PUT_ACCESS_POINT_PUBLIC_ACCESS_BLOCK = 's3:PutAccessPointPublicAccessBlock',
	PUT_ACCOUNT_PUBLIC_ACCESS_BLOCK = 's3:PutAccountPublicAccessBlock',
	PUT_ANALYTICS_CONFIGURATION = 's3:PutAnalyticsConfiguration',
	PUT_BUCKET_ACL = 's3:PutBucketAcl',
	PUT_BUCKET_CORS = 's3:PutBucketCORS',
	PUT_BUCKET_LOGGING = 's3:PutBucketLogging',
	PUT_BUCKET_NOTIFICATION = 's3:PutBucketNotification',
	PUT_BUCKET_OBJECT_LOCK_CONFIGURATION = 's3:PutBucketObjectLockConfiguration',
	PUT_BUCKET_OWNERSHIP_CONTROLS = 's3:PutBucketOwnershipControls',
	PUT_BUCKET_POLICY = 's3:PutBucketPolicy',
	PUT_BUCKET_PUBLIC_ACCESS_BLOCK = 's3:PutBucketPublicAccessBlock',
	PUT_BUCKET_REQUEST_PAYMENT = 's3:PutBucketRequestPayment',
	PUT_BUCKET_TAGGING = 's3:PutBucketTagging',
	PUT_BUCKET_VERSIONING = 's3:PutBucketVersioning',
	PUT_BUCKET_WEBSITE = 's3:PutBucketWebsite',
	PUT_ENCRYPTION_CONFIGURATION = 's3:PutEncryptionConfiguration',
	PUT_INTELLIGENT_TIERING_CONFIGURATION = 's3:PutIntelligentTieringConfiguration',
	PUT_INVENTORY_CONFIGURATION = 's3:PutInventoryConfiguration',
	PUT_JOB_TAGGING = 's3:PutJobTagging',
	PUT_LIFECYCLE_CONFIGURATION = 's3:PutLifecycleConfiguration',
	PUT_METRICS_CONFIGURATION = 's3:PutMetricsConfiguration',
	PUT_MULTI_REGION_ACCESS_POINT_POLICY = 's3:PutMultiRegionAccessPointPolicy',
	PUT_OBJECT = 's3:PutObject',
	PUT_OBJECT_ACL = 's3:PutObjectAcl',
	PUT_OBJECT_LEGAL_HOLD = 's3:PutObjectLegalHold',
	PUT_OBJECT_RETENTION = 's3:PutObjectRetention',
	PUT_OBJECT_TAGGING = 's3:PutObjectTagging',
	PUT_OBJECT_VERSION_ACL = 's3:PutObjectVersionAcl',
	PUT_OBJECT_VERSION_TAGGING = 's3:PutObjectVersionTagging',
	PUT_REPLICATION_CONFIGURATION = 's3:PutReplicationConfiguration',
	PUT_STORAGE_LENS_CONFIGURATION = 's3:PutStorageLensConfiguration',
	PUT_STORAGE_LENS_CONFIGURATION_TAGGING = 's3:PutStorageLensConfigurationTagging',
	REPLICATE_DELETE = 's3:ReplicateDelete',
	REPLICATE_OBJECT = 's3:ReplicateObject',
	REPLICATE_TAGS = 's3:ReplicateTags',
	RESTORE_OBJECT = 's3:RestoreObject',
	SUBMIT_MULTI_REGION_ACCESS_POINT_ROUTES = 's3:SubmitMultiRegionAccessPointRoutes',
	UPDATE_JOB_PRIORITY = 's3:UpdateJobPriority',
	UPDATE_JOB_STATUS = 's3:UpdateJobStatus',
}
export enum SAGEMAKER {
	ADD_ASSOCIATION = 'sagemaker:AddAssociation',
	ADD_TAGS = 'sagemaker:AddTags',
	ASSOCIATE_TRIAL_COMPONENT = 'sagemaker:AssociateTrialComponent',
	BATCH_DESCRIBE_MODEL_PACKAGE = 'sagemaker:BatchDescribeModelPackage',
	BATCH_GET_METRICS = 'sagemaker:BatchGetMetrics',
	BATCH_GET_RECORD = 'sagemaker:BatchGetRecord',
	BATCH_PUT_METRICS = 'sagemaker:BatchPutMetrics',
	CREATE_ACTION = 'sagemaker:CreateAction',
	CREATE_ALGORITHM = 'sagemaker:CreateAlgorithm',
	CREATE_APP = 'sagemaker:CreateApp',
	CREATE_APP_IMAGE_CONFIG = 'sagemaker:CreateAppImageConfig',
	CREATE_ARTIFACT = 'sagemaker:CreateArtifact',
	CREATE_AUTO_ML_JOB = 'sagemaker:CreateAutoMLJob',
	CREATE_CODE_REPOSITORY = 'sagemaker:CreateCodeRepository',
	CREATE_COMPILATION_JOB = 'sagemaker:CreateCompilationJob',
	CREATE_CONTEXT = 'sagemaker:CreateContext',
	CREATE_DATA_QUALITY_JOB_DEFINITION = 'sagemaker:CreateDataQualityJobDefinition',
	CREATE_DEVICE_FLEET = 'sagemaker:CreateDeviceFleet',
	CREATE_DOMAIN = 'sagemaker:CreateDomain',
	CREATE_EDGE_DEPLOYMENT_PLAN = 'sagemaker:CreateEdgeDeploymentPlan',
	CREATE_EDGE_DEPLOYMENT_STAGE = 'sagemaker:CreateEdgeDeploymentStage',
	CREATE_EDGE_PACKAGING_JOB = 'sagemaker:CreateEdgePackagingJob',
	CREATE_ENDPOINT = 'sagemaker:CreateEndpoint',
	CREATE_ENDPOINT_CONFIG = 'sagemaker:CreateEndpointConfig',
	CREATE_EXPERIMENT = 'sagemaker:CreateExperiment',
	CREATE_FEATURE_GROUP = 'sagemaker:CreateFeatureGroup',
	CREATE_FLOW_DEFINITION = 'sagemaker:CreateFlowDefinition',
	CREATE_HUB = 'sagemaker:CreateHub',
	CREATE_HUMAN_TASK_UI = 'sagemaker:CreateHumanTaskUi',
	CREATE_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:CreateHyperParameterTuningJob',
	CREATE_IMAGE = 'sagemaker:CreateImage',
	CREATE_IMAGE_VERSION = 'sagemaker:CreateImageVersion',
	CREATE_INFERENCE_EXPERIMENT = 'sagemaker:CreateInferenceExperiment',
	CREATE_INFERENCE_RECOMMENDATIONS_JOB = 'sagemaker:CreateInferenceRecommendationsJob',
	CREATE_LABELING_JOB = 'sagemaker:CreateLabelingJob',
	CREATE_LINEAGE_GROUP_POLICY = 'sagemaker:CreateLineageGroupPolicy',
	CREATE_MODEL = 'sagemaker:CreateModel',
	CREATE_MODEL_BIAS_JOB_DEFINITION = 'sagemaker:CreateModelBiasJobDefinition',
	CREATE_MODEL_CARD = 'sagemaker:CreateModelCard',
	CREATE_MODEL_CARD_EXPORT_JOB = 'sagemaker:CreateModelCardExportJob',
	CREATE_MODEL_EXPLAINABILITY_JOB_DEFINITION = 'sagemaker:CreateModelExplainabilityJobDefinition',
	CREATE_MODEL_PACKAGE = 'sagemaker:CreateModelPackage',
	CREATE_MODEL_PACKAGE_GROUP = 'sagemaker:CreateModelPackageGroup',
	CREATE_MODEL_QUALITY_JOB_DEFINITION = 'sagemaker:CreateModelQualityJobDefinition',
	CREATE_MONITORING_SCHEDULE = 'sagemaker:CreateMonitoringSchedule',
	CREATE_NOTEBOOK_INSTANCE = 'sagemaker:CreateNotebookInstance',
	CREATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:CreateNotebookInstanceLifecycleConfig',
	CREATE_PIPELINE = 'sagemaker:CreatePipeline',
	CREATE_PRESIGNED_DOMAIN_URL = 'sagemaker:CreatePresignedDomainUrl',
	CREATE_PRESIGNED_NOTEBOOK_INSTANCE_URL = 'sagemaker:CreatePresignedNotebookInstanceUrl',
	CREATE_PROCESSING_JOB = 'sagemaker:CreateProcessingJob',
	CREATE_PROJECT = 'sagemaker:CreateProject',
	CREATE_SHARED_MODEL = 'sagemaker:CreateSharedModel',
	CREATE_SPACE = 'sagemaker:CreateSpace',
	CREATE_STUDIO_LIFECYCLE_CONFIG = 'sagemaker:CreateStudioLifecycleConfig',
	CREATE_TRAINING_JOB = 'sagemaker:CreateTrainingJob',
	CREATE_TRANSFORM_JOB = 'sagemaker:CreateTransformJob',
	CREATE_TRIAL = 'sagemaker:CreateTrial',
	CREATE_TRIAL_COMPONENT = 'sagemaker:CreateTrialComponent',
	CREATE_USER_PROFILE = 'sagemaker:CreateUserProfile',
	CREATE_WORKFORCE = 'sagemaker:CreateWorkforce',
	CREATE_WORKTEAM = 'sagemaker:CreateWorkteam',
	DELETE_ACTION = 'sagemaker:DeleteAction',
	DELETE_ALGORITHM = 'sagemaker:DeleteAlgorithm',
	DELETE_APP = 'sagemaker:DeleteApp',
	DELETE_APP_IMAGE_CONFIG = 'sagemaker:DeleteAppImageConfig',
	DELETE_ARTIFACT = 'sagemaker:DeleteArtifact',
	DELETE_ASSOCIATION = 'sagemaker:DeleteAssociation',
	DELETE_CODE_REPOSITORY = 'sagemaker:DeleteCodeRepository',
	DELETE_CONTEXT = 'sagemaker:DeleteContext',
	DELETE_DATA_QUALITY_JOB_DEFINITION = 'sagemaker:DeleteDataQualityJobDefinition',
	DELETE_DEVICE_FLEET = 'sagemaker:DeleteDeviceFleet',
	DELETE_DOMAIN = 'sagemaker:DeleteDomain',
	DELETE_EDGE_DEPLOYMENT_PLAN = 'sagemaker:DeleteEdgeDeploymentPlan',
	DELETE_EDGE_DEPLOYMENT_STAGE = 'sagemaker:DeleteEdgeDeploymentStage',
	DELETE_ENDPOINT = 'sagemaker:DeleteEndpoint',
	DELETE_ENDPOINT_CONFIG = 'sagemaker:DeleteEndpointConfig',
	DELETE_EXPERIMENT = 'sagemaker:DeleteExperiment',
	DELETE_FEATURE_GROUP = 'sagemaker:DeleteFeatureGroup',
	DELETE_FLOW_DEFINITION = 'sagemaker:DeleteFlowDefinition',
	DELETE_HUB = 'sagemaker:DeleteHub',
	DELETE_HUB_CONTENT = 'sagemaker:DeleteHubContent',
	DELETE_HUMAN_LOOP = 'sagemaker:DeleteHumanLoop',
	DELETE_HUMAN_TASK_UI = 'sagemaker:DeleteHumanTaskUi',
	DELETE_IMAGE = 'sagemaker:DeleteImage',
	DELETE_IMAGE_VERSION = 'sagemaker:DeleteImageVersion',
	DELETE_INFERENCE_EXPERIMENT = 'sagemaker:DeleteInferenceExperiment',
	DELETE_LINEAGE_GROUP_POLICY = 'sagemaker:DeleteLineageGroupPolicy',
	DELETE_MODEL = 'sagemaker:DeleteModel',
	DELETE_MODEL_BIAS_JOB_DEFINITION = 'sagemaker:DeleteModelBiasJobDefinition',
	DELETE_MODEL_CARD = 'sagemaker:DeleteModelCard',
	DELETE_MODEL_EXPLAINABILITY_JOB_DEFINITION = 'sagemaker:DeleteModelExplainabilityJobDefinition',
	DELETE_MODEL_PACKAGE = 'sagemaker:DeleteModelPackage',
	DELETE_MODEL_PACKAGE_GROUP = 'sagemaker:DeleteModelPackageGroup',
	DELETE_MODEL_PACKAGE_GROUP_POLICY = 'sagemaker:DeleteModelPackageGroupPolicy',
	DELETE_MODEL_QUALITY_JOB_DEFINITION = 'sagemaker:DeleteModelQualityJobDefinition',
	DELETE_MONITORING_SCHEDULE = 'sagemaker:DeleteMonitoringSchedule',
	DELETE_NOTEBOOK_INSTANCE = 'sagemaker:DeleteNotebookInstance',
	DELETE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:DeleteNotebookInstanceLifecycleConfig',
	DELETE_PIPELINE = 'sagemaker:DeletePipeline',
	DELETE_PROJECT = 'sagemaker:DeleteProject',
	DELETE_RECORD = 'sagemaker:DeleteRecord',
	DELETE_SPACE = 'sagemaker:DeleteSpace',
	DELETE_STUDIO_LIFECYCLE_CONFIG = 'sagemaker:DeleteStudioLifecycleConfig',
	DELETE_TAGS = 'sagemaker:DeleteTags',
	DELETE_TRIAL = 'sagemaker:DeleteTrial',
	DELETE_TRIAL_COMPONENT = 'sagemaker:DeleteTrialComponent',
	DELETE_USER_PROFILE = 'sagemaker:DeleteUserProfile',
	DELETE_WORKFORCE = 'sagemaker:DeleteWorkforce',
	DELETE_WORKTEAM = 'sagemaker:DeleteWorkteam',
	DEREGISTER_DEVICES = 'sagemaker:DeregisterDevices',
	DESCRIBE_ACTION = 'sagemaker:DescribeAction',
	DESCRIBE_ALGORITHM = 'sagemaker:DescribeAlgorithm',
	DESCRIBE_APP = 'sagemaker:DescribeApp',
	DESCRIBE_APP_IMAGE_CONFIG = 'sagemaker:DescribeAppImageConfig',
	DESCRIBE_ARTIFACT = 'sagemaker:DescribeArtifact',
	DESCRIBE_AUTO_ML_JOB = 'sagemaker:DescribeAutoMLJob',
	DESCRIBE_CODE_REPOSITORY = 'sagemaker:DescribeCodeRepository',
	DESCRIBE_COMPILATION_JOB = 'sagemaker:DescribeCompilationJob',
	DESCRIBE_CONTEXT = 'sagemaker:DescribeContext',
	DESCRIBE_DATA_QUALITY_JOB_DEFINITION = 'sagemaker:DescribeDataQualityJobDefinition',
	DESCRIBE_DEVICE = 'sagemaker:DescribeDevice',
	DESCRIBE_DEVICE_FLEET = 'sagemaker:DescribeDeviceFleet',
	DESCRIBE_DOMAIN = 'sagemaker:DescribeDomain',
	DESCRIBE_EDGE_DEPLOYMENT_PLAN = 'sagemaker:DescribeEdgeDeploymentPlan',
	DESCRIBE_EDGE_PACKAGING_JOB = 'sagemaker:DescribeEdgePackagingJob',
	DESCRIBE_ENDPOINT = 'sagemaker:DescribeEndpoint',
	DESCRIBE_ENDPOINT_CONFIG = 'sagemaker:DescribeEndpointConfig',
	DESCRIBE_EXPERIMENT = 'sagemaker:DescribeExperiment',
	DESCRIBE_FEATURE_GROUP = 'sagemaker:DescribeFeatureGroup',
	DESCRIBE_FEATURE_METADATA = 'sagemaker:DescribeFeatureMetadata',
	DESCRIBE_FLOW_DEFINITION = 'sagemaker:DescribeFlowDefinition',
	DESCRIBE_HUB = 'sagemaker:DescribeHub',
	DESCRIBE_HUB_CONTENT = 'sagemaker:DescribeHubContent',
	DESCRIBE_HUMAN_LOOP = 'sagemaker:DescribeHumanLoop',
	DESCRIBE_HUMAN_TASK_UI = 'sagemaker:DescribeHumanTaskUi',
	DESCRIBE_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:DescribeHyperParameterTuningJob',
	DESCRIBE_IMAGE = 'sagemaker:DescribeImage',
	DESCRIBE_IMAGE_VERSION = 'sagemaker:DescribeImageVersion',
	DESCRIBE_INFERENCE_EXPERIMENT = 'sagemaker:DescribeInferenceExperiment',
	DESCRIBE_INFERENCE_RECOMMENDATIONS_JOB = 'sagemaker:DescribeInferenceRecommendationsJob',
	DESCRIBE_LABELING_JOB = 'sagemaker:DescribeLabelingJob',
	DESCRIBE_LINEAGE_GROUP = 'sagemaker:DescribeLineageGroup',
	DESCRIBE_MODEL = 'sagemaker:DescribeModel',
	DESCRIBE_MODEL_BIAS_JOB_DEFINITION = 'sagemaker:DescribeModelBiasJobDefinition',
	DESCRIBE_MODEL_CARD = 'sagemaker:DescribeModelCard',
	DESCRIBE_MODEL_CARD_EXPORT_JOB = 'sagemaker:DescribeModelCardExportJob',
	DESCRIBE_MODEL_EXPLAINABILITY_JOB_DEFINITION = 'sagemaker:DescribeModelExplainabilityJobDefinition',
	DESCRIBE_MODEL_PACKAGE = 'sagemaker:DescribeModelPackage',
	DESCRIBE_MODEL_PACKAGE_GROUP = 'sagemaker:DescribeModelPackageGroup',
	DESCRIBE_MODEL_QUALITY_JOB_DEFINITION = 'sagemaker:DescribeModelQualityJobDefinition',
	DESCRIBE_MONITORING_SCHEDULE = 'sagemaker:DescribeMonitoringSchedule',
	DESCRIBE_NOTEBOOK_INSTANCE = 'sagemaker:DescribeNotebookInstance',
	DESCRIBE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:DescribeNotebookInstanceLifecycleConfig',
	DESCRIBE_PIPELINE = 'sagemaker:DescribePipeline',
	DESCRIBE_PIPELINE_DEFINITION_FOR_EXECUTION = 'sagemaker:DescribePipelineDefinitionForExecution',
	DESCRIBE_PIPELINE_EXECUTION = 'sagemaker:DescribePipelineExecution',
	DESCRIBE_PROCESSING_JOB = 'sagemaker:DescribeProcessingJob',
	DESCRIBE_PROJECT = 'sagemaker:DescribeProject',
	DESCRIBE_SHARED_MODEL = 'sagemaker:DescribeSharedModel',
	DESCRIBE_SPACE = 'sagemaker:DescribeSpace',
	DESCRIBE_STUDIO_LIFECYCLE_CONFIG = 'sagemaker:DescribeStudioLifecycleConfig',
	DESCRIBE_SUBSCRIBED_WORKTEAM = 'sagemaker:DescribeSubscribedWorkteam',
	DESCRIBE_TRAINING_JOB = 'sagemaker:DescribeTrainingJob',
	DESCRIBE_TRANSFORM_JOB = 'sagemaker:DescribeTransformJob',
	DESCRIBE_TRIAL = 'sagemaker:DescribeTrial',
	DESCRIBE_TRIAL_COMPONENT = 'sagemaker:DescribeTrialComponent',
	DESCRIBE_USER_PROFILE = 'sagemaker:DescribeUserProfile',
	DESCRIBE_WORKFORCE = 'sagemaker:DescribeWorkforce',
	DESCRIBE_WORKTEAM = 'sagemaker:DescribeWorkteam',
	DISABLE_SAGEMAKER_SERVICECATALOG_PORTFOLIO = 'sagemaker:DisableSagemakerServicecatalogPortfolio',
	DISASSOCIATE_TRIAL_COMPONENT = 'sagemaker:DisassociateTrialComponent',
	ENABLE_SAGEMAKER_SERVICECATALOG_PORTFOLIO = 'sagemaker:EnableSagemakerServicecatalogPortfolio',
	GET_DEVICE_FLEET_REPORT = 'sagemaker:GetDeviceFleetReport',
	GET_DEVICE_REGISTRATION = 'sagemaker:GetDeviceRegistration',
	GET_LINEAGE_GROUP_POLICY = 'sagemaker:GetLineageGroupPolicy',
	GET_MODEL_PACKAGE_GROUP_POLICY = 'sagemaker:GetModelPackageGroupPolicy',
	GET_RECORD = 'sagemaker:GetRecord',
	GET_SAGEMAKER_SERVICECATALOG_PORTFOLIO_STATUS = 'sagemaker:GetSagemakerServicecatalogPortfolioStatus',
	GET_SEARCH_SUGGESTIONS = 'sagemaker:GetSearchSuggestions',
	IMPORT_HUB_CONTENT = 'sagemaker:ImportHubContent',
	INVOKE_ENDPOINT = 'sagemaker:InvokeEndpoint',
	INVOKE_ENDPOINT_ASYNC = 'sagemaker:InvokeEndpointAsync',
	LIST_ACTIONS = 'sagemaker:ListActions',
	LIST_ALGORITHMS = 'sagemaker:ListAlgorithms',
	LIST_APP_IMAGE_CONFIGS = 'sagemaker:ListAppImageConfigs',
	LIST_APPS = 'sagemaker:ListApps',
	LIST_ARTIFACTS = 'sagemaker:ListArtifacts',
	LIST_ASSOCIATIONS = 'sagemaker:ListAssociations',
	LIST_AUTO_ML_JOBS = 'sagemaker:ListAutoMLJobs',
	LIST_CANDIDATES_FOR_AUTO_ML_JOB = 'sagemaker:ListCandidatesForAutoMLJob',
	LIST_CODE_REPOSITORIES = 'sagemaker:ListCodeRepositories',
	LIST_COMPILATION_JOBS = 'sagemaker:ListCompilationJobs',
	LIST_CONTEXTS = 'sagemaker:ListContexts',
	LIST_DATA_QUALITY_JOB_DEFINITIONS = 'sagemaker:ListDataQualityJobDefinitions',
	LIST_DEVICE_FLEETS = 'sagemaker:ListDeviceFleets',
	LIST_DEVICES = 'sagemaker:ListDevices',
	LIST_DOMAINS = 'sagemaker:ListDomains',
	LIST_EDGE_DEPLOYMENT_PLANS = 'sagemaker:ListEdgeDeploymentPlans',
	LIST_EDGE_PACKAGING_JOBS = 'sagemaker:ListEdgePackagingJobs',
	LIST_ENDPOINT_CONFIGS = 'sagemaker:ListEndpointConfigs',
	LIST_ENDPOINTS = 'sagemaker:ListEndpoints',
	LIST_EXPERIMENTS = 'sagemaker:ListExperiments',
	LIST_FEATURE_GROUPS = 'sagemaker:ListFeatureGroups',
	LIST_FLOW_DEFINITIONS = 'sagemaker:ListFlowDefinitions',
	LIST_HUB_CONTENT_VERSIONS = 'sagemaker:ListHubContentVersions',
	LIST_HUB_CONTENTS = 'sagemaker:ListHubContents',
	LIST_HUBS = 'sagemaker:ListHubs',
	LIST_HUMAN_LOOPS = 'sagemaker:ListHumanLoops',
	LIST_HUMAN_TASK_UIS = 'sagemaker:ListHumanTaskUis',
	LIST_HYPER_PARAMETER_TUNING_JOBS = 'sagemaker:ListHyperParameterTuningJobs',
	LIST_IMAGE_VERSIONS = 'sagemaker:ListImageVersions',
	LIST_IMAGES = 'sagemaker:ListImages',
	LIST_INFERENCE_EXPERIMENTS = 'sagemaker:ListInferenceExperiments',
	LIST_INFERENCE_RECOMMENDATIONS_JOB_STEPS = 'sagemaker:ListInferenceRecommendationsJobSteps',
	LIST_INFERENCE_RECOMMENDATIONS_JOBS = 'sagemaker:ListInferenceRecommendationsJobs',
	LIST_LABELING_JOBS = 'sagemaker:ListLabelingJobs',
	LIST_LABELING_JOBS_FOR_WORKTEAM = 'sagemaker:ListLabelingJobsForWorkteam',
	LIST_LINEAGE_GROUPS = 'sagemaker:ListLineageGroups',
	LIST_MODEL_BIAS_JOB_DEFINITIONS = 'sagemaker:ListModelBiasJobDefinitions',
	LIST_MODEL_CARD_EXPORT_JOBS = 'sagemaker:ListModelCardExportJobs',
	LIST_MODEL_CARD_VERSIONS = 'sagemaker:ListModelCardVersions',
	LIST_MODEL_CARDS = 'sagemaker:ListModelCards',
	LIST_MODEL_EXPLAINABILITY_JOB_DEFINITIONS = 'sagemaker:ListModelExplainabilityJobDefinitions',
	LIST_MODEL_METADATA = 'sagemaker:ListModelMetadata',
	LIST_MODEL_PACKAGE_GROUPS = 'sagemaker:ListModelPackageGroups',
	LIST_MODEL_PACKAGES = 'sagemaker:ListModelPackages',
	LIST_MODEL_QUALITY_JOB_DEFINITIONS = 'sagemaker:ListModelQualityJobDefinitions',
	LIST_MODELS = 'sagemaker:ListModels',
	LIST_MONITORING_ALERT_HISTORY = 'sagemaker:ListMonitoringAlertHistory',
	LIST_MONITORING_ALERTS = 'sagemaker:ListMonitoringAlerts',
	LIST_MONITORING_EXECUTIONS = 'sagemaker:ListMonitoringExecutions',
	LIST_MONITORING_SCHEDULES = 'sagemaker:ListMonitoringSchedules',
	LIST_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIGS = 'sagemaker:ListNotebookInstanceLifecycleConfigs',
	LIST_NOTEBOOK_INSTANCES = 'sagemaker:ListNotebookInstances',
	LIST_PIPELINE_EXECUTION_STEPS = 'sagemaker:ListPipelineExecutionSteps',
	LIST_PIPELINE_EXECUTIONS = 'sagemaker:ListPipelineExecutions',
	LIST_PIPELINE_PARAMETERS_FOR_EXECUTION = 'sagemaker:ListPipelineParametersForExecution',
	LIST_PIPELINES = 'sagemaker:ListPipelines',
	LIST_PROCESSING_JOBS = 'sagemaker:ListProcessingJobs',
	LIST_PROJECTS = 'sagemaker:ListProjects',
	LIST_SHARED_MODEL_EVENTS = 'sagemaker:ListSharedModelEvents',
	LIST_SHARED_MODEL_VERSIONS = 'sagemaker:ListSharedModelVersions',
	LIST_SHARED_MODELS = 'sagemaker:ListSharedModels',
	LIST_SPACES = 'sagemaker:ListSpaces',
	LIST_STAGE_DEVICES = 'sagemaker:ListStageDevices',
	LIST_STUDIO_LIFECYCLE_CONFIGS = 'sagemaker:ListStudioLifecycleConfigs',
	LIST_SUBSCRIBED_WORKTEAMS = 'sagemaker:ListSubscribedWorkteams',
	LIST_TAGS = 'sagemaker:ListTags',
	LIST_TRAINING_JOBS = 'sagemaker:ListTrainingJobs',
	LIST_TRAINING_JOBS_FOR_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:ListTrainingJobsForHyperParameterTuningJob',
	LIST_TRANSFORM_JOBS = 'sagemaker:ListTransformJobs',
	LIST_TRIAL_COMPONENTS = 'sagemaker:ListTrialComponents',
	LIST_TRIALS = 'sagemaker:ListTrials',
	LIST_USER_PROFILES = 'sagemaker:ListUserProfiles',
	LIST_WORKFORCES = 'sagemaker:ListWorkforces',
	LIST_WORKTEAMS = 'sagemaker:ListWorkteams',
	PUT_LINEAGE_GROUP_POLICY = 'sagemaker:PutLineageGroupPolicy',
	PUT_MODEL_PACKAGE_GROUP_POLICY = 'sagemaker:PutModelPackageGroupPolicy',
	PUT_RECORD = 'sagemaker:PutRecord',
	QUERY_LINEAGE = 'sagemaker:QueryLineage',
	REGISTER_DEVICES = 'sagemaker:RegisterDevices',
	RENDER_UI_TEMPLATE = 'sagemaker:RenderUiTemplate',
	RETRY_PIPELINE_EXECUTION = 'sagemaker:RetryPipelineExecution',
	SEARCH = 'sagemaker:Search',
	SEND_HEARTBEAT = 'sagemaker:SendHeartbeat',
	SEND_PIPELINE_EXECUTION_STEP_FAILURE = 'sagemaker:SendPipelineExecutionStepFailure',
	SEND_PIPELINE_EXECUTION_STEP_SUCCESS = 'sagemaker:SendPipelineExecutionStepSuccess',
	SEND_SHARED_MODEL_EVENT = 'sagemaker:SendSharedModelEvent',
	START_EDGE_DEPLOYMENT_STAGE = 'sagemaker:StartEdgeDeploymentStage',
	START_HUMAN_LOOP = 'sagemaker:StartHumanLoop',
	START_INFERENCE_EXPERIMENT = 'sagemaker:StartInferenceExperiment',
	START_MONITORING_SCHEDULE = 'sagemaker:StartMonitoringSchedule',
	START_NOTEBOOK_INSTANCE = 'sagemaker:StartNotebookInstance',
	START_PIPELINE_EXECUTION = 'sagemaker:StartPipelineExecution',
	STOP_AUTO_ML_JOB = 'sagemaker:StopAutoMLJob',
	STOP_COMPILATION_JOB = 'sagemaker:StopCompilationJob',
	STOP_EDGE_DEPLOYMENT_STAGE = 'sagemaker:StopEdgeDeploymentStage',
	STOP_EDGE_PACKAGING_JOB = 'sagemaker:StopEdgePackagingJob',
	STOP_HUMAN_LOOP = 'sagemaker:StopHumanLoop',
	STOP_HYPER_PARAMETER_TUNING_JOB = 'sagemaker:StopHyperParameterTuningJob',
	STOP_INFERENCE_EXPERIMENT = 'sagemaker:StopInferenceExperiment',
	STOP_INFERENCE_RECOMMENDATIONS_JOB = 'sagemaker:StopInferenceRecommendationsJob',
	STOP_LABELING_JOB = 'sagemaker:StopLabelingJob',
	STOP_MONITORING_SCHEDULE = 'sagemaker:StopMonitoringSchedule',
	STOP_NOTEBOOK_INSTANCE = 'sagemaker:StopNotebookInstance',
	STOP_PIPELINE_EXECUTION = 'sagemaker:StopPipelineExecution',
	STOP_PROCESSING_JOB = 'sagemaker:StopProcessingJob',
	STOP_TRAINING_JOB = 'sagemaker:StopTrainingJob',
	STOP_TRANSFORM_JOB = 'sagemaker:StopTransformJob',
	UPDATE_ACTION = 'sagemaker:UpdateAction',
	UPDATE_APP_IMAGE_CONFIG = 'sagemaker:UpdateAppImageConfig',
	UPDATE_ARTIFACT = 'sagemaker:UpdateArtifact',
	UPDATE_CODE_REPOSITORY = 'sagemaker:UpdateCodeRepository',
	UPDATE_CONTEXT = 'sagemaker:UpdateContext',
	UPDATE_DEVICE_FLEET = 'sagemaker:UpdateDeviceFleet',
	UPDATE_DEVICES = 'sagemaker:UpdateDevices',
	UPDATE_DOMAIN = 'sagemaker:UpdateDomain',
	UPDATE_ENDPOINT = 'sagemaker:UpdateEndpoint',
	UPDATE_ENDPOINT_WEIGHTS_AND_CAPACITIES = 'sagemaker:UpdateEndpointWeightsAndCapacities',
	UPDATE_EXPERIMENT = 'sagemaker:UpdateExperiment',
	UPDATE_FEATURE_GROUP = 'sagemaker:UpdateFeatureGroup',
	UPDATE_FEATURE_METADATA = 'sagemaker:UpdateFeatureMetadata',
	UPDATE_HUB = 'sagemaker:UpdateHub',
	UPDATE_IMAGE = 'sagemaker:UpdateImage',
	UPDATE_INFERENCE_EXPERIMENT = 'sagemaker:UpdateInferenceExperiment',
	UPDATE_MODEL_CARD = 'sagemaker:UpdateModelCard',
	UPDATE_MODEL_PACKAGE = 'sagemaker:UpdateModelPackage',
	UPDATE_MONITORING_ALERT = 'sagemaker:UpdateMonitoringAlert',
	UPDATE_MONITORING_SCHEDULE = 'sagemaker:UpdateMonitoringSchedule',
	UPDATE_NOTEBOOK_INSTANCE = 'sagemaker:UpdateNotebookInstance',
	UPDATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'sagemaker:UpdateNotebookInstanceLifecycleConfig',
	UPDATE_PIPELINE = 'sagemaker:UpdatePipeline',
	UPDATE_PIPELINE_EXECUTION = 'sagemaker:UpdatePipelineExecution',
	UPDATE_PROJECT = 'sagemaker:UpdateProject',
	UPDATE_SHARED_MODEL = 'sagemaker:UpdateSharedModel',
	UPDATE_SPACE = 'sagemaker:UpdateSpace',
	UPDATE_TRAINING_JOB = 'sagemaker:UpdateTrainingJob',
	UPDATE_TRIAL = 'sagemaker:UpdateTrial',
	UPDATE_TRIAL_COMPONENT = 'sagemaker:UpdateTrialComponent',
	UPDATE_USER_PROFILE = 'sagemaker:UpdateUserProfile',
	UPDATE_WORKFORCE = 'sagemaker:UpdateWorkforce',
	UPDATE_WORKTEAM = 'sagemaker:UpdateWorkteam',
}
export enum LAKE_FORMATION {
	ADD_LF_TAGS_TO_RESOURCE = 'lakeformation:AddLFTagsToResource',
	BATCH_GRANT_PERMISSIONS = 'lakeformation:BatchGrantPermissions',
	BATCH_REVOKE_PERMISSIONS = 'lakeformation:BatchRevokePermissions',
	CANCEL_TRANSACTION = 'lakeformation:CancelTransaction',
	COMMIT_TRANSACTION = 'lakeformation:CommitTransaction',
	CREATE_DATA_CELLS_FILTER = 'lakeformation:CreateDataCellsFilter',
	CREATE_LF_TAG = 'lakeformation:CreateLFTag',
	DELETE_DATA_CELLS_FILTER = 'lakeformation:DeleteDataCellsFilter',
	DELETE_LF_TAG = 'lakeformation:DeleteLFTag',
	DELETE_OBJECTS_ON_CANCEL = 'lakeformation:DeleteObjectsOnCancel',
	DEREGISTER_RESOURCE = 'lakeformation:DeregisterResource',
	DESCRIBE_RESOURCE = 'lakeformation:DescribeResource',
	DESCRIBE_TRANSACTION = 'lakeformation:DescribeTransaction',
	EXTEND_TRANSACTION = 'lakeformation:ExtendTransaction',
	GET_DATA_ACCESS = 'lakeformation:GetDataAccess',
	GET_DATA_LAKE_SETTINGS = 'lakeformation:GetDataLakeSettings',
	GET_EFFECTIVE_PERMISSIONS_FOR_PATH = 'lakeformation:GetEffectivePermissionsForPath',
	GET_LF_TAG = 'lakeformation:GetLFTag',
	GET_QUERY_STATE = 'lakeformation:GetQueryState',
	GET_QUERY_STATISTICS = 'lakeformation:GetQueryStatistics',
	GET_RESOURCE_LF_TAGS = 'lakeformation:GetResourceLFTags',
	GET_TABLE_OBJECTS = 'lakeformation:GetTableObjects',
	GET_WORK_UNIT_RESULTS = 'lakeformation:GetWorkUnitResults',
	GET_WORK_UNITS = 'lakeformation:GetWorkUnits',
	GRANT_PERMISSIONS = 'lakeformation:GrantPermissions',
	LIST_DATA_CELLS_FILTER = 'lakeformation:ListDataCellsFilter',
	LIST_LF_TAGS = 'lakeformation:ListLFTags',
	LIST_PERMISSIONS = 'lakeformation:ListPermissions',
	LIST_RESOURCES = 'lakeformation:ListResources',
	LIST_TABLE_STORAGE_OPTIMIZERS = 'lakeformation:ListTableStorageOptimizers',
	LIST_TRANSACTIONS = 'lakeformation:ListTransactions',
	PUT_DATA_LAKE_SETTINGS = 'lakeformation:PutDataLakeSettings',
	REGISTER_RESOURCE = 'lakeformation:RegisterResource',
	REMOVE_LF_TAGS_FROM_RESOURCE = 'lakeformation:RemoveLFTagsFromResource',
	REVOKE_PERMISSIONS = 'lakeformation:RevokePermissions',
	SEARCH_DATABASES_BY_LF_TAGS = 'lakeformation:SearchDatabasesByLFTags',
	SEARCH_TABLES_BY_LF_TAGS = 'lakeformation:SearchTablesByLFTags',
	START_QUERY_PLANNING = 'lakeformation:StartQueryPlanning',
	START_TRANSACTION = 'lakeformation:StartTransaction',
	UPDATE_LF_TAG = 'lakeformation:UpdateLFTag',
	UPDATE_RESOURCE = 'lakeformation:UpdateResource',
	UPDATE_TABLE_OBJECTS = 'lakeformation:UpdateTableObjects',
	UPDATE_TABLE_STORAGE_OPTIMIZER = 'lakeformation:UpdateTableStorageOptimizer',
}
export enum REDSHIFT_DATA_API {
	BATCH_EXECUTE_STATEMENT = 'redshift-data:BatchExecuteStatement',
	CANCEL_STATEMENT = 'redshift-data:CancelStatement',
	DESCRIBE_STATEMENT = 'redshift-data:DescribeStatement',
	DESCRIBE_TABLE = 'redshift-data:DescribeTable',
	EXECUTE_STATEMENT = 'redshift-data:ExecuteStatement',
	GET_STATEMENT_RESULT = 'redshift-data:GetStatementResult',
	LIST_DATABASES = 'redshift-data:ListDatabases',
	LIST_SCHEMAS = 'redshift-data:ListSchemas',
	LIST_STATEMENTS = 'redshift-data:ListStatements',
	LIST_TABLES = 'redshift-data:ListTables',
}
export enum MANAGED_SERVICE_FOR_PROMETHEUS {
	CREATE_ALERT_MANAGER_ALERTS = 'aps:CreateAlertManagerAlerts',
	CREATE_ALERT_MANAGER_DEFINITION = 'aps:CreateAlertManagerDefinition',
	CREATE_LOGGING_CONFIGURATION = 'aps:CreateLoggingConfiguration',
	CREATE_RULE_GROUPS_NAMESPACE = 'aps:CreateRuleGroupsNamespace',
	CREATE_WORKSPACE = 'aps:CreateWorkspace',
	DELETE_ALERT_MANAGER_DEFINITION = 'aps:DeleteAlertManagerDefinition',
	DELETE_ALERT_MANAGER_SILENCE = 'aps:DeleteAlertManagerSilence',
	DELETE_LOGGING_CONFIGURATION = 'aps:DeleteLoggingConfiguration',
	DELETE_RULE_GROUPS_NAMESPACE = 'aps:DeleteRuleGroupsNamespace',
	DELETE_WORKSPACE = 'aps:DeleteWorkspace',
	DESCRIBE_ALERT_MANAGER_DEFINITION = 'aps:DescribeAlertManagerDefinition',
	DESCRIBE_LOGGING_CONFIGURATION = 'aps:DescribeLoggingConfiguration',
	DESCRIBE_RULE_GROUPS_NAMESPACE = 'aps:DescribeRuleGroupsNamespace',
	DESCRIBE_WORKSPACE = 'aps:DescribeWorkspace',
	GET_ALERT_MANAGER_SILENCE = 'aps:GetAlertManagerSilence',
	GET_ALERT_MANAGER_STATUS = 'aps:GetAlertManagerStatus',
	GET_LABELS = 'aps:GetLabels',
	GET_METRIC_METADATA = 'aps:GetMetricMetadata',
	GET_SERIES = 'aps:GetSeries',
	LIST_ALERT_MANAGER_ALERT_GROUPS = 'aps:ListAlertManagerAlertGroups',
	LIST_ALERT_MANAGER_ALERTS = 'aps:ListAlertManagerAlerts',
	LIST_ALERT_MANAGER_RECEIVERS = 'aps:ListAlertManagerReceivers',
	LIST_ALERT_MANAGER_SILENCES = 'aps:ListAlertManagerSilences',
	LIST_ALERTS = 'aps:ListAlerts',
	LIST_RULE_GROUPS_NAMESPACES = 'aps:ListRuleGroupsNamespaces',
	LIST_RULES = 'aps:ListRules',
	LIST_TAGS_FOR_RESOURCE = 'aps:ListTagsForResource',
	LIST_WORKSPACES = 'aps:ListWorkspaces',
	PUT_ALERT_MANAGER_DEFINITION = 'aps:PutAlertManagerDefinition',
	PUT_ALERT_MANAGER_SILENCES = 'aps:PutAlertManagerSilences',
	PUT_RULE_GROUPS_NAMESPACE = 'aps:PutRuleGroupsNamespace',
	QUERY_METRICS = 'aps:QueryMetrics',
	REMOTE_WRITE = 'aps:RemoteWrite',
	TAG_RESOURCE = 'aps:TagResource',
	UNTAG_RESOURCE = 'aps:UntagResource',
	UPDATE_LOGGING_CONFIGURATION = 'aps:UpdateLoggingConfiguration',
	UPDATE_WORKSPACE_ALIAS = 'aps:UpdateWorkspaceAlias',
}
export enum MOBILE_HUB {
	CREATE_PROJECT = 'mobilehub:CreateProject',
	CREATE_SERVICE_ROLE = 'mobilehub:CreateServiceRole',
	DELETE_PROJECT = 'mobilehub:DeleteProject',
	DELETE_PROJECT_SNAPSHOT = 'mobilehub:DeleteProjectSnapshot',
	DEPLOY_TO_STAGE = 'mobilehub:DeployToStage',
	DESCRIBE_BUNDLE = 'mobilehub:DescribeBundle',
	EXPORT_BUNDLE = 'mobilehub:ExportBundle',
	EXPORT_PROJECT = 'mobilehub:ExportProject',
	GENERATE_PROJECT_PARAMETERS = 'mobilehub:GenerateProjectParameters',
	GET_PROJECT = 'mobilehub:GetProject',
	GET_PROJECT_SNAPSHOT = 'mobilehub:GetProjectSnapshot',
	IMPORT_PROJECT = 'mobilehub:ImportProject',
	INSTALL_BUNDLE = 'mobilehub:InstallBundle',
	LIST_AVAILABLE_CONNECTORS = 'mobilehub:ListAvailableConnectors',
	LIST_AVAILABLE_FEATURES = 'mobilehub:ListAvailableFeatures',
	LIST_AVAILABLE_REGIONS = 'mobilehub:ListAvailableRegions',
	LIST_BUNDLES = 'mobilehub:ListBundles',
	LIST_PROJECT_SNAPSHOTS = 'mobilehub:ListProjectSnapshots',
	LIST_PROJECTS = 'mobilehub:ListProjects',
	SYNCHRONIZE_PROJECT = 'mobilehub:SynchronizeProject',
	UPDATE_PROJECT = 'mobilehub:UpdateProject',
	VALIDATE_PROJECT = 'mobilehub:ValidateProject',
	VERIFY_SERVICE_ROLE = 'mobilehub:VerifyServiceRole',
}
export enum GLOBAL_ACCELERATOR {
	ADD_CUSTOM_ROUTING_ENDPOINTS = 'globalaccelerator:AddCustomRoutingEndpoints',
	ADD_ENDPOINTS = 'globalaccelerator:AddEndpoints',
	ADVERTISE_BYOIP_CIDR = 'globalaccelerator:AdvertiseByoipCidr',
	ALLOW_CUSTOM_ROUTING_TRAFFIC = 'globalaccelerator:AllowCustomRoutingTraffic',
	CREATE_ACCELERATOR = 'globalaccelerator:CreateAccelerator',
	CREATE_CUSTOM_ROUTING_ACCELERATOR = 'globalaccelerator:CreateCustomRoutingAccelerator',
	CREATE_CUSTOM_ROUTING_ENDPOINT_GROUP = 'globalaccelerator:CreateCustomRoutingEndpointGroup',
	CREATE_CUSTOM_ROUTING_LISTENER = 'globalaccelerator:CreateCustomRoutingListener',
	CREATE_ENDPOINT_GROUP = 'globalaccelerator:CreateEndpointGroup',
	CREATE_LISTENER = 'globalaccelerator:CreateListener',
	DELETE_ACCELERATOR = 'globalaccelerator:DeleteAccelerator',
	DELETE_CUSTOM_ROUTING_ACCELERATOR = 'globalaccelerator:DeleteCustomRoutingAccelerator',
	DELETE_CUSTOM_ROUTING_ENDPOINT_GROUP = 'globalaccelerator:DeleteCustomRoutingEndpointGroup',
	DELETE_CUSTOM_ROUTING_LISTENER = 'globalaccelerator:DeleteCustomRoutingListener',
	DELETE_ENDPOINT_GROUP = 'globalaccelerator:DeleteEndpointGroup',
	DELETE_LISTENER = 'globalaccelerator:DeleteListener',
	DENY_CUSTOM_ROUTING_TRAFFIC = 'globalaccelerator:DenyCustomRoutingTraffic',
	DEPROVISION_BYOIP_CIDR = 'globalaccelerator:DeprovisionByoipCidr',
	DESCRIBE_ACCELERATOR = 'globalaccelerator:DescribeAccelerator',
	DESCRIBE_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:DescribeAcceleratorAttributes',
	DESCRIBE_CUSTOM_ROUTING_ACCELERATOR = 'globalaccelerator:DescribeCustomRoutingAccelerator',
	DESCRIBE_CUSTOM_ROUTING_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:DescribeCustomRoutingAcceleratorAttributes',
	DESCRIBE_CUSTOM_ROUTING_ENDPOINT_GROUP = 'globalaccelerator:DescribeCustomRoutingEndpointGroup',
	DESCRIBE_CUSTOM_ROUTING_LISTENER = 'globalaccelerator:DescribeCustomRoutingListener',
	DESCRIBE_ENDPOINT_GROUP = 'globalaccelerator:DescribeEndpointGroup',
	DESCRIBE_LISTENER = 'globalaccelerator:DescribeListener',
	LIST_ACCELERATORS = 'globalaccelerator:ListAccelerators',
	LIST_BYOIP_CIDRS = 'globalaccelerator:ListByoipCidrs',
	LIST_CUSTOM_ROUTING_ACCELERATORS = 'globalaccelerator:ListCustomRoutingAccelerators',
	LIST_CUSTOM_ROUTING_ENDPOINT_GROUPS = 'globalaccelerator:ListCustomRoutingEndpointGroups',
	LIST_CUSTOM_ROUTING_LISTENERS = 'globalaccelerator:ListCustomRoutingListeners',
	LIST_CUSTOM_ROUTING_PORT_MAPPINGS = 'globalaccelerator:ListCustomRoutingPortMappings',
	LIST_CUSTOM_ROUTING_PORT_MAPPINGS_BY_DESTINATION = 'globalaccelerator:ListCustomRoutingPortMappingsByDestination',
	LIST_ENDPOINT_GROUPS = 'globalaccelerator:ListEndpointGroups',
	LIST_LISTENERS = 'globalaccelerator:ListListeners',
	LIST_TAGS_FOR_RESOURCE = 'globalaccelerator:ListTagsForResource',
	PROVISION_BYOIP_CIDR = 'globalaccelerator:ProvisionByoipCidr',
	REMOVE_CUSTOM_ROUTING_ENDPOINTS = 'globalaccelerator:RemoveCustomRoutingEndpoints',
	REMOVE_ENDPOINTS = 'globalaccelerator:RemoveEndpoints',
	TAG_RESOURCE = 'globalaccelerator:TagResource',
	UNTAG_RESOURCE = 'globalaccelerator:UntagResource',
	UPDATE_ACCELERATOR = 'globalaccelerator:UpdateAccelerator',
	UPDATE_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:UpdateAcceleratorAttributes',
	UPDATE_CUSTOM_ROUTING_ACCELERATOR = 'globalaccelerator:UpdateCustomRoutingAccelerator',
	UPDATE_CUSTOM_ROUTING_ACCELERATOR_ATTRIBUTES = 'globalaccelerator:UpdateCustomRoutingAcceleratorAttributes',
	UPDATE_CUSTOM_ROUTING_LISTENER = 'globalaccelerator:UpdateCustomRoutingListener',
	UPDATE_ENDPOINT_GROUP = 'globalaccelerator:UpdateEndpointGroup',
	UPDATE_LISTENER = 'globalaccelerator:UpdateListener',
	WITHDRAW_BYOIP_CIDR = 'globalaccelerator:WithdrawByoipCidr',
}
export enum CLOUDWATCH_INTERNET_MONITOR {
	CREATE_MONITOR = 'internetmonitor:CreateMonitor',
	DELETE_MONITOR = 'internetmonitor:DeleteMonitor',
	GET_HEALTH_EVENT = 'internetmonitor:GetHealthEvent',
	GET_MONITOR = 'internetmonitor:GetMonitor',
	LIST_HEALTH_EVENTS = 'internetmonitor:ListHealthEvents',
	LIST_MONITORS = 'internetmonitor:ListMonitors',
	LIST_TAGS_FOR_RESOURCE = 'internetmonitor:ListTagsForResource',
	TAG_RESOURCE = 'internetmonitor:TagResource',
	UNTAG_RESOURCE = 'internetmonitor:UntagResource',
	UPDATE_MONITOR = 'internetmonitor:UpdateMonitor',
}
export enum CONNECT_CUSTOMER_PROFILES {
	ADD_PROFILE_KEY = 'profile:AddProfileKey',
	CREATE_DOMAIN = 'profile:CreateDomain',
	CREATE_INTEGRATION_WORKFLOW = 'profile:CreateIntegrationWorkflow',
	CREATE_PROFILE = 'profile:CreateProfile',
	DELETE_DOMAIN = 'profile:DeleteDomain',
	DELETE_INTEGRATION = 'profile:DeleteIntegration',
	DELETE_PROFILE = 'profile:DeleteProfile',
	DELETE_PROFILE_KEY = 'profile:DeleteProfileKey',
	DELETE_PROFILE_OBJECT = 'profile:DeleteProfileObject',
	DELETE_PROFILE_OBJECT_TYPE = 'profile:DeleteProfileObjectType',
	DELETE_WORKFLOW = 'profile:DeleteWorkflow',
	GET_AUTO_MERGING_PREVIEW = 'profile:GetAutoMergingPreview',
	GET_DOMAIN = 'profile:GetDomain',
	GET_IDENTITY_RESOLUTION_JOB = 'profile:GetIdentityResolutionJob',
	GET_INTEGRATION = 'profile:GetIntegration',
	GET_MATCHES = 'profile:GetMatches',
	GET_PROFILE_OBJECT_TYPE = 'profile:GetProfileObjectType',
	GET_PROFILE_OBJECT_TYPE_TEMPLATE = 'profile:GetProfileObjectTypeTemplate',
	GET_WORKFLOW = 'profile:GetWorkflow',
	GET_WORKFLOW_STEPS = 'profile:GetWorkflowSteps',
	LIST_ACCOUNT_INTEGRATIONS = 'profile:ListAccountIntegrations',
	LIST_DOMAINS = 'profile:ListDomains',
	LIST_IDENTITY_RESOLUTION_JOBS = 'profile:ListIdentityResolutionJobs',
	LIST_INTEGRATIONS = 'profile:ListIntegrations',
	LIST_PROFILE_OBJECT_TYPE_TEMPLATES = 'profile:ListProfileObjectTypeTemplates',
	LIST_PROFILE_OBJECT_TYPES = 'profile:ListProfileObjectTypes',
	LIST_PROFILE_OBJECTS = 'profile:ListProfileObjects',
	LIST_TAGS_FOR_RESOURCE = 'profile:ListTagsForResource',
	LIST_WORKFLOWS = 'profile:ListWorkflows',
	MERGE_PROFILES = 'profile:MergeProfiles',
	PUT_INTEGRATION = 'profile:PutIntegration',
	PUT_PROFILE_OBJECT = 'profile:PutProfileObject',
	PUT_PROFILE_OBJECT_TYPE = 'profile:PutProfileObjectType',
	SEARCH_PROFILES = 'profile:SearchProfiles',
	TAG_RESOURCE = 'profile:TagResource',
	UNTAG_RESOURCE = 'profile:UntagResource',
	UPDATE_DOMAIN = 'profile:UpdateDomain',
	UPDATE_PROFILE = 'profile:UpdateProfile',
}
export enum SERVERLESS_APPLICATION_REPOSITORY {
	CREATE_APPLICATION = 'serverlessrepo:CreateApplication',
	CREATE_APPLICATION_VERSION = 'serverlessrepo:CreateApplicationVersion',
	CREATE_CLOUD_FORMATION_CHANGE_SET = 'serverlessrepo:CreateCloudFormationChangeSet',
	CREATE_CLOUD_FORMATION_TEMPLATE = 'serverlessrepo:CreateCloudFormationTemplate',
	DELETE_APPLICATION = 'serverlessrepo:DeleteApplication',
	GET_APPLICATION = 'serverlessrepo:GetApplication',
	GET_APPLICATION_POLICY = 'serverlessrepo:GetApplicationPolicy',
	GET_CLOUD_FORMATION_TEMPLATE = 'serverlessrepo:GetCloudFormationTemplate',
	LIST_APPLICATION_DEPENDENCIES = 'serverlessrepo:ListApplicationDependencies',
	LIST_APPLICATION_VERSIONS = 'serverlessrepo:ListApplicationVersions',
	LIST_APPLICATIONS = 'serverlessrepo:ListApplications',
	PUT_APPLICATION_POLICY = 'serverlessrepo:PutApplicationPolicy',
	SEARCH_APPLICATIONS = 'serverlessrepo:SearchApplications',
	UNSHARE_APPLICATION = 'serverlessrepo:UnshareApplication',
	UPDATE_APPLICATION = 'serverlessrepo:UpdateApplication',
}
export enum FORECAST {
	CREATE_AUTO_PREDICTOR = 'forecast:CreateAutoPredictor',
	CREATE_DATASET = 'forecast:CreateDataset',
	CREATE_DATASET_GROUP = 'forecast:CreateDatasetGroup',
	CREATE_DATASET_IMPORT_JOB = 'forecast:CreateDatasetImportJob',
	CREATE_EXPLAINABILITY = 'forecast:CreateExplainability',
	CREATE_EXPLAINABILITY_EXPORT = 'forecast:CreateExplainabilityExport',
	CREATE_FORECAST = 'forecast:CreateForecast',
	CREATE_FORECAST_ENDPOINT = 'forecast:CreateForecastEndpoint',
	CREATE_FORECAST_EXPORT_JOB = 'forecast:CreateForecastExportJob',
	CREATE_MONITOR = 'forecast:CreateMonitor',
	CREATE_PREDICTOR = 'forecast:CreatePredictor',
	CREATE_PREDICTOR_BACKTEST_EXPORT_JOB = 'forecast:CreatePredictorBacktestExportJob',
	CREATE_WHAT_IF_ANALYSIS = 'forecast:CreateWhatIfAnalysis',
	CREATE_WHAT_IF_FORECAST = 'forecast:CreateWhatIfForecast',
	CREATE_WHAT_IF_FORECAST_EXPORT = 'forecast:CreateWhatIfForecastExport',
	DELETE_DATASET = 'forecast:DeleteDataset',
	DELETE_DATASET_GROUP = 'forecast:DeleteDatasetGroup',
	DELETE_DATASET_IMPORT_JOB = 'forecast:DeleteDatasetImportJob',
	DELETE_EXPLAINABILITY = 'forecast:DeleteExplainability',
	DELETE_EXPLAINABILITY_EXPORT = 'forecast:DeleteExplainabilityExport',
	DELETE_FORECAST = 'forecast:DeleteForecast',
	DELETE_FORECAST_ENDPOINT = 'forecast:DeleteForecastEndpoint',
	DELETE_FORECAST_EXPORT_JOB = 'forecast:DeleteForecastExportJob',
	DELETE_MONITOR = 'forecast:DeleteMonitor',
	DELETE_PREDICTOR = 'forecast:DeletePredictor',
	DELETE_PREDICTOR_BACKTEST_EXPORT_JOB = 'forecast:DeletePredictorBacktestExportJob',
	DELETE_RESOURCE_TREE = 'forecast:DeleteResourceTree',
	DELETE_WHAT_IF_ANALYSIS = 'forecast:DeleteWhatIfAnalysis',
	DELETE_WHAT_IF_FORECAST = 'forecast:DeleteWhatIfForecast',
	DELETE_WHAT_IF_FORECAST_EXPORT = 'forecast:DeleteWhatIfForecastExport',
	DESCRIBE_AUTO_PREDICTOR = 'forecast:DescribeAutoPredictor',
	DESCRIBE_DATASET = 'forecast:DescribeDataset',
	DESCRIBE_DATASET_GROUP = 'forecast:DescribeDatasetGroup',
	DESCRIBE_DATASET_IMPORT_JOB = 'forecast:DescribeDatasetImportJob',
	DESCRIBE_EXPLAINABILITY = 'forecast:DescribeExplainability',
	DESCRIBE_EXPLAINABILITY_EXPORT = 'forecast:DescribeExplainabilityExport',
	DESCRIBE_FORECAST = 'forecast:DescribeForecast',
	DESCRIBE_FORECAST_ENDPOINT = 'forecast:DescribeForecastEndpoint',
	DESCRIBE_FORECAST_EXPORT_JOB = 'forecast:DescribeForecastExportJob',
	DESCRIBE_MONITOR = 'forecast:DescribeMonitor',
	DESCRIBE_PREDICTOR = 'forecast:DescribePredictor',
	DESCRIBE_PREDICTOR_BACKTEST_EXPORT_JOB = 'forecast:DescribePredictorBacktestExportJob',
	DESCRIBE_WHAT_IF_ANALYSIS = 'forecast:DescribeWhatIfAnalysis',
	DESCRIBE_WHAT_IF_FORECAST = 'forecast:DescribeWhatIfForecast',
	DESCRIBE_WHAT_IF_FORECAST_EXPORT = 'forecast:DescribeWhatIfForecastExport',
	GET_ACCURACY_METRICS = 'forecast:GetAccuracyMetrics',
	GET_RECENT_FORECAST_CONTEXT = 'forecast:GetRecentForecastContext',
	INVOKE_FORECAST_ENDPOINT = 'forecast:InvokeForecastEndpoint',
	LIST_DATASET_GROUPS = 'forecast:ListDatasetGroups',
	LIST_DATASET_IMPORT_JOBS = 'forecast:ListDatasetImportJobs',
	LIST_DATASETS = 'forecast:ListDatasets',
	LIST_EXPLAINABILITIES = 'forecast:ListExplainabilities',
	LIST_EXPLAINABILITY_EXPORTS = 'forecast:ListExplainabilityExports',
	LIST_FORECAST_EXPORT_JOBS = 'forecast:ListForecastExportJobs',
	LIST_FORECASTS = 'forecast:ListForecasts',
	LIST_MONITOR_EVALUATIONS = 'forecast:ListMonitorEvaluations',
	LIST_MONITORS = 'forecast:ListMonitors',
	LIST_PREDICTOR_BACKTEST_EXPORT_JOBS = 'forecast:ListPredictorBacktestExportJobs',
	LIST_PREDICTORS = 'forecast:ListPredictors',
	LIST_TAGS_FOR_RESOURCE = 'forecast:ListTagsForResource',
	LIST_WHAT_IF_ANALYSES = 'forecast:ListWhatIfAnalyses',
	LIST_WHAT_IF_FORECAST_EXPORTS = 'forecast:ListWhatIfForecastExports',
	LIST_WHAT_IF_FORECASTS = 'forecast:ListWhatIfForecasts',
	QUERY_FORECAST = 'forecast:QueryForecast',
	QUERY_WHAT_IF_FORECAST = 'forecast:QueryWhatIfForecast',
	RESUME_RESOURCE = 'forecast:ResumeResource',
	STOP_RESOURCE = 'forecast:StopResource',
	TAG_RESOURCE = 'forecast:TagResource',
	UNTAG_RESOURCE = 'forecast:UntagResource',
	UPDATE_DATASET_GROUP = 'forecast:UpdateDatasetGroup',
}
export enum CLOUD_DIRECTORY {
	ADD_FACET_TO_OBJECT = 'clouddirectory:AddFacetToObject',
	APPLY_SCHEMA = 'clouddirectory:ApplySchema',
	ATTACH_OBJECT = 'clouddirectory:AttachObject',
	ATTACH_POLICY = 'clouddirectory:AttachPolicy',
	ATTACH_TO_INDEX = 'clouddirectory:AttachToIndex',
	ATTACH_TYPED_LINK = 'clouddirectory:AttachTypedLink',
	BATCH_READ = 'clouddirectory:BatchRead',
	BATCH_WRITE = 'clouddirectory:BatchWrite',
	CREATE_DIRECTORY = 'clouddirectory:CreateDirectory',
	CREATE_FACET = 'clouddirectory:CreateFacet',
	CREATE_INDEX = 'clouddirectory:CreateIndex',
	CREATE_OBJECT = 'clouddirectory:CreateObject',
	CREATE_SCHEMA = 'clouddirectory:CreateSchema',
	CREATE_TYPED_LINK_FACET = 'clouddirectory:CreateTypedLinkFacet',
	DELETE_DIRECTORY = 'clouddirectory:DeleteDirectory',
	DELETE_FACET = 'clouddirectory:DeleteFacet',
	DELETE_OBJECT = 'clouddirectory:DeleteObject',
	DELETE_SCHEMA = 'clouddirectory:DeleteSchema',
	DELETE_TYPED_LINK_FACET = 'clouddirectory:DeleteTypedLinkFacet',
	DETACH_FROM_INDEX = 'clouddirectory:DetachFromIndex',
	DETACH_OBJECT = 'clouddirectory:DetachObject',
	DETACH_POLICY = 'clouddirectory:DetachPolicy',
	DETACH_TYPED_LINK = 'clouddirectory:DetachTypedLink',
	DISABLE_DIRECTORY = 'clouddirectory:DisableDirectory',
	ENABLE_DIRECTORY = 'clouddirectory:EnableDirectory',
	GET_APPLIED_SCHEMA_VERSION = 'clouddirectory:GetAppliedSchemaVersion',
	GET_DIRECTORY = 'clouddirectory:GetDirectory',
	GET_FACET = 'clouddirectory:GetFacet',
	GET_LINK_ATTRIBUTES = 'clouddirectory:GetLinkAttributes',
	GET_OBJECT_ATTRIBUTES = 'clouddirectory:GetObjectAttributes',
	GET_OBJECT_INFORMATION = 'clouddirectory:GetObjectInformation',
	GET_SCHEMA_AS_JSON = 'clouddirectory:GetSchemaAsJson',
	GET_TYPED_LINK_FACET_INFORMATION = 'clouddirectory:GetTypedLinkFacetInformation',
	LIST_APPLIED_SCHEMA_ARNS = 'clouddirectory:ListAppliedSchemaArns',
	LIST_ATTACHED_INDICES = 'clouddirectory:ListAttachedIndices',
	LIST_DEVELOPMENT_SCHEMA_ARNS = 'clouddirectory:ListDevelopmentSchemaArns',
	LIST_DIRECTORIES = 'clouddirectory:ListDirectories',
	LIST_FACET_ATTRIBUTES = 'clouddirectory:ListFacetAttributes',
	LIST_FACET_NAMES = 'clouddirectory:ListFacetNames',
	LIST_INCOMING_TYPED_LINKS = 'clouddirectory:ListIncomingTypedLinks',
	LIST_INDEX = 'clouddirectory:ListIndex',
	LIST_MANAGED_SCHEMA_ARNS = 'clouddirectory:ListManagedSchemaArns',
	LIST_OBJECT_ATTRIBUTES = 'clouddirectory:ListObjectAttributes',
	LIST_OBJECT_CHILDREN = 'clouddirectory:ListObjectChildren',
	LIST_OBJECT_PARENT_PATHS = 'clouddirectory:ListObjectParentPaths',
	LIST_OBJECT_PARENTS = 'clouddirectory:ListObjectParents',
	LIST_OBJECT_POLICIES = 'clouddirectory:ListObjectPolicies',
	LIST_OUTGOING_TYPED_LINKS = 'clouddirectory:ListOutgoingTypedLinks',
	LIST_POLICY_ATTACHMENTS = 'clouddirectory:ListPolicyAttachments',
	LIST_PUBLISHED_SCHEMA_ARNS = 'clouddirectory:ListPublishedSchemaArns',
	LIST_TAGS_FOR_RESOURCE = 'clouddirectory:ListTagsForResource',
	LIST_TYPED_LINK_FACET_ATTRIBUTES = 'clouddirectory:ListTypedLinkFacetAttributes',
	LIST_TYPED_LINK_FACET_NAMES = 'clouddirectory:ListTypedLinkFacetNames',
	LOOKUP_POLICY = 'clouddirectory:LookupPolicy',
	PUBLISH_SCHEMA = 'clouddirectory:PublishSchema',
	PUT_SCHEMA_FROM_JSON = 'clouddirectory:PutSchemaFromJson',
	REMOVE_FACET_FROM_OBJECT = 'clouddirectory:RemoveFacetFromObject',
	TAG_RESOURCE = 'clouddirectory:TagResource',
	UNTAG_RESOURCE = 'clouddirectory:UntagResource',
	UPDATE_FACET = 'clouddirectory:UpdateFacet',
	UPDATE_LINK_ATTRIBUTES = 'clouddirectory:UpdateLinkAttributes',
	UPDATE_OBJECT_ATTRIBUTES = 'clouddirectory:UpdateObjectAttributes',
	UPDATE_SCHEMA = 'clouddirectory:UpdateSchema',
	UPDATE_TYPED_LINK_FACET = 'clouddirectory:UpdateTypedLinkFacet',
	UPGRADE_APPLIED_SCHEMA = 'clouddirectory:UpgradeAppliedSchema',
	UPGRADE_PUBLISHED_SCHEMA = 'clouddirectory:UpgradePublishedSchema',
}
export enum ELEMENTAL_MEDIATAILOR {
	CONFIGURE_LOGS_FOR_PLAYBACK_CONFIGURATION = 'mediatailor:ConfigureLogsForPlaybackConfiguration',
	CREATE_CHANNEL = 'mediatailor:CreateChannel',
	CREATE_LIVE_SOURCE = 'mediatailor:CreateLiveSource',
	CREATE_PREFETCH_SCHEDULE = 'mediatailor:CreatePrefetchSchedule',
	CREATE_PROGRAM = 'mediatailor:CreateProgram',
	CREATE_SOURCE_LOCATION = 'mediatailor:CreateSourceLocation',
	CREATE_VOD_SOURCE = 'mediatailor:CreateVodSource',
	DELETE_CHANNEL = 'mediatailor:DeleteChannel',
	DELETE_CHANNEL_POLICY = 'mediatailor:DeleteChannelPolicy',
	DELETE_LIVE_SOURCE = 'mediatailor:DeleteLiveSource',
	DELETE_PLAYBACK_CONFIGURATION = 'mediatailor:DeletePlaybackConfiguration',
	DELETE_PREFETCH_SCHEDULE = 'mediatailor:DeletePrefetchSchedule',
	DELETE_PROGRAM = 'mediatailor:DeleteProgram',
	DELETE_SOURCE_LOCATION = 'mediatailor:DeleteSourceLocation',
	DELETE_VOD_SOURCE = 'mediatailor:DeleteVodSource',
	DESCRIBE_CHANNEL = 'mediatailor:DescribeChannel',
	DESCRIBE_LIVE_SOURCE = 'mediatailor:DescribeLiveSource',
	DESCRIBE_PROGRAM = 'mediatailor:DescribeProgram',
	DESCRIBE_SOURCE_LOCATION = 'mediatailor:DescribeSourceLocation',
	DESCRIBE_VOD_SOURCE = 'mediatailor:DescribeVodSource',
	GET_CHANNEL_POLICY = 'mediatailor:GetChannelPolicy',
	GET_CHANNEL_SCHEDULE = 'mediatailor:GetChannelSchedule',
	GET_PLAYBACK_CONFIGURATION = 'mediatailor:GetPlaybackConfiguration',
	GET_PREFETCH_SCHEDULE = 'mediatailor:GetPrefetchSchedule',
	LIST_ALERTS = 'mediatailor:ListAlerts',
	LIST_CHANNELS = 'mediatailor:ListChannels',
	LIST_LIVE_SOURCES = 'mediatailor:ListLiveSources',
	LIST_PLAYBACK_CONFIGURATIONS = 'mediatailor:ListPlaybackConfigurations',
	LIST_PREFETCH_SCHEDULES = 'mediatailor:ListPrefetchSchedules',
	LIST_SOURCE_LOCATIONS = 'mediatailor:ListSourceLocations',
	LIST_TAGS_FOR_RESOURCE = 'mediatailor:ListTagsForResource',
	LIST_VOD_SOURCES = 'mediatailor:ListVodSources',
	PUT_CHANNEL_POLICY = 'mediatailor:PutChannelPolicy',
	PUT_PLAYBACK_CONFIGURATION = 'mediatailor:PutPlaybackConfiguration',
	START_CHANNEL = 'mediatailor:StartChannel',
	STOP_CHANNEL = 'mediatailor:StopChannel',
	TAG_RESOURCE = 'mediatailor:TagResource',
	UNTAG_RESOURCE = 'mediatailor:UntagResource',
	UPDATE_CHANNEL = 'mediatailor:UpdateChannel',
	UPDATE_LIVE_SOURCE = 'mediatailor:UpdateLiveSource',
	UPDATE_SOURCE_LOCATION = 'mediatailor:UpdateSourceLocation',
	UPDATE_VOD_SOURCE = 'mediatailor:UpdateVodSource',
}
export enum ROUTE_53 {
	ACTIVATE_KEY_SIGNING_KEY = 'route53:ActivateKeySigningKey',
	ASSOCIATE_VPC_WITH_HOSTED_ZONE = 'route53:AssociateVPCWithHostedZone',
	CHANGE_CIDR_COLLECTION = 'route53:ChangeCidrCollection',
	CHANGE_RESOURCE_RECORD_SETS = 'route53:ChangeResourceRecordSets',
	CHANGE_TAGS_FOR_RESOURCE = 'route53:ChangeTagsForResource',
	CREATE_CIDR_COLLECTION = 'route53:CreateCidrCollection',
	CREATE_HEALTH_CHECK = 'route53:CreateHealthCheck',
	CREATE_HOSTED_ZONE = 'route53:CreateHostedZone',
	CREATE_KEY_SIGNING_KEY = 'route53:CreateKeySigningKey',
	CREATE_QUERY_LOGGING_CONFIG = 'route53:CreateQueryLoggingConfig',
	CREATE_REUSABLE_DELEGATION_SET = 'route53:CreateReusableDelegationSet',
	CREATE_TRAFFIC_POLICY = 'route53:CreateTrafficPolicy',
	CREATE_TRAFFIC_POLICY_INSTANCE = 'route53:CreateTrafficPolicyInstance',
	CREATE_TRAFFIC_POLICY_VERSION = 'route53:CreateTrafficPolicyVersion',
	CREATE_VPC_ASSOCIATION_AUTHORIZATION = 'route53:CreateVPCAssociationAuthorization',
	DEACTIVATE_KEY_SIGNING_KEY = 'route53:DeactivateKeySigningKey',
	DELETE_CIDR_COLLECTION = 'route53:DeleteCidrCollection',
	DELETE_HEALTH_CHECK = 'route53:DeleteHealthCheck',
	DELETE_HOSTED_ZONE = 'route53:DeleteHostedZone',
	DELETE_KEY_SIGNING_KEY = 'route53:DeleteKeySigningKey',
	DELETE_QUERY_LOGGING_CONFIG = 'route53:DeleteQueryLoggingConfig',
	DELETE_REUSABLE_DELEGATION_SET = 'route53:DeleteReusableDelegationSet',
	DELETE_TRAFFIC_POLICY = 'route53:DeleteTrafficPolicy',
	DELETE_TRAFFIC_POLICY_INSTANCE = 'route53:DeleteTrafficPolicyInstance',
	DELETE_VPC_ASSOCIATION_AUTHORIZATION = 'route53:DeleteVPCAssociationAuthorization',
	DISABLE_HOSTED_ZONE_DNSSEC = 'route53:DisableHostedZoneDNSSEC',
	DISASSOCIATE_VPC_FROM_HOSTED_ZONE = 'route53:DisassociateVPCFromHostedZone',
	ENABLE_HOSTED_ZONE_DNSSEC = 'route53:EnableHostedZoneDNSSEC',
	GET_ACCOUNT_LIMIT = 'route53:GetAccountLimit',
	GET_CHANGE = 'route53:GetChange',
	GET_CHECKER_IP_RANGES = 'route53:GetCheckerIpRanges',
	GET_DNSSEC = 'route53:GetDNSSEC',
	GET_GEO_LOCATION = 'route53:GetGeoLocation',
	GET_HEALTH_CHECK = 'route53:GetHealthCheck',
	GET_HEALTH_CHECK_COUNT = 'route53:GetHealthCheckCount',
	GET_HEALTH_CHECK_LAST_FAILURE_REASON = 'route53:GetHealthCheckLastFailureReason',
	GET_HEALTH_CHECK_STATUS = 'route53:GetHealthCheckStatus',
	GET_HOSTED_ZONE = 'route53:GetHostedZone',
	GET_HOSTED_ZONE_COUNT = 'route53:GetHostedZoneCount',
	GET_HOSTED_ZONE_LIMIT = 'route53:GetHostedZoneLimit',
	GET_QUERY_LOGGING_CONFIG = 'route53:GetQueryLoggingConfig',
	GET_REUSABLE_DELEGATION_SET = 'route53:GetReusableDelegationSet',
	GET_REUSABLE_DELEGATION_SET_LIMIT = 'route53:GetReusableDelegationSetLimit',
	GET_TRAFFIC_POLICY = 'route53:GetTrafficPolicy',
	GET_TRAFFIC_POLICY_INSTANCE = 'route53:GetTrafficPolicyInstance',
	GET_TRAFFIC_POLICY_INSTANCE_COUNT = 'route53:GetTrafficPolicyInstanceCount',
	LIST_CIDR_BLOCKS = 'route53:ListCidrBlocks',
	LIST_CIDR_COLLECTIONS = 'route53:ListCidrCollections',
	LIST_CIDR_LOCATIONS = 'route53:ListCidrLocations',
	LIST_GEO_LOCATIONS = 'route53:ListGeoLocations',
	LIST_HEALTH_CHECKS = 'route53:ListHealthChecks',
	LIST_HOSTED_ZONES = 'route53:ListHostedZones',
	LIST_HOSTED_ZONES_BY_NAME = 'route53:ListHostedZonesByName',
	LIST_HOSTED_ZONES_BY_VPC = 'route53:ListHostedZonesByVPC',
	LIST_QUERY_LOGGING_CONFIGS = 'route53:ListQueryLoggingConfigs',
	LIST_RESOURCE_RECORD_SETS = 'route53:ListResourceRecordSets',
	LIST_REUSABLE_DELEGATION_SETS = 'route53:ListReusableDelegationSets',
	LIST_TAGS_FOR_RESOURCE = 'route53:ListTagsForResource',
	LIST_TAGS_FOR_RESOURCES = 'route53:ListTagsForResources',
	LIST_TRAFFIC_POLICIES = 'route53:ListTrafficPolicies',
	LIST_TRAFFIC_POLICY_INSTANCES = 'route53:ListTrafficPolicyInstances',
	LIST_TRAFFIC_POLICY_INSTANCES_BY_HOSTED_ZONE = 'route53:ListTrafficPolicyInstancesByHostedZone',
	LIST_TRAFFIC_POLICY_INSTANCES_BY_POLICY = 'route53:ListTrafficPolicyInstancesByPolicy',
	LIST_TRAFFIC_POLICY_VERSIONS = 'route53:ListTrafficPolicyVersions',
	LIST_VPC_ASSOCIATION_AUTHORIZATIONS = 'route53:ListVPCAssociationAuthorizations',
	TEST_DNS_ANSWER = 'route53:TestDNSAnswer',
	UPDATE_HEALTH_CHECK = 'route53:UpdateHealthCheck',
	UPDATE_HOSTED_ZONE_COMMENT = 'route53:UpdateHostedZoneComment',
	UPDATE_TRAFFIC_POLICY_COMMENT = 'route53:UpdateTrafficPolicyComment',
	UPDATE_TRAFFIC_POLICY_INSTANCE = 'route53:UpdateTrafficPolicyInstance',
}
export enum SIMPLEDB {
	BATCH_DELETE_ATTRIBUTES = 'sdb:BatchDeleteAttributes',
	BATCH_PUT_ATTRIBUTES = 'sdb:BatchPutAttributes',
	CREATE_DOMAIN = 'sdb:CreateDomain',
	DELETE_ATTRIBUTES = 'sdb:DeleteAttributes',
	DELETE_DOMAIN = 'sdb:DeleteDomain',
	DOMAIN_METADATA = 'sdb:DomainMetadata',
	GET_ATTRIBUTES = 'sdb:GetAttributes',
	LIST_DOMAINS = 'sdb:ListDomains',
	PUT_ATTRIBUTES = 'sdb:PutAttributes',
	SELECT = 'sdb:Select',
}
export enum SECURITY_TOKEN_SERVICE {
	ASSUME_ROLE = 'sts:AssumeRole',
	ASSUME_ROLE_WITH_SAML = 'sts:AssumeRoleWithSAML',
	ASSUME_ROLE_WITH_WEB_IDENTITY = 'sts:AssumeRoleWithWebIdentity',
	DECODE_AUTHORIZATION_MESSAGE = 'sts:DecodeAuthorizationMessage',
	GET_ACCESS_KEY_INFO = 'sts:GetAccessKeyInfo',
	GET_CALLER_IDENTITY = 'sts:GetCallerIdentity',
	GET_FEDERATION_TOKEN = 'sts:GetFederationToken',
	GET_SERVICE_BEARER_TOKEN = 'sts:GetServiceBearerToken',
	GET_SESSION_TOKEN = 'sts:GetSessionToken',
	SET_SOURCE_IDENTITY = 'sts:SetSourceIdentity',
	TAG_SESSION = 'sts:TagSession',
}
export enum ELEMENTAL_MEDIAPACKAGE {
	CONFIGURE_LOGS = 'mediapackage:ConfigureLogs',
	CREATE_CHANNEL = 'mediapackage:CreateChannel',
	CREATE_HARVEST_JOB = 'mediapackage:CreateHarvestJob',
	CREATE_ORIGIN_ENDPOINT = 'mediapackage:CreateOriginEndpoint',
	DELETE_CHANNEL = 'mediapackage:DeleteChannel',
	DELETE_ORIGIN_ENDPOINT = 'mediapackage:DeleteOriginEndpoint',
	DESCRIBE_CHANNEL = 'mediapackage:DescribeChannel',
	DESCRIBE_HARVEST_JOB = 'mediapackage:DescribeHarvestJob',
	DESCRIBE_ORIGIN_ENDPOINT = 'mediapackage:DescribeOriginEndpoint',
	LIST_CHANNELS = 'mediapackage:ListChannels',
	LIST_HARVEST_JOBS = 'mediapackage:ListHarvestJobs',
	LIST_ORIGIN_ENDPOINTS = 'mediapackage:ListOriginEndpoints',
	LIST_TAGS_FOR_RESOURCE = 'mediapackage:ListTagsForResource',
	ROTATE_CHANNEL_CREDENTIALS = 'mediapackage:RotateChannelCredentials',
	ROTATE_INGEST_ENDPOINT_CREDENTIALS = 'mediapackage:RotateIngestEndpointCredentials',
	TAG_RESOURCE = 'mediapackage:TagResource',
	UNTAG_RESOURCE = 'mediapackage:UntagResource',
	UPDATE_CHANNEL = 'mediapackage:UpdateChannel',
	UPDATE_ORIGIN_ENDPOINT = 'mediapackage:UpdateOriginEndpoint',
}
export enum KEYSPACES_FOR_APACHE_CASSANDRA {
	ALTER = 'cassandra:Alter',
	CREATE = 'cassandra:Create',
	DROP = 'cassandra:Drop',
	MODIFY = 'cassandra:Modify',
	RESTORE = 'cassandra:Restore',
	SELECT = 'cassandra:Select',
	TAG_RESOURCE = 'cassandra:TagResource',
	UNTAG_RESOURCE = 'cassandra:UntagResource',
	UPDATE_PARTITIONER = 'cassandra:UpdatePartitioner',
}
export enum RESILIENCE_HUB_SERVICE {
	ADD_DRAFT_APP_VERSION_RESOURCE_MAPPINGS = 'resiliencehub:AddDraftAppVersionResourceMappings',
	CREATE_APP = 'resiliencehub:CreateApp',
	CREATE_RECOMMENDATION_TEMPLATE = 'resiliencehub:CreateRecommendationTemplate',
	CREATE_RESILIENCY_POLICY = 'resiliencehub:CreateResiliencyPolicy',
	DELETE_APP = 'resiliencehub:DeleteApp',
	DELETE_APP_ASSESSMENT = 'resiliencehub:DeleteAppAssessment',
	DELETE_RECOMMENDATION_TEMPLATE = 'resiliencehub:DeleteRecommendationTemplate',
	DELETE_RESILIENCY_POLICY = 'resiliencehub:DeleteResiliencyPolicy',
	DESCRIBE_APP = 'resiliencehub:DescribeApp',
	DESCRIBE_APP_ASSESSMENT = 'resiliencehub:DescribeAppAssessment',
	DESCRIBE_APP_VERSION_RESOURCES_RESOLUTION_STATUS = 'resiliencehub:DescribeAppVersionResourcesResolutionStatus',
	DESCRIBE_APP_VERSION_TEMPLATE = 'resiliencehub:DescribeAppVersionTemplate',
	DESCRIBE_DRAFT_APP_VERSION_RESOURCES_IMPORT_STATUS = 'resiliencehub:DescribeDraftAppVersionResourcesImportStatus',
	DESCRIBE_RESILIENCY_POLICY = 'resiliencehub:DescribeResiliencyPolicy',
	IMPORT_RESOURCES_TO_DRAFT_APP_VERSION = 'resiliencehub:ImportResourcesToDraftAppVersion',
	LIST_ALARM_RECOMMENDATIONS = 'resiliencehub:ListAlarmRecommendations',
	LIST_APP_ASSESSMENTS = 'resiliencehub:ListAppAssessments',
	LIST_APP_COMPONENT_COMPLIANCES = 'resiliencehub:ListAppComponentCompliances',
	LIST_APP_COMPONENT_RECOMMENDATIONS = 'resiliencehub:ListAppComponentRecommendations',
	LIST_APP_VERSION_RESOURCE_MAPPINGS = 'resiliencehub:ListAppVersionResourceMappings',
	LIST_APP_VERSION_RESOURCES = 'resiliencehub:ListAppVersionResources',
	LIST_APP_VERSIONS = 'resiliencehub:ListAppVersions',
	LIST_APPS = 'resiliencehub:ListApps',
	LIST_RECOMMENDATION_TEMPLATES = 'resiliencehub:ListRecommendationTemplates',
	LIST_RESILIENCY_POLICIES = 'resiliencehub:ListResiliencyPolicies',
	LIST_SOP_RECOMMENDATIONS = 'resiliencehub:ListSopRecommendations',
	LIST_SUGGESTED_RESILIENCY_POLICIES = 'resiliencehub:ListSuggestedResiliencyPolicies',
	LIST_TAGS_FOR_RESOURCE = 'resiliencehub:ListTagsForResource',
	LIST_TEST_RECOMMENDATIONS = 'resiliencehub:ListTestRecommendations',
	LIST_UNSUPPORTED_APP_VERSION_RESOURCES = 'resiliencehub:ListUnsupportedAppVersionResources',
	PUBLISH_APP_VERSION = 'resiliencehub:PublishAppVersion',
	PUT_DRAFT_APP_VERSION_TEMPLATE = 'resiliencehub:PutDraftAppVersionTemplate',
	REMOVE_DRAFT_APP_VERSION_RESOURCE_MAPPINGS = 'resiliencehub:RemoveDraftAppVersionResourceMappings',
	RESOLVE_APP_VERSION_RESOURCES = 'resiliencehub:ResolveAppVersionResources',
	START_APP_ASSESSMENT = 'resiliencehub:StartAppAssessment',
	TAG_RESOURCE = 'resiliencehub:TagResource',
	UNTAG_RESOURCE = 'resiliencehub:UntagResource',
	UPDATE_APP = 'resiliencehub:UpdateApp',
	UPDATE_RESILIENCY_POLICY = 'resiliencehub:UpdateResiliencyPolicy',
}
export enum SYSTEMS_MANAGER_GUI_CONNECT {
	CANCEL_CONNECTION = 'ssm-guiconnect:CancelConnection',
	GET_CONNECTION = 'ssm-guiconnect:GetConnection',
	START_CONNECTION = 'ssm-guiconnect:StartConnection',
}
export enum ATHENA {
	BATCH_GET_NAMED_QUERY = 'athena:BatchGetNamedQuery',
	BATCH_GET_PREPARED_STATEMENT = 'athena:BatchGetPreparedStatement',
	BATCH_GET_QUERY_EXECUTION = 'athena:BatchGetQueryExecution',
	CREATE_DATA_CATALOG = 'athena:CreateDataCatalog',
	CREATE_NAMED_QUERY = 'athena:CreateNamedQuery',
	CREATE_NOTEBOOK = 'athena:CreateNotebook',
	CREATE_PREPARED_STATEMENT = 'athena:CreatePreparedStatement',
	CREATE_PRESIGNED_NOTEBOOK_URL = 'athena:CreatePresignedNotebookUrl',
	CREATE_WORK_GROUP = 'athena:CreateWorkGroup',
	DELETE_DATA_CATALOG = 'athena:DeleteDataCatalog',
	DELETE_NAMED_QUERY = 'athena:DeleteNamedQuery',
	DELETE_NOTEBOOK = 'athena:DeleteNotebook',
	DELETE_PREPARED_STATEMENT = 'athena:DeletePreparedStatement',
	DELETE_WORK_GROUP = 'athena:DeleteWorkGroup',
	EXPORT_NOTEBOOK = 'athena:ExportNotebook',
	GET_CALCULATION_EXECUTION = 'athena:GetCalculationExecution',
	GET_CALCULATION_EXECUTION_CODE = 'athena:GetCalculationExecutionCode',
	GET_CALCULATION_EXECUTION_STATUS = 'athena:GetCalculationExecutionStatus',
	GET_DATA_CATALOG = 'athena:GetDataCatalog',
	GET_DATABASE = 'athena:GetDatabase',
	GET_NAMED_QUERY = 'athena:GetNamedQuery',
	GET_NOTEBOOK_METADATA = 'athena:GetNotebookMetadata',
	GET_PREPARED_STATEMENT = 'athena:GetPreparedStatement',
	GET_QUERY_EXECUTION = 'athena:GetQueryExecution',
	GET_QUERY_RESULTS = 'athena:GetQueryResults',
	GET_QUERY_RESULTS_STREAM = 'athena:GetQueryResultsStream',
	GET_QUERY_RUNTIME_STATISTICS = 'athena:GetQueryRuntimeStatistics',
	GET_SESSION = 'athena:GetSession',
	GET_SESSION_STATUS = 'athena:GetSessionStatus',
	GET_TABLE_METADATA = 'athena:GetTableMetadata',
	GET_WORK_GROUP = 'athena:GetWorkGroup',
	IMPORT_NOTEBOOK = 'athena:ImportNotebook',
	LIST_APPLICATION_DPU_SIZES = 'athena:ListApplicationDPUSizes',
	LIST_CALCULATION_EXECUTIONS = 'athena:ListCalculationExecutions',
	LIST_DATA_CATALOGS = 'athena:ListDataCatalogs',
	LIST_DATABASES = 'athena:ListDatabases',
	LIST_ENGINE_VERSIONS = 'athena:ListEngineVersions',
	LIST_EXECUTORS = 'athena:ListExecutors',
	LIST_NAMED_QUERIES = 'athena:ListNamedQueries',
	LIST_NOTEBOOK_METADATA = 'athena:ListNotebookMetadata',
	LIST_NOTEBOOK_SESSIONS = 'athena:ListNotebookSessions',
	LIST_PREPARED_STATEMENTS = 'athena:ListPreparedStatements',
	LIST_QUERY_EXECUTIONS = 'athena:ListQueryExecutions',
	LIST_SESSIONS = 'athena:ListSessions',
	LIST_TABLE_METADATA = 'athena:ListTableMetadata',
	LIST_TAGS_FOR_RESOURCE = 'athena:ListTagsForResource',
	LIST_WORK_GROUPS = 'athena:ListWorkGroups',
	START_CALCULATION_EXECUTION = 'athena:StartCalculationExecution',
	START_QUERY_EXECUTION = 'athena:StartQueryExecution',
	START_SESSION = 'athena:StartSession',
	STOP_CALCULATION_EXECUTION = 'athena:StopCalculationExecution',
	STOP_QUERY_EXECUTION = 'athena:StopQueryExecution',
	TAG_RESOURCE = 'athena:TagResource',
	TERMINATE_SESSION = 'athena:TerminateSession',
	UNTAG_RESOURCE = 'athena:UntagResource',
	UPDATE_DATA_CATALOG = 'athena:UpdateDataCatalog',
	UPDATE_NAMED_QUERY = 'athena:UpdateNamedQuery',
	UPDATE_NOTEBOOK = 'athena:UpdateNotebook',
	UPDATE_NOTEBOOK_METADATA = 'athena:UpdateNotebookMetadata',
	UPDATE_PREPARED_STATEMENT = 'athena:UpdatePreparedStatement',
	UPDATE_WORK_GROUP = 'athena:UpdateWorkGroup',
}
export enum MARKETPLACE_METERING_SERVICE {
	BATCH_METER_USAGE = 'aws-marketplace:BatchMeterUsage',
	METER_USAGE = 'aws-marketplace:MeterUsage',
	REGISTER_USAGE = 'aws-marketplace:RegisterUsage',
	RESOLVE_CUSTOMER = 'aws-marketplace:ResolveCustomer',
}
export enum MARKETPLACE_PROCUREMENT_SYSTEMS_INTEGRATION {
	DESCRIBE_PROCUREMENT_SYSTEM_CONFIGURATION = 'aws-marketplace:DescribeProcurementSystemConfiguration',
	PUT_PROCUREMENT_SYSTEM_CONFIGURATION = 'aws-marketplace:PutProcurementSystemConfiguration',
}
export enum MARKETPLACE_PRIVATE_MARKETPLACE {
	ASSOCIATE_PRODUCTS_WITH_PRIVATE_MARKETPLACE = 'aws-marketplace:AssociateProductsWithPrivateMarketplace',
	CREATE_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:CreatePrivateMarketplaceRequests',
	DESCRIBE_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:DescribePrivateMarketplaceRequests',
	DISASSOCIATE_PRODUCTS_FROM_PRIVATE_MARKETPLACE = 'aws-marketplace:DisassociateProductsFromPrivateMarketplace',
	LIST_PRIVATE_MARKETPLACE_REQUESTS = 'aws-marketplace:ListPrivateMarketplaceRequests',
}
export enum MARKETPLACE_CATALOG {
	CANCEL_CHANGE_SET = 'aws-marketplace:CancelChangeSet',
	COMPLETE_TASK = 'aws-marketplace:CompleteTask',
	DESCRIBE_CHANGE_SET = 'aws-marketplace:DescribeChangeSet',
	DESCRIBE_ENTITY = 'aws-marketplace:DescribeEntity',
	DESCRIBE_TASK = 'aws-marketplace:DescribeTask',
	LIST_CHANGE_SETS = 'aws-marketplace:ListChangeSets',
	LIST_ENTITIES = 'aws-marketplace:ListEntities',
	LIST_TAGS_FOR_RESOURCE = 'aws-marketplace:ListTagsForResource',
	LIST_TASKS = 'aws-marketplace:ListTasks',
	START_CHANGE_SET = 'aws-marketplace:StartChangeSet',
	TAG_RESOURCE = 'aws-marketplace:TagResource',
	UNTAG_RESOURCE = 'aws-marketplace:UntagResource',
	UPDATE_TASK = 'aws-marketplace:UpdateTask',
}
export enum MARKETPLACE_IMAGE_BUILDING_SERVICE {
	DESCRIBE_BUILDS = 'aws-marketplace:DescribeBuilds',
	LIST_BUILDS = 'aws-marketplace:ListBuilds',
	START_BUILD = 'aws-marketplace:StartBuild',
}
export enum MARKETPLACE_SELLER_REPORTING {
	GET_SELLER_DASHBOARD = 'aws-marketplace:GetSellerDashboard',
}
export enum MARKETPLACE_ENTITLEMENT_SERVICE {
	GET_ENTITLEMENTS = 'aws-marketplace:GetEntitlements',
}
export enum MARKETPLACE {
	ACCEPT_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:AcceptAgreementApprovalRequest',
	ACCEPT_AGREEMENT_REQUEST = 'aws-marketplace:AcceptAgreementRequest',
	CANCEL_AGREEMENT = 'aws-marketplace:CancelAgreement',
	CANCEL_AGREEMENT_REQUEST = 'aws-marketplace:CancelAgreementRequest',
	CREATE_AGREEMENT_REQUEST = 'aws-marketplace:CreateAgreementRequest',
	DESCRIBE_AGREEMENT = 'aws-marketplace:DescribeAgreement',
	GET_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:GetAgreementApprovalRequest',
	GET_AGREEMENT_REQUEST = 'aws-marketplace:GetAgreementRequest',
	GET_AGREEMENT_TERMS = 'aws-marketplace:GetAgreementTerms',
	LIST_AGREEMENT_APPROVAL_REQUESTS = 'aws-marketplace:ListAgreementApprovalRequests',
	LIST_AGREEMENT_REQUESTS = 'aws-marketplace:ListAgreementRequests',
	REJECT_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:RejectAgreementApprovalRequest',
	SEARCH_AGREEMENTS = 'aws-marketplace:SearchAgreements',
	SUBSCRIBE = 'aws-marketplace:Subscribe',
	UNSUBSCRIBE = 'aws-marketplace:Unsubscribe',
	UPDATE_AGREEMENT_APPROVAL_REQUEST = 'aws-marketplace:UpdateAgreementApprovalRequest',
	VIEW_SUBSCRIPTIONS = 'aws-marketplace:ViewSubscriptions',
}
export enum PINPOINT {
	CREATE_APP = 'mobiletargeting:CreateApp',
	CREATE_CAMPAIGN = 'mobiletargeting:CreateCampaign',
	CREATE_EMAIL_TEMPLATE = 'mobiletargeting:CreateEmailTemplate',
	CREATE_EXPORT_JOB = 'mobiletargeting:CreateExportJob',
	CREATE_IMPORT_JOB = 'mobiletargeting:CreateImportJob',
	CREATE_IN_APP_TEMPLATE = 'mobiletargeting:CreateInAppTemplate',
	CREATE_JOURNEY = 'mobiletargeting:CreateJourney',
	CREATE_PUSH_TEMPLATE = 'mobiletargeting:CreatePushTemplate',
	CREATE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:CreateRecommenderConfiguration',
	CREATE_SEGMENT = 'mobiletargeting:CreateSegment',
	CREATE_SMS_TEMPLATE = 'mobiletargeting:CreateSmsTemplate',
	CREATE_VOICE_TEMPLATE = 'mobiletargeting:CreateVoiceTemplate',
	DELETE_ADM_CHANNEL = 'mobiletargeting:DeleteAdmChannel',
	DELETE_APNS_CHANNEL = 'mobiletargeting:DeleteApnsChannel',
	DELETE_APNS_SANDBOX_CHANNEL = 'mobiletargeting:DeleteApnsSandboxChannel',
	DELETE_APNS_VOIP_CHANNEL = 'mobiletargeting:DeleteApnsVoipChannel',
	DELETE_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:DeleteApnsVoipSandboxChannel',
	DELETE_APP = 'mobiletargeting:DeleteApp',
	DELETE_BAIDU_CHANNEL = 'mobiletargeting:DeleteBaiduChannel',
	DELETE_CAMPAIGN = 'mobiletargeting:DeleteCampaign',
	DELETE_EMAIL_CHANNEL = 'mobiletargeting:DeleteEmailChannel',
	DELETE_EMAIL_TEMPLATE = 'mobiletargeting:DeleteEmailTemplate',
	DELETE_ENDPOINT = 'mobiletargeting:DeleteEndpoint',
	DELETE_EVENT_STREAM = 'mobiletargeting:DeleteEventStream',
	DELETE_GCM_CHANNEL = 'mobiletargeting:DeleteGcmChannel',
	DELETE_IN_APP_TEMPLATE = 'mobiletargeting:DeleteInAppTemplate',
	DELETE_JOURNEY = 'mobiletargeting:DeleteJourney',
	DELETE_PUSH_TEMPLATE = 'mobiletargeting:DeletePushTemplate',
	DELETE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:DeleteRecommenderConfiguration',
	DELETE_SEGMENT = 'mobiletargeting:DeleteSegment',
	DELETE_SMS_CHANNEL = 'mobiletargeting:DeleteSmsChannel',
	DELETE_SMS_TEMPLATE = 'mobiletargeting:DeleteSmsTemplate',
	DELETE_USER_ENDPOINTS = 'mobiletargeting:DeleteUserEndpoints',
	DELETE_VOICE_CHANNEL = 'mobiletargeting:DeleteVoiceChannel',
	DELETE_VOICE_TEMPLATE = 'mobiletargeting:DeleteVoiceTemplate',
	GET_ADM_CHANNEL = 'mobiletargeting:GetAdmChannel',
	GET_APNS_CHANNEL = 'mobiletargeting:GetApnsChannel',
	GET_APNS_SANDBOX_CHANNEL = 'mobiletargeting:GetApnsSandboxChannel',
	GET_APNS_VOIP_CHANNEL = 'mobiletargeting:GetApnsVoipChannel',
	GET_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:GetApnsVoipSandboxChannel',
	GET_APP = 'mobiletargeting:GetApp',
	GET_APPLICATION_DATE_RANGE_KPI = 'mobiletargeting:GetApplicationDateRangeKpi',
	GET_APPLICATION_SETTINGS = 'mobiletargeting:GetApplicationSettings',
	GET_APPS = 'mobiletargeting:GetApps',
	GET_BAIDU_CHANNEL = 'mobiletargeting:GetBaiduChannel',
	GET_CAMPAIGN = 'mobiletargeting:GetCampaign',
	GET_CAMPAIGN_ACTIVITIES = 'mobiletargeting:GetCampaignActivities',
	GET_CAMPAIGN_DATE_RANGE_KPI = 'mobiletargeting:GetCampaignDateRangeKpi',
	GET_CAMPAIGN_VERSION = 'mobiletargeting:GetCampaignVersion',
	GET_CAMPAIGN_VERSIONS = 'mobiletargeting:GetCampaignVersions',
	GET_CAMPAIGNS = 'mobiletargeting:GetCampaigns',
	GET_CHANNELS = 'mobiletargeting:GetChannels',
	GET_EMAIL_CHANNEL = 'mobiletargeting:GetEmailChannel',
	GET_EMAIL_TEMPLATE = 'mobiletargeting:GetEmailTemplate',
	GET_ENDPOINT = 'mobiletargeting:GetEndpoint',
	GET_EVENT_STREAM = 'mobiletargeting:GetEventStream',
	GET_EXPORT_JOB = 'mobiletargeting:GetExportJob',
	GET_EXPORT_JOBS = 'mobiletargeting:GetExportJobs',
	GET_GCM_CHANNEL = 'mobiletargeting:GetGcmChannel',
	GET_IMPORT_JOB = 'mobiletargeting:GetImportJob',
	GET_IMPORT_JOBS = 'mobiletargeting:GetImportJobs',
	GET_IN_APP_MESSAGES = 'mobiletargeting:GetInAppMessages',
	GET_IN_APP_TEMPLATE = 'mobiletargeting:GetInAppTemplate',
	GET_JOURNEY = 'mobiletargeting:GetJourney',
	GET_JOURNEY_DATE_RANGE_KPI = 'mobiletargeting:GetJourneyDateRangeKpi',
	GET_JOURNEY_EXECUTION_ACTIVITY_METRICS = 'mobiletargeting:GetJourneyExecutionActivityMetrics',
	GET_JOURNEY_EXECUTION_METRICS = 'mobiletargeting:GetJourneyExecutionMetrics',
	GET_PUSH_TEMPLATE = 'mobiletargeting:GetPushTemplate',
	GET_RECOMMENDER_CONFIGURATION = 'mobiletargeting:GetRecommenderConfiguration',
	GET_RECOMMENDER_CONFIGURATIONS = 'mobiletargeting:GetRecommenderConfigurations',
	GET_REPORTS = 'mobiletargeting:GetReports',
	GET_SEGMENT = 'mobiletargeting:GetSegment',
	GET_SEGMENT_EXPORT_JOBS = 'mobiletargeting:GetSegmentExportJobs',
	GET_SEGMENT_IMPORT_JOBS = 'mobiletargeting:GetSegmentImportJobs',
	GET_SEGMENT_VERSION = 'mobiletargeting:GetSegmentVersion',
	GET_SEGMENT_VERSIONS = 'mobiletargeting:GetSegmentVersions',
	GET_SEGMENTS = 'mobiletargeting:GetSegments',
	GET_SMS_CHANNEL = 'mobiletargeting:GetSmsChannel',
	GET_SMS_TEMPLATE = 'mobiletargeting:GetSmsTemplate',
	GET_USER_ENDPOINTS = 'mobiletargeting:GetUserEndpoints',
	GET_VOICE_CHANNEL = 'mobiletargeting:GetVoiceChannel',
	GET_VOICE_TEMPLATE = 'mobiletargeting:GetVoiceTemplate',
	LIST_JOURNEYS = 'mobiletargeting:ListJourneys',
	LIST_TAGS_FOR_RESOURCE = 'mobiletargeting:ListTagsForResource',
	LIST_TEMPLATE_VERSIONS = 'mobiletargeting:ListTemplateVersions',
	LIST_TEMPLATES = 'mobiletargeting:ListTemplates',
	PHONE_NUMBER_VALIDATE = 'mobiletargeting:PhoneNumberValidate',
	PUT_EVENT_STREAM = 'mobiletargeting:PutEventStream',
	PUT_EVENTS = 'mobiletargeting:PutEvents',
	REMOVE_ATTRIBUTES = 'mobiletargeting:RemoveAttributes',
	SEND_MESSAGES = 'mobiletargeting:SendMessages',
	SEND_OTP_MESSAGE = 'mobiletargeting:SendOTPMessage',
	SEND_USERS_MESSAGES = 'mobiletargeting:SendUsersMessages',
	TAG_RESOURCE = 'mobiletargeting:TagResource',
	UNTAG_RESOURCE = 'mobiletargeting:UntagResource',
	UPDATE_ADM_CHANNEL = 'mobiletargeting:UpdateAdmChannel',
	UPDATE_APNS_CHANNEL = 'mobiletargeting:UpdateApnsChannel',
	UPDATE_APNS_SANDBOX_CHANNEL = 'mobiletargeting:UpdateApnsSandboxChannel',
	UPDATE_APNS_VOIP_CHANNEL = 'mobiletargeting:UpdateApnsVoipChannel',
	UPDATE_APNS_VOIP_SANDBOX_CHANNEL = 'mobiletargeting:UpdateApnsVoipSandboxChannel',
	UPDATE_APPLICATION_SETTINGS = 'mobiletargeting:UpdateApplicationSettings',
	UPDATE_BAIDU_CHANNEL = 'mobiletargeting:UpdateBaiduChannel',
	UPDATE_CAMPAIGN = 'mobiletargeting:UpdateCampaign',
	UPDATE_EMAIL_CHANNEL = 'mobiletargeting:UpdateEmailChannel',
	UPDATE_EMAIL_TEMPLATE = 'mobiletargeting:UpdateEmailTemplate',
	UPDATE_ENDPOINT = 'mobiletargeting:UpdateEndpoint',
	UPDATE_ENDPOINTS_BATCH = 'mobiletargeting:UpdateEndpointsBatch',
	UPDATE_GCM_CHANNEL = 'mobiletargeting:UpdateGcmChannel',
	UPDATE_IN_APP_TEMPLATE = 'mobiletargeting:UpdateInAppTemplate',
	UPDATE_JOURNEY = 'mobiletargeting:UpdateJourney',
	UPDATE_JOURNEY_STATE = 'mobiletargeting:UpdateJourneyState',
	UPDATE_PUSH_TEMPLATE = 'mobiletargeting:UpdatePushTemplate',
	UPDATE_RECOMMENDER_CONFIGURATION = 'mobiletargeting:UpdateRecommenderConfiguration',
	UPDATE_SEGMENT = 'mobiletargeting:UpdateSegment',
	UPDATE_SMS_CHANNEL = 'mobiletargeting:UpdateSmsChannel',
	UPDATE_SMS_TEMPLATE = 'mobiletargeting:UpdateSmsTemplate',
	UPDATE_TEMPLATE_ACTIVE_VERSION = 'mobiletargeting:UpdateTemplateActiveVersion',
	UPDATE_VOICE_CHANNEL = 'mobiletargeting:UpdateVoiceChannel',
	UPDATE_VOICE_TEMPLATE = 'mobiletargeting:UpdateVoiceTemplate',
	VERIFY_OTP_MESSAGE = 'mobiletargeting:VerifyOTPMessage',
}
export enum SUMERIAN {
	LOGIN = 'sumerian:Login',
	VIEW_RELEASE = 'sumerian:ViewRelease',
}
export enum AUTO_SCALING {
	CREATE_SCALING_PLAN = 'autoscaling-plans:CreateScalingPlan',
	DELETE_SCALING_PLAN = 'autoscaling-plans:DeleteScalingPlan',
	DESCRIBE_SCALING_PLAN_RESOURCES = 'autoscaling-plans:DescribeScalingPlanResources',
	DESCRIBE_SCALING_PLANS = 'autoscaling-plans:DescribeScalingPlans',
	GET_SCALING_PLAN_RESOURCE_FORECAST_DATA = 'autoscaling-plans:GetScalingPlanResourceForecastData',
	UPDATE_SCALING_PLAN = 'autoscaling-plans:UpdateScalingPlan',
}
export enum CODECATALYST {
	ACCEPT_CONNECTION = 'codecatalyst:AcceptConnection',
	ASSOCIATE_IAM_ROLE_TO_CONNECTION = 'codecatalyst:AssociateIamRoleToConnection',
	DELETE_CONNECTION = 'codecatalyst:DeleteConnection',
	DISASSOCIATE_IAM_ROLE_FROM_CONNECTION = 'codecatalyst:DisassociateIamRoleFromConnection',
	GET_BILLING_AUTHORIZATION = 'codecatalyst:GetBillingAuthorization',
	GET_CONNECTION = 'codecatalyst:GetConnection',
	GET_PENDING_CONNECTION = 'codecatalyst:GetPendingConnection',
	LIST_CONNECTIONS = 'codecatalyst:ListConnections',
	LIST_IAM_ROLES_FOR_CONNECTION = 'codecatalyst:ListIamRolesForConnection',
	PUT_BILLING_AUTHORIZATION = 'codecatalyst:PutBillingAuthorization',
	REJECT_CONNECTION = 'codecatalyst:RejectConnection',
}
export enum COST_AND_USAGE_REPORT {
	DELETE_REPORT_DEFINITION = 'cur:DeleteReportDefinition',
	DESCRIBE_REPORT_DEFINITIONS = 'cur:DescribeReportDefinitions',
	MODIFY_REPORT_DEFINITION = 'cur:ModifyReportDefinition',
	PUT_REPORT_DEFINITION = 'cur:PutReportDefinition',
}
export enum IDENTITY_STORE {
	CREATE_GROUP = 'identitystore:CreateGroup',
	CREATE_GROUP_MEMBERSHIP = 'identitystore:CreateGroupMembership',
	CREATE_USER = 'identitystore:CreateUser',
	DELETE_GROUP = 'identitystore:DeleteGroup',
	DELETE_GROUP_MEMBERSHIP = 'identitystore:DeleteGroupMembership',
	DELETE_USER = 'identitystore:DeleteUser',
	DESCRIBE_GROUP = 'identitystore:DescribeGroup',
	DESCRIBE_GROUP_MEMBERSHIP = 'identitystore:DescribeGroupMembership',
	DESCRIBE_USER = 'identitystore:DescribeUser',
	GET_GROUP_ID = 'identitystore:GetGroupId',
	GET_GROUP_MEMBERSHIP_ID = 'identitystore:GetGroupMembershipId',
	GET_USER_ID = 'identitystore:GetUserId',
	IS_MEMBER_IN_GROUPS = 'identitystore:IsMemberInGroups',
	LIST_GROUP_MEMBERSHIPS = 'identitystore:ListGroupMemberships',
	LIST_GROUP_MEMBERSHIPS_FOR_MEMBER = 'identitystore:ListGroupMembershipsForMember',
	LIST_GROUPS = 'identitystore:ListGroups',
	LIST_USERS = 'identitystore:ListUsers',
	UPDATE_GROUP = 'identitystore:UpdateGroup',
	UPDATE_USER = 'identitystore:UpdateUser',
}
export enum ELEMENTAL_SUPPORT_CASES {
	CHECK_CASE_PERMISSION = 'elemental-support-cases:CheckCasePermission',
	CREATE_CASE = 'elemental-support-cases:CreateCase',
	GET_CASE = 'elemental-support-cases:GetCase',
	GET_CASES = 'elemental-support-cases:GetCases',
	UPDATE_CASE = 'elemental-support-cases:UpdateCase',
}
export enum ROUTE_53_DOMAINS {
	ACCEPT_DOMAIN_TRANSFER_FROM_ANOTHER_AWS_ACCOUNT = 'route53domains:AcceptDomainTransferFromAnotherAwsAccount',
	ASSOCIATE_DELEGATION_SIGNER_TO_DOMAIN = 'route53domains:AssociateDelegationSignerToDomain',
	CANCEL_DOMAIN_TRANSFER_TO_ANOTHER_AWS_ACCOUNT = 'route53domains:CancelDomainTransferToAnotherAwsAccount',
	CHECK_DOMAIN_AVAILABILITY = 'route53domains:CheckDomainAvailability',
	CHECK_DOMAIN_TRANSFERABILITY = 'route53domains:CheckDomainTransferability',
	DELETE_DOMAIN = 'route53domains:DeleteDomain',
	DELETE_TAGS_FOR_DOMAIN = 'route53domains:DeleteTagsForDomain',
	DISABLE_DOMAIN_AUTO_RENEW = 'route53domains:DisableDomainAutoRenew',
	DISABLE_DOMAIN_TRANSFER_LOCK = 'route53domains:DisableDomainTransferLock',
	DISASSOCIATE_DELEGATION_SIGNER_FROM_DOMAIN = 'route53domains:DisassociateDelegationSignerFromDomain',
	ENABLE_DOMAIN_AUTO_RENEW = 'route53domains:EnableDomainAutoRenew',
	ENABLE_DOMAIN_TRANSFER_LOCK = 'route53domains:EnableDomainTransferLock',
	GET_CONTACT_REACHABILITY_STATUS = 'route53domains:GetContactReachabilityStatus',
	GET_DOMAIN_DETAIL = 'route53domains:GetDomainDetail',
	GET_DOMAIN_SUGGESTIONS = 'route53domains:GetDomainSuggestions',
	GET_OPERATION_DETAIL = 'route53domains:GetOperationDetail',
	LIST_DOMAINS = 'route53domains:ListDomains',
	LIST_OPERATIONS = 'route53domains:ListOperations',
	LIST_PRICES = 'route53domains:ListPrices',
	LIST_TAGS_FOR_DOMAIN = 'route53domains:ListTagsForDomain',
	PUSH_DOMAIN = 'route53domains:PushDomain',
	REGISTER_DOMAIN = 'route53domains:RegisterDomain',
	REJECT_DOMAIN_TRANSFER_FROM_ANOTHER_AWS_ACCOUNT = 'route53domains:RejectDomainTransferFromAnotherAwsAccount',
	RENEW_DOMAIN = 'route53domains:RenewDomain',
	RESEND_CONTACT_REACHABILITY_EMAIL = 'route53domains:ResendContactReachabilityEmail',
	RESEND_OPERATION_AUTHORIZATION = 'route53domains:ResendOperationAuthorization',
	RETRIEVE_DOMAIN_AUTH_CODE = 'route53domains:RetrieveDomainAuthCode',
	TRANSFER_DOMAIN = 'route53domains:TransferDomain',
	TRANSFER_DOMAIN_TO_ANOTHER_AWS_ACCOUNT = 'route53domains:TransferDomainToAnotherAwsAccount',
	UPDATE_DOMAIN_CONTACT = 'route53domains:UpdateDomainContact',
	UPDATE_DOMAIN_CONTACT_PRIVACY = 'route53domains:UpdateDomainContactPrivacy',
	UPDATE_DOMAIN_NAMESERVERS = 'route53domains:UpdateDomainNameservers',
	UPDATE_TAGS_FOR_DOMAIN = 'route53domains:UpdateTagsForDomain',
	VIEW_BILLING = 'route53domains:ViewBilling',
}
export enum WICKR {
	CREATE_ADMIN_SESSION = 'wickr:CreateAdminSession',
	LIST_NETWORKS = 'wickr:ListNetworks',
}
export enum OPSWORKS {
	ASSIGN_INSTANCE = 'opsworks:AssignInstance',
	ASSIGN_VOLUME = 'opsworks:AssignVolume',
	ASSOCIATE_ELASTIC_IP = 'opsworks:AssociateElasticIp',
	ATTACH_ELASTIC_LOAD_BALANCER = 'opsworks:AttachElasticLoadBalancer',
	CLONE_STACK = 'opsworks:CloneStack',
	CREATE_APP = 'opsworks:CreateApp',
	CREATE_DEPLOYMENT = 'opsworks:CreateDeployment',
	CREATE_INSTANCE = 'opsworks:CreateInstance',
	CREATE_LAYER = 'opsworks:CreateLayer',
	CREATE_STACK = 'opsworks:CreateStack',
	CREATE_USER_PROFILE = 'opsworks:CreateUserProfile',
	DELETE_APP = 'opsworks:DeleteApp',
	DELETE_INSTANCE = 'opsworks:DeleteInstance',
	DELETE_LAYER = 'opsworks:DeleteLayer',
	DELETE_STACK = 'opsworks:DeleteStack',
	DELETE_USER_PROFILE = 'opsworks:DeleteUserProfile',
	DEREGISTER_ECS_CLUSTER = 'opsworks:DeregisterEcsCluster',
	DEREGISTER_ELASTIC_IP = 'opsworks:DeregisterElasticIp',
	DEREGISTER_INSTANCE = 'opsworks:DeregisterInstance',
	DEREGISTER_RDS_DB_INSTANCE = 'opsworks:DeregisterRdsDbInstance',
	DEREGISTER_VOLUME = 'opsworks:DeregisterVolume',
	DESCRIBE_AGENT_VERSIONS = 'opsworks:DescribeAgentVersions',
	DESCRIBE_APPS = 'opsworks:DescribeApps',
	DESCRIBE_COMMANDS = 'opsworks:DescribeCommands',
	DESCRIBE_DEPLOYMENTS = 'opsworks:DescribeDeployments',
	DESCRIBE_ECS_CLUSTERS = 'opsworks:DescribeEcsClusters',
	DESCRIBE_ELASTIC_IPS = 'opsworks:DescribeElasticIps',
	DESCRIBE_ELASTIC_LOAD_BALANCERS = 'opsworks:DescribeElasticLoadBalancers',
	DESCRIBE_INSTANCES = 'opsworks:DescribeInstances',
	DESCRIBE_LAYERS = 'opsworks:DescribeLayers',
	DESCRIBE_LOAD_BASED_AUTO_SCALING = 'opsworks:DescribeLoadBasedAutoScaling',
	DESCRIBE_MY_USER_PROFILE = 'opsworks:DescribeMyUserProfile',
	DESCRIBE_OPERATING_SYSTEMS = 'opsworks:DescribeOperatingSystems',
	DESCRIBE_PERMISSIONS = 'opsworks:DescribePermissions',
	DESCRIBE_RAID_ARRAYS = 'opsworks:DescribeRaidArrays',
	DESCRIBE_RDS_DB_INSTANCES = 'opsworks:DescribeRdsDbInstances',
	DESCRIBE_SERVICE_ERRORS = 'opsworks:DescribeServiceErrors',
	DESCRIBE_STACK_PROVISIONING_PARAMETERS = 'opsworks:DescribeStackProvisioningParameters',
	DESCRIBE_STACK_SUMMARY = 'opsworks:DescribeStackSummary',
	DESCRIBE_STACKS = 'opsworks:DescribeStacks',
	DESCRIBE_TIME_BASED_AUTO_SCALING = 'opsworks:DescribeTimeBasedAutoScaling',
	DESCRIBE_USER_PROFILES = 'opsworks:DescribeUserProfiles',
	DESCRIBE_VOLUMES = 'opsworks:DescribeVolumes',
	DETACH_ELASTIC_LOAD_BALANCER = 'opsworks:DetachElasticLoadBalancer',
	DISASSOCIATE_ELASTIC_IP = 'opsworks:DisassociateElasticIp',
	GET_HOSTNAME_SUGGESTION = 'opsworks:GetHostnameSuggestion',
	GRANT_ACCESS = 'opsworks:GrantAccess',
	LIST_TAGS = 'opsworks:ListTags',
	REBOOT_INSTANCE = 'opsworks:RebootInstance',
	REGISTER_ECS_CLUSTER = 'opsworks:RegisterEcsCluster',
	REGISTER_ELASTIC_IP = 'opsworks:RegisterElasticIp',
	REGISTER_INSTANCE = 'opsworks:RegisterInstance',
	REGISTER_RDS_DB_INSTANCE = 'opsworks:RegisterRdsDbInstance',
	REGISTER_VOLUME = 'opsworks:RegisterVolume',
	SET_LOAD_BASED_AUTO_SCALING = 'opsworks:SetLoadBasedAutoScaling',
	SET_PERMISSION = 'opsworks:SetPermission',
	SET_TIME_BASED_AUTO_SCALING = 'opsworks:SetTimeBasedAutoScaling',
	START_INSTANCE = 'opsworks:StartInstance',
	START_STACK = 'opsworks:StartStack',
	STOP_INSTANCE = 'opsworks:StopInstance',
	STOP_STACK = 'opsworks:StopStack',
	TAG_RESOURCE = 'opsworks:TagResource',
	UNASSIGN_INSTANCE = 'opsworks:UnassignInstance',
	UNASSIGN_VOLUME = 'opsworks:UnassignVolume',
	UNTAG_RESOURCE = 'opsworks:UntagResource',
	UPDATE_APP = 'opsworks:UpdateApp',
	UPDATE_ELASTIC_IP = 'opsworks:UpdateElasticIp',
	UPDATE_INSTANCE = 'opsworks:UpdateInstance',
	UPDATE_LAYER = 'opsworks:UpdateLayer',
	UPDATE_MY_USER_PROFILE = 'opsworks:UpdateMyUserProfile',
	UPDATE_RDS_DB_INSTANCE = 'opsworks:UpdateRdsDbInstance',
	UPDATE_STACK = 'opsworks:UpdateStack',
	UPDATE_USER_PROFILE = 'opsworks:UpdateUserProfile',
	UPDATE_VOLUME = 'opsworks:UpdateVolume',
}
export enum FREERTOS {
	CREATE_SOFTWARE_CONFIGURATION = 'freertos:CreateSoftwareConfiguration',
	DELETE_SOFTWARE_CONFIGURATION = 'freertos:DeleteSoftwareConfiguration',
	DESCRIBE_HARDWARE_PLATFORM = 'freertos:DescribeHardwarePlatform',
	DESCRIBE_SOFTWARE_CONFIGURATION = 'freertos:DescribeSoftwareConfiguration',
	GET_SOFTWARE_URL = 'freertos:GetSoftwareURL',
	GET_SOFTWARE_URL_FOR_CONFIGURATION = 'freertos:GetSoftwareURLForConfiguration',
	LIST_FREE_RTOS_VERSIONS = 'freertos:ListFreeRTOSVersions',
	LIST_HARDWARE_PLATFORMS = 'freertos:ListHardwarePlatforms',
	LIST_HARDWARE_VENDORS = 'freertos:ListHardwareVendors',
	LIST_SOFTWARE_CONFIGURATIONS = 'freertos:ListSoftwareConfigurations',
	UPDATE_SOFTWARE_CONFIGURATION = 'freertos:UpdateSoftwareConfiguration',
}
export enum IDENTITY_STORE_AUTH {
	BATCH_DELETE_SESSION = 'identitystore-auth:BatchDeleteSession',
	BATCH_GET_SESSION = 'identitystore-auth:BatchGetSession',
	LIST_SESSIONS = 'identitystore-auth:ListSessions',
}
export enum CODEDEPLOY {
	ADD_TAGS_TO_ON_PREMISES_INSTANCES = 'codedeploy:AddTagsToOnPremisesInstances',
	BATCH_GET_APPLICATION_REVISIONS = 'codedeploy:BatchGetApplicationRevisions',
	BATCH_GET_APPLICATIONS = 'codedeploy:BatchGetApplications',
	BATCH_GET_DEPLOYMENT_GROUPS = 'codedeploy:BatchGetDeploymentGroups',
	BATCH_GET_DEPLOYMENT_INSTANCES = 'codedeploy:BatchGetDeploymentInstances',
	BATCH_GET_DEPLOYMENT_TARGETS = 'codedeploy:BatchGetDeploymentTargets',
	BATCH_GET_DEPLOYMENTS = 'codedeploy:BatchGetDeployments',
	BATCH_GET_ON_PREMISES_INSTANCES = 'codedeploy:BatchGetOnPremisesInstances',
	CONTINUE_DEPLOYMENT = 'codedeploy:ContinueDeployment',
	CREATE_APPLICATION = 'codedeploy:CreateApplication',
	CREATE_CLOUD_FORMATION_DEPLOYMENT = 'codedeploy:CreateCloudFormationDeployment',
	CREATE_DEPLOYMENT = 'codedeploy:CreateDeployment',
	CREATE_DEPLOYMENT_CONFIG = 'codedeploy:CreateDeploymentConfig',
	CREATE_DEPLOYMENT_GROUP = 'codedeploy:CreateDeploymentGroup',
	DELETE_APPLICATION = 'codedeploy:DeleteApplication',
	DELETE_DEPLOYMENT_CONFIG = 'codedeploy:DeleteDeploymentConfig',
	DELETE_DEPLOYMENT_GROUP = 'codedeploy:DeleteDeploymentGroup',
	DELETE_GIT_HUB_ACCOUNT_TOKEN = 'codedeploy:DeleteGitHubAccountToken',
	DELETE_RESOURCES_BY_EXTERNAL_ID = 'codedeploy:DeleteResourcesByExternalId',
	DEREGISTER_ON_PREMISES_INSTANCE = 'codedeploy:DeregisterOnPremisesInstance',
	GET_APPLICATION = 'codedeploy:GetApplication',
	GET_APPLICATION_REVISION = 'codedeploy:GetApplicationRevision',
	GET_DEPLOYMENT = 'codedeploy:GetDeployment',
	GET_DEPLOYMENT_CONFIG = 'codedeploy:GetDeploymentConfig',
	GET_DEPLOYMENT_GROUP = 'codedeploy:GetDeploymentGroup',
	GET_DEPLOYMENT_INSTANCE = 'codedeploy:GetDeploymentInstance',
	GET_DEPLOYMENT_TARGET = 'codedeploy:GetDeploymentTarget',
	GET_ON_PREMISES_INSTANCE = 'codedeploy:GetOnPremisesInstance',
	LIST_APPLICATION_REVISIONS = 'codedeploy:ListApplicationRevisions',
	LIST_APPLICATIONS = 'codedeploy:ListApplications',
	LIST_DEPLOYMENT_CONFIGS = 'codedeploy:ListDeploymentConfigs',
	LIST_DEPLOYMENT_GROUPS = 'codedeploy:ListDeploymentGroups',
	LIST_DEPLOYMENT_INSTANCES = 'codedeploy:ListDeploymentInstances',
	LIST_DEPLOYMENT_TARGETS = 'codedeploy:ListDeploymentTargets',
	LIST_DEPLOYMENTS = 'codedeploy:ListDeployments',
	LIST_GIT_HUB_ACCOUNT_TOKEN_NAMES = 'codedeploy:ListGitHubAccountTokenNames',
	LIST_ON_PREMISES_INSTANCES = 'codedeploy:ListOnPremisesInstances',
	LIST_TAGS_FOR_RESOURCE = 'codedeploy:ListTagsForResource',
	PUT_LIFECYCLE_EVENT_HOOK_EXECUTION_STATUS = 'codedeploy:PutLifecycleEventHookExecutionStatus',
	REGISTER_APPLICATION_REVISION = 'codedeploy:RegisterApplicationRevision',
	REGISTER_ON_PREMISES_INSTANCE = 'codedeploy:RegisterOnPremisesInstance',
	REMOVE_TAGS_FROM_ON_PREMISES_INSTANCES = 'codedeploy:RemoveTagsFromOnPremisesInstances',
	SKIP_WAIT_TIME_FOR_INSTANCE_TERMINATION = 'codedeploy:SkipWaitTimeForInstanceTermination',
	STOP_DEPLOYMENT = 'codedeploy:StopDeployment',
	TAG_RESOURCE = 'codedeploy:TagResource',
	UNTAG_RESOURCE = 'codedeploy:UntagResource',
	UPDATE_APPLICATION = 'codedeploy:UpdateApplication',
	UPDATE_DEPLOYMENT_GROUP = 'codedeploy:UpdateDeploymentGroup',
}
export enum IDENTITY_AND_ACCESS_MANAGEMENT {
	ADD_CLIENT_ID_TO_OPEN_ID_CONNECT_PROVIDER = 'iam:AddClientIDToOpenIDConnectProvider',
	ADD_ROLE_TO_INSTANCE_PROFILE = 'iam:AddRoleToInstanceProfile',
	ADD_USER_TO_GROUP = 'iam:AddUserToGroup',
	ATTACH_GROUP_POLICY = 'iam:AttachGroupPolicy',
	ATTACH_ROLE_POLICY = 'iam:AttachRolePolicy',
	ATTACH_USER_POLICY = 'iam:AttachUserPolicy',
	CHANGE_PASSWORD = 'iam:ChangePassword',
	CREATE_ACCESS_KEY = 'iam:CreateAccessKey',
	CREATE_ACCOUNT_ALIAS = 'iam:CreateAccountAlias',
	CREATE_GROUP = 'iam:CreateGroup',
	CREATE_INSTANCE_PROFILE = 'iam:CreateInstanceProfile',
	CREATE_LOGIN_PROFILE = 'iam:CreateLoginProfile',
	CREATE_OPEN_ID_CONNECT_PROVIDER = 'iam:CreateOpenIDConnectProvider',
	CREATE_POLICY = 'iam:CreatePolicy',
	CREATE_POLICY_VERSION = 'iam:CreatePolicyVersion',
	CREATE_ROLE = 'iam:CreateRole',
	CREATE_SAML_PROVIDER = 'iam:CreateSAMLProvider',
	CREATE_SERVICE_LINKED_ROLE = 'iam:CreateServiceLinkedRole',
	CREATE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:CreateServiceSpecificCredential',
	CREATE_USER = 'iam:CreateUser',
	CREATE_VIRTUAL_MFA_DEVICE = 'iam:CreateVirtualMFADevice',
	DEACTIVATE_MFA_DEVICE = 'iam:DeactivateMFADevice',
	DELETE_ACCESS_KEY = 'iam:DeleteAccessKey',
	DELETE_ACCOUNT_ALIAS = 'iam:DeleteAccountAlias',
	DELETE_ACCOUNT_PASSWORD_POLICY = 'iam:DeleteAccountPasswordPolicy',
	DELETE_GROUP = 'iam:DeleteGroup',
	DELETE_GROUP_POLICY = 'iam:DeleteGroupPolicy',
	DELETE_INSTANCE_PROFILE = 'iam:DeleteInstanceProfile',
	DELETE_LOGIN_PROFILE = 'iam:DeleteLoginProfile',
	DELETE_OPEN_ID_CONNECT_PROVIDER = 'iam:DeleteOpenIDConnectProvider',
	DELETE_POLICY = 'iam:DeletePolicy',
	DELETE_POLICY_VERSION = 'iam:DeletePolicyVersion',
	DELETE_ROLE = 'iam:DeleteRole',
	DELETE_ROLE_PERMISSIONS_BOUNDARY = 'iam:DeleteRolePermissionsBoundary',
	DELETE_ROLE_POLICY = 'iam:DeleteRolePolicy',
	DELETE_SAML_PROVIDER = 'iam:DeleteSAMLProvider',
	DELETE_SSH_PUBLIC_KEY = 'iam:DeleteSSHPublicKey',
	DELETE_SERVER_CERTIFICATE = 'iam:DeleteServerCertificate',
	DELETE_SERVICE_LINKED_ROLE = 'iam:DeleteServiceLinkedRole',
	DELETE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:DeleteServiceSpecificCredential',
	DELETE_SIGNING_CERTIFICATE = 'iam:DeleteSigningCertificate',
	DELETE_USER = 'iam:DeleteUser',
	DELETE_USER_PERMISSIONS_BOUNDARY = 'iam:DeleteUserPermissionsBoundary',
	DELETE_USER_POLICY = 'iam:DeleteUserPolicy',
	DELETE_VIRTUAL_MFA_DEVICE = 'iam:DeleteVirtualMFADevice',
	DETACH_GROUP_POLICY = 'iam:DetachGroupPolicy',
	DETACH_ROLE_POLICY = 'iam:DetachRolePolicy',
	DETACH_USER_POLICY = 'iam:DetachUserPolicy',
	ENABLE_MFA_DEVICE = 'iam:EnableMFADevice',
	GENERATE_CREDENTIAL_REPORT = 'iam:GenerateCredentialReport',
	GENERATE_ORGANIZATIONS_ACCESS_REPORT = 'iam:GenerateOrganizationsAccessReport',
	GENERATE_SERVICE_LAST_ACCESSED_DETAILS = 'iam:GenerateServiceLastAccessedDetails',
	GET_ACCESS_KEY_LAST_USED = 'iam:GetAccessKeyLastUsed',
	GET_ACCOUNT_AUTHORIZATION_DETAILS = 'iam:GetAccountAuthorizationDetails',
	GET_ACCOUNT_PASSWORD_POLICY = 'iam:GetAccountPasswordPolicy',
	GET_ACCOUNT_SUMMARY = 'iam:GetAccountSummary',
	GET_CONTEXT_KEYS_FOR_CUSTOM_POLICY = 'iam:GetContextKeysForCustomPolicy',
	GET_CONTEXT_KEYS_FOR_PRINCIPAL_POLICY = 'iam:GetContextKeysForPrincipalPolicy',
	GET_CREDENTIAL_REPORT = 'iam:GetCredentialReport',
	GET_GROUP = 'iam:GetGroup',
	GET_GROUP_POLICY = 'iam:GetGroupPolicy',
	GET_INSTANCE_PROFILE = 'iam:GetInstanceProfile',
	GET_LOGIN_PROFILE = 'iam:GetLoginProfile',
	GET_OPEN_ID_CONNECT_PROVIDER = 'iam:GetOpenIDConnectProvider',
	GET_ORGANIZATIONS_ACCESS_REPORT = 'iam:GetOrganizationsAccessReport',
	GET_POLICY = 'iam:GetPolicy',
	GET_POLICY_VERSION = 'iam:GetPolicyVersion',
	GET_ROLE = 'iam:GetRole',
	GET_ROLE_POLICY = 'iam:GetRolePolicy',
	GET_SAML_PROVIDER = 'iam:GetSAMLProvider',
	GET_SSH_PUBLIC_KEY = 'iam:GetSSHPublicKey',
	GET_SERVER_CERTIFICATE = 'iam:GetServerCertificate',
	GET_SERVICE_LAST_ACCESSED_DETAILS = 'iam:GetServiceLastAccessedDetails',
	GET_SERVICE_LAST_ACCESSED_DETAILS_WITH_ENTITIES = 'iam:GetServiceLastAccessedDetailsWithEntities',
	GET_SERVICE_LINKED_ROLE_DELETION_STATUS = 'iam:GetServiceLinkedRoleDeletionStatus',
	GET_USER = 'iam:GetUser',
	GET_USER_POLICY = 'iam:GetUserPolicy',
	LIST_ACCESS_KEYS = 'iam:ListAccessKeys',
	LIST_ACCOUNT_ALIASES = 'iam:ListAccountAliases',
	LIST_ATTACHED_GROUP_POLICIES = 'iam:ListAttachedGroupPolicies',
	LIST_ATTACHED_ROLE_POLICIES = 'iam:ListAttachedRolePolicies',
	LIST_ATTACHED_USER_POLICIES = 'iam:ListAttachedUserPolicies',
	LIST_ENTITIES_FOR_POLICY = 'iam:ListEntitiesForPolicy',
	LIST_GROUP_POLICIES = 'iam:ListGroupPolicies',
	LIST_GROUPS = 'iam:ListGroups',
	LIST_GROUPS_FOR_USER = 'iam:ListGroupsForUser',
	LIST_INSTANCE_PROFILE_TAGS = 'iam:ListInstanceProfileTags',
	LIST_INSTANCE_PROFILES = 'iam:ListInstanceProfiles',
	LIST_INSTANCE_PROFILES_FOR_ROLE = 'iam:ListInstanceProfilesForRole',
	LIST_MFA_DEVICE_TAGS = 'iam:ListMFADeviceTags',
	LIST_MFA_DEVICES = 'iam:ListMFADevices',
	LIST_OPEN_ID_CONNECT_PROVIDER_TAGS = 'iam:ListOpenIDConnectProviderTags',
	LIST_OPEN_ID_CONNECT_PROVIDERS = 'iam:ListOpenIDConnectProviders',
	LIST_POLICIES = 'iam:ListPolicies',
	LIST_POLICIES_GRANTING_SERVICE_ACCESS = 'iam:ListPoliciesGrantingServiceAccess',
	LIST_POLICY_TAGS = 'iam:ListPolicyTags',
	LIST_POLICY_VERSIONS = 'iam:ListPolicyVersions',
	LIST_ROLE_POLICIES = 'iam:ListRolePolicies',
	LIST_ROLE_TAGS = 'iam:ListRoleTags',
	LIST_ROLES = 'iam:ListRoles',
	LIST_SAML_PROVIDER_TAGS = 'iam:ListSAMLProviderTags',
	LIST_SAML_PROVIDERS = 'iam:ListSAMLProviders',
	LIST_SSH_PUBLIC_KEYS = 'iam:ListSSHPublicKeys',
	LIST_SERVER_CERTIFICATE_TAGS = 'iam:ListServerCertificateTags',
	LIST_SERVER_CERTIFICATES = 'iam:ListServerCertificates',
	LIST_SERVICE_SPECIFIC_CREDENTIALS = 'iam:ListServiceSpecificCredentials',
	LIST_SIGNING_CERTIFICATES = 'iam:ListSigningCertificates',
	LIST_USER_POLICIES = 'iam:ListUserPolicies',
	LIST_USER_TAGS = 'iam:ListUserTags',
	LIST_USERS = 'iam:ListUsers',
	LIST_VIRTUAL_MFA_DEVICES = 'iam:ListVirtualMFADevices',
	PASS_ROLE = 'iam:PassRole',
	PUT_GROUP_POLICY = 'iam:PutGroupPolicy',
	PUT_ROLE_PERMISSIONS_BOUNDARY = 'iam:PutRolePermissionsBoundary',
	PUT_ROLE_POLICY = 'iam:PutRolePolicy',
	PUT_USER_PERMISSIONS_BOUNDARY = 'iam:PutUserPermissionsBoundary',
	PUT_USER_POLICY = 'iam:PutUserPolicy',
	REMOVE_CLIENT_ID_FROM_OPEN_ID_CONNECT_PROVIDER = 'iam:RemoveClientIDFromOpenIDConnectProvider',
	REMOVE_ROLE_FROM_INSTANCE_PROFILE = 'iam:RemoveRoleFromInstanceProfile',
	REMOVE_USER_FROM_GROUP = 'iam:RemoveUserFromGroup',
	RESET_SERVICE_SPECIFIC_CREDENTIAL = 'iam:ResetServiceSpecificCredential',
	RESYNC_MFA_DEVICE = 'iam:ResyncMFADevice',
	SET_DEFAULT_POLICY_VERSION = 'iam:SetDefaultPolicyVersion',
	SET_SECURITY_TOKEN_SERVICE_PREFERENCES = 'iam:SetSecurityTokenServicePreferences',
	SIMULATE_CUSTOM_POLICY = 'iam:SimulateCustomPolicy',
	SIMULATE_PRINCIPAL_POLICY = 'iam:SimulatePrincipalPolicy',
	TAG_INSTANCE_PROFILE = 'iam:TagInstanceProfile',
	TAG_MFA_DEVICE = 'iam:TagMFADevice',
	TAG_OPEN_ID_CONNECT_PROVIDER = 'iam:TagOpenIDConnectProvider',
	TAG_POLICY = 'iam:TagPolicy',
	TAG_ROLE = 'iam:TagRole',
	TAG_SAML_PROVIDER = 'iam:TagSAMLProvider',
	TAG_SERVER_CERTIFICATE = 'iam:TagServerCertificate',
	TAG_USER = 'iam:TagUser',
	UNTAG_INSTANCE_PROFILE = 'iam:UntagInstanceProfile',
	UNTAG_MFA_DEVICE = 'iam:UntagMFADevice',
	UNTAG_OPEN_ID_CONNECT_PROVIDER = 'iam:UntagOpenIDConnectProvider',
	UNTAG_POLICY = 'iam:UntagPolicy',
	UNTAG_ROLE = 'iam:UntagRole',
	UNTAG_SAML_PROVIDER = 'iam:UntagSAMLProvider',
	UNTAG_SERVER_CERTIFICATE = 'iam:UntagServerCertificate',
	UNTAG_USER = 'iam:UntagUser',
	UPDATE_ACCESS_KEY = 'iam:UpdateAccessKey',
	UPDATE_ACCOUNT_PASSWORD_POLICY = 'iam:UpdateAccountPasswordPolicy',
	UPDATE_ASSUME_ROLE_POLICY = 'iam:UpdateAssumeRolePolicy',
	UPDATE_GROUP = 'iam:UpdateGroup',
	UPDATE_LOGIN_PROFILE = 'iam:UpdateLoginProfile',
	UPDATE_OPEN_ID_CONNECT_PROVIDER_THUMBPRINT = 'iam:UpdateOpenIDConnectProviderThumbprint',
	UPDATE_ROLE = 'iam:UpdateRole',
	UPDATE_ROLE_DESCRIPTION = 'iam:UpdateRoleDescription',
	UPDATE_SAML_PROVIDER = 'iam:UpdateSAMLProvider',
	UPDATE_SSH_PUBLIC_KEY = 'iam:UpdateSSHPublicKey',
	UPDATE_SERVER_CERTIFICATE = 'iam:UpdateServerCertificate',
	UPDATE_SERVICE_SPECIFIC_CREDENTIAL = 'iam:UpdateServiceSpecificCredential',
	UPDATE_SIGNING_CERTIFICATE = 'iam:UpdateSigningCertificate',
	UPDATE_USER = 'iam:UpdateUser',
	UPLOAD_SSH_PUBLIC_KEY = 'iam:UploadSSHPublicKey',
	UPLOAD_SERVER_CERTIFICATE = 'iam:UploadServerCertificate',
	UPLOAD_SIGNING_CERTIFICATE = 'iam:UploadSigningCertificate',
}
export enum ROUTE_53_RESOLVER {
	ASSOCIATE_FIREWALL_RULE_GROUP = 'route53resolver:AssociateFirewallRuleGroup',
	ASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'route53resolver:AssociateResolverEndpointIpAddress',
	ASSOCIATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:AssociateResolverQueryLogConfig',
	ASSOCIATE_RESOLVER_RULE = 'route53resolver:AssociateResolverRule',
	CREATE_FIREWALL_DOMAIN_LIST = 'route53resolver:CreateFirewallDomainList',
	CREATE_FIREWALL_RULE = 'route53resolver:CreateFirewallRule',
	CREATE_FIREWALL_RULE_GROUP = 'route53resolver:CreateFirewallRuleGroup',
	CREATE_RESOLVER_ENDPOINT = 'route53resolver:CreateResolverEndpoint',
	CREATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:CreateResolverQueryLogConfig',
	CREATE_RESOLVER_RULE = 'route53resolver:CreateResolverRule',
	DELETE_FIREWALL_DOMAIN_LIST = 'route53resolver:DeleteFirewallDomainList',
	DELETE_FIREWALL_RULE = 'route53resolver:DeleteFirewallRule',
	DELETE_FIREWALL_RULE_GROUP = 'route53resolver:DeleteFirewallRuleGroup',
	DELETE_RESOLVER_ENDPOINT = 'route53resolver:DeleteResolverEndpoint',
	DELETE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:DeleteResolverQueryLogConfig',
	DELETE_RESOLVER_RULE = 'route53resolver:DeleteResolverRule',
	DISASSOCIATE_FIREWALL_RULE_GROUP = 'route53resolver:DisassociateFirewallRuleGroup',
	DISASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'route53resolver:DisassociateResolverEndpointIpAddress',
	DISASSOCIATE_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:DisassociateResolverQueryLogConfig',
	DISASSOCIATE_RESOLVER_RULE = 'route53resolver:DisassociateResolverRule',
	GET_FIREWALL_CONFIG = 'route53resolver:GetFirewallConfig',
	GET_FIREWALL_DOMAIN_LIST = 'route53resolver:GetFirewallDomainList',
	GET_FIREWALL_RULE_GROUP = 'route53resolver:GetFirewallRuleGroup',
	GET_FIREWALL_RULE_GROUP_ASSOCIATION = 'route53resolver:GetFirewallRuleGroupAssociation',
	GET_FIREWALL_RULE_GROUP_POLICY = 'route53resolver:GetFirewallRuleGroupPolicy',
	GET_RESOLVER_CONFIG = 'route53resolver:GetResolverConfig',
	GET_RESOLVER_DNSSEC_CONFIG = 'route53resolver:GetResolverDnssecConfig',
	GET_RESOLVER_ENDPOINT = 'route53resolver:GetResolverEndpoint',
	GET_RESOLVER_QUERY_LOG_CONFIG = 'route53resolver:GetResolverQueryLogConfig',
	GET_RESOLVER_QUERY_LOG_CONFIG_ASSOCIATION = 'route53resolver:GetResolverQueryLogConfigAssociation',
	GET_RESOLVER_QUERY_LOG_CONFIG_POLICY = 'route53resolver:GetResolverQueryLogConfigPolicy',
	GET_RESOLVER_RULE = 'route53resolver:GetResolverRule',
	GET_RESOLVER_RULE_ASSOCIATION = 'route53resolver:GetResolverRuleAssociation',
	GET_RESOLVER_RULE_POLICY = 'route53resolver:GetResolverRulePolicy',
	IMPORT_FIREWALL_DOMAINS = 'route53resolver:ImportFirewallDomains',
	LIST_FIREWALL_CONFIGS = 'route53resolver:ListFirewallConfigs',
	LIST_FIREWALL_DOMAIN_LISTS = 'route53resolver:ListFirewallDomainLists',
	LIST_FIREWALL_DOMAINS = 'route53resolver:ListFirewallDomains',
	LIST_FIREWALL_RULE_GROUP_ASSOCIATIONS = 'route53resolver:ListFirewallRuleGroupAssociations',
	LIST_FIREWALL_RULE_GROUPS = 'route53resolver:ListFirewallRuleGroups',
	LIST_FIREWALL_RULES = 'route53resolver:ListFirewallRules',
	LIST_RESOLVER_CONFIGS = 'route53resolver:ListResolverConfigs',
	LIST_RESOLVER_DNSSEC_CONFIGS = 'route53resolver:ListResolverDnssecConfigs',
	LIST_RESOLVER_ENDPOINT_IP_ADDRESSES = 'route53resolver:ListResolverEndpointIpAddresses',
	LIST_RESOLVER_ENDPOINTS = 'route53resolver:ListResolverEndpoints',
	LIST_RESOLVER_QUERY_LOG_CONFIG_ASSOCIATIONS = 'route53resolver:ListResolverQueryLogConfigAssociations',
	LIST_RESOLVER_QUERY_LOG_CONFIGS = 'route53resolver:ListResolverQueryLogConfigs',
	LIST_RESOLVER_RULE_ASSOCIATIONS = 'route53resolver:ListResolverRuleAssociations',
	LIST_RESOLVER_RULES = 'route53resolver:ListResolverRules',
	LIST_TAGS_FOR_RESOURCE = 'route53resolver:ListTagsForResource',
	PUT_FIREWALL_RULE_GROUP_POLICY = 'route53resolver:PutFirewallRuleGroupPolicy',
	PUT_RESOLVER_QUERY_LOG_CONFIG_POLICY = 'route53resolver:PutResolverQueryLogConfigPolicy',
	PUT_RESOLVER_RULE_POLICY = 'route53resolver:PutResolverRulePolicy',
	TAG_RESOURCE = 'route53resolver:TagResource',
	UNTAG_RESOURCE = 'route53resolver:UntagResource',
	UPDATE_FIREWALL_CONFIG = 'route53resolver:UpdateFirewallConfig',
	UPDATE_FIREWALL_DOMAINS = 'route53resolver:UpdateFirewallDomains',
	UPDATE_FIREWALL_RULE = 'route53resolver:UpdateFirewallRule',
	UPDATE_FIREWALL_RULE_GROUP_ASSOCIATION = 'route53resolver:UpdateFirewallRuleGroupAssociation',
	UPDATE_RESOLVER_CONFIG = 'route53resolver:UpdateResolverConfig',
	UPDATE_RESOLVER_DNSSEC_CONFIG = 'route53resolver:UpdateResolverDnssecConfig',
	UPDATE_RESOLVER_ENDPOINT = 'route53resolver:UpdateResolverEndpoint',
	UPDATE_RESOLVER_RULE = 'route53resolver:UpdateResolverRule',
}
export enum WORKMAIL {
	ADD_MEMBERS_TO_GROUP = 'workmail:AddMembersToGroup',
	ASSOCIATE_DELEGATE_TO_RESOURCE = 'workmail:AssociateDelegateToResource',
	ASSOCIATE_MEMBER_TO_GROUP = 'workmail:AssociateMemberToGroup',
	ASSUME_IMPERSONATION_ROLE = 'workmail:AssumeImpersonationRole',
	CANCEL_MAILBOX_EXPORT_JOB = 'workmail:CancelMailboxExportJob',
	CREATE_ALIAS = 'workmail:CreateAlias',
	CREATE_AVAILABILITY_CONFIGURATION = 'workmail:CreateAvailabilityConfiguration',
	CREATE_GROUP = 'workmail:CreateGroup',
	CREATE_IMPERSONATION_ROLE = 'workmail:CreateImpersonationRole',
	CREATE_INBOUND_MAIL_FLOW_RULE = 'workmail:CreateInboundMailFlowRule',
	CREATE_MAIL_DOMAIN = 'workmail:CreateMailDomain',
	CREATE_MAIL_USER = 'workmail:CreateMailUser',
	CREATE_MOBILE_DEVICE_ACCESS_RULE = 'workmail:CreateMobileDeviceAccessRule',
	CREATE_ORGANIZATION = 'workmail:CreateOrganization',
	CREATE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:CreateOutboundMailFlowRule',
	CREATE_RESOURCE = 'workmail:CreateResource',
	CREATE_SMTP_GATEWAY = 'workmail:CreateSmtpGateway',
	CREATE_USER = 'workmail:CreateUser',
	DELETE_ACCESS_CONTROL_RULE = 'workmail:DeleteAccessControlRule',
	DELETE_ALIAS = 'workmail:DeleteAlias',
	DELETE_AVAILABILITY_CONFIGURATION = 'workmail:DeleteAvailabilityConfiguration',
	DELETE_EMAIL_MONITORING_CONFIGURATION = 'workmail:DeleteEmailMonitoringConfiguration',
	DELETE_GROUP = 'workmail:DeleteGroup',
	DELETE_IMPERSONATION_ROLE = 'workmail:DeleteImpersonationRole',
	DELETE_INBOUND_MAIL_FLOW_RULE = 'workmail:DeleteInboundMailFlowRule',
	DELETE_MAIL_DOMAIN = 'workmail:DeleteMailDomain',
	DELETE_MAILBOX_PERMISSIONS = 'workmail:DeleteMailboxPermissions',
	DELETE_MOBILE_DEVICE = 'workmail:DeleteMobileDevice',
	DELETE_MOBILE_DEVICE_ACCESS_OVERRIDE = 'workmail:DeleteMobileDeviceAccessOverride',
	DELETE_MOBILE_DEVICE_ACCESS_RULE = 'workmail:DeleteMobileDeviceAccessRule',
	DELETE_ORGANIZATION = 'workmail:DeleteOrganization',
	DELETE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:DeleteOutboundMailFlowRule',
	DELETE_RESOURCE = 'workmail:DeleteResource',
	DELETE_RETENTION_POLICY = 'workmail:DeleteRetentionPolicy',
	DELETE_SMTP_GATEWAY = 'workmail:DeleteSmtpGateway',
	DELETE_USER = 'workmail:DeleteUser',
	DEREGISTER_FROM_WORK_MAIL = 'workmail:DeregisterFromWorkMail',
	DEREGISTER_MAIL_DOMAIN = 'workmail:DeregisterMailDomain',
	DESCRIBE_DIRECTORIES = 'workmail:DescribeDirectories',
	DESCRIBE_EMAIL_MONITORING_CONFIGURATION = 'workmail:DescribeEmailMonitoringConfiguration',
	DESCRIBE_GROUP = 'workmail:DescribeGroup',
	DESCRIBE_INBOUND_DMARC_SETTINGS = 'workmail:DescribeInboundDmarcSettings',
	DESCRIBE_INBOUND_MAIL_FLOW_RULE = 'workmail:DescribeInboundMailFlowRule',
	DESCRIBE_KMS_KEYS = 'workmail:DescribeKmsKeys',
	DESCRIBE_MAIL_DOMAINS = 'workmail:DescribeMailDomains',
	DESCRIBE_MAIL_GROUPS = 'workmail:DescribeMailGroups',
	DESCRIBE_MAIL_USERS = 'workmail:DescribeMailUsers',
	DESCRIBE_MAILBOX_EXPORT_JOB = 'workmail:DescribeMailboxExportJob',
	DESCRIBE_ORGANIZATION = 'workmail:DescribeOrganization',
	DESCRIBE_ORGANIZATIONS = 'workmail:DescribeOrganizations',
	DESCRIBE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:DescribeOutboundMailFlowRule',
	DESCRIBE_RESOURCE = 'workmail:DescribeResource',
	DESCRIBE_SMTP_GATEWAY = 'workmail:DescribeSmtpGateway',
	DESCRIBE_USER = 'workmail:DescribeUser',
	DISABLE_MAIL_GROUPS = 'workmail:DisableMailGroups',
	DISABLE_MAIL_USERS = 'workmail:DisableMailUsers',
	DISASSOCIATE_DELEGATE_FROM_RESOURCE = 'workmail:DisassociateDelegateFromResource',
	DISASSOCIATE_MEMBER_FROM_GROUP = 'workmail:DisassociateMemberFromGroup',
	ENABLE_MAIL_DOMAIN = 'workmail:EnableMailDomain',
	ENABLE_MAIL_GROUPS = 'workmail:EnableMailGroups',
	ENABLE_MAIL_USERS = 'workmail:EnableMailUsers',
	GET_ACCESS_CONTROL_EFFECT = 'workmail:GetAccessControlEffect',
	GET_DEFAULT_RETENTION_POLICY = 'workmail:GetDefaultRetentionPolicy',
	GET_IMPERSONATION_ROLE = 'workmail:GetImpersonationRole',
	GET_IMPERSONATION_ROLE_EFFECT = 'workmail:GetImpersonationRoleEffect',
	GET_JOURNALING_RULES = 'workmail:GetJournalingRules',
	GET_MAIL_DOMAIN = 'workmail:GetMailDomain',
	GET_MAIL_DOMAIN_DETAILS = 'workmail:GetMailDomainDetails',
	GET_MAIL_GROUP_DETAILS = 'workmail:GetMailGroupDetails',
	GET_MAIL_USER_DETAILS = 'workmail:GetMailUserDetails',
	GET_MAILBOX_DETAILS = 'workmail:GetMailboxDetails',
	GET_MOBILE_DEVICE_ACCESS_EFFECT = 'workmail:GetMobileDeviceAccessEffect',
	GET_MOBILE_DEVICE_ACCESS_OVERRIDE = 'workmail:GetMobileDeviceAccessOverride',
	GET_MOBILE_DEVICE_DETAILS = 'workmail:GetMobileDeviceDetails',
	GET_MOBILE_DEVICES_FOR_USER = 'workmail:GetMobileDevicesForUser',
	GET_MOBILE_POLICY_DETAILS = 'workmail:GetMobilePolicyDetails',
	LIST_ACCESS_CONTROL_RULES = 'workmail:ListAccessControlRules',
	LIST_ALIASES = 'workmail:ListAliases',
	LIST_AVAILABILITY_CONFIGURATIONS = 'workmail:ListAvailabilityConfigurations',
	LIST_GROUP_MEMBERS = 'workmail:ListGroupMembers',
	LIST_GROUPS = 'workmail:ListGroups',
	LIST_IMPERSONATION_ROLES = 'workmail:ListImpersonationRoles',
	LIST_INBOUND_MAIL_FLOW_RULES = 'workmail:ListInboundMailFlowRules',
	LIST_MAIL_DOMAINS = 'workmail:ListMailDomains',
	LIST_MAILBOX_EXPORT_JOBS = 'workmail:ListMailboxExportJobs',
	LIST_MAILBOX_PERMISSIONS = 'workmail:ListMailboxPermissions',
	LIST_MEMBERS_IN_MAIL_GROUP = 'workmail:ListMembersInMailGroup',
	LIST_MOBILE_DEVICE_ACCESS_OVERRIDES = 'workmail:ListMobileDeviceAccessOverrides',
	LIST_MOBILE_DEVICE_ACCESS_RULES = 'workmail:ListMobileDeviceAccessRules',
	LIST_ORGANIZATIONS = 'workmail:ListOrganizations',
	LIST_OUTBOUND_MAIL_FLOW_RULES = 'workmail:ListOutboundMailFlowRules',
	LIST_RESOURCE_DELEGATES = 'workmail:ListResourceDelegates',
	LIST_RESOURCES = 'workmail:ListResources',
	LIST_SMTP_GATEWAYS = 'workmail:ListSmtpGateways',
	LIST_TAGS_FOR_RESOURCE = 'workmail:ListTagsForResource',
	LIST_USERS = 'workmail:ListUsers',
	PUT_ACCESS_CONTROL_RULE = 'workmail:PutAccessControlRule',
	PUT_EMAIL_MONITORING_CONFIGURATION = 'workmail:PutEmailMonitoringConfiguration',
	PUT_INBOUND_DMARC_SETTINGS = 'workmail:PutInboundDmarcSettings',
	PUT_MAILBOX_PERMISSIONS = 'workmail:PutMailboxPermissions',
	PUT_MOBILE_DEVICE_ACCESS_OVERRIDE = 'workmail:PutMobileDeviceAccessOverride',
	PUT_RETENTION_POLICY = 'workmail:PutRetentionPolicy',
	REGISTER_MAIL_DOMAIN = 'workmail:RegisterMailDomain',
	REGISTER_TO_WORK_MAIL = 'workmail:RegisterToWorkMail',
	REMOVE_MEMBERS_FROM_GROUP = 'workmail:RemoveMembersFromGroup',
	RESET_PASSWORD = 'workmail:ResetPassword',
	RESET_USER_PASSWORD = 'workmail:ResetUserPassword',
	SEARCH_MEMBERS = 'workmail:SearchMembers',
	SET_ADMIN = 'workmail:SetAdmin',
	SET_DEFAULT_MAIL_DOMAIN = 'workmail:SetDefaultMailDomain',
	SET_JOURNALING_RULES = 'workmail:SetJournalingRules',
	SET_MAIL_GROUP_DETAILS = 'workmail:SetMailGroupDetails',
	SET_MAIL_USER_DETAILS = 'workmail:SetMailUserDetails',
	SET_MOBILE_POLICY_DETAILS = 'workmail:SetMobilePolicyDetails',
	START_MAILBOX_EXPORT_JOB = 'workmail:StartMailboxExportJob',
	TAG_RESOURCE = 'workmail:TagResource',
	TEST_AVAILABILITY_CONFIGURATION = 'workmail:TestAvailabilityConfiguration',
	TEST_INBOUND_MAIL_FLOW_RULES = 'workmail:TestInboundMailFlowRules',
	TEST_OUTBOUND_MAIL_FLOW_RULES = 'workmail:TestOutboundMailFlowRules',
	UNTAG_RESOURCE = 'workmail:UntagResource',
	UPDATE_AVAILABILITY_CONFIGURATION = 'workmail:UpdateAvailabilityConfiguration',
	UPDATE_DEFAULT_MAIL_DOMAIN = 'workmail:UpdateDefaultMailDomain',
	UPDATE_IMPERSONATION_ROLE = 'workmail:UpdateImpersonationRole',
	UPDATE_INBOUND_MAIL_FLOW_RULE = 'workmail:UpdateInboundMailFlowRule',
	UPDATE_MAILBOX_QUOTA = 'workmail:UpdateMailboxQuota',
	UPDATE_MOBILE_DEVICE_ACCESS_RULE = 'workmail:UpdateMobileDeviceAccessRule',
	UPDATE_OUTBOUND_MAIL_FLOW_RULE = 'workmail:UpdateOutboundMailFlowRule',
	UPDATE_PRIMARY_EMAIL_ADDRESS = 'workmail:UpdatePrimaryEmailAddress',
	UPDATE_RESOURCE = 'workmail:UpdateResource',
	UPDATE_SMTP_GATEWAY = 'workmail:UpdateSmtpGateway',
	WIPE_MOBILE_DEVICE = 'workmail:WipeMobileDevice',
}
export enum ROUTE_53_RECOVERY_READINESS {
	CREATE_CELL = 'route53-recovery-readiness:CreateCell',
	CREATE_CROSS_ACCOUNT_AUTHORIZATION = 'route53-recovery-readiness:CreateCrossAccountAuthorization',
	CREATE_READINESS_CHECK = 'route53-recovery-readiness:CreateReadinessCheck',
	CREATE_RECOVERY_GROUP = 'route53-recovery-readiness:CreateRecoveryGroup',
	CREATE_RESOURCE_SET = 'route53-recovery-readiness:CreateResourceSet',
	DELETE_CELL = 'route53-recovery-readiness:DeleteCell',
	DELETE_CROSS_ACCOUNT_AUTHORIZATION = 'route53-recovery-readiness:DeleteCrossAccountAuthorization',
	DELETE_READINESS_CHECK = 'route53-recovery-readiness:DeleteReadinessCheck',
	DELETE_RECOVERY_GROUP = 'route53-recovery-readiness:DeleteRecoveryGroup',
	DELETE_RESOURCE_SET = 'route53-recovery-readiness:DeleteResourceSet',
	GET_ARCHITECTURE_RECOMMENDATIONS = 'route53-recovery-readiness:GetArchitectureRecommendations',
	GET_CELL = 'route53-recovery-readiness:GetCell',
	GET_CELL_READINESS_SUMMARY = 'route53-recovery-readiness:GetCellReadinessSummary',
	GET_READINESS_CHECK = 'route53-recovery-readiness:GetReadinessCheck',
	GET_READINESS_CHECK_RESOURCE_STATUS = 'route53-recovery-readiness:GetReadinessCheckResourceStatus',
	GET_READINESS_CHECK_STATUS = 'route53-recovery-readiness:GetReadinessCheckStatus',
	GET_RECOVERY_GROUP = 'route53-recovery-readiness:GetRecoveryGroup',
	GET_RECOVERY_GROUP_READINESS_SUMMARY = 'route53-recovery-readiness:GetRecoveryGroupReadinessSummary',
	GET_RESOURCE_SET = 'route53-recovery-readiness:GetResourceSet',
	LIST_CELLS = 'route53-recovery-readiness:ListCells',
	LIST_CROSS_ACCOUNT_AUTHORIZATIONS = 'route53-recovery-readiness:ListCrossAccountAuthorizations',
	LIST_READINESS_CHECKS = 'route53-recovery-readiness:ListReadinessChecks',
	LIST_RECOVERY_GROUPS = 'route53-recovery-readiness:ListRecoveryGroups',
	LIST_RESOURCE_SETS = 'route53-recovery-readiness:ListResourceSets',
	LIST_RULES = 'route53-recovery-readiness:ListRules',
	LIST_TAGS_FOR_RESOURCES = 'route53-recovery-readiness:ListTagsForResources',
	TAG_RESOURCE = 'route53-recovery-readiness:TagResource',
	UNTAG_RESOURCE = 'route53-recovery-readiness:UntagResource',
	UPDATE_CELL = 'route53-recovery-readiness:UpdateCell',
	UPDATE_READINESS_CHECK = 'route53-recovery-readiness:UpdateReadinessCheck',
	UPDATE_RECOVERY_GROUP = 'route53-recovery-readiness:UpdateRecoveryGroup',
	UPDATE_RESOURCE_SET = 'route53-recovery-readiness:UpdateResourceSet',
}
export enum CODEBUILD {
	BATCH_DELETE_BUILDS = 'codebuild:BatchDeleteBuilds',
	BATCH_GET_BUILD_BATCHES = 'codebuild:BatchGetBuildBatches',
	BATCH_GET_BUILDS = 'codebuild:BatchGetBuilds',
	BATCH_GET_PROJECTS = 'codebuild:BatchGetProjects',
	BATCH_GET_REPORT_GROUPS = 'codebuild:BatchGetReportGroups',
	BATCH_GET_REPORTS = 'codebuild:BatchGetReports',
	BATCH_PUT_CODE_COVERAGES = 'codebuild:BatchPutCodeCoverages',
	BATCH_PUT_TEST_CASES = 'codebuild:BatchPutTestCases',
	CREATE_PROJECT = 'codebuild:CreateProject',
	CREATE_REPORT = 'codebuild:CreateReport',
	CREATE_REPORT_GROUP = 'codebuild:CreateReportGroup',
	CREATE_WEBHOOK = 'codebuild:CreateWebhook',
	DELETE_BUILD_BATCH = 'codebuild:DeleteBuildBatch',
	DELETE_O_AUTH_TOKEN = 'codebuild:DeleteOAuthToken',
	DELETE_PROJECT = 'codebuild:DeleteProject',
	DELETE_REPORT = 'codebuild:DeleteReport',
	DELETE_REPORT_GROUP = 'codebuild:DeleteReportGroup',
	DELETE_RESOURCE_POLICY = 'codebuild:DeleteResourcePolicy',
	DELETE_SOURCE_CREDENTIALS = 'codebuild:DeleteSourceCredentials',
	DELETE_WEBHOOK = 'codebuild:DeleteWebhook',
	DESCRIBE_CODE_COVERAGES = 'codebuild:DescribeCodeCoverages',
	DESCRIBE_TEST_CASES = 'codebuild:DescribeTestCases',
	GET_REPORT_GROUP_TREND = 'codebuild:GetReportGroupTrend',
	GET_RESOURCE_POLICY = 'codebuild:GetResourcePolicy',
	IMPORT_SOURCE_CREDENTIALS = 'codebuild:ImportSourceCredentials',
	INVALIDATE_PROJECT_CACHE = 'codebuild:InvalidateProjectCache',
	LIST_BUILD_BATCHES = 'codebuild:ListBuildBatches',
	LIST_BUILD_BATCHES_FOR_PROJECT = 'codebuild:ListBuildBatchesForProject',
	LIST_BUILDS = 'codebuild:ListBuilds',
	LIST_BUILDS_FOR_PROJECT = 'codebuild:ListBuildsForProject',
	LIST_CONNECTED_O_AUTH_ACCOUNTS = 'codebuild:ListConnectedOAuthAccounts',
	LIST_CURATED_ENVIRONMENT_IMAGES = 'codebuild:ListCuratedEnvironmentImages',
	LIST_PROJECTS = 'codebuild:ListProjects',
	LIST_REPORT_GROUPS = 'codebuild:ListReportGroups',
	LIST_REPORTS = 'codebuild:ListReports',
	LIST_REPORTS_FOR_REPORT_GROUP = 'codebuild:ListReportsForReportGroup',
	LIST_REPOSITORIES = 'codebuild:ListRepositories',
	LIST_SHARED_PROJECTS = 'codebuild:ListSharedProjects',
	LIST_SHARED_REPORT_GROUPS = 'codebuild:ListSharedReportGroups',
	LIST_SOURCE_CREDENTIALS = 'codebuild:ListSourceCredentials',
	PERSIST_O_AUTH_TOKEN = 'codebuild:PersistOAuthToken',
	PUT_RESOURCE_POLICY = 'codebuild:PutResourcePolicy',
	RETRY_BUILD = 'codebuild:RetryBuild',
	RETRY_BUILD_BATCH = 'codebuild:RetryBuildBatch',
	START_BUILD = 'codebuild:StartBuild',
	START_BUILD_BATCH = 'codebuild:StartBuildBatch',
	STOP_BUILD = 'codebuild:StopBuild',
	STOP_BUILD_BATCH = 'codebuild:StopBuildBatch',
	UPDATE_PROJECT = 'codebuild:UpdateProject',
	UPDATE_PROJECT_VISIBILITY = 'codebuild:UpdateProjectVisibility',
	UPDATE_REPORT = 'codebuild:UpdateReport',
	UPDATE_REPORT_GROUP = 'codebuild:UpdateReportGroup',
	UPDATE_WEBHOOK = 'codebuild:UpdateWebhook',
}
export enum IOT_ANALYTICS {
	BATCH_PUT_MESSAGE = 'iotanalytics:BatchPutMessage',
	CANCEL_PIPELINE_REPROCESSING = 'iotanalytics:CancelPipelineReprocessing',
	CREATE_CHANNEL = 'iotanalytics:CreateChannel',
	CREATE_DATASET = 'iotanalytics:CreateDataset',
	CREATE_DATASET_CONTENT = 'iotanalytics:CreateDatasetContent',
	CREATE_DATASTORE = 'iotanalytics:CreateDatastore',
	CREATE_PIPELINE = 'iotanalytics:CreatePipeline',
	DELETE_CHANNEL = 'iotanalytics:DeleteChannel',
	DELETE_DATASET = 'iotanalytics:DeleteDataset',
	DELETE_DATASET_CONTENT = 'iotanalytics:DeleteDatasetContent',
	DELETE_DATASTORE = 'iotanalytics:DeleteDatastore',
	DELETE_PIPELINE = 'iotanalytics:DeletePipeline',
	DESCRIBE_CHANNEL = 'iotanalytics:DescribeChannel',
	DESCRIBE_DATASET = 'iotanalytics:DescribeDataset',
	DESCRIBE_DATASTORE = 'iotanalytics:DescribeDatastore',
	DESCRIBE_LOGGING_OPTIONS = 'iotanalytics:DescribeLoggingOptions',
	DESCRIBE_PIPELINE = 'iotanalytics:DescribePipeline',
	GET_DATASET_CONTENT = 'iotanalytics:GetDatasetContent',
	LIST_CHANNELS = 'iotanalytics:ListChannels',
	LIST_DATASET_CONTENTS = 'iotanalytics:ListDatasetContents',
	LIST_DATASETS = 'iotanalytics:ListDatasets',
	LIST_DATASTORES = 'iotanalytics:ListDatastores',
	LIST_PIPELINES = 'iotanalytics:ListPipelines',
	LIST_TAGS_FOR_RESOURCE = 'iotanalytics:ListTagsForResource',
	PUT_LOGGING_OPTIONS = 'iotanalytics:PutLoggingOptions',
	RUN_PIPELINE_ACTIVITY = 'iotanalytics:RunPipelineActivity',
	SAMPLE_CHANNEL_DATA = 'iotanalytics:SampleChannelData',
	START_PIPELINE_REPROCESSING = 'iotanalytics:StartPipelineReprocessing',
	TAG_RESOURCE = 'iotanalytics:TagResource',
	UNTAG_RESOURCE = 'iotanalytics:UntagResource',
	UPDATE_CHANNEL = 'iotanalytics:UpdateChannel',
	UPDATE_DATASET = 'iotanalytics:UpdateDataset',
	UPDATE_DATASTORE = 'iotanalytics:UpdateDatastore',
	UPDATE_PIPELINE = 'iotanalytics:UpdatePipeline',
}
export enum CONNECT {
	ASSOCIATE_APPROVED_ORIGIN = 'connect:AssociateApprovedOrigin',
	ASSOCIATE_BOT = 'connect:AssociateBot',
	ASSOCIATE_CUSTOMER_PROFILES_DOMAIN = 'connect:AssociateCustomerProfilesDomain',
	ASSOCIATE_DEFAULT_VOCABULARY = 'connect:AssociateDefaultVocabulary',
	ASSOCIATE_INSTANCE_STORAGE_CONFIG = 'connect:AssociateInstanceStorageConfig',
	ASSOCIATE_LAMBDA_FUNCTION = 'connect:AssociateLambdaFunction',
	ASSOCIATE_LEX_BOT = 'connect:AssociateLexBot',
	ASSOCIATE_PHONE_NUMBER_CONTACT_FLOW = 'connect:AssociatePhoneNumberContactFlow',
	ASSOCIATE_QUEUE_QUICK_CONNECTS = 'connect:AssociateQueueQuickConnects',
	ASSOCIATE_ROUTING_PROFILE_QUEUES = 'connect:AssociateRoutingProfileQueues',
	ASSOCIATE_SECURITY_KEY = 'connect:AssociateSecurityKey',
	BATCH_ASSOCIATE_ANALYTICS_DATA_SET = 'connect:BatchAssociateAnalyticsDataSet',
	BATCH_DISASSOCIATE_ANALYTICS_DATA_SET = 'connect:BatchDisassociateAnalyticsDataSet',
	CLAIM_PHONE_NUMBER = 'connect:ClaimPhoneNumber',
	CREATE_AGENT_STATUS = 'connect:CreateAgentStatus',
	CREATE_CONTACT_FLOW = 'connect:CreateContactFlow',
	CREATE_CONTACT_FLOW_MODULE = 'connect:CreateContactFlowModule',
	CREATE_HOURS_OF_OPERATION = 'connect:CreateHoursOfOperation',
	CREATE_INSTANCE = 'connect:CreateInstance',
	CREATE_INTEGRATION_ASSOCIATION = 'connect:CreateIntegrationAssociation',
	CREATE_QUEUE = 'connect:CreateQueue',
	CREATE_QUICK_CONNECT = 'connect:CreateQuickConnect',
	CREATE_ROUTING_PROFILE = 'connect:CreateRoutingProfile',
	CREATE_RULE = 'connect:CreateRule',
	CREATE_SECURITY_PROFILE = 'connect:CreateSecurityProfile',
	CREATE_TASK_TEMPLATE = 'connect:CreateTaskTemplate',
	CREATE_TRAFFIC_DISTRIBUTION_GROUP = 'connect:CreateTrafficDistributionGroup',
	CREATE_USE_CASE = 'connect:CreateUseCase',
	CREATE_USER = 'connect:CreateUser',
	CREATE_USER_HIERARCHY_GROUP = 'connect:CreateUserHierarchyGroup',
	CREATE_VOCABULARY = 'connect:CreateVocabulary',
	DELETE_CONTACT_FLOW = 'connect:DeleteContactFlow',
	DELETE_CONTACT_FLOW_MODULE = 'connect:DeleteContactFlowModule',
	DELETE_HOURS_OF_OPERATION = 'connect:DeleteHoursOfOperation',
	DELETE_INSTANCE = 'connect:DeleteInstance',
	DELETE_INTEGRATION_ASSOCIATION = 'connect:DeleteIntegrationAssociation',
	DELETE_QUICK_CONNECT = 'connect:DeleteQuickConnect',
	DELETE_RULE = 'connect:DeleteRule',
	DELETE_SECURITY_PROFILE = 'connect:DeleteSecurityProfile',
	DELETE_TASK_TEMPLATE = 'connect:DeleteTaskTemplate',
	DELETE_TRAFFIC_DISTRIBUTION_GROUP = 'connect:DeleteTrafficDistributionGroup',
	DELETE_USE_CASE = 'connect:DeleteUseCase',
	DELETE_USER = 'connect:DeleteUser',
	DELETE_USER_HIERARCHY_GROUP = 'connect:DeleteUserHierarchyGroup',
	DELETE_VOCABULARY = 'connect:DeleteVocabulary',
	DESCRIBE_AGENT_STATUS = 'connect:DescribeAgentStatus',
	DESCRIBE_CONTACT = 'connect:DescribeContact',
	DESCRIBE_CONTACT_FLOW = 'connect:DescribeContactFlow',
	DESCRIBE_CONTACT_FLOW_MODULE = 'connect:DescribeContactFlowModule',
	DESCRIBE_FORECASTING_PLANNING_SCHEDULING_INTEGRATION = 'connect:DescribeForecastingPlanningSchedulingIntegration',
	DESCRIBE_HOURS_OF_OPERATION = 'connect:DescribeHoursOfOperation',
	DESCRIBE_INSTANCE = 'connect:DescribeInstance',
	DESCRIBE_INSTANCE_ATTRIBUTE = 'connect:DescribeInstanceAttribute',
	DESCRIBE_INSTANCE_STORAGE_CONFIG = 'connect:DescribeInstanceStorageConfig',
	DESCRIBE_PHONE_NUMBER = 'connect:DescribePhoneNumber',
	DESCRIBE_QUEUE = 'connect:DescribeQueue',
	DESCRIBE_QUICK_CONNECT = 'connect:DescribeQuickConnect',
	DESCRIBE_ROUTING_PROFILE = 'connect:DescribeRoutingProfile',
	DESCRIBE_RULE = 'connect:DescribeRule',
	DESCRIBE_SECURITY_PROFILE = 'connect:DescribeSecurityProfile',
	DESCRIBE_TRAFFIC_DISTRIBUTION_GROUP = 'connect:DescribeTrafficDistributionGroup',
	DESCRIBE_USER = 'connect:DescribeUser',
	DESCRIBE_USER_HIERARCHY_GROUP = 'connect:DescribeUserHierarchyGroup',
	DESCRIBE_USER_HIERARCHY_STRUCTURE = 'connect:DescribeUserHierarchyStructure',
	DESCRIBE_VOCABULARY = 'connect:DescribeVocabulary',
	DISASSOCIATE_APPROVED_ORIGIN = 'connect:DisassociateApprovedOrigin',
	DISASSOCIATE_BOT = 'connect:DisassociateBot',
	DISASSOCIATE_CUSTOMER_PROFILES_DOMAIN = 'connect:DisassociateCustomerProfilesDomain',
	DISASSOCIATE_INSTANCE_STORAGE_CONFIG = 'connect:DisassociateInstanceStorageConfig',
	DISASSOCIATE_LAMBDA_FUNCTION = 'connect:DisassociateLambdaFunction',
	DISASSOCIATE_LEX_BOT = 'connect:DisassociateLexBot',
	DISASSOCIATE_PHONE_NUMBER_CONTACT_FLOW = 'connect:DisassociatePhoneNumberContactFlow',
	DISASSOCIATE_QUEUE_QUICK_CONNECTS = 'connect:DisassociateQueueQuickConnects',
	DISASSOCIATE_ROUTING_PROFILE_QUEUES = 'connect:DisassociateRoutingProfileQueues',
	DISASSOCIATE_SECURITY_KEY = 'connect:DisassociateSecurityKey',
	DISMISS_USER_CONTACT = 'connect:DismissUserContact',
	GET_CONTACT_ATTRIBUTES = 'connect:GetContactAttributes',
	GET_CURRENT_METRIC_DATA = 'connect:GetCurrentMetricData',
	GET_CURRENT_USER_DATA = 'connect:GetCurrentUserData',
	GET_FEDERATION_TOKEN = 'connect:GetFederationToken',
	GET_FEDERATION_TOKENS = 'connect:GetFederationTokens',
	GET_METRIC_DATA = 'connect:GetMetricData',
	GET_TASK_TEMPLATE = 'connect:GetTaskTemplate',
	GET_TRAFFIC_DISTRIBUTION = 'connect:GetTrafficDistribution',
	LIST_AGENT_STATUSES = 'connect:ListAgentStatuses',
	LIST_APPROVED_ORIGINS = 'connect:ListApprovedOrigins',
	LIST_BOTS = 'connect:ListBots',
	LIST_CONTACT_FLOW_MODULES = 'connect:ListContactFlowModules',
	LIST_CONTACT_FLOWS = 'connect:ListContactFlows',
	LIST_CONTACT_REFERENCES = 'connect:ListContactReferences',
	LIST_DEFAULT_VOCABULARIES = 'connect:ListDefaultVocabularies',
	LIST_HOURS_OF_OPERATIONS = 'connect:ListHoursOfOperations',
	LIST_INSTANCE_ATTRIBUTES = 'connect:ListInstanceAttributes',
	LIST_INSTANCE_STORAGE_CONFIGS = 'connect:ListInstanceStorageConfigs',
	LIST_INSTANCES = 'connect:ListInstances',
	LIST_INTEGRATION_ASSOCIATIONS = 'connect:ListIntegrationAssociations',
	LIST_LAMBDA_FUNCTIONS = 'connect:ListLambdaFunctions',
	LIST_LEX_BOTS = 'connect:ListLexBots',
	LIST_PHONE_NUMBERS = 'connect:ListPhoneNumbers',
	LIST_PHONE_NUMBERS_V_2 = 'connect:ListPhoneNumbersV2',
	LIST_PROMPTS = 'connect:ListPrompts',
	LIST_QUEUE_QUICK_CONNECTS = 'connect:ListQueueQuickConnects',
	LIST_QUEUES = 'connect:ListQueues',
	LIST_QUICK_CONNECTS = 'connect:ListQuickConnects',
	LIST_REALTIME_CONTACT_ANALYSIS_SEGMENTS = 'connect:ListRealtimeContactAnalysisSegments',
	LIST_ROUTING_PROFILE_QUEUES = 'connect:ListRoutingProfileQueues',
	LIST_ROUTING_PROFILES = 'connect:ListRoutingProfiles',
	LIST_RULE = 'connect:ListRule',
	LIST_SECURITY_KEYS = 'connect:ListSecurityKeys',
	LIST_SECURITY_PROFILE_PERMISSIONS = 'connect:ListSecurityProfilePermissions',
	LIST_SECURITY_PROFILES = 'connect:ListSecurityProfiles',
	LIST_TAGS_FOR_RESOURCE = 'connect:ListTagsForResource',
	LIST_TASK_TEMPLATES = 'connect:ListTaskTemplates',
	LIST_TRAFFIC_DISTRIBUTION_GROUPS = 'connect:ListTrafficDistributionGroups',
	LIST_USE_CASES = 'connect:ListUseCases',
	LIST_USER_HIERARCHY_GROUPS = 'connect:ListUserHierarchyGroups',
	LIST_USERS = 'connect:ListUsers',
	MONITOR_CONTACT = 'connect:MonitorContact',
	PUT_USER_STATUS = 'connect:PutUserStatus',
	RELEASE_PHONE_NUMBER = 'connect:ReleasePhoneNumber',
	REPLICATE_INSTANCE = 'connect:ReplicateInstance',
	RESUME_CONTACT_RECORDING = 'connect:ResumeContactRecording',
	SEARCH_AVAILABLE_PHONE_NUMBERS = 'connect:SearchAvailablePhoneNumbers',
	SEARCH_QUEUES = 'connect:SearchQueues',
	SEARCH_ROUTING_PROFILES = 'connect:SearchRoutingProfiles',
	SEARCH_SECURITY_PROFILES = 'connect:SearchSecurityProfiles',
	SEARCH_USERS = 'connect:SearchUsers',
	SEARCH_VOCABULARIES = 'connect:SearchVocabularies',
	START_CHAT_CONTACT = 'connect:StartChatContact',
	START_CONTACT_RECORDING = 'connect:StartContactRecording',
	START_CONTACT_STREAMING = 'connect:StartContactStreaming',
	START_FORECASTING_PLANNING_SCHEDULING_INTEGRATION = 'connect:StartForecastingPlanningSchedulingIntegration',
	START_OUTBOUND_VOICE_CONTACT = 'connect:StartOutboundVoiceContact',
	START_TASK_CONTACT = 'connect:StartTaskContact',
	STOP_CONTACT = 'connect:StopContact',
	STOP_CONTACT_RECORDING = 'connect:StopContactRecording',
	STOP_CONTACT_STREAMING = 'connect:StopContactStreaming',
	STOP_FORECASTING_PLANNING_SCHEDULING_INTEGRATION = 'connect:StopForecastingPlanningSchedulingIntegration',
	SUSPEND_CONTACT_RECORDING = 'connect:SuspendContactRecording',
	TAG_RESOURCE = 'connect:TagResource',
	TRANSFER_CONTACT = 'connect:TransferContact',
	UNTAG_RESOURCE = 'connect:UntagResource',
	UPDATE_AGENT_STATUS = 'connect:UpdateAgentStatus',
	UPDATE_CONTACT = 'connect:UpdateContact',
	UPDATE_CONTACT_ATTRIBUTES = 'connect:UpdateContactAttributes',
	UPDATE_CONTACT_FLOW_CONTENT = 'connect:UpdateContactFlowContent',
	UPDATE_CONTACT_FLOW_METADATA = 'connect:UpdateContactFlowMetadata',
	UPDATE_CONTACT_FLOW_MODULE_CONTENT = 'connect:UpdateContactFlowModuleContent',
	UPDATE_CONTACT_FLOW_MODULE_METADATA = 'connect:UpdateContactFlowModuleMetadata',
	UPDATE_CONTACT_FLOW_NAME = 'connect:UpdateContactFlowName',
	UPDATE_CONTACT_SCHEDULE = 'connect:UpdateContactSchedule',
	UPDATE_HOURS_OF_OPERATION = 'connect:UpdateHoursOfOperation',
	UPDATE_INSTANCE_ATTRIBUTE = 'connect:UpdateInstanceAttribute',
	UPDATE_INSTANCE_STORAGE_CONFIG = 'connect:UpdateInstanceStorageConfig',
	UPDATE_PARTICIPANT_ROLE_CONFIG = 'connect:UpdateParticipantRoleConfig',
	UPDATE_PHONE_NUMBER = 'connect:UpdatePhoneNumber',
	UPDATE_QUEUE_HOURS_OF_OPERATION = 'connect:UpdateQueueHoursOfOperation',
	UPDATE_QUEUE_MAX_CONTACTS = 'connect:UpdateQueueMaxContacts',
	UPDATE_QUEUE_NAME = 'connect:UpdateQueueName',
	UPDATE_QUEUE_OUTBOUND_CALLER_CONFIG = 'connect:UpdateQueueOutboundCallerConfig',
	UPDATE_QUEUE_STATUS = 'connect:UpdateQueueStatus',
	UPDATE_QUICK_CONNECT_CONFIG = 'connect:UpdateQuickConnectConfig',
	UPDATE_QUICK_CONNECT_NAME = 'connect:UpdateQuickConnectName',
	UPDATE_ROUTING_PROFILE_CONCURRENCY = 'connect:UpdateRoutingProfileConcurrency',
	UPDATE_ROUTING_PROFILE_DEFAULT_OUTBOUND_QUEUE = 'connect:UpdateRoutingProfileDefaultOutboundQueue',
	UPDATE_ROUTING_PROFILE_NAME = 'connect:UpdateRoutingProfileName',
	UPDATE_ROUTING_PROFILE_QUEUES = 'connect:UpdateRoutingProfileQueues',
	UPDATE_RULE = 'connect:UpdateRule',
	UPDATE_SECURITY_PROFILE = 'connect:UpdateSecurityProfile',
	UPDATE_TASK_TEMPLATE = 'connect:UpdateTaskTemplate',
	UPDATE_TRAFFIC_DISTRIBUTION = 'connect:UpdateTrafficDistribution',
	UPDATE_USER_HIERARCHY = 'connect:UpdateUserHierarchy',
	UPDATE_USER_HIERARCHY_GROUP_NAME = 'connect:UpdateUserHierarchyGroupName',
	UPDATE_USER_HIERARCHY_STRUCTURE = 'connect:UpdateUserHierarchyStructure',
	UPDATE_USER_IDENTITY_INFO = 'connect:UpdateUserIdentityInfo',
	UPDATE_USER_PHONE_CONFIG = 'connect:UpdateUserPhoneConfig',
	UPDATE_USER_ROUTING_PROFILE = 'connect:UpdateUserRoutingProfile',
	UPDATE_USER_SECURITY_PROFILES = 'connect:UpdateUserSecurityProfiles',
	UPDATEDESCRIBE_CONTENT = 'connect:UpdatedescribeContent',
}
export enum PINPOINT_EMAIL_SERVICE {
	CREATE_CONFIGURATION_SET = 'ses:CreateConfigurationSet',
	CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:CreateConfigurationSetEventDestination',
	CREATE_DEDICATED_IP_POOL = 'ses:CreateDedicatedIpPool',
	CREATE_DELIVERABILITY_TEST_REPORT = 'ses:CreateDeliverabilityTestReport',
	CREATE_EMAIL_IDENTITY = 'ses:CreateEmailIdentity',
	DELETE_CONFIGURATION_SET = 'ses:DeleteConfigurationSet',
	DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:DeleteConfigurationSetEventDestination',
	DELETE_DEDICATED_IP_POOL = 'ses:DeleteDedicatedIpPool',
	DELETE_EMAIL_IDENTITY = 'ses:DeleteEmailIdentity',
	GET_ACCOUNT = 'ses:GetAccount',
	GET_BLACKLIST_REPORTS = 'ses:GetBlacklistReports',
	GET_CONFIGURATION_SET = 'ses:GetConfigurationSet',
	GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'ses:GetConfigurationSetEventDestinations',
	GET_DEDICATED_IP = 'ses:GetDedicatedIp',
	GET_DEDICATED_IPS = 'ses:GetDedicatedIps',
	GET_DELIVERABILITY_DASHBOARD_OPTIONS = 'ses:GetDeliverabilityDashboardOptions',
	GET_DELIVERABILITY_TEST_REPORT = 'ses:GetDeliverabilityTestReport',
	GET_DOMAIN_DELIVERABILITY_CAMPAIGN = 'ses:GetDomainDeliverabilityCampaign',
	GET_DOMAIN_STATISTICS_REPORT = 'ses:GetDomainStatisticsReport',
	GET_EMAIL_IDENTITY = 'ses:GetEmailIdentity',
	LIST_CONFIGURATION_SETS = 'ses:ListConfigurationSets',
	LIST_DEDICATED_IP_POOLS = 'ses:ListDedicatedIpPools',
	LIST_DELIVERABILITY_TEST_REPORTS = 'ses:ListDeliverabilityTestReports',
	LIST_DOMAIN_DELIVERABILITY_CAMPAIGNS = 'ses:ListDomainDeliverabilityCampaigns',
	LIST_EMAIL_IDENTITIES = 'ses:ListEmailIdentities',
	LIST_TAGS_FOR_RESOURCE = 'ses:ListTagsForResource',
	PUT_ACCOUNT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutAccountDedicatedIpWarmupAttributes',
	PUT_ACCOUNT_SENDING_ATTRIBUTES = 'ses:PutAccountSendingAttributes',
	PUT_CONFIGURATION_SET_DELIVERY_OPTIONS = 'ses:PutConfigurationSetDeliveryOptions',
	PUT_CONFIGURATION_SET_REPUTATION_OPTIONS = 'ses:PutConfigurationSetReputationOptions',
	PUT_CONFIGURATION_SET_SENDING_OPTIONS = 'ses:PutConfigurationSetSendingOptions',
	PUT_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:PutConfigurationSetTrackingOptions',
	PUT_DEDICATED_IP_IN_POOL = 'ses:PutDedicatedIpInPool',
	PUT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutDedicatedIpWarmupAttributes',
	PUT_DELIVERABILITY_DASHBOARD_OPTION = 'ses:PutDeliverabilityDashboardOption',
	PUT_EMAIL_IDENTITY_DKIM_ATTRIBUTES = 'ses:PutEmailIdentityDkimAttributes',
	PUT_EMAIL_IDENTITY_FEEDBACK_ATTRIBUTES = 'ses:PutEmailIdentityFeedbackAttributes',
	PUT_EMAIL_IDENTITY_MAIL_FROM_ATTRIBUTES = 'ses:PutEmailIdentityMailFromAttributes',
	SEND_EMAIL = 'ses:SendEmail',
	TAG_RESOURCE = 'ses:TagResource',
	UNTAG_RESOURCE = 'ses:UntagResource',
	UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:UpdateConfigurationSetEventDestination',
}
export enum SIMPLE_EMAIL_SERVICE_V2 {
	BATCH_GET_METRIC_DATA = 'ses:BatchGetMetricData',
	CREATE_CONFIGURATION_SET = 'ses:CreateConfigurationSet',
	CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:CreateConfigurationSetEventDestination',
	CREATE_CONTACT = 'ses:CreateContact',
	CREATE_CONTACT_LIST = 'ses:CreateContactList',
	CREATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:CreateCustomVerificationEmailTemplate',
	CREATE_DEDICATED_IP_POOL = 'ses:CreateDedicatedIpPool',
	CREATE_DELIVERABILITY_TEST_REPORT = 'ses:CreateDeliverabilityTestReport',
	CREATE_EMAIL_IDENTITY = 'ses:CreateEmailIdentity',
	CREATE_EMAIL_IDENTITY_POLICY = 'ses:CreateEmailIdentityPolicy',
	CREATE_EMAIL_TEMPLATE = 'ses:CreateEmailTemplate',
	CREATE_IMPORT_JOB = 'ses:CreateImportJob',
	DELETE_CONFIGURATION_SET = 'ses:DeleteConfigurationSet',
	DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:DeleteConfigurationSetEventDestination',
	DELETE_CONTACT = 'ses:DeleteContact',
	DELETE_CONTACT_LIST = 'ses:DeleteContactList',
	DELETE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:DeleteCustomVerificationEmailTemplate',
	DELETE_DEDICATED_IP_POOL = 'ses:DeleteDedicatedIpPool',
	DELETE_EMAIL_IDENTITY = 'ses:DeleteEmailIdentity',
	DELETE_EMAIL_IDENTITY_POLICY = 'ses:DeleteEmailIdentityPolicy',
	DELETE_EMAIL_TEMPLATE = 'ses:DeleteEmailTemplate',
	DELETE_SUPPRESSED_DESTINATION = 'ses:DeleteSuppressedDestination',
	GET_ACCOUNT = 'ses:GetAccount',
	GET_BLACKLIST_REPORTS = 'ses:GetBlacklistReports',
	GET_CONFIGURATION_SET = 'ses:GetConfigurationSet',
	GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'ses:GetConfigurationSetEventDestinations',
	GET_CONTACT = 'ses:GetContact',
	GET_CONTACT_LIST = 'ses:GetContactList',
	GET_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:GetCustomVerificationEmailTemplate',
	GET_DEDICATED_IP = 'ses:GetDedicatedIp',
	GET_DEDICATED_IP_POOL = 'ses:GetDedicatedIpPool',
	GET_DEDICATED_IPS = 'ses:GetDedicatedIps',
	GET_DELIVERABILITY_DASHBOARD_OPTIONS = 'ses:GetDeliverabilityDashboardOptions',
	GET_DELIVERABILITY_TEST_REPORT = 'ses:GetDeliverabilityTestReport',
	GET_DOMAIN_DELIVERABILITY_CAMPAIGN = 'ses:GetDomainDeliverabilityCampaign',
	GET_DOMAIN_STATISTICS_REPORT = 'ses:GetDomainStatisticsReport',
	GET_EMAIL_IDENTITY = 'ses:GetEmailIdentity',
	GET_EMAIL_IDENTITY_POLICIES = 'ses:GetEmailIdentityPolicies',
	GET_EMAIL_TEMPLATE = 'ses:GetEmailTemplate',
	GET_IMPORT_JOB = 'ses:GetImportJob',
	GET_SUPPRESSED_DESTINATION = 'ses:GetSuppressedDestination',
	LIST_CONFIGURATION_SETS = 'ses:ListConfigurationSets',
	LIST_CONTACT_LISTS = 'ses:ListContactLists',
	LIST_CONTACTS = 'ses:ListContacts',
	LIST_CUSTOM_VERIFICATION_EMAIL_TEMPLATES = 'ses:ListCustomVerificationEmailTemplates',
	LIST_DEDICATED_IP_POOLS = 'ses:ListDedicatedIpPools',
	LIST_DELIVERABILITY_TEST_REPORTS = 'ses:ListDeliverabilityTestReports',
	LIST_DOMAIN_DELIVERABILITY_CAMPAIGNS = 'ses:ListDomainDeliverabilityCampaigns',
	LIST_EMAIL_IDENTITIES = 'ses:ListEmailIdentities',
	LIST_EMAIL_TEMPLATES = 'ses:ListEmailTemplates',
	LIST_IMPORT_JOBS = 'ses:ListImportJobs',
	LIST_RECOMMENDATIONS = 'ses:ListRecommendations',
	LIST_SUPPRESSED_DESTINATIONS = 'ses:ListSuppressedDestinations',
	LIST_TAGS_FOR_RESOURCE = 'ses:ListTagsForResource',
	PUT_ACCOUNT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutAccountDedicatedIpWarmupAttributes',
	PUT_ACCOUNT_DETAILS = 'ses:PutAccountDetails',
	PUT_ACCOUNT_SENDING_ATTRIBUTES = 'ses:PutAccountSendingAttributes',
	PUT_ACCOUNT_SUPPRESSION_ATTRIBUTES = 'ses:PutAccountSuppressionAttributes',
	PUT_ACCOUNT_VDM_ATTRIBUTES = 'ses:PutAccountVdmAttributes',
	PUT_CONFIGURATION_SET_DELIVERY_OPTIONS = 'ses:PutConfigurationSetDeliveryOptions',
	PUT_CONFIGURATION_SET_REPUTATION_OPTIONS = 'ses:PutConfigurationSetReputationOptions',
	PUT_CONFIGURATION_SET_SENDING_OPTIONS = 'ses:PutConfigurationSetSendingOptions',
	PUT_CONFIGURATION_SET_SUPPRESSION_OPTIONS = 'ses:PutConfigurationSetSuppressionOptions',
	PUT_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:PutConfigurationSetTrackingOptions',
	PUT_CONFIGURATION_SET_VDM_OPTIONS = 'ses:PutConfigurationSetVdmOptions',
	PUT_DEDICATED_IP_IN_POOL = 'ses:PutDedicatedIpInPool',
	PUT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'ses:PutDedicatedIpWarmupAttributes',
	PUT_DELIVERABILITY_DASHBOARD_OPTION = 'ses:PutDeliverabilityDashboardOption',
	PUT_EMAIL_IDENTITY_CONFIGURATION_SET_ATTRIBUTES = 'ses:PutEmailIdentityConfigurationSetAttributes',
	PUT_EMAIL_IDENTITY_DKIM_ATTRIBUTES = 'ses:PutEmailIdentityDkimAttributes',
	PUT_EMAIL_IDENTITY_DKIM_SIGNING_ATTRIBUTES = 'ses:PutEmailIdentityDkimSigningAttributes',
	PUT_EMAIL_IDENTITY_FEEDBACK_ATTRIBUTES = 'ses:PutEmailIdentityFeedbackAttributes',
	PUT_EMAIL_IDENTITY_MAIL_FROM_ATTRIBUTES = 'ses:PutEmailIdentityMailFromAttributes',
	PUT_SUPPRESSED_DESTINATION = 'ses:PutSuppressedDestination',
	SEND_BULK_EMAIL = 'ses:SendBulkEmail',
	SEND_CUSTOM_VERIFICATION_EMAIL = 'ses:SendCustomVerificationEmail',
	SEND_EMAIL = 'ses:SendEmail',
	TAG_RESOURCE = 'ses:TagResource',
	TEST_RENDER_EMAIL_TEMPLATE = 'ses:TestRenderEmailTemplate',
	UNTAG_RESOURCE = 'ses:UntagResource',
	UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:UpdateConfigurationSetEventDestination',
	UPDATE_CONTACT = 'ses:UpdateContact',
	UPDATE_CONTACT_LIST = 'ses:UpdateContactList',
	UPDATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:UpdateCustomVerificationEmailTemplate',
	UPDATE_EMAIL_IDENTITY_POLICY = 'ses:UpdateEmailIdentityPolicy',
	UPDATE_EMAIL_TEMPLATE = 'ses:UpdateEmailTemplate',
}
export enum SES {
	CLONE_RECEIPT_RULE_SET = 'ses:CloneReceiptRuleSet',
	CREATE_CONFIGURATION_SET = 'ses:CreateConfigurationSet',
	CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:CreateConfigurationSetEventDestination',
	CREATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:CreateConfigurationSetTrackingOptions',
	CREATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:CreateCustomVerificationEmailTemplate',
	CREATE_RECEIPT_FILTER = 'ses:CreateReceiptFilter',
	CREATE_RECEIPT_RULE = 'ses:CreateReceiptRule',
	CREATE_RECEIPT_RULE_SET = 'ses:CreateReceiptRuleSet',
	CREATE_TEMPLATE = 'ses:CreateTemplate',
	DELETE_CONFIGURATION_SET = 'ses:DeleteConfigurationSet',
	DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:DeleteConfigurationSetEventDestination',
	DELETE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:DeleteConfigurationSetTrackingOptions',
	DELETE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:DeleteCustomVerificationEmailTemplate',
	DELETE_IDENTITY = 'ses:DeleteIdentity',
	DELETE_IDENTITY_POLICY = 'ses:DeleteIdentityPolicy',
	DELETE_RECEIPT_FILTER = 'ses:DeleteReceiptFilter',
	DELETE_RECEIPT_RULE = 'ses:DeleteReceiptRule',
	DELETE_RECEIPT_RULE_SET = 'ses:DeleteReceiptRuleSet',
	DELETE_TEMPLATE = 'ses:DeleteTemplate',
	DELETE_VERIFIED_EMAIL_ADDRESS = 'ses:DeleteVerifiedEmailAddress',
	DESCRIBE_ACTIVE_RECEIPT_RULE_SET = 'ses:DescribeActiveReceiptRuleSet',
	DESCRIBE_CONFIGURATION_SET = 'ses:DescribeConfigurationSet',
	DESCRIBE_RECEIPT_RULE = 'ses:DescribeReceiptRule',
	DESCRIBE_RECEIPT_RULE_SET = 'ses:DescribeReceiptRuleSet',
	GET_ACCOUNT_SENDING_ENABLED = 'ses:GetAccountSendingEnabled',
	GET_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:GetCustomVerificationEmailTemplate',
	GET_IDENTITY_DKIM_ATTRIBUTES = 'ses:GetIdentityDkimAttributes',
	GET_IDENTITY_MAIL_FROM_DOMAIN_ATTRIBUTES = 'ses:GetIdentityMailFromDomainAttributes',
	GET_IDENTITY_NOTIFICATION_ATTRIBUTES = 'ses:GetIdentityNotificationAttributes',
	GET_IDENTITY_POLICIES = 'ses:GetIdentityPolicies',
	GET_IDENTITY_VERIFICATION_ATTRIBUTES = 'ses:GetIdentityVerificationAttributes',
	GET_SEND_QUOTA = 'ses:GetSendQuota',
	GET_SEND_STATISTICS = 'ses:GetSendStatistics',
	GET_TEMPLATE = 'ses:GetTemplate',
	LIST_CONFIGURATION_SETS = 'ses:ListConfigurationSets',
	LIST_CUSTOM_VERIFICATION_EMAIL_TEMPLATES = 'ses:ListCustomVerificationEmailTemplates',
	LIST_IDENTITIES = 'ses:ListIdentities',
	LIST_IDENTITY_POLICIES = 'ses:ListIdentityPolicies',
	LIST_RECEIPT_FILTERS = 'ses:ListReceiptFilters',
	LIST_RECEIPT_RULE_SETS = 'ses:ListReceiptRuleSets',
	LIST_TEMPLATES = 'ses:ListTemplates',
	LIST_VERIFIED_EMAIL_ADDRESSES = 'ses:ListVerifiedEmailAddresses',
	PUT_CONFIGURATION_SET_DELIVERY_OPTIONS = 'ses:PutConfigurationSetDeliveryOptions',
	PUT_IDENTITY_POLICY = 'ses:PutIdentityPolicy',
	REORDER_RECEIPT_RULE_SET = 'ses:ReorderReceiptRuleSet',
	SEND_BOUNCE = 'ses:SendBounce',
	SEND_BULK_TEMPLATED_EMAIL = 'ses:SendBulkTemplatedEmail',
	SEND_CUSTOM_VERIFICATION_EMAIL = 'ses:SendCustomVerificationEmail',
	SEND_EMAIL = 'ses:SendEmail',
	SEND_RAW_EMAIL = 'ses:SendRawEmail',
	SEND_TEMPLATED_EMAIL = 'ses:SendTemplatedEmail',
	SET_ACTIVE_RECEIPT_RULE_SET = 'ses:SetActiveReceiptRuleSet',
	SET_IDENTITY_DKIM_ENABLED = 'ses:SetIdentityDkimEnabled',
	SET_IDENTITY_FEEDBACK_FORWARDING_ENABLED = 'ses:SetIdentityFeedbackForwardingEnabled',
	SET_IDENTITY_HEADERS_IN_NOTIFICATIONS_ENABLED = 'ses:SetIdentityHeadersInNotificationsEnabled',
	SET_IDENTITY_MAIL_FROM_DOMAIN = 'ses:SetIdentityMailFromDomain',
	SET_IDENTITY_NOTIFICATION_TOPIC = 'ses:SetIdentityNotificationTopic',
	SET_RECEIPT_RULE_POSITION = 'ses:SetReceiptRulePosition',
	TEST_RENDER_TEMPLATE = 'ses:TestRenderTemplate',
	UPDATE_ACCOUNT_SENDING_ENABLED = 'ses:UpdateAccountSendingEnabled',
	UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'ses:UpdateConfigurationSetEventDestination',
	UPDATE_CONFIGURATION_SET_REPUTATION_METRICS_ENABLED = 'ses:UpdateConfigurationSetReputationMetricsEnabled',
	UPDATE_CONFIGURATION_SET_SENDING_ENABLED = 'ses:UpdateConfigurationSetSendingEnabled',
	UPDATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'ses:UpdateConfigurationSetTrackingOptions',
	UPDATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'ses:UpdateCustomVerificationEmailTemplate',
	UPDATE_RECEIPT_RULE = 'ses:UpdateReceiptRule',
	UPDATE_TEMPLATE = 'ses:UpdateTemplate',
	VERIFY_DOMAIN_DKIM = 'ses:VerifyDomainDkim',
	VERIFY_DOMAIN_IDENTITY = 'ses:VerifyDomainIdentity',
	VERIFY_EMAIL_ADDRESS = 'ses:VerifyEmailAddress',
	VERIFY_EMAIL_IDENTITY = 'ses:VerifyEmailIdentity',
}
export enum COST_EXPLORER_SERVICE {
	CREATE_ANOMALY_MONITOR = 'ce:CreateAnomalyMonitor',
	CREATE_ANOMALY_SUBSCRIPTION = 'ce:CreateAnomalySubscription',
	CREATE_COST_CATEGORY_DEFINITION = 'ce:CreateCostCategoryDefinition',
	CREATE_NOTIFICATION_SUBSCRIPTION = 'ce:CreateNotificationSubscription',
	CREATE_REPORT = 'ce:CreateReport',
	DELETE_ANOMALY_MONITOR = 'ce:DeleteAnomalyMonitor',
	DELETE_ANOMALY_SUBSCRIPTION = 'ce:DeleteAnomalySubscription',
	DELETE_COST_CATEGORY_DEFINITION = 'ce:DeleteCostCategoryDefinition',
	DELETE_NOTIFICATION_SUBSCRIPTION = 'ce:DeleteNotificationSubscription',
	DELETE_REPORT = 'ce:DeleteReport',
	DESCRIBE_COST_CATEGORY_DEFINITION = 'ce:DescribeCostCategoryDefinition',
	DESCRIBE_NOTIFICATION_SUBSCRIPTION = 'ce:DescribeNotificationSubscription',
	DESCRIBE_REPORT = 'ce:DescribeReport',
	GET_ANOMALIES = 'ce:GetAnomalies',
	GET_ANOMALY_MONITORS = 'ce:GetAnomalyMonitors',
	GET_ANOMALY_SUBSCRIPTIONS = 'ce:GetAnomalySubscriptions',
	GET_COST_AND_USAGE = 'ce:GetCostAndUsage',
	GET_COST_AND_USAGE_WITH_RESOURCES = 'ce:GetCostAndUsageWithResources',
	GET_COST_CATEGORIES = 'ce:GetCostCategories',
	GET_COST_FORECAST = 'ce:GetCostForecast',
	GET_DIMENSION_VALUES = 'ce:GetDimensionValues',
	GET_PREFERENCES = 'ce:GetPreferences',
	GET_RESERVATION_COVERAGE = 'ce:GetReservationCoverage',
	GET_RESERVATION_PURCHASE_RECOMMENDATION = 'ce:GetReservationPurchaseRecommendation',
	GET_RESERVATION_UTILIZATION = 'ce:GetReservationUtilization',
	GET_RIGHTSIZING_RECOMMENDATION = 'ce:GetRightsizingRecommendation',
	GET_SAVINGS_PLANS_COVERAGE = 'ce:GetSavingsPlansCoverage',
	GET_SAVINGS_PLANS_PURCHASE_RECOMMENDATION = 'ce:GetSavingsPlansPurchaseRecommendation',
	GET_SAVINGS_PLANS_UTILIZATION = 'ce:GetSavingsPlansUtilization',
	GET_SAVINGS_PLANS_UTILIZATION_DETAILS = 'ce:GetSavingsPlansUtilizationDetails',
	GET_TAGS = 'ce:GetTags',
	GET_USAGE_FORECAST = 'ce:GetUsageForecast',
	LIST_COST_ALLOCATION_TAGS = 'ce:ListCostAllocationTags',
	LIST_COST_CATEGORY_DEFINITIONS = 'ce:ListCostCategoryDefinitions',
	LIST_SAVINGS_PLANS_PURCHASE_RECOMMENDATION_GENERATION = 'ce:ListSavingsPlansPurchaseRecommendationGeneration',
	LIST_TAGS_FOR_RESOURCE = 'ce:ListTagsForResource',
	PROVIDE_ANOMALY_FEEDBACK = 'ce:ProvideAnomalyFeedback',
	START_SAVINGS_PLANS_PURCHASE_RECOMMENDATION_GENERATION = 'ce:StartSavingsPlansPurchaseRecommendationGeneration',
	TAG_RESOURCE = 'ce:TagResource',
	UNTAG_RESOURCE = 'ce:UntagResource',
	UPDATE_ANOMALY_MONITOR = 'ce:UpdateAnomalyMonitor',
	UPDATE_ANOMALY_SUBSCRIPTION = 'ce:UpdateAnomalySubscription',
	UPDATE_COST_ALLOCATION_TAGS_STATUS = 'ce:UpdateCostAllocationTagsStatus',
	UPDATE_COST_CATEGORY_DEFINITION = 'ce:UpdateCostCategoryDefinition',
	UPDATE_NOTIFICATION_SUBSCRIPTION = 'ce:UpdateNotificationSubscription',
	UPDATE_PREFERENCES = 'ce:UpdatePreferences',
	UPDATE_REPORT = 'ce:UpdateReport',
}
export enum AMPLIFY_ADMIN {
	CLONE_BACKEND = 'amplifybackend:CloneBackend',
	CREATE_BACKEND = 'amplifybackend:CreateBackend',
	CREATE_BACKEND_API = 'amplifybackend:CreateBackendAPI',
	CREATE_BACKEND_AUTH = 'amplifybackend:CreateBackendAuth',
	CREATE_BACKEND_CONFIG = 'amplifybackend:CreateBackendConfig',
	CREATE_BACKEND_STORAGE = 'amplifybackend:CreateBackendStorage',
	CREATE_TOKEN = 'amplifybackend:CreateToken',
	DELETE_BACKEND = 'amplifybackend:DeleteBackend',
	DELETE_BACKEND_API = 'amplifybackend:DeleteBackendAPI',
	DELETE_BACKEND_AUTH = 'amplifybackend:DeleteBackendAuth',
	DELETE_BACKEND_STORAGE = 'amplifybackend:DeleteBackendStorage',
	DELETE_TOKEN = 'amplifybackend:DeleteToken',
	GENERATE_BACKEND_API_MODELS = 'amplifybackend:GenerateBackendAPIModels',
	GET_BACKEND = 'amplifybackend:GetBackend',
	GET_BACKEND_API = 'amplifybackend:GetBackendAPI',
	GET_BACKEND_API_MODELS = 'amplifybackend:GetBackendAPIModels',
	GET_BACKEND_AUTH = 'amplifybackend:GetBackendAuth',
	GET_BACKEND_JOB = 'amplifybackend:GetBackendJob',
	GET_BACKEND_STORAGE = 'amplifybackend:GetBackendStorage',
	GET_TOKEN = 'amplifybackend:GetToken',
	IMPORT_BACKEND_AUTH = 'amplifybackend:ImportBackendAuth',
	IMPORT_BACKEND_STORAGE = 'amplifybackend:ImportBackendStorage',
	LIST_BACKEND_JOBS = 'amplifybackend:ListBackendJobs',
	LIST_S_3_BUCKETS = 'amplifybackend:ListS3Buckets',
	REMOVE_ALL_BACKENDS = 'amplifybackend:RemoveAllBackends',
	REMOVE_BACKEND_CONFIG = 'amplifybackend:RemoveBackendConfig',
	UPDATE_BACKEND_API = 'amplifybackend:UpdateBackendAPI',
	UPDATE_BACKEND_AUTH = 'amplifybackend:UpdateBackendAuth',
	UPDATE_BACKEND_CONFIG = 'amplifybackend:UpdateBackendConfig',
	UPDATE_BACKEND_JOB = 'amplifybackend:UpdateBackendJob',
	UPDATE_BACKEND_STORAGE = 'amplifybackend:UpdateBackendStorage',
}
export enum CLOUDWATCH_SYNTHETICS {
	ASSOCIATE_RESOURCE = 'synthetics:AssociateResource',
	CREATE_CANARY = 'synthetics:CreateCanary',
	CREATE_GROUP = 'synthetics:CreateGroup',
	DELETE_CANARY = 'synthetics:DeleteCanary',
	DELETE_GROUP = 'synthetics:DeleteGroup',
	DESCRIBE_CANARIES = 'synthetics:DescribeCanaries',
	DESCRIBE_CANARIES_LAST_RUN = 'synthetics:DescribeCanariesLastRun',
	DESCRIBE_RUNTIME_VERSIONS = 'synthetics:DescribeRuntimeVersions',
	DISASSOCIATE_RESOURCE = 'synthetics:DisassociateResource',
	GET_CANARY = 'synthetics:GetCanary',
	GET_CANARY_RUNS = 'synthetics:GetCanaryRuns',
	GET_GROUP = 'synthetics:GetGroup',
	LIST_ASSOCIATED_GROUPS = 'synthetics:ListAssociatedGroups',
	LIST_GROUP_RESOURCES = 'synthetics:ListGroupResources',
	LIST_GROUPS = 'synthetics:ListGroups',
	LIST_TAGS_FOR_RESOURCE = 'synthetics:ListTagsForResource',
	START_CANARY = 'synthetics:StartCanary',
	STOP_CANARY = 'synthetics:StopCanary',
	TAG_RESOURCE = 'synthetics:TagResource',
	UNTAG_RESOURCE = 'synthetics:UntagResource',
	UPDATE_CANARY = 'synthetics:UpdateCanary',
}
export enum ELASTIC_INFERENCE {
	CONNECT = 'elastic-inference:Connect',
	DESCRIBE_ACCELERATOR_OFFERINGS = 'elastic-inference:DescribeAcceleratorOfferings',
	DESCRIBE_ACCELERATOR_TYPES = 'elastic-inference:DescribeAcceleratorTypes',
	DESCRIBE_ACCELERATORS = 'elastic-inference:DescribeAccelerators',
	LIST_TAGS_FOR_RESOURCE = 'elastic-inference:ListTagsForResource',
	TAG_RESOURCE = 'elastic-inference:TagResource',
	UNTAG_RESOURCE = 'elastic-inference:UntagResource',
}
export enum APPLICATION_COST_PROFILER_SERVICE {
	DELETE_REPORT_DEFINITION = 'application-cost-profiler:DeleteReportDefinition',
	GET_REPORT_DEFINITION = 'application-cost-profiler:GetReportDefinition',
	IMPORT_APPLICATION_USAGE = 'application-cost-profiler:ImportApplicationUsage',
	LIST_REPORT_DEFINITIONS = 'application-cost-profiler:ListReportDefinitions',
	PUT_REPORT_DEFINITION = 'application-cost-profiler:PutReportDefinition',
	UPDATE_REPORT_DEFINITION = 'application-cost-profiler:UpdateReportDefinition',
}
export enum MIGRATION_HUB_REFACTOR_SPACES {
	CREATE_APPLICATION = 'refactor-spaces:CreateApplication',
	CREATE_ENVIRONMENT = 'refactor-spaces:CreateEnvironment',
	CREATE_ROUTE = 'refactor-spaces:CreateRoute',
	CREATE_SERVICE = 'refactor-spaces:CreateService',
	DELETE_APPLICATION = 'refactor-spaces:DeleteApplication',
	DELETE_ENVIRONMENT = 'refactor-spaces:DeleteEnvironment',
	DELETE_RESOURCE_POLICY = 'refactor-spaces:DeleteResourcePolicy',
	DELETE_ROUTE = 'refactor-spaces:DeleteRoute',
	DELETE_SERVICE = 'refactor-spaces:DeleteService',
	GET_APPLICATION = 'refactor-spaces:GetApplication',
	GET_ENVIRONMENT = 'refactor-spaces:GetEnvironment',
	GET_RESOURCE_POLICY = 'refactor-spaces:GetResourcePolicy',
	GET_ROUTE = 'refactor-spaces:GetRoute',
	GET_SERVICE = 'refactor-spaces:GetService',
	LIST_APPLICATIONS = 'refactor-spaces:ListApplications',
	LIST_ENVIRONMENT_VPCS = 'refactor-spaces:ListEnvironmentVpcs',
	LIST_ENVIRONMENTS = 'refactor-spaces:ListEnvironments',
	LIST_ROUTES = 'refactor-spaces:ListRoutes',
	LIST_SERVICES = 'refactor-spaces:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'refactor-spaces:ListTagsForResource',
	PUT_RESOURCE_POLICY = 'refactor-spaces:PutResourcePolicy',
	TAG_RESOURCE = 'refactor-spaces:TagResource',
	UNTAG_RESOURCE = 'refactor-spaces:UntagResource',
	UPDATE_ROUTE = 'refactor-spaces:UpdateRoute',
}
export enum DEEPLENS {
	ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'deeplens:AssociateServiceRoleToAccount',
	BATCH_GET_DEVICE = 'deeplens:BatchGetDevice',
	BATCH_GET_MODEL = 'deeplens:BatchGetModel',
	BATCH_GET_PROJECT = 'deeplens:BatchGetProject',
	CREATE_DEVICE_CERTIFICATES = 'deeplens:CreateDeviceCertificates',
	CREATE_MODEL = 'deeplens:CreateModel',
	CREATE_PROJECT = 'deeplens:CreateProject',
	DELETE_MODEL = 'deeplens:DeleteModel',
	DELETE_PROJECT = 'deeplens:DeleteProject',
	DEPLOY_PROJECT = 'deeplens:DeployProject',
	DEREGISTER_DEVICE = 'deeplens:DeregisterDevice',
	GET_ASSOCIATED_RESOURCES = 'deeplens:GetAssociatedResources',
	GET_DEPLOYMENT_STATUS = 'deeplens:GetDeploymentStatus',
	GET_DEVICE = 'deeplens:GetDevice',
	GET_MODEL = 'deeplens:GetModel',
	GET_PROJECT = 'deeplens:GetProject',
	IMPORT_PROJECT_FROM_TEMPLATE = 'deeplens:ImportProjectFromTemplate',
	LIST_DEPLOYMENTS = 'deeplens:ListDeployments',
	LIST_DEVICES = 'deeplens:ListDevices',
	LIST_MODELS = 'deeplens:ListModels',
	LIST_PROJECTS = 'deeplens:ListProjects',
	REGISTER_DEVICE = 'deeplens:RegisterDevice',
	REMOVE_PROJECT = 'deeplens:RemoveProject',
	UPDATE_PROJECT = 'deeplens:UpdateProject',
}
export enum GAMESPARKS {
	CREATE_GAME = 'gamesparks:CreateGame',
	CREATE_SNAPSHOT = 'gamesparks:CreateSnapshot',
	CREATE_STAGE = 'gamesparks:CreateStage',
	DELETE_GAME = 'gamesparks:DeleteGame',
	DELETE_STAGE = 'gamesparks:DeleteStage',
	DISCONNECT_PLAYER = 'gamesparks:DisconnectPlayer',
	EXPORT_SNAPSHOT = 'gamesparks:ExportSnapshot',
	GET_EXTENSION = 'gamesparks:GetExtension',
	GET_EXTENSION_VERSION = 'gamesparks:GetExtensionVersion',
	GET_GAME = 'gamesparks:GetGame',
	GET_GAME_CONFIGURATION = 'gamesparks:GetGameConfiguration',
	GET_GENERATED_CODE_JOB = 'gamesparks:GetGeneratedCodeJob',
	GET_PLAYER_CONNECTION_STATUS = 'gamesparks:GetPlayerConnectionStatus',
	GET_SNAPSHOT = 'gamesparks:GetSnapshot',
	GET_STAGE = 'gamesparks:GetStage',
	GET_STAGE_DEPLOYMENT = 'gamesparks:GetStageDeployment',
	IMPORT_GAME_CONFIGURATION = 'gamesparks:ImportGameConfiguration',
	INVOKE_BACKEND = 'gamesparks:InvokeBackend',
	LIST_EXTENSION_VERSIONS = 'gamesparks:ListExtensionVersions',
	LIST_EXTENSIONS = 'gamesparks:ListExtensions',
	LIST_GAMES = 'gamesparks:ListGames',
	LIST_GENERATED_CODE_JOBS = 'gamesparks:ListGeneratedCodeJobs',
	LIST_SNAPSHOTS = 'gamesparks:ListSnapshots',
	LIST_STAGE_DEPLOYMENTS = 'gamesparks:ListStageDeployments',
	LIST_STAGES = 'gamesparks:ListStages',
	LIST_TAGS_FOR_RESOURCE = 'gamesparks:ListTagsForResource',
	START_GENERATED_CODE_JOB = 'gamesparks:StartGeneratedCodeJob',
	START_STAGE_DEPLOYMENT = 'gamesparks:StartStageDeployment',
	TAG_RESOURCE = 'gamesparks:TagResource',
	UNTAG_RESOURCE = 'gamesparks:UntagResource',
	UPDATE_GAME = 'gamesparks:UpdateGame',
	UPDATE_GAME_CONFIGURATION = 'gamesparks:UpdateGameConfiguration',
	UPDATE_SNAPSHOT = 'gamesparks:UpdateSnapshot',
	UPDATE_STAGE = 'gamesparks:UpdateStage',
}
export enum RDS_DATA_API {
	BATCH_EXECUTE_STATEMENT = 'rds-data:BatchExecuteStatement',
	BEGIN_TRANSACTION = 'rds-data:BeginTransaction',
	COMMIT_TRANSACTION = 'rds-data:CommitTransaction',
	EXECUTE_SQL = 'rds-data:ExecuteSql',
	EXECUTE_STATEMENT = 'rds-data:ExecuteStatement',
	ROLLBACK_TRANSACTION = 'rds-data:RollbackTransaction',
}
export enum SQL_WORKBENCH {
	ASSOCIATE_CONNECTION_WITH_CHART = 'sqlworkbench:AssociateConnectionWithChart',
	ASSOCIATE_CONNECTION_WITH_TAB = 'sqlworkbench:AssociateConnectionWithTab',
	ASSOCIATE_QUERY_WITH_TAB = 'sqlworkbench:AssociateQueryWithTab',
	BATCH_DELETE_FOLDER = 'sqlworkbench:BatchDeleteFolder',
	BATCH_GET_NOTEBOOK_CELL = 'sqlworkbench:BatchGetNotebookCell',
	CREATE_ACCOUNT = 'sqlworkbench:CreateAccount',
	CREATE_CHART = 'sqlworkbench:CreateChart',
	CREATE_CONNECTION = 'sqlworkbench:CreateConnection',
	CREATE_FOLDER = 'sqlworkbench:CreateFolder',
	CREATE_NOTEBOOK = 'sqlworkbench:CreateNotebook',
	CREATE_NOTEBOOK_CELL = 'sqlworkbench:CreateNotebookCell',
	CREATE_NOTEBOOK_FROM_VERSION = 'sqlworkbench:CreateNotebookFromVersion',
	CREATE_NOTEBOOK_VERSION = 'sqlworkbench:CreateNotebookVersion',
	CREATE_SAVED_QUERY = 'sqlworkbench:CreateSavedQuery',
	DELETE_CHART = 'sqlworkbench:DeleteChart',
	DELETE_CONNECTION = 'sqlworkbench:DeleteConnection',
	DELETE_NOTEBOOK = 'sqlworkbench:DeleteNotebook',
	DELETE_NOTEBOOK_CELL = 'sqlworkbench:DeleteNotebookCell',
	DELETE_NOTEBOOK_VERSION = 'sqlworkbench:DeleteNotebookVersion',
	DELETE_SAVED_QUERY = 'sqlworkbench:DeleteSavedQuery',
	DELETE_TAB = 'sqlworkbench:DeleteTab',
	DRIVER_EXECUTE = 'sqlworkbench:DriverExecute',
	DUPLICATE_NOTEBOOK = 'sqlworkbench:DuplicateNotebook',
	EXPORT_NOTEBOOK = 'sqlworkbench:ExportNotebook',
	GENERATE_SESSION = 'sqlworkbench:GenerateSession',
	GET_ACCOUNT_INFO = 'sqlworkbench:GetAccountInfo',
	GET_ACCOUNT_SETTINGS = 'sqlworkbench:GetAccountSettings',
	GET_CHART = 'sqlworkbench:GetChart',
	GET_CONNECTION = 'sqlworkbench:GetConnection',
	GET_NOTEBOOK = 'sqlworkbench:GetNotebook',
	GET_NOTEBOOK_VERSION = 'sqlworkbench:GetNotebookVersion',
	GET_QUERY_EXECUTION_HISTORY = 'sqlworkbench:GetQueryExecutionHistory',
	GET_SAVED_QUERY = 'sqlworkbench:GetSavedQuery',
	GET_USER_INFO = 'sqlworkbench:GetUserInfo',
	GET_USER_WORKSPACE_SETTINGS = 'sqlworkbench:GetUserWorkspaceSettings',
	IMPORT_NOTEBOOK = 'sqlworkbench:ImportNotebook',
	LIST_CONNECTIONS = 'sqlworkbench:ListConnections',
	LIST_DATABASES = 'sqlworkbench:ListDatabases',
	LIST_FILES = 'sqlworkbench:ListFiles',
	LIST_NOTEBOOK_VERSIONS = 'sqlworkbench:ListNotebookVersions',
	LIST_NOTEBOOKS = 'sqlworkbench:ListNotebooks',
	LIST_QUERY_EXECUTION_HISTORY = 'sqlworkbench:ListQueryExecutionHistory',
	LIST_REDSHIFT_CLUSTERS = 'sqlworkbench:ListRedshiftClusters',
	LIST_SAMPLE_DATABASES = 'sqlworkbench:ListSampleDatabases',
	LIST_SAVED_QUERY_VERSIONS = 'sqlworkbench:ListSavedQueryVersions',
	LIST_TABS = 'sqlworkbench:ListTabs',
	LIST_TAGGED_RESOURCES = 'sqlworkbench:ListTaggedResources',
	LIST_TAGS_FOR_RESOURCE = 'sqlworkbench:ListTagsForResource',
	PUT_TAB = 'sqlworkbench:PutTab',
	PUT_USER_WORKSPACE_SETTINGS = 'sqlworkbench:PutUserWorkspaceSettings',
	RESTORE_NOTEBOOK_VERSION = 'sqlworkbench:RestoreNotebookVersion',
	TAG_RESOURCE = 'sqlworkbench:TagResource',
	UNTAG_RESOURCE = 'sqlworkbench:UntagResource',
	UPDATE_ACCOUNT_CONNECTION_SETTINGS = 'sqlworkbench:UpdateAccountConnectionSettings',
	UPDATE_ACCOUNT_EXPORT_SETTINGS = 'sqlworkbench:UpdateAccountExportSettings',
	UPDATE_ACCOUNT_GENERAL_SETTINGS = 'sqlworkbench:UpdateAccountGeneralSettings',
	UPDATE_CHART = 'sqlworkbench:UpdateChart',
	UPDATE_CONNECTION = 'sqlworkbench:UpdateConnection',
	UPDATE_FILE_FOLDER = 'sqlworkbench:UpdateFileFolder',
	UPDATE_FOLDER = 'sqlworkbench:UpdateFolder',
	UPDATE_NOTEBOOK = 'sqlworkbench:UpdateNotebook',
	UPDATE_NOTEBOOK_CELL_CONTENT = 'sqlworkbench:UpdateNotebookCellContent',
	UPDATE_NOTEBOOK_CELL_LAYOUT = 'sqlworkbench:UpdateNotebookCellLayout',
	UPDATE_SAVED_QUERY = 'sqlworkbench:UpdateSavedQuery',
}
export enum INSPECTOR2 {
	ASSOCIATE_MEMBER = 'inspector2:AssociateMember',
	BATCH_GET_ACCOUNT_STATUS = 'inspector2:BatchGetAccountStatus',
	BATCH_GET_FREE_TRIAL_INFO = 'inspector2:BatchGetFreeTrialInfo',
	CANCEL_FINDINGS_REPORT = 'inspector2:CancelFindingsReport',
	CREATE_FILTER = 'inspector2:CreateFilter',
	CREATE_FINDINGS_REPORT = 'inspector2:CreateFindingsReport',
	DELETE_FILTER = 'inspector2:DeleteFilter',
	DESCRIBE_ORGANIZATION_CONFIGURATION = 'inspector2:DescribeOrganizationConfiguration',
	DISABLE = 'inspector2:Disable',
	DISABLE_DELEGATED_ADMIN_ACCOUNT = 'inspector2:DisableDelegatedAdminAccount',
	DISASSOCIATE_MEMBER = 'inspector2:DisassociateMember',
	ENABLE = 'inspector2:Enable',
	ENABLE_DELEGATED_ADMIN_ACCOUNT = 'inspector2:EnableDelegatedAdminAccount',
	GET_CONFIGURATION = 'inspector2:GetConfiguration',
	GET_DELEGATED_ADMIN_ACCOUNT = 'inspector2:GetDelegatedAdminAccount',
	GET_FINDINGS_REPORT_STATUS = 'inspector2:GetFindingsReportStatus',
	GET_MEMBER = 'inspector2:GetMember',
	LIST_ACCOUNT_PERMISSIONS = 'inspector2:ListAccountPermissions',
	LIST_COVERAGE = 'inspector2:ListCoverage',
	LIST_COVERAGE_STATISTICS = 'inspector2:ListCoverageStatistics',
	LIST_DELEGATED_ADMIN_ACCOUNTS = 'inspector2:ListDelegatedAdminAccounts',
	LIST_FILTERS = 'inspector2:ListFilters',
	LIST_FINDING_AGGREGATIONS = 'inspector2:ListFindingAggregations',
	LIST_FINDINGS = 'inspector2:ListFindings',
	LIST_MEMBERS = 'inspector2:ListMembers',
	LIST_TAGS_FOR_RESOURCE = 'inspector2:ListTagsForResource',
	LIST_USAGE_TOTALS = 'inspector2:ListUsageTotals',
	TAG_RESOURCE = 'inspector2:TagResource',
	UNTAG_RESOURCE = 'inspector2:UntagResource',
	UPDATE_CONFIGURATION = 'inspector2:UpdateConfiguration',
	UPDATE_FILTER = 'inspector2:UpdateFilter',
	UPDATE_ORGANIZATION_CONFIGURATION = 'inspector2:UpdateOrganizationConfiguration',
}
export enum IAM_IDENTITY_CENTER_SUCCESSOR_TO_AWS_SINGLE_SIGNON_DIRECTORY {
	ADD_MEMBER_TO_GROUP = 'sso-directory:AddMemberToGroup',
	COMPLETE_VIRTUAL_MFA_DEVICE_REGISTRATION = 'sso-directory:CompleteVirtualMfaDeviceRegistration',
	COMPLETE_WEB_AUTHN_DEVICE_REGISTRATION = 'sso-directory:CompleteWebAuthnDeviceRegistration',
	CREATE_ALIAS = 'sso-directory:CreateAlias',
	CREATE_BEARER_TOKEN = 'sso-directory:CreateBearerToken',
	CREATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:CreateExternalIdPConfigurationForDirectory',
	CREATE_GROUP = 'sso-directory:CreateGroup',
	CREATE_PROVISIONING_TENANT = 'sso-directory:CreateProvisioningTenant',
	CREATE_USER = 'sso-directory:CreateUser',
	DELETE_BEARER_TOKEN = 'sso-directory:DeleteBearerToken',
	DELETE_EXTERNAL_ID_P_CERTIFICATE = 'sso-directory:DeleteExternalIdPCertificate',
	DELETE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:DeleteExternalIdPConfigurationForDirectory',
	DELETE_GROUP = 'sso-directory:DeleteGroup',
	DELETE_MFA_DEVICE_FOR_USER = 'sso-directory:DeleteMfaDeviceForUser',
	DELETE_PROVISIONING_TENANT = 'sso-directory:DeleteProvisioningTenant',
	DELETE_USER = 'sso-directory:DeleteUser',
	DESCRIBE_DIRECTORY = 'sso-directory:DescribeDirectory',
	DESCRIBE_GROUP = 'sso-directory:DescribeGroup',
	DESCRIBE_GROUPS = 'sso-directory:DescribeGroups',
	DESCRIBE_PROVISIONING_TENANT = 'sso-directory:DescribeProvisioningTenant',
	DESCRIBE_USER = 'sso-directory:DescribeUser',
	DESCRIBE_USER_BY_UNIQUE_ATTRIBUTE = 'sso-directory:DescribeUserByUniqueAttribute',
	DESCRIBE_USERS = 'sso-directory:DescribeUsers',
	DISABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:DisableExternalIdPConfigurationForDirectory',
	DISABLE_USER = 'sso-directory:DisableUser',
	ENABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:EnableExternalIdPConfigurationForDirectory',
	ENABLE_USER = 'sso-directory:EnableUser',
	GET_AWSSP_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:GetAWSSPConfigurationForDirectory',
	GET_USER_POOL_INFO = 'sso-directory:GetUserPoolInfo',
	IMPORT_EXTERNAL_ID_P_CERTIFICATE = 'sso-directory:ImportExternalIdPCertificate',
	IS_MEMBER_IN_GROUP = 'sso-directory:IsMemberInGroup',
	LIST_BEARER_TOKENS = 'sso-directory:ListBearerTokens',
	LIST_EXTERNAL_ID_P_CERTIFICATES = 'sso-directory:ListExternalIdPCertificates',
	LIST_EXTERNAL_ID_P_CONFIGURATIONS_FOR_DIRECTORY = 'sso-directory:ListExternalIdPConfigurationsForDirectory',
	LIST_GROUPS_FOR_MEMBER = 'sso-directory:ListGroupsForMember',
	LIST_GROUPS_FOR_USER = 'sso-directory:ListGroupsForUser',
	LIST_MEMBERS_IN_GROUP = 'sso-directory:ListMembersInGroup',
	LIST_MFA_DEVICES_FOR_USER = 'sso-directory:ListMfaDevicesForUser',
	LIST_PROVISIONING_TENANTS = 'sso-directory:ListProvisioningTenants',
	REMOVE_MEMBER_FROM_GROUP = 'sso-directory:RemoveMemberFromGroup',
	SEARCH_GROUPS = 'sso-directory:SearchGroups',
	SEARCH_USERS = 'sso-directory:SearchUsers',
	START_VIRTUAL_MFA_DEVICE_REGISTRATION = 'sso-directory:StartVirtualMfaDeviceRegistration',
	START_WEB_AUTHN_DEVICE_REGISTRATION = 'sso-directory:StartWebAuthnDeviceRegistration',
	UPDATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'sso-directory:UpdateExternalIdPConfigurationForDirectory',
	UPDATE_GROUP = 'sso-directory:UpdateGroup',
	UPDATE_GROUP_DISPLAY_NAME = 'sso-directory:UpdateGroupDisplayName',
	UPDATE_MFA_DEVICE_FOR_USER = 'sso-directory:UpdateMfaDeviceForUser',
	UPDATE_PASSWORD = 'sso-directory:UpdatePassword',
	UPDATE_USER = 'sso-directory:UpdateUser',
	UPDATE_USER_NAME = 'sso-directory:UpdateUserName',
	VERIFY_EMAIL = 'sso-directory:VerifyEmail',
}
export enum DOCUMENTDB_ELASTIC_CLUSTERS {
	CREATE_CLUSTER = 'docdb-elastic:CreateCluster',
	CREATE_CLUSTER_SNAPSHOT = 'docdb-elastic:CreateClusterSnapshot',
	DELETE_CLUSTER = 'docdb-elastic:DeleteCluster',
	DELETE_CLUSTER_SNAPSHOT = 'docdb-elastic:DeleteClusterSnapshot',
	GET_CLUSTER = 'docdb-elastic:GetCluster',
	GET_CLUSTER_SNAPSHOT = 'docdb-elastic:GetClusterSnapshot',
	LIST_CLUSTER_SNAPSHOTS = 'docdb-elastic:ListClusterSnapshots',
	LIST_CLUSTERS = 'docdb-elastic:ListClusters',
	LIST_TAGS_FOR_RESOURCE = 'docdb-elastic:ListTagsForResource',
	RESTORE_CLUSTER_FROM_SNAPSHOT = 'docdb-elastic:RestoreClusterFromSnapshot',
	TAG_RESOURCE = 'docdb-elastic:TagResource',
	UNTAG_RESOURCE = 'docdb-elastic:UntagResource',
	UPDATE_CLUSTER = 'docdb-elastic:UpdateCluster',
}
export enum VPC_LATTICE_SERVICES {
	INVOKE = 'vpc-lattice-svcs:Invoke',
}
export enum IOT_JOBS_DATAPLANE {
	DESCRIBE_JOB_EXECUTION = 'iotjobsdata:DescribeJobExecution',
	GET_PENDING_JOB_EXECUTIONS = 'iotjobsdata:GetPendingJobExecutions',
	START_NEXT_PENDING_JOB_EXECUTION = 'iotjobsdata:StartNextPendingJobExecution',
	UPDATE_JOB_EXECUTION = 'iotjobsdata:UpdateJobExecution',
}
export enum APPFLOW {
	CREATE_CONNECTOR_PROFILE = 'appflow:CreateConnectorProfile',
	CREATE_FLOW = 'appflow:CreateFlow',
	DELETE_CONNECTOR_PROFILE = 'appflow:DeleteConnectorProfile',
	DELETE_FLOW = 'appflow:DeleteFlow',
	DESCRIBE_CONNECTOR = 'appflow:DescribeConnector',
	DESCRIBE_CONNECTOR_ENTITY = 'appflow:DescribeConnectorEntity',
	DESCRIBE_CONNECTOR_FIELDS = 'appflow:DescribeConnectorFields',
	DESCRIBE_CONNECTOR_PROFILES = 'appflow:DescribeConnectorProfiles',
	DESCRIBE_CONNECTORS = 'appflow:DescribeConnectors',
	DESCRIBE_FLOW = 'appflow:DescribeFlow',
	DESCRIBE_FLOW_EXECUTION = 'appflow:DescribeFlowExecution',
	DESCRIBE_FLOW_EXECUTION_RECORDS = 'appflow:DescribeFlowExecutionRecords',
	DESCRIBE_FLOWS = 'appflow:DescribeFlows',
	LIST_CONNECTOR_ENTITIES = 'appflow:ListConnectorEntities',
	LIST_CONNECTOR_FIELDS = 'appflow:ListConnectorFields',
	LIST_CONNECTORS = 'appflow:ListConnectors',
	LIST_FLOWS = 'appflow:ListFlows',
	LIST_TAGS_FOR_RESOURCE = 'appflow:ListTagsForResource',
	REGISTER_CONNECTOR = 'appflow:RegisterConnector',
	RUN_FLOW = 'appflow:RunFlow',
	START_FLOW = 'appflow:StartFlow',
	STOP_FLOW = 'appflow:StopFlow',
	TAG_RESOURCE = 'appflow:TagResource',
	UN_REGISTER_CONNECTOR = 'appflow:UnRegisterConnector',
	UNTAG_RESOURCE = 'appflow:UntagResource',
	UPDATE_CONNECTOR_PROFILE = 'appflow:UpdateConnectorProfile',
	UPDATE_CONNECTOR_REGISTRATION = 'appflow:UpdateConnectorRegistration',
	UPDATE_FLOW = 'appflow:UpdateFlow',
	USE_CONNECTOR_PROFILE = 'appflow:UseConnectorProfile',
}
export enum TRUSTED_ADVISOR {
	DELETE_NOTIFICATION_CONFIGURATION_FOR_DELEGATED_ADMIN = 'trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin',
	DESCRIBE_ACCOUNT = 'trustedadvisor:DescribeAccount',
	DESCRIBE_ACCOUNT_ACCESS = 'trustedadvisor:DescribeAccountAccess',
	DESCRIBE_CHECK_ITEMS = 'trustedadvisor:DescribeCheckItems',
	DESCRIBE_CHECK_REFRESH_STATUSES = 'trustedadvisor:DescribeCheckRefreshStatuses',
	DESCRIBE_CHECK_SUMMARIES = 'trustedadvisor:DescribeCheckSummaries',
	DESCRIBE_CHECKS = 'trustedadvisor:DescribeChecks',
	DESCRIBE_NOTIFICATION_CONFIGURATIONS = 'trustedadvisor:DescribeNotificationConfigurations',
	DESCRIBE_NOTIFICATION_PREFERENCES = 'trustedadvisor:DescribeNotificationPreferences',
	DESCRIBE_ORGANIZATION = 'trustedadvisor:DescribeOrganization',
	DESCRIBE_ORGANIZATION_ACCOUNTS = 'trustedadvisor:DescribeOrganizationAccounts',
	DESCRIBE_REPORTS = 'trustedadvisor:DescribeReports',
	DESCRIBE_RISK = 'trustedadvisor:DescribeRisk',
	DESCRIBE_RISK_RESOURCES = 'trustedadvisor:DescribeRiskResources',
	DESCRIBE_RISKS = 'trustedadvisor:DescribeRisks',
	DESCRIBE_SERVICE_METADATA = 'trustedadvisor:DescribeServiceMetadata',
	DOWNLOAD_RISK = 'trustedadvisor:DownloadRisk',
	EXCLUDE_CHECK_ITEMS = 'trustedadvisor:ExcludeCheckItems',
	GENERATE_REPORT = 'trustedadvisor:GenerateReport',
	INCLUDE_CHECK_ITEMS = 'trustedadvisor:IncludeCheckItems',
	LIST_ACCOUNTS_FOR_PARENT = 'trustedadvisor:ListAccountsForParent',
	LIST_ORGANIZATIONAL_UNITS_FOR_PARENT = 'trustedadvisor:ListOrganizationalUnitsForParent',
	LIST_ROOTS = 'trustedadvisor:ListRoots',
	REFRESH_CHECK = 'trustedadvisor:RefreshCheck',
	SET_ACCOUNT_ACCESS = 'trustedadvisor:SetAccountAccess',
	SET_ORGANIZATION_ACCESS = 'trustedadvisor:SetOrganizationAccess',
	UPDATE_NOTIFICATION_CONFIGURATIONS = 'trustedadvisor:UpdateNotificationConfigurations',
	UPDATE_NOTIFICATION_PREFERENCES = 'trustedadvisor:UpdateNotificationPreferences',
	UPDATE_RISK_STATUS = 'trustedadvisor:UpdateRiskStatus',
}
export enum CONFIG {
	BATCH_GET_AGGREGATE_RESOURCE_CONFIG = 'config:BatchGetAggregateResourceConfig',
	BATCH_GET_RESOURCE_CONFIG = 'config:BatchGetResourceConfig',
	DELETE_AGGREGATION_AUTHORIZATION = 'config:DeleteAggregationAuthorization',
	DELETE_CONFIG_RULE = 'config:DeleteConfigRule',
	DELETE_CONFIGURATION_AGGREGATOR = 'config:DeleteConfigurationAggregator',
	DELETE_CONFIGURATION_RECORDER = 'config:DeleteConfigurationRecorder',
	DELETE_CONFORMANCE_PACK = 'config:DeleteConformancePack',
	DELETE_DELIVERY_CHANNEL = 'config:DeleteDeliveryChannel',
	DELETE_EVALUATION_RESULTS = 'config:DeleteEvaluationResults',
	DELETE_ORGANIZATION_CONFIG_RULE = 'config:DeleteOrganizationConfigRule',
	DELETE_ORGANIZATION_CONFORMANCE_PACK = 'config:DeleteOrganizationConformancePack',
	DELETE_PENDING_AGGREGATION_REQUEST = 'config:DeletePendingAggregationRequest',
	DELETE_REMEDIATION_CONFIGURATION = 'config:DeleteRemediationConfiguration',
	DELETE_REMEDIATION_EXCEPTIONS = 'config:DeleteRemediationExceptions',
	DELETE_RESOURCE_CONFIG = 'config:DeleteResourceConfig',
	DELETE_RETENTION_CONFIGURATION = 'config:DeleteRetentionConfiguration',
	DELETE_STORED_QUERY = 'config:DeleteStoredQuery',
	DELIVER_CONFIG_SNAPSHOT = 'config:DeliverConfigSnapshot',
	DESCRIBE_AGGREGATE_COMPLIANCE_BY_CONFIG_RULES = 'config:DescribeAggregateComplianceByConfigRules',
	DESCRIBE_AGGREGATE_COMPLIANCE_BY_CONFORMANCE_PACKS = 'config:DescribeAggregateComplianceByConformancePacks',
	DESCRIBE_AGGREGATION_AUTHORIZATIONS = 'config:DescribeAggregationAuthorizations',
	DESCRIBE_COMPLIANCE_BY_CONFIG_RULE = 'config:DescribeComplianceByConfigRule',
	DESCRIBE_COMPLIANCE_BY_RESOURCE = 'config:DescribeComplianceByResource',
	DESCRIBE_CONFIG_RULE_EVALUATION_STATUS = 'config:DescribeConfigRuleEvaluationStatus',
	DESCRIBE_CONFIG_RULES = 'config:DescribeConfigRules',
	DESCRIBE_CONFIGURATION_AGGREGATOR_SOURCES_STATUS = 'config:DescribeConfigurationAggregatorSourcesStatus',
	DESCRIBE_CONFIGURATION_AGGREGATORS = 'config:DescribeConfigurationAggregators',
	DESCRIBE_CONFIGURATION_RECORDER_STATUS = 'config:DescribeConfigurationRecorderStatus',
	DESCRIBE_CONFIGURATION_RECORDERS = 'config:DescribeConfigurationRecorders',
	DESCRIBE_CONFORMANCE_PACK_COMPLIANCE = 'config:DescribeConformancePackCompliance',
	DESCRIBE_CONFORMANCE_PACK_STATUS = 'config:DescribeConformancePackStatus',
	DESCRIBE_CONFORMANCE_PACKS = 'config:DescribeConformancePacks',
	DESCRIBE_DELIVERY_CHANNEL_STATUS = 'config:DescribeDeliveryChannelStatus',
	DESCRIBE_DELIVERY_CHANNELS = 'config:DescribeDeliveryChannels',
	DESCRIBE_ORGANIZATION_CONFIG_RULE_STATUSES = 'config:DescribeOrganizationConfigRuleStatuses',
	DESCRIBE_ORGANIZATION_CONFIG_RULES = 'config:DescribeOrganizationConfigRules',
	DESCRIBE_ORGANIZATION_CONFORMANCE_PACK_STATUSES = 'config:DescribeOrganizationConformancePackStatuses',
	DESCRIBE_ORGANIZATION_CONFORMANCE_PACKS = 'config:DescribeOrganizationConformancePacks',
	DESCRIBE_PENDING_AGGREGATION_REQUESTS = 'config:DescribePendingAggregationRequests',
	DESCRIBE_REMEDIATION_CONFIGURATIONS = 'config:DescribeRemediationConfigurations',
	DESCRIBE_REMEDIATION_EXCEPTIONS = 'config:DescribeRemediationExceptions',
	DESCRIBE_REMEDIATION_EXECUTION_STATUS = 'config:DescribeRemediationExecutionStatus',
	DESCRIBE_RETENTION_CONFIGURATIONS = 'config:DescribeRetentionConfigurations',
	GET_AGGREGATE_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'config:GetAggregateComplianceDetailsByConfigRule',
	GET_AGGREGATE_CONFIG_RULE_COMPLIANCE_SUMMARY = 'config:GetAggregateConfigRuleComplianceSummary',
	GET_AGGREGATE_CONFORMANCE_PACK_COMPLIANCE_SUMMARY = 'config:GetAggregateConformancePackComplianceSummary',
	GET_AGGREGATE_DISCOVERED_RESOURCE_COUNTS = 'config:GetAggregateDiscoveredResourceCounts',
	GET_AGGREGATE_RESOURCE_CONFIG = 'config:GetAggregateResourceConfig',
	GET_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'config:GetComplianceDetailsByConfigRule',
	GET_COMPLIANCE_DETAILS_BY_RESOURCE = 'config:GetComplianceDetailsByResource',
	GET_COMPLIANCE_SUMMARY_BY_CONFIG_RULE = 'config:GetComplianceSummaryByConfigRule',
	GET_COMPLIANCE_SUMMARY_BY_RESOURCE_TYPE = 'config:GetComplianceSummaryByResourceType',
	GET_CONFORMANCE_PACK_COMPLIANCE_DETAILS = 'config:GetConformancePackComplianceDetails',
	GET_CONFORMANCE_PACK_COMPLIANCE_SUMMARY = 'config:GetConformancePackComplianceSummary',
	GET_CUSTOM_RULE_POLICY = 'config:GetCustomRulePolicy',
	GET_DISCOVERED_RESOURCE_COUNTS = 'config:GetDiscoveredResourceCounts',
	GET_ORGANIZATION_CONFIG_RULE_DETAILED_STATUS = 'config:GetOrganizationConfigRuleDetailedStatus',
	GET_ORGANIZATION_CONFORMANCE_PACK_DETAILED_STATUS = 'config:GetOrganizationConformancePackDetailedStatus',
	GET_ORGANIZATION_CUSTOM_RULE_POLICY = 'config:GetOrganizationCustomRulePolicy',
	GET_RESOURCE_CONFIG_HISTORY = 'config:GetResourceConfigHistory',
	GET_STORED_QUERY = 'config:GetStoredQuery',
	LIST_AGGREGATE_DISCOVERED_RESOURCES = 'config:ListAggregateDiscoveredResources',
	LIST_CONFORMANCE_PACK_COMPLIANCE_SCORES = 'config:ListConformancePackComplianceScores',
	LIST_DISCOVERED_RESOURCES = 'config:ListDiscoveredResources',
	LIST_STORED_QUERIES = 'config:ListStoredQueries',
	LIST_TAGS_FOR_RESOURCE = 'config:ListTagsForResource',
	PUT_AGGREGATION_AUTHORIZATION = 'config:PutAggregationAuthorization',
	PUT_CONFIG_RULE = 'config:PutConfigRule',
	PUT_CONFIGURATION_AGGREGATOR = 'config:PutConfigurationAggregator',
	PUT_CONFIGURATION_RECORDER = 'config:PutConfigurationRecorder',
	PUT_CONFORMANCE_PACK = 'config:PutConformancePack',
	PUT_DELIVERY_CHANNEL = 'config:PutDeliveryChannel',
	PUT_EVALUATIONS = 'config:PutEvaluations',
	PUT_EXTERNAL_EVALUATION = 'config:PutExternalEvaluation',
	PUT_ORGANIZATION_CONFIG_RULE = 'config:PutOrganizationConfigRule',
	PUT_ORGANIZATION_CONFORMANCE_PACK = 'config:PutOrganizationConformancePack',
	PUT_REMEDIATION_CONFIGURATIONS = 'config:PutRemediationConfigurations',
	PUT_REMEDIATION_EXCEPTIONS = 'config:PutRemediationExceptions',
	PUT_RESOURCE_CONFIG = 'config:PutResourceConfig',
	PUT_RETENTION_CONFIGURATION = 'config:PutRetentionConfiguration',
	PUT_STORED_QUERY = 'config:PutStoredQuery',
	SELECT_AGGREGATE_RESOURCE_CONFIG = 'config:SelectAggregateResourceConfig',
	SELECT_RESOURCE_CONFIG = 'config:SelectResourceConfig',
	START_CONFIG_RULES_EVALUATION = 'config:StartConfigRulesEvaluation',
	START_CONFIGURATION_RECORDER = 'config:StartConfigurationRecorder',
	START_REMEDIATION_EXECUTION = 'config:StartRemediationExecution',
	STOP_CONFIGURATION_RECORDER = 'config:StopConfigurationRecorder',
	TAG_RESOURCE = 'config:TagResource',
	UNTAG_RESOURCE = 'config:UntagResource',
}
export enum RDS {
	ADD_ROLE_TO_DB_CLUSTER = 'rds:AddRoleToDBCluster',
	ADD_ROLE_TO_DB_INSTANCE = 'rds:AddRoleToDBInstance',
	ADD_SOURCE_IDENTIFIER_TO_SUBSCRIPTION = 'rds:AddSourceIdentifierToSubscription',
	ADD_TAGS_TO_RESOURCE = 'rds:AddTagsToResource',
	APPLY_PENDING_MAINTENANCE_ACTION = 'rds:ApplyPendingMaintenanceAction',
	AUTHORIZE_DB_SECURITY_GROUP_INGRESS = 'rds:AuthorizeDBSecurityGroupIngress',
	BACKTRACK_DB_CLUSTER = 'rds:BacktrackDBCluster',
	CANCEL_EXPORT_TASK = 'rds:CancelExportTask',
	COPY_DB_CLUSTER_PARAMETER_GROUP = 'rds:CopyDBClusterParameterGroup',
	COPY_DB_CLUSTER_SNAPSHOT = 'rds:CopyDBClusterSnapshot',
	COPY_DB_PARAMETER_GROUP = 'rds:CopyDBParameterGroup',
	COPY_DB_SNAPSHOT = 'rds:CopyDBSnapshot',
	COPY_OPTION_GROUP = 'rds:CopyOptionGroup',
	CREATE_BLUE_GREEN_DEPLOYMENT = 'rds:CreateBlueGreenDeployment',
	CREATE_CUSTOM_DB_ENGINE_VERSION = 'rds:CreateCustomDBEngineVersion',
	CREATE_DB_CLUSTER = 'rds:CreateDBCluster',
	CREATE_DB_CLUSTER_ENDPOINT = 'rds:CreateDBClusterEndpoint',
	CREATE_DB_CLUSTER_PARAMETER_GROUP = 'rds:CreateDBClusterParameterGroup',
	CREATE_DB_CLUSTER_SNAPSHOT = 'rds:CreateDBClusterSnapshot',
	CREATE_DB_INSTANCE = 'rds:CreateDBInstance',
	CREATE_DB_INSTANCE_READ_REPLICA = 'rds:CreateDBInstanceReadReplica',
	CREATE_DB_PARAMETER_GROUP = 'rds:CreateDBParameterGroup',
	CREATE_DB_PROXY = 'rds:CreateDBProxy',
	CREATE_DB_PROXY_ENDPOINT = 'rds:CreateDBProxyEndpoint',
	CREATE_DB_SECURITY_GROUP = 'rds:CreateDBSecurityGroup',
	CREATE_DB_SNAPSHOT = 'rds:CreateDBSnapshot',
	CREATE_DB_SUBNET_GROUP = 'rds:CreateDBSubnetGroup',
	CREATE_EVENT_SUBSCRIPTION = 'rds:CreateEventSubscription',
	CREATE_GLOBAL_CLUSTER = 'rds:CreateGlobalCluster',
	CREATE_OPTION_GROUP = 'rds:CreateOptionGroup',
	CROSS_REGION_COMMUNICATION = 'rds:CrossRegionCommunication',
	DELETE_BLUE_GREEN_DEPLOYMENT = 'rds:DeleteBlueGreenDeployment',
	DELETE_CUSTOM_DB_ENGINE_VERSION = 'rds:DeleteCustomDBEngineVersion',
	DELETE_DB_CLUSTER = 'rds:DeleteDBCluster',
	DELETE_DB_CLUSTER_ENDPOINT = 'rds:DeleteDBClusterEndpoint',
	DELETE_DB_CLUSTER_PARAMETER_GROUP = 'rds:DeleteDBClusterParameterGroup',
	DELETE_DB_CLUSTER_SNAPSHOT = 'rds:DeleteDBClusterSnapshot',
	DELETE_DB_INSTANCE = 'rds:DeleteDBInstance',
	DELETE_DB_INSTANCE_AUTOMATED_BACKUP = 'rds:DeleteDBInstanceAutomatedBackup',
	DELETE_DB_PARAMETER_GROUP = 'rds:DeleteDBParameterGroup',
	DELETE_DB_PROXY = 'rds:DeleteDBProxy',
	DELETE_DB_PROXY_ENDPOINT = 'rds:DeleteDBProxyEndpoint',
	DELETE_DB_SECURITY_GROUP = 'rds:DeleteDBSecurityGroup',
	DELETE_DB_SNAPSHOT = 'rds:DeleteDBSnapshot',
	DELETE_DB_SUBNET_GROUP = 'rds:DeleteDBSubnetGroup',
	DELETE_EVENT_SUBSCRIPTION = 'rds:DeleteEventSubscription',
	DELETE_GLOBAL_CLUSTER = 'rds:DeleteGlobalCluster',
	DELETE_OPTION_GROUP = 'rds:DeleteOptionGroup',
	DEREGISTER_DB_PROXY_TARGETS = 'rds:DeregisterDBProxyTargets',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'rds:DescribeAccountAttributes',
	DESCRIBE_BLUE_GREEN_DEPLOYMENTS = 'rds:DescribeBlueGreenDeployments',
	DESCRIBE_CERTIFICATES = 'rds:DescribeCertificates',
	DESCRIBE_DB_CLUSTER_BACKTRACKS = 'rds:DescribeDBClusterBacktracks',
	DESCRIBE_DB_CLUSTER_ENDPOINTS = 'rds:DescribeDBClusterEndpoints',
	DESCRIBE_DB_CLUSTER_PARAMETER_GROUPS = 'rds:DescribeDBClusterParameterGroups',
	DESCRIBE_DB_CLUSTER_PARAMETERS = 'rds:DescribeDBClusterParameters',
	DESCRIBE_DB_CLUSTER_SNAPSHOT_ATTRIBUTES = 'rds:DescribeDBClusterSnapshotAttributes',
	DESCRIBE_DB_CLUSTER_SNAPSHOTS = 'rds:DescribeDBClusterSnapshots',
	DESCRIBE_DB_CLUSTERS = 'rds:DescribeDBClusters',
	DESCRIBE_DB_ENGINE_VERSIONS = 'rds:DescribeDBEngineVersions',
	DESCRIBE_DB_INSTANCE_AUTOMATED_BACKUPS = 'rds:DescribeDBInstanceAutomatedBackups',
	DESCRIBE_DB_INSTANCES = 'rds:DescribeDBInstances',
	DESCRIBE_DB_LOG_FILES = 'rds:DescribeDBLogFiles',
	DESCRIBE_DB_PARAMETER_GROUPS = 'rds:DescribeDBParameterGroups',
	DESCRIBE_DB_PARAMETERS = 'rds:DescribeDBParameters',
	DESCRIBE_DB_PROXIES = 'rds:DescribeDBProxies',
	DESCRIBE_DB_PROXY_ENDPOINTS = 'rds:DescribeDBProxyEndpoints',
	DESCRIBE_DB_PROXY_TARGET_GROUPS = 'rds:DescribeDBProxyTargetGroups',
	DESCRIBE_DB_PROXY_TARGETS = 'rds:DescribeDBProxyTargets',
	DESCRIBE_DB_SECURITY_GROUPS = 'rds:DescribeDBSecurityGroups',
	DESCRIBE_DB_SNAPSHOT_ATTRIBUTES = 'rds:DescribeDBSnapshotAttributes',
	DESCRIBE_DB_SNAPSHOTS = 'rds:DescribeDBSnapshots',
	DESCRIBE_DB_SUBNET_GROUPS = 'rds:DescribeDBSubnetGroups',
	DESCRIBE_ENGINE_DEFAULT_CLUSTER_PARAMETERS = 'rds:DescribeEngineDefaultClusterParameters',
	DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'rds:DescribeEngineDefaultParameters',
	DESCRIBE_EVENT_CATEGORIES = 'rds:DescribeEventCategories',
	DESCRIBE_EVENT_SUBSCRIPTIONS = 'rds:DescribeEventSubscriptions',
	DESCRIBE_EVENTS = 'rds:DescribeEvents',
	DESCRIBE_EXPORT_TASKS = 'rds:DescribeExportTasks',
	DESCRIBE_GLOBAL_CLUSTERS = 'rds:DescribeGlobalClusters',
	DESCRIBE_OPTION_GROUP_OPTIONS = 'rds:DescribeOptionGroupOptions',
	DESCRIBE_OPTION_GROUPS = 'rds:DescribeOptionGroups',
	DESCRIBE_ORDERABLE_DB_INSTANCE_OPTIONS = 'rds:DescribeOrderableDBInstanceOptions',
	DESCRIBE_PENDING_MAINTENANCE_ACTIONS = 'rds:DescribePendingMaintenanceActions',
	DESCRIBE_RECOMMENDATION_GROUPS = 'rds:DescribeRecommendationGroups',
	DESCRIBE_RECOMMENDATIONS = 'rds:DescribeRecommendations',
	DESCRIBE_RESERVED_DB_INSTANCES = 'rds:DescribeReservedDBInstances',
	DESCRIBE_RESERVED_DB_INSTANCES_OFFERINGS = 'rds:DescribeReservedDBInstancesOfferings',
	DESCRIBE_SOURCE_REGIONS = 'rds:DescribeSourceRegions',
	DESCRIBE_VALID_DB_INSTANCE_MODIFICATIONS = 'rds:DescribeValidDBInstanceModifications',
	DOWNLOAD_COMPLETE_DB_LOG_FILE = 'rds:DownloadCompleteDBLogFile',
	DOWNLOAD_DB_LOG_FILE_PORTION = 'rds:DownloadDBLogFilePortion',
	FAILOVER_DB_CLUSTER = 'rds:FailoverDBCluster',
	FAILOVER_GLOBAL_CLUSTER = 'rds:FailoverGlobalCluster',
	LIST_TAGS_FOR_RESOURCE = 'rds:ListTagsForResource',
	MODIFY_ACTIVITY_STREAM = 'rds:ModifyActivityStream',
	MODIFY_CERTIFICATES = 'rds:ModifyCertificates',
	MODIFY_CURRENT_DB_CLUSTER_CAPACITY = 'rds:ModifyCurrentDBClusterCapacity',
	MODIFY_CUSTOM_DB_ENGINE_VERSION = 'rds:ModifyCustomDBEngineVersion',
	MODIFY_DB_CLUSTER = 'rds:ModifyDBCluster',
	MODIFY_DB_CLUSTER_ENDPOINT = 'rds:ModifyDBClusterEndpoint',
	MODIFY_DB_CLUSTER_PARAMETER_GROUP = 'rds:ModifyDBClusterParameterGroup',
	MODIFY_DB_CLUSTER_SNAPSHOT_ATTRIBUTE = 'rds:ModifyDBClusterSnapshotAttribute',
	MODIFY_DB_INSTANCE = 'rds:ModifyDBInstance',
	MODIFY_DB_PARAMETER_GROUP = 'rds:ModifyDBParameterGroup',
	MODIFY_DB_PROXY = 'rds:ModifyDBProxy',
	MODIFY_DB_PROXY_ENDPOINT = 'rds:ModifyDBProxyEndpoint',
	MODIFY_DB_PROXY_TARGET_GROUP = 'rds:ModifyDBProxyTargetGroup',
	MODIFY_DB_SNAPSHOT = 'rds:ModifyDBSnapshot',
	MODIFY_DB_SNAPSHOT_ATTRIBUTE = 'rds:ModifyDBSnapshotAttribute',
	MODIFY_DB_SUBNET_GROUP = 'rds:ModifyDBSubnetGroup',
	MODIFY_EVENT_SUBSCRIPTION = 'rds:ModifyEventSubscription',
	MODIFY_GLOBAL_CLUSTER = 'rds:ModifyGlobalCluster',
	MODIFY_OPTION_GROUP = 'rds:ModifyOptionGroup',
	MODIFY_RECOMMENDATION = 'rds:ModifyRecommendation',
	PROMOTE_READ_REPLICA = 'rds:PromoteReadReplica',
	PROMOTE_READ_REPLICA_DB_CLUSTER = 'rds:PromoteReadReplicaDBCluster',
	PURCHASE_RESERVED_DB_INSTANCES_OFFERING = 'rds:PurchaseReservedDBInstancesOffering',
	REBOOT_DB_CLUSTER = 'rds:RebootDBCluster',
	REBOOT_DB_INSTANCE = 'rds:RebootDBInstance',
	REGISTER_DB_PROXY_TARGETS = 'rds:RegisterDBProxyTargets',
	REMOVE_FROM_GLOBAL_CLUSTER = 'rds:RemoveFromGlobalCluster',
	REMOVE_ROLE_FROM_DB_CLUSTER = 'rds:RemoveRoleFromDBCluster',
	REMOVE_ROLE_FROM_DB_INSTANCE = 'rds:RemoveRoleFromDBInstance',
	REMOVE_SOURCE_IDENTIFIER_FROM_SUBSCRIPTION = 'rds:RemoveSourceIdentifierFromSubscription',
	REMOVE_TAGS_FROM_RESOURCE = 'rds:RemoveTagsFromResource',
	RESET_DB_CLUSTER_PARAMETER_GROUP = 'rds:ResetDBClusterParameterGroup',
	RESET_DB_PARAMETER_GROUP = 'rds:ResetDBParameterGroup',
	RESTORE_DB_CLUSTER_FROM_S_3 = 'rds:RestoreDBClusterFromS3',
	RESTORE_DB_CLUSTER_FROM_SNAPSHOT = 'rds:RestoreDBClusterFromSnapshot',
	RESTORE_DB_CLUSTER_TO_POINT_IN_TIME = 'rds:RestoreDBClusterToPointInTime',
	RESTORE_DB_INSTANCE_FROM_DB_SNAPSHOT = 'rds:RestoreDBInstanceFromDBSnapshot',
	RESTORE_DB_INSTANCE_FROM_S_3 = 'rds:RestoreDBInstanceFromS3',
	RESTORE_DB_INSTANCE_TO_POINT_IN_TIME = 'rds:RestoreDBInstanceToPointInTime',
	REVOKE_DB_SECURITY_GROUP_INGRESS = 'rds:RevokeDBSecurityGroupIngress',
	START_ACTIVITY_STREAM = 'rds:StartActivityStream',
	START_DB_CLUSTER = 'rds:StartDBCluster',
	START_DB_INSTANCE = 'rds:StartDBInstance',
	START_DB_INSTANCE_AUTOMATED_BACKUPS_REPLICATION = 'rds:StartDBInstanceAutomatedBackupsReplication',
	START_EXPORT_TASK = 'rds:StartExportTask',
	STOP_ACTIVITY_STREAM = 'rds:StopActivityStream',
	STOP_DB_CLUSTER = 'rds:StopDBCluster',
	STOP_DB_INSTANCE = 'rds:StopDBInstance',
	STOP_DB_INSTANCE_AUTOMATED_BACKUPS_REPLICATION = 'rds:StopDBInstanceAutomatedBackupsReplication',
	SWITCHOVER_BLUE_GREEN_DEPLOYMENT = 'rds:SwitchoverBlueGreenDeployment',
	SWITCHOVER_READ_REPLICA = 'rds:SwitchoverReadReplica',
}
export enum SIMPLE_WORKFLOW_SERVICE {
	CANCEL_TIMER = 'swf:CancelTimer',
	CANCEL_WORKFLOW_EXECUTION = 'swf:CancelWorkflowExecution',
	COMPLETE_WORKFLOW_EXECUTION = 'swf:CompleteWorkflowExecution',
	CONTINUE_AS_NEW_WORKFLOW_EXECUTION = 'swf:ContinueAsNewWorkflowExecution',
	COUNT_CLOSED_WORKFLOW_EXECUTIONS = 'swf:CountClosedWorkflowExecutions',
	COUNT_OPEN_WORKFLOW_EXECUTIONS = 'swf:CountOpenWorkflowExecutions',
	COUNT_PENDING_ACTIVITY_TASKS = 'swf:CountPendingActivityTasks',
	COUNT_PENDING_DECISION_TASKS = 'swf:CountPendingDecisionTasks',
	DEPRECATE_ACTIVITY_TYPE = 'swf:DeprecateActivityType',
	DEPRECATE_DOMAIN = 'swf:DeprecateDomain',
	DEPRECATE_WORKFLOW_TYPE = 'swf:DeprecateWorkflowType',
	DESCRIBE_ACTIVITY_TYPE = 'swf:DescribeActivityType',
	DESCRIBE_DOMAIN = 'swf:DescribeDomain',
	DESCRIBE_WORKFLOW_EXECUTION = 'swf:DescribeWorkflowExecution',
	DESCRIBE_WORKFLOW_TYPE = 'swf:DescribeWorkflowType',
	FAIL_WORKFLOW_EXECUTION = 'swf:FailWorkflowExecution',
	GET_WORKFLOW_EXECUTION_HISTORY = 'swf:GetWorkflowExecutionHistory',
	LIST_ACTIVITY_TYPES = 'swf:ListActivityTypes',
	LIST_CLOSED_WORKFLOW_EXECUTIONS = 'swf:ListClosedWorkflowExecutions',
	LIST_DOMAINS = 'swf:ListDomains',
	LIST_OPEN_WORKFLOW_EXECUTIONS = 'swf:ListOpenWorkflowExecutions',
	LIST_TAGS_FOR_RESOURCE = 'swf:ListTagsForResource',
	LIST_WORKFLOW_TYPES = 'swf:ListWorkflowTypes',
	POLL_FOR_ACTIVITY_TASK = 'swf:PollForActivityTask',
	POLL_FOR_DECISION_TASK = 'swf:PollForDecisionTask',
	RECORD_ACTIVITY_TASK_HEARTBEAT = 'swf:RecordActivityTaskHeartbeat',
	RECORD_MARKER = 'swf:RecordMarker',
	REGISTER_ACTIVITY_TYPE = 'swf:RegisterActivityType',
	REGISTER_DOMAIN = 'swf:RegisterDomain',
	REGISTER_WORKFLOW_TYPE = 'swf:RegisterWorkflowType',
	REQUEST_CANCEL_ACTIVITY_TASK = 'swf:RequestCancelActivityTask',
	REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION = 'swf:RequestCancelExternalWorkflowExecution',
	REQUEST_CANCEL_WORKFLOW_EXECUTION = 'swf:RequestCancelWorkflowExecution',
	RESPOND_ACTIVITY_TASK_CANCELED = 'swf:RespondActivityTaskCanceled',
	RESPOND_ACTIVITY_TASK_COMPLETED = 'swf:RespondActivityTaskCompleted',
	RESPOND_ACTIVITY_TASK_FAILED = 'swf:RespondActivityTaskFailed',
	RESPOND_DECISION_TASK_COMPLETED = 'swf:RespondDecisionTaskCompleted',
	SCHEDULE_ACTIVITY_TASK = 'swf:ScheduleActivityTask',
	SIGNAL_EXTERNAL_WORKFLOW_EXECUTION = 'swf:SignalExternalWorkflowExecution',
	SIGNAL_WORKFLOW_EXECUTION = 'swf:SignalWorkflowExecution',
	START_CHILD_WORKFLOW_EXECUTION = 'swf:StartChildWorkflowExecution',
	START_TIMER = 'swf:StartTimer',
	START_WORKFLOW_EXECUTION = 'swf:StartWorkflowExecution',
	TAG_RESOURCE = 'swf:TagResource',
	TERMINATE_WORKFLOW_EXECUTION = 'swf:TerminateWorkflowExecution',
	UNDEPRECATE_ACTIVITY_TYPE = 'swf:UndeprecateActivityType',
	UNDEPRECATE_DOMAIN = 'swf:UndeprecateDomain',
	UNDEPRECATE_WORKFLOW_TYPE = 'swf:UndeprecateWorkflowType',
	UNTAG_RESOURCE = 'swf:UntagResource',
}
export enum APPSYNC {
	ASSOCIATE_API = 'appsync:AssociateApi',
	CREATE_API_CACHE = 'appsync:CreateApiCache',
	CREATE_API_KEY = 'appsync:CreateApiKey',
	CREATE_DATA_SOURCE = 'appsync:CreateDataSource',
	CREATE_DOMAIN_NAME = 'appsync:CreateDomainName',
	CREATE_FUNCTION = 'appsync:CreateFunction',
	CREATE_GRAPHQL_API = 'appsync:CreateGraphqlApi',
	CREATE_RESOLVER = 'appsync:CreateResolver',
	CREATE_TYPE = 'appsync:CreateType',
	DELETE_API_CACHE = 'appsync:DeleteApiCache',
	DELETE_API_KEY = 'appsync:DeleteApiKey',
	DELETE_DATA_SOURCE = 'appsync:DeleteDataSource',
	DELETE_DOMAIN_NAME = 'appsync:DeleteDomainName',
	DELETE_FUNCTION = 'appsync:DeleteFunction',
	DELETE_GRAPHQL_API = 'appsync:DeleteGraphqlApi',
	DELETE_RESOLVER = 'appsync:DeleteResolver',
	DELETE_TYPE = 'appsync:DeleteType',
	DISASSOCIATE_API = 'appsync:DisassociateApi',
	EVALUATE_MAPPING_TEMPLATE = 'appsync:EvaluateMappingTemplate',
	FLUSH_API_CACHE = 'appsync:FlushApiCache',
	GET_API_ASSOCIATION = 'appsync:GetApiAssociation',
	GET_API_CACHE = 'appsync:GetApiCache',
	GET_DATA_SOURCE = 'appsync:GetDataSource',
	GET_DOMAIN_NAME = 'appsync:GetDomainName',
	GET_FUNCTION = 'appsync:GetFunction',
	GET_GRAPHQL_API = 'appsync:GetGraphqlApi',
	GET_INTROSPECTION_SCHEMA = 'appsync:GetIntrospectionSchema',
	GET_RESOLVER = 'appsync:GetResolver',
	GET_SCHEMA_CREATION_STATUS = 'appsync:GetSchemaCreationStatus',
	GET_TYPE = 'appsync:GetType',
	GRAPH_QL = 'appsync:GraphQL',
	LIST_API_KEYS = 'appsync:ListApiKeys',
	LIST_DATA_SOURCES = 'appsync:ListDataSources',
	LIST_DOMAIN_NAMES = 'appsync:ListDomainNames',
	LIST_FUNCTIONS = 'appsync:ListFunctions',
	LIST_GRAPHQL_APIS = 'appsync:ListGraphqlApis',
	LIST_RESOLVERS = 'appsync:ListResolvers',
	LIST_RESOLVERS_BY_FUNCTION = 'appsync:ListResolversByFunction',
	LIST_TAGS_FOR_RESOURCE = 'appsync:ListTagsForResource',
	LIST_TYPES = 'appsync:ListTypes',
	SET_WEB_ACL = 'appsync:SetWebACL',
	START_SCHEMA_CREATION = 'appsync:StartSchemaCreation',
	TAG_RESOURCE = 'appsync:TagResource',
	UNTAG_RESOURCE = 'appsync:UntagResource',
	UPDATE_API_CACHE = 'appsync:UpdateApiCache',
	UPDATE_API_KEY = 'appsync:UpdateApiKey',
	UPDATE_DATA_SOURCE = 'appsync:UpdateDataSource',
	UPDATE_DOMAIN_NAME = 'appsync:UpdateDomainName',
	UPDATE_FUNCTION = 'appsync:UpdateFunction',
	UPDATE_GRAPHQL_API = 'appsync:UpdateGraphqlApi',
	UPDATE_RESOLVER = 'appsync:UpdateResolver',
	UPDATE_TYPE = 'appsync:UpdateType',
}
export enum CERTIFICATE_MANAGER {
	ADD_TAGS_TO_CERTIFICATE = 'acm:AddTagsToCertificate',
	DELETE_CERTIFICATE = 'acm:DeleteCertificate',
	DESCRIBE_CERTIFICATE = 'acm:DescribeCertificate',
	EXPORT_CERTIFICATE = 'acm:ExportCertificate',
	GET_ACCOUNT_CONFIGURATION = 'acm:GetAccountConfiguration',
	GET_CERTIFICATE = 'acm:GetCertificate',
	IMPORT_CERTIFICATE = 'acm:ImportCertificate',
	LIST_CERTIFICATES = 'acm:ListCertificates',
	LIST_TAGS_FOR_CERTIFICATE = 'acm:ListTagsForCertificate',
	PUT_ACCOUNT_CONFIGURATION = 'acm:PutAccountConfiguration',
	REMOVE_TAGS_FROM_CERTIFICATE = 'acm:RemoveTagsFromCertificate',
	RENEW_CERTIFICATE = 'acm:RenewCertificate',
	REQUEST_CERTIFICATE = 'acm:RequestCertificate',
	RESEND_VALIDATION_EMAIL = 'acm:ResendValidationEmail',
	UPDATE_CERTIFICATE_OPTIONS = 'acm:UpdateCertificateOptions',
}
export enum SYSTEMS_MANAGER_INCIDENT_MANAGER {
	CREATE_REPLICATION_SET = 'ssm-incidents:CreateReplicationSet',
	CREATE_RESPONSE_PLAN = 'ssm-incidents:CreateResponsePlan',
	CREATE_TIMELINE_EVENT = 'ssm-incidents:CreateTimelineEvent',
	DELETE_INCIDENT_RECORD = 'ssm-incidents:DeleteIncidentRecord',
	DELETE_REPLICATION_SET = 'ssm-incidents:DeleteReplicationSet',
	DELETE_RESOURCE_POLICY = 'ssm-incidents:DeleteResourcePolicy',
	DELETE_RESPONSE_PLAN = 'ssm-incidents:DeleteResponsePlan',
	DELETE_TIMELINE_EVENT = 'ssm-incidents:DeleteTimelineEvent',
	GET_INCIDENT_RECORD = 'ssm-incidents:GetIncidentRecord',
	GET_REPLICATION_SET = 'ssm-incidents:GetReplicationSet',
	GET_RESOURCE_POLICIES = 'ssm-incidents:GetResourcePolicies',
	GET_RESPONSE_PLAN = 'ssm-incidents:GetResponsePlan',
	GET_TIMELINE_EVENT = 'ssm-incidents:GetTimelineEvent',
	LIST_INCIDENT_RECORDS = 'ssm-incidents:ListIncidentRecords',
	LIST_RELATED_ITEMS = 'ssm-incidents:ListRelatedItems',
	LIST_REPLICATION_SETS = 'ssm-incidents:ListReplicationSets',
	LIST_RESPONSE_PLANS = 'ssm-incidents:ListResponsePlans',
	LIST_TAGS_FOR_RESOURCE = 'ssm-incidents:ListTagsForResource',
	LIST_TIMELINE_EVENTS = 'ssm-incidents:ListTimelineEvents',
	PUT_RESOURCE_POLICY = 'ssm-incidents:PutResourcePolicy',
	START_INCIDENT = 'ssm-incidents:StartIncident',
	TAG_RESOURCE = 'ssm-incidents:TagResource',
	UNTAG_RESOURCE = 'ssm-incidents:UntagResource',
	UPDATE_DELETION_PROTECTION = 'ssm-incidents:UpdateDeletionProtection',
	UPDATE_INCIDENT_RECORD = 'ssm-incidents:UpdateIncidentRecord',
	UPDATE_RELATED_ITEMS = 'ssm-incidents:UpdateRelatedItems',
	UPDATE_REPLICATION_SET = 'ssm-incidents:UpdateReplicationSet',
	UPDATE_RESPONSE_PLAN = 'ssm-incidents:UpdateResponsePlan',
	UPDATE_TIMELINE_EVENT = 'ssm-incidents:UpdateTimelineEvent',
}
export enum XRAY {
	BATCH_GET_TRACE_SUMMARY_BY_ID = 'xray:BatchGetTraceSummaryById',
	BATCH_GET_TRACES = 'xray:BatchGetTraces',
	CREATE_GROUP = 'xray:CreateGroup',
	CREATE_SAMPLING_RULE = 'xray:CreateSamplingRule',
	DELETE_GROUP = 'xray:DeleteGroup',
	DELETE_RESOURCE_POLICY = 'xray:DeleteResourcePolicy',
	DELETE_SAMPLING_RULE = 'xray:DeleteSamplingRule',
	GET_DISTINCT_TRACE_GRAPHS = 'xray:GetDistinctTraceGraphs',
	GET_ENCRYPTION_CONFIG = 'xray:GetEncryptionConfig',
	GET_GROUP = 'xray:GetGroup',
	GET_GROUPS = 'xray:GetGroups',
	GET_INSIGHT = 'xray:GetInsight',
	GET_INSIGHT_EVENTS = 'xray:GetInsightEvents',
	GET_INSIGHT_IMPACT_GRAPH = 'xray:GetInsightImpactGraph',
	GET_INSIGHT_SUMMARIES = 'xray:GetInsightSummaries',
	GET_SAMPLING_RULES = 'xray:GetSamplingRules',
	GET_SAMPLING_STATISTIC_SUMMARIES = 'xray:GetSamplingStatisticSummaries',
	GET_SAMPLING_TARGETS = 'xray:GetSamplingTargets',
	GET_SERVICE_GRAPH = 'xray:GetServiceGraph',
	GET_TIME_SERIES_SERVICE_STATISTICS = 'xray:GetTimeSeriesServiceStatistics',
	GET_TRACE_GRAPH = 'xray:GetTraceGraph',
	GET_TRACE_SUMMARIES = 'xray:GetTraceSummaries',
	LINK = 'xray:Link',
	LIST_RESOURCE_POLICIES = 'xray:ListResourcePolicies',
	LIST_TAGS_FOR_RESOURCE = 'xray:ListTagsForResource',
	PUT_ENCRYPTION_CONFIG = 'xray:PutEncryptionConfig',
	PUT_RESOURCE_POLICY = 'xray:PutResourcePolicy',
	PUT_TELEMETRY_RECORDS = 'xray:PutTelemetryRecords',
	PUT_TRACE_SEGMENTS = 'xray:PutTraceSegments',
	TAG_RESOURCE = 'xray:TagResource',
	UNTAG_RESOURCE = 'xray:UntagResource',
	UPDATE_GROUP = 'xray:UpdateGroup',
	UPDATE_SAMPLING_RULE = 'xray:UpdateSamplingRule',
}
export enum CLOUDWATCH_RUM {
	BATCH_CREATE_RUM_METRIC_DEFINITIONS = 'rum:BatchCreateRumMetricDefinitions',
	BATCH_DELETE_RUM_METRIC_DEFINITIONS = 'rum:BatchDeleteRumMetricDefinitions',
	BATCH_GET_RUM_METRIC_DEFINITIONS = 'rum:BatchGetRumMetricDefinitions',
	CREATE_APP_MONITOR = 'rum:CreateAppMonitor',
	DELETE_APP_MONITOR = 'rum:DeleteAppMonitor',
	DELETE_RUM_METRICS_DESTINATION = 'rum:DeleteRumMetricsDestination',
	GET_APP_MONITOR = 'rum:GetAppMonitor',
	GET_APP_MONITOR_DATA = 'rum:GetAppMonitorData',
	LIST_APP_MONITORS = 'rum:ListAppMonitors',
	LIST_RUM_METRICS_DESTINATIONS = 'rum:ListRumMetricsDestinations',
	LIST_TAGS_FOR_RESOURCE = 'rum:ListTagsForResource',
	PUT_RUM_EVENTS = 'rum:PutRumEvents',
	PUT_RUM_METRICS_DESTINATION = 'rum:PutRumMetricsDestination',
	TAG_RESOURCE = 'rum:TagResource',
	UNTAG_RESOURCE = 'rum:UntagResource',
	UPDATE_APP_MONITOR = 'rum:UpdateAppMonitor',
	UPDATE_RUM_METRIC_DEFINITION = 'rum:UpdateRumMetricDefinition',
}
export enum CLOUDFRONT {
	ASSOCIATE_ALIAS = 'cloudfront:AssociateAlias',
	CREATE_CACHE_POLICY = 'cloudfront:CreateCachePolicy',
	CREATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:CreateCloudFrontOriginAccessIdentity',
	CREATE_DISTRIBUTION = 'cloudfront:CreateDistribution',
	CREATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:CreateFieldLevelEncryptionConfig',
	CREATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:CreateFieldLevelEncryptionProfile',
	CREATE_FUNCTION = 'cloudfront:CreateFunction',
	CREATE_INVALIDATION = 'cloudfront:CreateInvalidation',
	CREATE_KEY_GROUP = 'cloudfront:CreateKeyGroup',
	CREATE_MONITORING_SUBSCRIPTION = 'cloudfront:CreateMonitoringSubscription',
	CREATE_ORIGIN_ACCESS_CONTROL = 'cloudfront:CreateOriginAccessControl',
	CREATE_ORIGIN_REQUEST_POLICY = 'cloudfront:CreateOriginRequestPolicy',
	CREATE_PUBLIC_KEY = 'cloudfront:CreatePublicKey',
	CREATE_REALTIME_LOG_CONFIG = 'cloudfront:CreateRealtimeLogConfig',
	CREATE_RESPONSE_HEADERS_POLICY = 'cloudfront:CreateResponseHeadersPolicy',
	CREATE_SAVINGS_PLAN = 'cloudfront:CreateSavingsPlan',
	CREATE_STREAMING_DISTRIBUTION = 'cloudfront:CreateStreamingDistribution',
	CREATE_STREAMING_DISTRIBUTION_WITH_TAGS = 'cloudfront:CreateStreamingDistributionWithTags',
	DELETE_CACHE_POLICY = 'cloudfront:DeleteCachePolicy',
	DELETE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:DeleteCloudFrontOriginAccessIdentity',
	DELETE_DISTRIBUTION = 'cloudfront:DeleteDistribution',
	DELETE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:DeleteFieldLevelEncryptionConfig',
	DELETE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:DeleteFieldLevelEncryptionProfile',
	DELETE_FUNCTION = 'cloudfront:DeleteFunction',
	DELETE_KEY_GROUP = 'cloudfront:DeleteKeyGroup',
	DELETE_MONITORING_SUBSCRIPTION = 'cloudfront:DeleteMonitoringSubscription',
	DELETE_ORIGIN_ACCESS_CONTROL = 'cloudfront:DeleteOriginAccessControl',
	DELETE_ORIGIN_REQUEST_POLICY = 'cloudfront:DeleteOriginRequestPolicy',
	DELETE_PUBLIC_KEY = 'cloudfront:DeletePublicKey',
	DELETE_REALTIME_LOG_CONFIG = 'cloudfront:DeleteRealtimeLogConfig',
	DELETE_RESPONSE_HEADERS_POLICY = 'cloudfront:DeleteResponseHeadersPolicy',
	DELETE_STREAMING_DISTRIBUTION = 'cloudfront:DeleteStreamingDistribution',
	DESCRIBE_FUNCTION = 'cloudfront:DescribeFunction',
	GET_CACHE_POLICY = 'cloudfront:GetCachePolicy',
	GET_CACHE_POLICY_CONFIG = 'cloudfront:GetCachePolicyConfig',
	GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:GetCloudFrontOriginAccessIdentity',
	GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY_CONFIG = 'cloudfront:GetCloudFrontOriginAccessIdentityConfig',
	GET_DISTRIBUTION = 'cloudfront:GetDistribution',
	GET_DISTRIBUTION_CONFIG = 'cloudfront:GetDistributionConfig',
	GET_FIELD_LEVEL_ENCRYPTION = 'cloudfront:GetFieldLevelEncryption',
	GET_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:GetFieldLevelEncryptionConfig',
	GET_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:GetFieldLevelEncryptionProfile',
	GET_FIELD_LEVEL_ENCRYPTION_PROFILE_CONFIG = 'cloudfront:GetFieldLevelEncryptionProfileConfig',
	GET_FUNCTION = 'cloudfront:GetFunction',
	GET_INVALIDATION = 'cloudfront:GetInvalidation',
	GET_KEY_GROUP = 'cloudfront:GetKeyGroup',
	GET_KEY_GROUP_CONFIG = 'cloudfront:GetKeyGroupConfig',
	GET_MONITORING_SUBSCRIPTION = 'cloudfront:GetMonitoringSubscription',
	GET_ORIGIN_ACCESS_CONTROL = 'cloudfront:GetOriginAccessControl',
	GET_ORIGIN_ACCESS_CONTROL_CONFIG = 'cloudfront:GetOriginAccessControlConfig',
	GET_ORIGIN_REQUEST_POLICY = 'cloudfront:GetOriginRequestPolicy',
	GET_ORIGIN_REQUEST_POLICY_CONFIG = 'cloudfront:GetOriginRequestPolicyConfig',
	GET_PUBLIC_KEY = 'cloudfront:GetPublicKey',
	GET_PUBLIC_KEY_CONFIG = 'cloudfront:GetPublicKeyConfig',
	GET_REALTIME_LOG_CONFIG = 'cloudfront:GetRealtimeLogConfig',
	GET_RESPONSE_HEADERS_POLICY = 'cloudfront:GetResponseHeadersPolicy',
	GET_RESPONSE_HEADERS_POLICY_CONFIG = 'cloudfront:GetResponseHeadersPolicyConfig',
	GET_SAVINGS_PLAN = 'cloudfront:GetSavingsPlan',
	GET_STREAMING_DISTRIBUTION = 'cloudfront:GetStreamingDistribution',
	GET_STREAMING_DISTRIBUTION_CONFIG = 'cloudfront:GetStreamingDistributionConfig',
	LIST_CACHE_POLICIES = 'cloudfront:ListCachePolicies',
	LIST_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITIES = 'cloudfront:ListCloudFrontOriginAccessIdentities',
	LIST_CONFLICTING_ALIASES = 'cloudfront:ListConflictingAliases',
	LIST_DISTRIBUTIONS = 'cloudfront:ListDistributions',
	LIST_DISTRIBUTIONS_BY_CACHE_POLICY_ID = 'cloudfront:ListDistributionsByCachePolicyId',
	LIST_DISTRIBUTIONS_BY_KEY_GROUP = 'cloudfront:ListDistributionsByKeyGroup',
	LIST_DISTRIBUTIONS_BY_LAMBDA_FUNCTION = 'cloudfront:ListDistributionsByLambdaFunction',
	LIST_DISTRIBUTIONS_BY_ORIGIN_REQUEST_POLICY_ID = 'cloudfront:ListDistributionsByOriginRequestPolicyId',
	LIST_DISTRIBUTIONS_BY_REALTIME_LOG_CONFIG = 'cloudfront:ListDistributionsByRealtimeLogConfig',
	LIST_DISTRIBUTIONS_BY_RESPONSE_HEADERS_POLICY_ID = 'cloudfront:ListDistributionsByResponseHeadersPolicyId',
	LIST_DISTRIBUTIONS_BY_WEB_ACL_ID = 'cloudfront:ListDistributionsByWebACLId',
	LIST_FIELD_LEVEL_ENCRYPTION_CONFIGS = 'cloudfront:ListFieldLevelEncryptionConfigs',
	LIST_FIELD_LEVEL_ENCRYPTION_PROFILES = 'cloudfront:ListFieldLevelEncryptionProfiles',
	LIST_FUNCTIONS = 'cloudfront:ListFunctions',
	LIST_INVALIDATIONS = 'cloudfront:ListInvalidations',
	LIST_KEY_GROUPS = 'cloudfront:ListKeyGroups',
	LIST_ORIGIN_ACCESS_CONTROLS = 'cloudfront:ListOriginAccessControls',
	LIST_ORIGIN_REQUEST_POLICIES = 'cloudfront:ListOriginRequestPolicies',
	LIST_PUBLIC_KEYS = 'cloudfront:ListPublicKeys',
	LIST_RATE_CARDS = 'cloudfront:ListRateCards',
	LIST_REALTIME_LOG_CONFIGS = 'cloudfront:ListRealtimeLogConfigs',
	LIST_RESPONSE_HEADERS_POLICIES = 'cloudfront:ListResponseHeadersPolicies',
	LIST_SAVINGS_PLANS = 'cloudfront:ListSavingsPlans',
	LIST_STREAMING_DISTRIBUTIONS = 'cloudfront:ListStreamingDistributions',
	LIST_TAGS_FOR_RESOURCE = 'cloudfront:ListTagsForResource',
	LIST_USAGES = 'cloudfront:ListUsages',
	PUBLISH_FUNCTION = 'cloudfront:PublishFunction',
	TAG_RESOURCE = 'cloudfront:TagResource',
	TEST_FUNCTION = 'cloudfront:TestFunction',
	UNTAG_RESOURCE = 'cloudfront:UntagResource',
	UPDATE_CACHE_POLICY = 'cloudfront:UpdateCachePolicy',
	UPDATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'cloudfront:UpdateCloudFrontOriginAccessIdentity',
	UPDATE_DISTRIBUTION = 'cloudfront:UpdateDistribution',
	UPDATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'cloudfront:UpdateFieldLevelEncryptionConfig',
	UPDATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'cloudfront:UpdateFieldLevelEncryptionProfile',
	UPDATE_FUNCTION = 'cloudfront:UpdateFunction',
	UPDATE_KEY_GROUP = 'cloudfront:UpdateKeyGroup',
	UPDATE_ORIGIN_ACCESS_CONTROL = 'cloudfront:UpdateOriginAccessControl',
	UPDATE_ORIGIN_REQUEST_POLICY = 'cloudfront:UpdateOriginRequestPolicy',
	UPDATE_PUBLIC_KEY = 'cloudfront:UpdatePublicKey',
	UPDATE_REALTIME_LOG_CONFIG = 'cloudfront:UpdateRealtimeLogConfig',
	UPDATE_RESPONSE_HEADERS_POLICY = 'cloudfront:UpdateResponseHeadersPolicy',
	UPDATE_SAVINGS_PLAN = 'cloudfront:UpdateSavingsPlan',
	UPDATE_STREAMING_DISTRIBUTION = 'cloudfront:UpdateStreamingDistribution',
}
export enum ELASTIC_KUBERNETES_SERVICE {
	ACCESS_KUBERNETES_API = 'eks:AccessKubernetesApi',
	ASSOCIATE_ENCRYPTION_CONFIG = 'eks:AssociateEncryptionConfig',
	ASSOCIATE_IDENTITY_PROVIDER_CONFIG = 'eks:AssociateIdentityProviderConfig',
	CREATE_ADDON = 'eks:CreateAddon',
	CREATE_CLUSTER = 'eks:CreateCluster',
	CREATE_FARGATE_PROFILE = 'eks:CreateFargateProfile',
	CREATE_NODEGROUP = 'eks:CreateNodegroup',
	DELETE_ADDON = 'eks:DeleteAddon',
	DELETE_CLUSTER = 'eks:DeleteCluster',
	DELETE_FARGATE_PROFILE = 'eks:DeleteFargateProfile',
	DELETE_NODEGROUP = 'eks:DeleteNodegroup',
	DEREGISTER_CLUSTER = 'eks:DeregisterCluster',
	DESCRIBE_ADDON = 'eks:DescribeAddon',
	DESCRIBE_ADDON_VERSIONS = 'eks:DescribeAddonVersions',
	DESCRIBE_CLUSTER = 'eks:DescribeCluster',
	DESCRIBE_FARGATE_PROFILE = 'eks:DescribeFargateProfile',
	DESCRIBE_IDENTITY_PROVIDER_CONFIG = 'eks:DescribeIdentityProviderConfig',
	DESCRIBE_NODEGROUP = 'eks:DescribeNodegroup',
	DESCRIBE_UPDATE = 'eks:DescribeUpdate',
	DISASSOCIATE_IDENTITY_PROVIDER_CONFIG = 'eks:DisassociateIdentityProviderConfig',
	LIST_ADDONS = 'eks:ListAddons',
	LIST_CLUSTERS = 'eks:ListClusters',
	LIST_FARGATE_PROFILES = 'eks:ListFargateProfiles',
	LIST_IDENTITY_PROVIDER_CONFIGS = 'eks:ListIdentityProviderConfigs',
	LIST_NODEGROUPS = 'eks:ListNodegroups',
	LIST_TAGS_FOR_RESOURCE = 'eks:ListTagsForResource',
	LIST_UPDATES = 'eks:ListUpdates',
	REGISTER_CLUSTER = 'eks:RegisterCluster',
	TAG_RESOURCE = 'eks:TagResource',
	UNTAG_RESOURCE = 'eks:UntagResource',
	UPDATE_ADDON = 'eks:UpdateAddon',
	UPDATE_CLUSTER_CONFIG = 'eks:UpdateClusterConfig',
	UPDATE_CLUSTER_VERSION = 'eks:UpdateClusterVersion',
	UPDATE_NODEGROUP_CONFIG = 'eks:UpdateNodegroupConfig',
	UPDATE_NODEGROUP_VERSION = 'eks:UpdateNodegroupVersion',
}
export enum IDENTITY_SYNC {
	CREATE_SYNC_FILTER = 'identity-sync:CreateSyncFilter',
	CREATE_SYNC_PROFILE = 'identity-sync:CreateSyncProfile',
	CREATE_SYNC_TARGET = 'identity-sync:CreateSyncTarget',
	DELETE_SYNC_FILTER = 'identity-sync:DeleteSyncFilter',
	DELETE_SYNC_PROFILE = 'identity-sync:DeleteSyncProfile',
	DELETE_SYNC_TARGET = 'identity-sync:DeleteSyncTarget',
	GET_SYNC_PROFILE = 'identity-sync:GetSyncProfile',
	GET_SYNC_TARGET = 'identity-sync:GetSyncTarget',
	LIST_SYNC_FILTERS = 'identity-sync:ListSyncFilters',
	START_SYNC = 'identity-sync:StartSync',
	STOP_SYNC = 'identity-sync:StopSync',
	UPDATE_SYNC_TARGET = 'identity-sync:UpdateSyncTarget',
}
export enum FIREWALL_MANAGER {
	ASSOCIATE_ADMIN_ACCOUNT = 'fms:AssociateAdminAccount',
	ASSOCIATE_THIRD_PARTY_FIREWALL = 'fms:AssociateThirdPartyFirewall',
	BATCH_ASSOCIATE_RESOURCE = 'fms:BatchAssociateResource',
	BATCH_DISASSOCIATE_RESOURCE = 'fms:BatchDisassociateResource',
	DELETE_APPS_LIST = 'fms:DeleteAppsList',
	DELETE_NOTIFICATION_CHANNEL = 'fms:DeleteNotificationChannel',
	DELETE_POLICY = 'fms:DeletePolicy',
	DELETE_PROTOCOLS_LIST = 'fms:DeleteProtocolsList',
	DELETE_RESOURCE_SET = 'fms:DeleteResourceSet',
	DISASSOCIATE_ADMIN_ACCOUNT = 'fms:DisassociateAdminAccount',
	DISASSOCIATE_THIRD_PARTY_FIREWALL = 'fms:DisassociateThirdPartyFirewall',
	GET_ADMIN_ACCOUNT = 'fms:GetAdminAccount',
	GET_APPS_LIST = 'fms:GetAppsList',
	GET_COMPLIANCE_DETAIL = 'fms:GetComplianceDetail',
	GET_NOTIFICATION_CHANNEL = 'fms:GetNotificationChannel',
	GET_POLICY = 'fms:GetPolicy',
	GET_PROTECTION_STATUS = 'fms:GetProtectionStatus',
	GET_PROTOCOLS_LIST = 'fms:GetProtocolsList',
	GET_RESOURCE_SET = 'fms:GetResourceSet',
	GET_THIRD_PARTY_FIREWALL_ASSOCIATION_STATUS = 'fms:GetThirdPartyFirewallAssociationStatus',
	GET_VIOLATION_DETAILS = 'fms:GetViolationDetails',
	LIST_APPS_LISTS = 'fms:ListAppsLists',
	LIST_COMPLIANCE_STATUS = 'fms:ListComplianceStatus',
	LIST_DISCOVERED_RESOURCES = 'fms:ListDiscoveredResources',
	LIST_MEMBER_ACCOUNTS = 'fms:ListMemberAccounts',
	LIST_POLICIES = 'fms:ListPolicies',
	LIST_PROTOCOLS_LISTS = 'fms:ListProtocolsLists',
	LIST_RESOURCE_SET_RESOURCES = 'fms:ListResourceSetResources',
	LIST_RESOURCE_SETS = 'fms:ListResourceSets',
	LIST_TAGS_FOR_RESOURCE = 'fms:ListTagsForResource',
	LIST_THIRD_PARTY_FIREWALL_FIREWALL_POLICIES = 'fms:ListThirdPartyFirewallFirewallPolicies',
	PUT_APPS_LIST = 'fms:PutAppsList',
	PUT_NOTIFICATION_CHANNEL = 'fms:PutNotificationChannel',
	PUT_POLICY = 'fms:PutPolicy',
	PUT_PROTOCOLS_LIST = 'fms:PutProtocolsList',
	PUT_RESOURCE_SET = 'fms:PutResourceSet',
	TAG_RESOURCE = 'fms:TagResource',
	UNTAG_RESOURCE = 'fms:UntagResource',
}
export enum KINESIS {
	ADD_TAGS_TO_STREAM = 'kinesis:AddTagsToStream',
	CREATE_STREAM = 'kinesis:CreateStream',
	DECREASE_STREAM_RETENTION_PERIOD = 'kinesis:DecreaseStreamRetentionPeriod',
	DELETE_STREAM = 'kinesis:DeleteStream',
	DEREGISTER_STREAM_CONSUMER = 'kinesis:DeregisterStreamConsumer',
	DESCRIBE_LIMITS = 'kinesis:DescribeLimits',
	DESCRIBE_STREAM = 'kinesis:DescribeStream',
	DESCRIBE_STREAM_CONSUMER = 'kinesis:DescribeStreamConsumer',
	DESCRIBE_STREAM_SUMMARY = 'kinesis:DescribeStreamSummary',
	DISABLE_ENHANCED_MONITORING = 'kinesis:DisableEnhancedMonitoring',
	ENABLE_ENHANCED_MONITORING = 'kinesis:EnableEnhancedMonitoring',
	GET_RECORDS = 'kinesis:GetRecords',
	GET_SHARD_ITERATOR = 'kinesis:GetShardIterator',
	INCREASE_STREAM_RETENTION_PERIOD = 'kinesis:IncreaseStreamRetentionPeriod',
	LIST_SHARDS = 'kinesis:ListShards',
	LIST_STREAM_CONSUMERS = 'kinesis:ListStreamConsumers',
	LIST_STREAMS = 'kinesis:ListStreams',
	LIST_TAGS_FOR_STREAM = 'kinesis:ListTagsForStream',
	MERGE_SHARDS = 'kinesis:MergeShards',
	PUT_RECORD = 'kinesis:PutRecord',
	PUT_RECORDS = 'kinesis:PutRecords',
	REGISTER_STREAM_CONSUMER = 'kinesis:RegisterStreamConsumer',
	REMOVE_TAGS_FROM_STREAM = 'kinesis:RemoveTagsFromStream',
	SPLIT_SHARD = 'kinesis:SplitShard',
	START_STREAM_ENCRYPTION = 'kinesis:StartStreamEncryption',
	STOP_STREAM_ENCRYPTION = 'kinesis:StopStreamEncryption',
	SUBSCRIBE_TO_SHARD = 'kinesis:SubscribeToShard',
	UPDATE_SHARD_COUNT = 'kinesis:UpdateShardCount',
	UPDATE_STREAM_MODE = 'kinesis:UpdateStreamMode',
}
export enum BILLING_CONSOLE {
	MODIFY_ACCOUNT = 'aws-portal:ModifyAccount',
	MODIFY_BILLING = 'aws-portal:ModifyBilling',
	MODIFY_PAYMENT_METHODS = 'aws-portal:ModifyPaymentMethods',
	VIEW_ACCOUNT = 'aws-portal:ViewAccount',
	VIEW_BILLING = 'aws-portal:ViewBilling',
	VIEW_PAYMENT_METHODS = 'aws-portal:ViewPaymentMethods',
	VIEW_USAGE = 'aws-portal:ViewUsage',
}
export enum DIRECTORY_SERVICE {
	ACCEPT_SHARED_DIRECTORY = 'ds:AcceptSharedDirectory',
	ADD_IP_ROUTES = 'ds:AddIpRoutes',
	ADD_REGION = 'ds:AddRegion',
	ADD_TAGS_TO_RESOURCE = 'ds:AddTagsToResource',
	AUTHORIZE_APPLICATION = 'ds:AuthorizeApplication',
	CANCEL_SCHEMA_EXTENSION = 'ds:CancelSchemaExtension',
	CHECK_ALIAS = 'ds:CheckAlias',
	CONNECT_DIRECTORY = 'ds:ConnectDirectory',
	CREATE_ALIAS = 'ds:CreateAlias',
	CREATE_COMPUTER = 'ds:CreateComputer',
	CREATE_CONDITIONAL_FORWARDER = 'ds:CreateConditionalForwarder',
	CREATE_DIRECTORY = 'ds:CreateDirectory',
	CREATE_IDENTITY_POOL_DIRECTORY = 'ds:CreateIdentityPoolDirectory',
	CREATE_LOG_SUBSCRIPTION = 'ds:CreateLogSubscription',
	CREATE_MICROSOFT_AD = 'ds:CreateMicrosoftAD',
	CREATE_SNAPSHOT = 'ds:CreateSnapshot',
	CREATE_TRUST = 'ds:CreateTrust',
	DELETE_CONDITIONAL_FORWARDER = 'ds:DeleteConditionalForwarder',
	DELETE_DIRECTORY = 'ds:DeleteDirectory',
	DELETE_LOG_SUBSCRIPTION = 'ds:DeleteLogSubscription',
	DELETE_SNAPSHOT = 'ds:DeleteSnapshot',
	DELETE_TRUST = 'ds:DeleteTrust',
	DEREGISTER_CERTIFICATE = 'ds:DeregisterCertificate',
	DEREGISTER_EVENT_TOPIC = 'ds:DeregisterEventTopic',
	DESCRIBE_CERTIFICATE = 'ds:DescribeCertificate',
	DESCRIBE_CLIENT_AUTHENTICATION_SETTINGS = 'ds:DescribeClientAuthenticationSettings',
	DESCRIBE_CONDITIONAL_FORWARDERS = 'ds:DescribeConditionalForwarders',
	DESCRIBE_DIRECTORIES = 'ds:DescribeDirectories',
	DESCRIBE_DOMAIN_CONTROLLERS = 'ds:DescribeDomainControllers',
	DESCRIBE_EVENT_TOPICS = 'ds:DescribeEventTopics',
	DESCRIBE_LDAPS_SETTINGS = 'ds:DescribeLDAPSSettings',
	DESCRIBE_REGIONS = 'ds:DescribeRegions',
	DESCRIBE_SETTINGS = 'ds:DescribeSettings',
	DESCRIBE_SHARED_DIRECTORIES = 'ds:DescribeSharedDirectories',
	DESCRIBE_SNAPSHOTS = 'ds:DescribeSnapshots',
	DESCRIBE_TRUSTS = 'ds:DescribeTrusts',
	DESCRIBE_UPDATE_DIRECTORY = 'ds:DescribeUpdateDirectory',
	DISABLE_CLIENT_AUTHENTICATION = 'ds:DisableClientAuthentication',
	DISABLE_LDAPS = 'ds:DisableLDAPS',
	DISABLE_RADIUS = 'ds:DisableRadius',
	DISABLE_SSO = 'ds:DisableSso',
	ENABLE_CLIENT_AUTHENTICATION = 'ds:EnableClientAuthentication',
	ENABLE_LDAPS = 'ds:EnableLDAPS',
	ENABLE_RADIUS = 'ds:EnableRadius',
	ENABLE_SSO = 'ds:EnableSso',
	GET_AUTHORIZED_APPLICATION_DETAILS = 'ds:GetAuthorizedApplicationDetails',
	GET_DIRECTORY_LIMITS = 'ds:GetDirectoryLimits',
	GET_SNAPSHOT_LIMITS = 'ds:GetSnapshotLimits',
	LIST_AUTHORIZED_APPLICATIONS = 'ds:ListAuthorizedApplications',
	LIST_CERTIFICATES = 'ds:ListCertificates',
	LIST_IP_ROUTES = 'ds:ListIpRoutes',
	LIST_LOG_SUBSCRIPTIONS = 'ds:ListLogSubscriptions',
	LIST_SCHEMA_EXTENSIONS = 'ds:ListSchemaExtensions',
	LIST_TAGS_FOR_RESOURCE = 'ds:ListTagsForResource',
	REGISTER_CERTIFICATE = 'ds:RegisterCertificate',
	REGISTER_EVENT_TOPIC = 'ds:RegisterEventTopic',
	REJECT_SHARED_DIRECTORY = 'ds:RejectSharedDirectory',
	REMOVE_IP_ROUTES = 'ds:RemoveIpRoutes',
	REMOVE_REGION = 'ds:RemoveRegion',
	REMOVE_TAGS_FROM_RESOURCE = 'ds:RemoveTagsFromResource',
	RESET_USER_PASSWORD = 'ds:ResetUserPassword',
	RESTORE_FROM_SNAPSHOT = 'ds:RestoreFromSnapshot',
	SHARE_DIRECTORY = 'ds:ShareDirectory',
	START_SCHEMA_EXTENSION = 'ds:StartSchemaExtension',
	UNAUTHORIZE_APPLICATION = 'ds:UnauthorizeApplication',
	UNSHARE_DIRECTORY = 'ds:UnshareDirectory',
	UPDATE_CONDITIONAL_FORWARDER = 'ds:UpdateConditionalForwarder',
	UPDATE_DIRECTORY_SETUP = 'ds:UpdateDirectorySetup',
	UPDATE_NUMBER_OF_DOMAIN_CONTROLLERS = 'ds:UpdateNumberOfDomainControllers',
	UPDATE_RADIUS = 'ds:UpdateRadius',
	UPDATE_SETTINGS = 'ds:UpdateSettings',
	UPDATE_TRUST = 'ds:UpdateTrust',
	VERIFY_TRUST = 'ds:VerifyTrust',
}
export enum IOT_SITEWISE {
	ASSOCIATE_ASSETS = 'iotsitewise:AssociateAssets',
	ASSOCIATE_TIME_SERIES_TO_ASSET_PROPERTY = 'iotsitewise:AssociateTimeSeriesToAssetProperty',
	BATCH_ASSOCIATE_PROJECT_ASSETS = 'iotsitewise:BatchAssociateProjectAssets',
	BATCH_DISASSOCIATE_PROJECT_ASSETS = 'iotsitewise:BatchDisassociateProjectAssets',
	BATCH_GET_ASSET_PROPERTY_AGGREGATES = 'iotsitewise:BatchGetAssetPropertyAggregates',
	BATCH_GET_ASSET_PROPERTY_VALUE = 'iotsitewise:BatchGetAssetPropertyValue',
	BATCH_GET_ASSET_PROPERTY_VALUE_HISTORY = 'iotsitewise:BatchGetAssetPropertyValueHistory',
	BATCH_PUT_ASSET_PROPERTY_VALUE = 'iotsitewise:BatchPutAssetPropertyValue',
	CREATE_ACCESS_POLICY = 'iotsitewise:CreateAccessPolicy',
	CREATE_ASSET = 'iotsitewise:CreateAsset',
	CREATE_ASSET_MODEL = 'iotsitewise:CreateAssetModel',
	CREATE_BULK_IMPORT_JOB = 'iotsitewise:CreateBulkImportJob',
	CREATE_DASHBOARD = 'iotsitewise:CreateDashboard',
	CREATE_GATEWAY = 'iotsitewise:CreateGateway',
	CREATE_PORTAL = 'iotsitewise:CreatePortal',
	CREATE_PROJECT = 'iotsitewise:CreateProject',
	DELETE_ACCESS_POLICY = 'iotsitewise:DeleteAccessPolicy',
	DELETE_ASSET = 'iotsitewise:DeleteAsset',
	DELETE_ASSET_MODEL = 'iotsitewise:DeleteAssetModel',
	DELETE_DASHBOARD = 'iotsitewise:DeleteDashboard',
	DELETE_GATEWAY = 'iotsitewise:DeleteGateway',
	DELETE_PORTAL = 'iotsitewise:DeletePortal',
	DELETE_PROJECT = 'iotsitewise:DeleteProject',
	DELETE_TIME_SERIES = 'iotsitewise:DeleteTimeSeries',
	DESCRIBE_ACCESS_POLICY = 'iotsitewise:DescribeAccessPolicy',
	DESCRIBE_ASSET = 'iotsitewise:DescribeAsset',
	DESCRIBE_ASSET_MODEL = 'iotsitewise:DescribeAssetModel',
	DESCRIBE_ASSET_PROPERTY = 'iotsitewise:DescribeAssetProperty',
	DESCRIBE_BULK_IMPORT_JOB = 'iotsitewise:DescribeBulkImportJob',
	DESCRIBE_DASHBOARD = 'iotsitewise:DescribeDashboard',
	DESCRIBE_DEFAULT_ENCRYPTION_CONFIGURATION = 'iotsitewise:DescribeDefaultEncryptionConfiguration',
	DESCRIBE_GATEWAY = 'iotsitewise:DescribeGateway',
	DESCRIBE_GATEWAY_CAPABILITY_CONFIGURATION = 'iotsitewise:DescribeGatewayCapabilityConfiguration',
	DESCRIBE_LOGGING_OPTIONS = 'iotsitewise:DescribeLoggingOptions',
	DESCRIBE_PORTAL = 'iotsitewise:DescribePortal',
	DESCRIBE_PROJECT = 'iotsitewise:DescribeProject',
	DESCRIBE_STORAGE_CONFIGURATION = 'iotsitewise:DescribeStorageConfiguration',
	DESCRIBE_TIME_SERIES = 'iotsitewise:DescribeTimeSeries',
	DISASSOCIATE_ASSETS = 'iotsitewise:DisassociateAssets',
	DISASSOCIATE_TIME_SERIES_FROM_ASSET_PROPERTY = 'iotsitewise:DisassociateTimeSeriesFromAssetProperty',
	GET_ASSET_PROPERTY_AGGREGATES = 'iotsitewise:GetAssetPropertyAggregates',
	GET_ASSET_PROPERTY_VALUE = 'iotsitewise:GetAssetPropertyValue',
	GET_ASSET_PROPERTY_VALUE_HISTORY = 'iotsitewise:GetAssetPropertyValueHistory',
	GET_INTERPOLATED_ASSET_PROPERTY_VALUES = 'iotsitewise:GetInterpolatedAssetPropertyValues',
	LIST_ACCESS_POLICIES = 'iotsitewise:ListAccessPolicies',
	LIST_ASSET_MODELS = 'iotsitewise:ListAssetModels',
	LIST_ASSET_RELATIONSHIPS = 'iotsitewise:ListAssetRelationships',
	LIST_ASSETS = 'iotsitewise:ListAssets',
	LIST_ASSOCIATED_ASSETS = 'iotsitewise:ListAssociatedAssets',
	LIST_BULK_IMPORT_JOBS = 'iotsitewise:ListBulkImportJobs',
	LIST_DASHBOARDS = 'iotsitewise:ListDashboards',
	LIST_GATEWAYS = 'iotsitewise:ListGateways',
	LIST_PORTALS = 'iotsitewise:ListPortals',
	LIST_PROJECT_ASSETS = 'iotsitewise:ListProjectAssets',
	LIST_PROJECTS = 'iotsitewise:ListProjects',
	LIST_TAGS_FOR_RESOURCE = 'iotsitewise:ListTagsForResource',
	LIST_TIME_SERIES = 'iotsitewise:ListTimeSeries',
	PUT_DEFAULT_ENCRYPTION_CONFIGURATION = 'iotsitewise:PutDefaultEncryptionConfiguration',
	PUT_LOGGING_OPTIONS = 'iotsitewise:PutLoggingOptions',
	PUT_STORAGE_CONFIGURATION = 'iotsitewise:PutStorageConfiguration',
	TAG_RESOURCE = 'iotsitewise:TagResource',
	UNTAG_RESOURCE = 'iotsitewise:UntagResource',
	UPDATE_ACCESS_POLICY = 'iotsitewise:UpdateAccessPolicy',
	UPDATE_ASSET = 'iotsitewise:UpdateAsset',
	UPDATE_ASSET_MODEL = 'iotsitewise:UpdateAssetModel',
	UPDATE_ASSET_MODEL_PROPERTY_ROUTING = 'iotsitewise:UpdateAssetModelPropertyRouting',
	UPDATE_ASSET_PROPERTY = 'iotsitewise:UpdateAssetProperty',
	UPDATE_DASHBOARD = 'iotsitewise:UpdateDashboard',
	UPDATE_GATEWAY = 'iotsitewise:UpdateGateway',
	UPDATE_GATEWAY_CAPABILITY_CONFIGURATION = 'iotsitewise:UpdateGatewayCapabilityConfiguration',
	UPDATE_PORTAL = 'iotsitewise:UpdatePortal',
	UPDATE_PROJECT = 'iotsitewise:UpdateProject',
}
export enum CODESTAR_NOTIFICATIONS {
	CREATE_NOTIFICATION_RULE = 'codestar-notifications:CreateNotificationRule',
	DELETE_NOTIFICATION_RULE = 'codestar-notifications:DeleteNotificationRule',
	DELETE_TARGET = 'codestar-notifications:DeleteTarget',
	DESCRIBE_NOTIFICATION_RULE = 'codestar-notifications:DescribeNotificationRule',
	LIST_EVENT_TYPES = 'codestar-notifications:ListEventTypes',
	LIST_NOTIFICATION_RULES = 'codestar-notifications:ListNotificationRules',
	LIST_TAGS_FOR_RESOURCE = 'codestar-notifications:ListTagsForResource',
	LIST_TARGETS = 'codestar-notifications:ListTargets',
	SUBSCRIBE = 'codestar-notifications:Subscribe',
	TAG_RESOURCE = 'codestar-notifications:TagResource',
	UNSUBSCRIBE = 'codestar-notifications:Unsubscribe',
	UNTAG_RESOURCE = 'codestar-notifications:UntagResource',
	UPDATE_NOTIFICATION_RULE = 'codestar-notifications:UpdateNotificationRule',
}
export enum APP2CONTAINER {
	GET_CONTAINERIZATION_JOB_DETAILS = 'a2c:GetContainerizationJobDetails',
	GET_DEPLOYMENT_JOB_DETAILS = 'a2c:GetDeploymentJobDetails',
	START_CONTAINERIZATION_JOB = 'a2c:StartContainerizationJob',
	START_DEPLOYMENT_JOB = 'a2c:StartDeploymentJob',
}
export enum FRAUD_DETECTOR {
	BATCH_CREATE_VARIABLE = 'frauddetector:BatchCreateVariable',
	BATCH_GET_VARIABLE = 'frauddetector:BatchGetVariable',
	CANCEL_BATCH_IMPORT_JOB = 'frauddetector:CancelBatchImportJob',
	CANCEL_BATCH_PREDICTION_JOB = 'frauddetector:CancelBatchPredictionJob',
	CREATE_BATCH_IMPORT_JOB = 'frauddetector:CreateBatchImportJob',
	CREATE_BATCH_PREDICTION_JOB = 'frauddetector:CreateBatchPredictionJob',
	CREATE_DETECTOR_VERSION = 'frauddetector:CreateDetectorVersion',
	CREATE_MODEL = 'frauddetector:CreateModel',
	CREATE_MODEL_VERSION = 'frauddetector:CreateModelVersion',
	CREATE_RULE = 'frauddetector:CreateRule',
	CREATE_VARIABLE = 'frauddetector:CreateVariable',
	DELETE_BATCH_IMPORT_JOB = 'frauddetector:DeleteBatchImportJob',
	DELETE_BATCH_PREDICTION_JOB = 'frauddetector:DeleteBatchPredictionJob',
	DELETE_DETECTOR = 'frauddetector:DeleteDetector',
	DELETE_DETECTOR_VERSION = 'frauddetector:DeleteDetectorVersion',
	DELETE_ENTITY_TYPE = 'frauddetector:DeleteEntityType',
	DELETE_EVENT = 'frauddetector:DeleteEvent',
	DELETE_EVENT_TYPE = 'frauddetector:DeleteEventType',
	DELETE_EVENTS_BY_EVENT_TYPE = 'frauddetector:DeleteEventsByEventType',
	DELETE_EXTERNAL_MODEL = 'frauddetector:DeleteExternalModel',
	DELETE_LABEL = 'frauddetector:DeleteLabel',
	DELETE_MODEL = 'frauddetector:DeleteModel',
	DELETE_MODEL_VERSION = 'frauddetector:DeleteModelVersion',
	DELETE_OUTCOME = 'frauddetector:DeleteOutcome',
	DELETE_RULE = 'frauddetector:DeleteRule',
	DELETE_VARIABLE = 'frauddetector:DeleteVariable',
	DESCRIBE_DETECTOR = 'frauddetector:DescribeDetector',
	DESCRIBE_MODEL_VERSIONS = 'frauddetector:DescribeModelVersions',
	GET_BATCH_IMPORT_JOBS = 'frauddetector:GetBatchImportJobs',
	GET_BATCH_PREDICTION_JOBS = 'frauddetector:GetBatchPredictionJobs',
	GET_DELETE_EVENTS_BY_EVENT_TYPE_STATUS = 'frauddetector:GetDeleteEventsByEventTypeStatus',
	GET_DETECTOR_VERSION = 'frauddetector:GetDetectorVersion',
	GET_DETECTORS = 'frauddetector:GetDetectors',
	GET_ENTITY_TYPES = 'frauddetector:GetEntityTypes',
	GET_EVENT = 'frauddetector:GetEvent',
	GET_EVENT_PREDICTION = 'frauddetector:GetEventPrediction',
	GET_EVENT_PREDICTION_METADATA = 'frauddetector:GetEventPredictionMetadata',
	GET_EVENT_TYPES = 'frauddetector:GetEventTypes',
	GET_EXTERNAL_MODELS = 'frauddetector:GetExternalModels',
	GET_KMS_ENCRYPTION_KEY = 'frauddetector:GetKMSEncryptionKey',
	GET_LABELS = 'frauddetector:GetLabels',
	GET_MODEL_VERSION = 'frauddetector:GetModelVersion',
	GET_MODELS = 'frauddetector:GetModels',
	GET_OUTCOMES = 'frauddetector:GetOutcomes',
	GET_RULES = 'frauddetector:GetRules',
	GET_VARIABLES = 'frauddetector:GetVariables',
	LIST_EVENT_PREDICTIONS = 'frauddetector:ListEventPredictions',
	LIST_TAGS_FOR_RESOURCE = 'frauddetector:ListTagsForResource',
	PUT_DETECTOR = 'frauddetector:PutDetector',
	PUT_ENTITY_TYPE = 'frauddetector:PutEntityType',
	PUT_EVENT_TYPE = 'frauddetector:PutEventType',
	PUT_EXTERNAL_MODEL = 'frauddetector:PutExternalModel',
	PUT_KMS_ENCRYPTION_KEY = 'frauddetector:PutKMSEncryptionKey',
	PUT_LABEL = 'frauddetector:PutLabel',
	PUT_OUTCOME = 'frauddetector:PutOutcome',
	SEND_EVENT = 'frauddetector:SendEvent',
	TAG_RESOURCE = 'frauddetector:TagResource',
	UNTAG_RESOURCE = 'frauddetector:UntagResource',
	UPDATE_DETECTOR_VERSION = 'frauddetector:UpdateDetectorVersion',
	UPDATE_DETECTOR_VERSION_METADATA = 'frauddetector:UpdateDetectorVersionMetadata',
	UPDATE_DETECTOR_VERSION_STATUS = 'frauddetector:UpdateDetectorVersionStatus',
	UPDATE_EVENT_LABEL = 'frauddetector:UpdateEventLabel',
	UPDATE_MODEL = 'frauddetector:UpdateModel',
	UPDATE_MODEL_VERSION = 'frauddetector:UpdateModelVersion',
	UPDATE_MODEL_VERSION_STATUS = 'frauddetector:UpdateModelVersionStatus',
	UPDATE_RULE_METADATA = 'frauddetector:UpdateRuleMetadata',
	UPDATE_RULE_VERSION = 'frauddetector:UpdateRuleVersion',
	UPDATE_VARIABLE = 'frauddetector:UpdateVariable',
}
export enum WORKLINK {
	ASSOCIATE_DOMAIN = 'worklink:AssociateDomain',
	ASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'worklink:AssociateWebsiteAuthorizationProvider',
	ASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:AssociateWebsiteCertificateAuthority',
	CREATE_FLEET = 'worklink:CreateFleet',
	DELETE_FLEET = 'worklink:DeleteFleet',
	DESCRIBE_AUDIT_STREAM_CONFIGURATION = 'worklink:DescribeAuditStreamConfiguration',
	DESCRIBE_COMPANY_NETWORK_CONFIGURATION = 'worklink:DescribeCompanyNetworkConfiguration',
	DESCRIBE_DEVICE = 'worklink:DescribeDevice',
	DESCRIBE_DEVICE_POLICY_CONFIGURATION = 'worklink:DescribeDevicePolicyConfiguration',
	DESCRIBE_DOMAIN = 'worklink:DescribeDomain',
	DESCRIBE_FLEET_METADATA = 'worklink:DescribeFleetMetadata',
	DESCRIBE_IDENTITY_PROVIDER_CONFIGURATION = 'worklink:DescribeIdentityProviderConfiguration',
	DESCRIBE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:DescribeWebsiteCertificateAuthority',
	DISASSOCIATE_DOMAIN = 'worklink:DisassociateDomain',
	DISASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'worklink:DisassociateWebsiteAuthorizationProvider',
	DISASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'worklink:DisassociateWebsiteCertificateAuthority',
	LIST_DEVICES = 'worklink:ListDevices',
	LIST_DOMAINS = 'worklink:ListDomains',
	LIST_FLEETS = 'worklink:ListFleets',
	LIST_TAGS_FOR_RESOURCE = 'worklink:ListTagsForResource',
	LIST_WEBSITE_AUTHORIZATION_PROVIDERS = 'worklink:ListWebsiteAuthorizationProviders',
	LIST_WEBSITE_CERTIFICATE_AUTHORITIES = 'worklink:ListWebsiteCertificateAuthorities',
	RESTORE_DOMAIN_ACCESS = 'worklink:RestoreDomainAccess',
	REVOKE_DOMAIN_ACCESS = 'worklink:RevokeDomainAccess',
	SEARCH_ENTITY = 'worklink:SearchEntity',
	SIGN_OUT_USER = 'worklink:SignOutUser',
	TAG_RESOURCE = 'worklink:TagResource',
	UNTAG_RESOURCE = 'worklink:UntagResource',
	UPDATE_AUDIT_STREAM_CONFIGURATION = 'worklink:UpdateAuditStreamConfiguration',
	UPDATE_COMPANY_NETWORK_CONFIGURATION = 'worklink:UpdateCompanyNetworkConfiguration',
	UPDATE_DEVICE_POLICY_CONFIGURATION = 'worklink:UpdateDevicePolicyConfiguration',
	UPDATE_DOMAIN_METADATA = 'worklink:UpdateDomainMetadata',
	UPDATE_FLEET_METADATA = 'worklink:UpdateFleetMetadata',
	UPDATE_IDENTITY_PROVIDER_CONFIGURATION = 'worklink:UpdateIdentityProviderConfiguration',
}
export enum CODESTAR_CONNECTIONS {
	CREATE_CONNECTION = 'codestar-connections:CreateConnection',
	CREATE_HOST = 'codestar-connections:CreateHost',
	DELETE_CONNECTION = 'codestar-connections:DeleteConnection',
	DELETE_HOST = 'codestar-connections:DeleteHost',
	GET_CONNECTION = 'codestar-connections:GetConnection',
	GET_HOST = 'codestar-connections:GetHost',
	GET_INDIVIDUAL_ACCESS_TOKEN = 'codestar-connections:GetIndividualAccessToken',
	GET_INSTALLATION_URL = 'codestar-connections:GetInstallationUrl',
	LIST_CONNECTIONS = 'codestar-connections:ListConnections',
	LIST_HOSTS = 'codestar-connections:ListHosts',
	LIST_INSTALLATION_TARGETS = 'codestar-connections:ListInstallationTargets',
	LIST_TAGS_FOR_RESOURCE = 'codestar-connections:ListTagsForResource',
	PASS_CONNECTION = 'codestar-connections:PassConnection',
	REGISTER_APP_CODE = 'codestar-connections:RegisterAppCode',
	START_APP_REGISTRATION_HANDSHAKE = 'codestar-connections:StartAppRegistrationHandshake',
	START_O_AUTH_HANDSHAKE = 'codestar-connections:StartOAuthHandshake',
	TAG_RESOURCE = 'codestar-connections:TagResource',
	UNTAG_RESOURCE = 'codestar-connections:UntagResource',
	UPDATE_CONNECTION_INSTALLATION = 'codestar-connections:UpdateConnectionInstallation',
	UPDATE_HOST = 'codestar-connections:UpdateHost',
	USE_CONNECTION = 'codestar-connections:UseConnection',
}
export enum SUPPORT_APP_IN_SLACK {
	CREATE_SLACK_CHANNEL_CONFIGURATION = 'supportapp:CreateSlackChannelConfiguration',
	DELETE_ACCOUNT_ALIAS = 'supportapp:DeleteAccountAlias',
	DELETE_SLACK_CHANNEL_CONFIGURATION = 'supportapp:DeleteSlackChannelConfiguration',
	DELETE_SLACK_WORKSPACE_CONFIGURATION = 'supportapp:DeleteSlackWorkspaceConfiguration',
	DESCRIBE_SLACK_CHANNELS = 'supportapp:DescribeSlackChannels',
	GET_ACCOUNT_ALIAS = 'supportapp:GetAccountAlias',
	GET_SLACK_OAUTH_PARAMETERS = 'supportapp:GetSlackOauthParameters',
	LIST_SLACK_CHANNEL_CONFIGURATIONS = 'supportapp:ListSlackChannelConfigurations',
	LIST_SLACK_WORKSPACE_CONFIGURATIONS = 'supportapp:ListSlackWorkspaceConfigurations',
	PUT_ACCOUNT_ALIAS = 'supportapp:PutAccountAlias',
	REDEEM_SLACK_OAUTH_CODE = 'supportapp:RedeemSlackOauthCode',
	REGISTER_SLACK_WORKSPACE_FOR_ORGANIZATION = 'supportapp:RegisterSlackWorkspaceForOrganization',
	UPDATE_SLACK_CHANNEL_CONFIGURATION = 'supportapp:UpdateSlackChannelConfiguration',
}
export enum WORKSPACES {
	ASSOCIATE_CONNECTION_ALIAS = 'workspaces:AssociateConnectionAlias',
	ASSOCIATE_IP_GROUPS = 'workspaces:AssociateIpGroups',
	AUTHORIZE_IP_RULES = 'workspaces:AuthorizeIpRules',
	COPY_WORKSPACE_IMAGE = 'workspaces:CopyWorkspaceImage',
	CREATE_CONNECT_CLIENT_ADD_IN = 'workspaces:CreateConnectClientAddIn',
	CREATE_CONNECTION_ALIAS = 'workspaces:CreateConnectionAlias',
	CREATE_IP_GROUP = 'workspaces:CreateIpGroup',
	CREATE_STANDBY_WORKSPACES = 'workspaces:CreateStandbyWorkspaces',
	CREATE_TAGS = 'workspaces:CreateTags',
	CREATE_UPDATED_WORKSPACE_IMAGE = 'workspaces:CreateUpdatedWorkspaceImage',
	CREATE_WORKSPACE_BUNDLE = 'workspaces:CreateWorkspaceBundle',
	CREATE_WORKSPACE_IMAGE = 'workspaces:CreateWorkspaceImage',
	CREATE_WORKSPACES = 'workspaces:CreateWorkspaces',
	DELETE_CLIENT_BRANDING = 'workspaces:DeleteClientBranding',
	DELETE_CONNECT_CLIENT_ADD_IN = 'workspaces:DeleteConnectClientAddIn',
	DELETE_CONNECTION_ALIAS = 'workspaces:DeleteConnectionAlias',
	DELETE_IP_GROUP = 'workspaces:DeleteIpGroup',
	DELETE_TAGS = 'workspaces:DeleteTags',
	DELETE_WORKSPACE_BUNDLE = 'workspaces:DeleteWorkspaceBundle',
	DELETE_WORKSPACE_IMAGE = 'workspaces:DeleteWorkspaceImage',
	DEREGISTER_WORKSPACE_DIRECTORY = 'workspaces:DeregisterWorkspaceDirectory',
	DESCRIBE_ACCOUNT = 'workspaces:DescribeAccount',
	DESCRIBE_ACCOUNT_MODIFICATIONS = 'workspaces:DescribeAccountModifications',
	DESCRIBE_CLIENT_BRANDING = 'workspaces:DescribeClientBranding',
	DESCRIBE_CLIENT_PROPERTIES = 'workspaces:DescribeClientProperties',
	DESCRIBE_CONNECT_CLIENT_ADD_INS = 'workspaces:DescribeConnectClientAddIns',
	DESCRIBE_CONNECTION_ALIAS_PERMISSIONS = 'workspaces:DescribeConnectionAliasPermissions',
	DESCRIBE_CONNECTION_ALIASES = 'workspaces:DescribeConnectionAliases',
	DESCRIBE_IP_GROUPS = 'workspaces:DescribeIpGroups',
	DESCRIBE_TAGS = 'workspaces:DescribeTags',
	DESCRIBE_WORKSPACE_BUNDLES = 'workspaces:DescribeWorkspaceBundles',
	DESCRIBE_WORKSPACE_DIRECTORIES = 'workspaces:DescribeWorkspaceDirectories',
	DESCRIBE_WORKSPACE_IMAGE_PERMISSIONS = 'workspaces:DescribeWorkspaceImagePermissions',
	DESCRIBE_WORKSPACE_IMAGES = 'workspaces:DescribeWorkspaceImages',
	DESCRIBE_WORKSPACE_SNAPSHOTS = 'workspaces:DescribeWorkspaceSnapshots',
	DESCRIBE_WORKSPACES = 'workspaces:DescribeWorkspaces',
	DESCRIBE_WORKSPACES_CONNECTION_STATUS = 'workspaces:DescribeWorkspacesConnectionStatus',
	DISASSOCIATE_CONNECTION_ALIAS = 'workspaces:DisassociateConnectionAlias',
	DISASSOCIATE_IP_GROUPS = 'workspaces:DisassociateIpGroups',
	IMPORT_CLIENT_BRANDING = 'workspaces:ImportClientBranding',
	IMPORT_WORKSPACE_IMAGE = 'workspaces:ImportWorkspaceImage',
	LIST_AVAILABLE_MANAGEMENT_CIDR_RANGES = 'workspaces:ListAvailableManagementCidrRanges',
	MIGRATE_WORKSPACE = 'workspaces:MigrateWorkspace',
	MODIFY_ACCOUNT = 'workspaces:ModifyAccount',
	MODIFY_CERTIFICATE_BASED_AUTH_PROPERTIES = 'workspaces:ModifyCertificateBasedAuthProperties',
	MODIFY_CLIENT_PROPERTIES = 'workspaces:ModifyClientProperties',
	MODIFY_SAML_PROPERTIES = 'workspaces:ModifySamlProperties',
	MODIFY_SELFSERVICE_PERMISSIONS = 'workspaces:ModifySelfservicePermissions',
	MODIFY_WORKSPACE_ACCESS_PROPERTIES = 'workspaces:ModifyWorkspaceAccessProperties',
	MODIFY_WORKSPACE_CREATION_PROPERTIES = 'workspaces:ModifyWorkspaceCreationProperties',
	MODIFY_WORKSPACE_PROPERTIES = 'workspaces:ModifyWorkspaceProperties',
	MODIFY_WORKSPACE_STATE = 'workspaces:ModifyWorkspaceState',
	REBOOT_WORKSPACES = 'workspaces:RebootWorkspaces',
	REBUILD_WORKSPACES = 'workspaces:RebuildWorkspaces',
	REGISTER_WORKSPACE_DIRECTORY = 'workspaces:RegisterWorkspaceDirectory',
	RESTORE_WORKSPACE = 'workspaces:RestoreWorkspace',
	REVOKE_IP_RULES = 'workspaces:RevokeIpRules',
	START_WORKSPACES = 'workspaces:StartWorkspaces',
	STOP_WORKSPACES = 'workspaces:StopWorkspaces',
	STREAM = 'workspaces:Stream',
	TERMINATE_WORKSPACES = 'workspaces:TerminateWorkspaces',
	UPDATE_CONNECT_CLIENT_ADD_IN = 'workspaces:UpdateConnectClientAddIn',
	UPDATE_CONNECTION_ALIAS_PERMISSION = 'workspaces:UpdateConnectionAliasPermission',
	UPDATE_RULES_OF_IP_GROUP = 'workspaces:UpdateRulesOfIpGroup',
	UPDATE_WORKSPACE_BUNDLE = 'workspaces:UpdateWorkspaceBundle',
	UPDATE_WORKSPACE_IMAGE_PERMISSION = 'workspaces:UpdateWorkspaceImagePermission',
}
export enum LOOKOUT_FOR_VISION {
	CREATE_DATASET = 'lookoutvision:CreateDataset',
	CREATE_MODEL = 'lookoutvision:CreateModel',
	CREATE_PROJECT = 'lookoutvision:CreateProject',
	DELETE_DATASET = 'lookoutvision:DeleteDataset',
	DELETE_MODEL = 'lookoutvision:DeleteModel',
	DELETE_PROJECT = 'lookoutvision:DeleteProject',
	DESCRIBE_DATASET = 'lookoutvision:DescribeDataset',
	DESCRIBE_MODEL = 'lookoutvision:DescribeModel',
	DESCRIBE_MODEL_PACKAGING_JOB = 'lookoutvision:DescribeModelPackagingJob',
	DESCRIBE_PROJECT = 'lookoutvision:DescribeProject',
	DESCRIBE_TRIAL_DETECTION = 'lookoutvision:DescribeTrialDetection',
	DETECT_ANOMALIES = 'lookoutvision:DetectAnomalies',
	LIST_DATASET_ENTRIES = 'lookoutvision:ListDatasetEntries',
	LIST_MODEL_PACKAGING_JOBS = 'lookoutvision:ListModelPackagingJobs',
	LIST_MODELS = 'lookoutvision:ListModels',
	LIST_PROJECTS = 'lookoutvision:ListProjects',
	LIST_TAGS_FOR_RESOURCE = 'lookoutvision:ListTagsForResource',
	LIST_TRIAL_DETECTIONS = 'lookoutvision:ListTrialDetections',
	START_MODEL = 'lookoutvision:StartModel',
	START_MODEL_PACKAGING_JOB = 'lookoutvision:StartModelPackagingJob',
	START_TRIAL_DETECTION = 'lookoutvision:StartTrialDetection',
	STOP_MODEL = 'lookoutvision:StopModel',
	TAG_RESOURCE = 'lookoutvision:TagResource',
	UNTAG_RESOURCE = 'lookoutvision:UntagResource',
	UPDATE_DATASET_ENTRIES = 'lookoutvision:UpdateDatasetEntries',
}
export enum CHIME {
	ACCEPT_DELEGATE = 'chime:AcceptDelegate',
	ACTIVATE_USERS = 'chime:ActivateUsers',
	ADD_DOMAIN = 'chime:AddDomain',
	ADD_OR_UPDATE_GROUPS = 'chime:AddOrUpdateGroups',
	ASSOCIATE_CHANNEL_FLOW = 'chime:AssociateChannelFlow',
	ASSOCIATE_PHONE_NUMBER_WITH_USER = 'chime:AssociatePhoneNumberWithUser',
	ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR = 'chime:AssociatePhoneNumbersWithVoiceConnector',
	ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR_GROUP = 'chime:AssociatePhoneNumbersWithVoiceConnectorGroup',
	ASSOCIATE_SIGNIN_DELEGATE_GROUPS_WITH_ACCOUNT = 'chime:AssociateSigninDelegateGroupsWithAccount',
	AUTHORIZE_DIRECTORY = 'chime:AuthorizeDirectory',
	BATCH_CREATE_ATTENDEE = 'chime:BatchCreateAttendee',
	BATCH_CREATE_CHANNEL_MEMBERSHIP = 'chime:BatchCreateChannelMembership',
	BATCH_CREATE_ROOM_MEMBERSHIP = 'chime:BatchCreateRoomMembership',
	BATCH_DELETE_PHONE_NUMBER = 'chime:BatchDeletePhoneNumber',
	BATCH_SUSPEND_USER = 'chime:BatchSuspendUser',
	BATCH_UNSUSPEND_USER = 'chime:BatchUnsuspendUser',
	BATCH_UPDATE_ATTENDEE_CAPABILITIES_EXCEPT = 'chime:BatchUpdateAttendeeCapabilitiesExcept',
	BATCH_UPDATE_PHONE_NUMBER = 'chime:BatchUpdatePhoneNumber',
	BATCH_UPDATE_USER = 'chime:BatchUpdateUser',
	CHANNEL_FLOW_CALLBACK = 'chime:ChannelFlowCallback',
	CONNECT = 'chime:Connect',
	CONNECT_DIRECTORY = 'chime:ConnectDirectory',
	CREATE_ACCOUNT = 'chime:CreateAccount',
	CREATE_API_KEY = 'chime:CreateApiKey',
	CREATE_APP_INSTANCE = 'chime:CreateAppInstance',
	CREATE_APP_INSTANCE_ADMIN = 'chime:CreateAppInstanceAdmin',
	CREATE_APP_INSTANCE_USER = 'chime:CreateAppInstanceUser',
	CREATE_ATTENDEE = 'chime:CreateAttendee',
	CREATE_BOT = 'chime:CreateBot',
	CREATE_CDR_BUCKET = 'chime:CreateCDRBucket',
	CREATE_CHANNEL = 'chime:CreateChannel',
	CREATE_CHANNEL_BAN = 'chime:CreateChannelBan',
	CREATE_CHANNEL_FLOW = 'chime:CreateChannelFlow',
	CREATE_CHANNEL_MEMBERSHIP = 'chime:CreateChannelMembership',
	CREATE_CHANNEL_MODERATOR = 'chime:CreateChannelModerator',
	CREATE_MEDIA_CAPTURE_PIPELINE = 'chime:CreateMediaCapturePipeline',
	CREATE_MEDIA_CONCATENATION_PIPELINE = 'chime:CreateMediaConcatenationPipeline',
	CREATE_MEDIA_LIVE_CONNECTOR_PIPELINE = 'chime:CreateMediaLiveConnectorPipeline',
	CREATE_MEETING = 'chime:CreateMeeting',
	CREATE_MEETING_DIAL_OUT = 'chime:CreateMeetingDialOut',
	CREATE_MEETING_WITH_ATTENDEES = 'chime:CreateMeetingWithAttendees',
	CREATE_PHONE_NUMBER_ORDER = 'chime:CreatePhoneNumberOrder',
	CREATE_PROXY_SESSION = 'chime:CreateProxySession',
	CREATE_ROOM = 'chime:CreateRoom',
	CREATE_ROOM_MEMBERSHIP = 'chime:CreateRoomMembership',
	CREATE_SIP_MEDIA_APPLICATION = 'chime:CreateSipMediaApplication',
	CREATE_SIP_MEDIA_APPLICATION_CALL = 'chime:CreateSipMediaApplicationCall',
	CREATE_SIP_RULE = 'chime:CreateSipRule',
	CREATE_USER = 'chime:CreateUser',
	CREATE_VOICE_CONNECTOR = 'chime:CreateVoiceConnector',
	CREATE_VOICE_CONNECTOR_GROUP = 'chime:CreateVoiceConnectorGroup',
	DELETE_ACCOUNT = 'chime:DeleteAccount',
	DELETE_ACCOUNT_OPEN_ID_CONFIG = 'chime:DeleteAccountOpenIdConfig',
	DELETE_API_KEY = 'chime:DeleteApiKey',
	DELETE_APP_INSTANCE = 'chime:DeleteAppInstance',
	DELETE_APP_INSTANCE_ADMIN = 'chime:DeleteAppInstanceAdmin',
	DELETE_APP_INSTANCE_STREAMING_CONFIGURATIONS = 'chime:DeleteAppInstanceStreamingConfigurations',
	DELETE_APP_INSTANCE_USER = 'chime:DeleteAppInstanceUser',
	DELETE_ATTENDEE = 'chime:DeleteAttendee',
	DELETE_CDR_BUCKET = 'chime:DeleteCDRBucket',
	DELETE_CHANNEL = 'chime:DeleteChannel',
	DELETE_CHANNEL_BAN = 'chime:DeleteChannelBan',
	DELETE_CHANNEL_FLOW = 'chime:DeleteChannelFlow',
	DELETE_CHANNEL_MEMBERSHIP = 'chime:DeleteChannelMembership',
	DELETE_CHANNEL_MESSAGE = 'chime:DeleteChannelMessage',
	DELETE_CHANNEL_MODERATOR = 'chime:DeleteChannelModerator',
	DELETE_DELEGATE = 'chime:DeleteDelegate',
	DELETE_DOMAIN = 'chime:DeleteDomain',
	DELETE_EVENTS_CONFIGURATION = 'chime:DeleteEventsConfiguration',
	DELETE_GROUPS = 'chime:DeleteGroups',
	DELETE_MEDIA_CAPTURE_PIPELINE = 'chime:DeleteMediaCapturePipeline',
	DELETE_MEDIA_PIPELINE = 'chime:DeleteMediaPipeline',
	DELETE_MEETING = 'chime:DeleteMeeting',
	DELETE_PHONE_NUMBER = 'chime:DeletePhoneNumber',
	DELETE_PROXY_SESSION = 'chime:DeleteProxySession',
	DELETE_ROOM = 'chime:DeleteRoom',
	DELETE_ROOM_MEMBERSHIP = 'chime:DeleteRoomMembership',
	DELETE_SIP_MEDIA_APPLICATION = 'chime:DeleteSipMediaApplication',
	DELETE_SIP_RULE = 'chime:DeleteSipRule',
	DELETE_VOICE_CONNECTOR = 'chime:DeleteVoiceConnector',
	DELETE_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:DeleteVoiceConnectorEmergencyCallingConfiguration',
	DELETE_VOICE_CONNECTOR_GROUP = 'chime:DeleteVoiceConnectorGroup',
	DELETE_VOICE_CONNECTOR_ORIGINATION = 'chime:DeleteVoiceConnectorOrigination',
	DELETE_VOICE_CONNECTOR_PROXY = 'chime:DeleteVoiceConnectorProxy',
	DELETE_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:DeleteVoiceConnectorStreamingConfiguration',
	DELETE_VOICE_CONNECTOR_TERMINATION = 'chime:DeleteVoiceConnectorTermination',
	DELETE_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:DeleteVoiceConnectorTerminationCredentials',
	DEREGISTER_APP_INSTANCE_USER_ENDPOINT = 'chime:DeregisterAppInstanceUserEndpoint',
	DESCRIBE_APP_INSTANCE = 'chime:DescribeAppInstance',
	DESCRIBE_APP_INSTANCE_ADMIN = 'chime:DescribeAppInstanceAdmin',
	DESCRIBE_APP_INSTANCE_USER = 'chime:DescribeAppInstanceUser',
	DESCRIBE_APP_INSTANCE_USER_ENDPOINT = 'chime:DescribeAppInstanceUserEndpoint',
	DESCRIBE_CHANNEL = 'chime:DescribeChannel',
	DESCRIBE_CHANNEL_BAN = 'chime:DescribeChannelBan',
	DESCRIBE_CHANNEL_FLOW = 'chime:DescribeChannelFlow',
	DESCRIBE_CHANNEL_MEMBERSHIP = 'chime:DescribeChannelMembership',
	DESCRIBE_CHANNEL_MEMBERSHIP_FOR_APP_INSTANCE_USER = 'chime:DescribeChannelMembershipForAppInstanceUser',
	DESCRIBE_CHANNEL_MODERATED_BY_APP_INSTANCE_USER = 'chime:DescribeChannelModeratedByAppInstanceUser',
	DESCRIBE_CHANNEL_MODERATOR = 'chime:DescribeChannelModerator',
	DISASSOCIATE_CHANNEL_FLOW = 'chime:DisassociateChannelFlow',
	DISASSOCIATE_PHONE_NUMBER_FROM_USER = 'chime:DisassociatePhoneNumberFromUser',
	DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR = 'chime:DisassociatePhoneNumbersFromVoiceConnector',
	DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR_GROUP = 'chime:DisassociatePhoneNumbersFromVoiceConnectorGroup',
	DISASSOCIATE_SIGNIN_DELEGATE_GROUPS_FROM_ACCOUNT = 'chime:DisassociateSigninDelegateGroupsFromAccount',
	DISCONNECT_DIRECTORY = 'chime:DisconnectDirectory',
	GET_ACCOUNT = 'chime:GetAccount',
	GET_ACCOUNT_RESOURCE = 'chime:GetAccountResource',
	GET_ACCOUNT_SETTINGS = 'chime:GetAccountSettings',
	GET_ACCOUNT_WITH_OPEN_ID_CONFIG = 'chime:GetAccountWithOpenIdConfig',
	GET_APP_INSTANCE_RETENTION_SETTINGS = 'chime:GetAppInstanceRetentionSettings',
	GET_APP_INSTANCE_STREAMING_CONFIGURATIONS = 'chime:GetAppInstanceStreamingConfigurations',
	GET_ATTENDEE = 'chime:GetAttendee',
	GET_BOT = 'chime:GetBot',
	GET_CDR_BUCKET = 'chime:GetCDRBucket',
	GET_CHANNEL_MEMBERSHIP_PREFERENCES = 'chime:GetChannelMembershipPreferences',
	GET_CHANNEL_MESSAGE = 'chime:GetChannelMessage',
	GET_CHANNEL_MESSAGE_STATUS = 'chime:GetChannelMessageStatus',
	GET_DOMAIN = 'chime:GetDomain',
	GET_EVENTS_CONFIGURATION = 'chime:GetEventsConfiguration',
	GET_GLOBAL_SETTINGS = 'chime:GetGlobalSettings',
	GET_MEDIA_CAPTURE_PIPELINE = 'chime:GetMediaCapturePipeline',
	GET_MEDIA_PIPELINE = 'chime:GetMediaPipeline',
	GET_MEETING = 'chime:GetMeeting',
	GET_MEETING_DETAIL = 'chime:GetMeetingDetail',
	GET_MESSAGING_SESSION_ENDPOINT = 'chime:GetMessagingSessionEndpoint',
	GET_PHONE_NUMBER = 'chime:GetPhoneNumber',
	GET_PHONE_NUMBER_ORDER = 'chime:GetPhoneNumberOrder',
	GET_PHONE_NUMBER_SETTINGS = 'chime:GetPhoneNumberSettings',
	GET_PROXY_SESSION = 'chime:GetProxySession',
	GET_RETENTION_SETTINGS = 'chime:GetRetentionSettings',
	GET_ROOM = 'chime:GetRoom',
	GET_SIP_MEDIA_APPLICATION = 'chime:GetSipMediaApplication',
	GET_SIP_MEDIA_APPLICATION_LOGGING_CONFIGURATION = 'chime:GetSipMediaApplicationLoggingConfiguration',
	GET_SIP_RULE = 'chime:GetSipRule',
	GET_TELEPHONY_LIMITS = 'chime:GetTelephonyLimits',
	GET_USER = 'chime:GetUser',
	GET_USER_ACTIVITY_REPORT_DATA = 'chime:GetUserActivityReportData',
	GET_USER_BY_EMAIL = 'chime:GetUserByEmail',
	GET_USER_SETTINGS = 'chime:GetUserSettings',
	GET_VOICE_CONNECTOR = 'chime:GetVoiceConnector',
	GET_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:GetVoiceConnectorEmergencyCallingConfiguration',
	GET_VOICE_CONNECTOR_GROUP = 'chime:GetVoiceConnectorGroup',
	GET_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'chime:GetVoiceConnectorLoggingConfiguration',
	GET_VOICE_CONNECTOR_ORIGINATION = 'chime:GetVoiceConnectorOrigination',
	GET_VOICE_CONNECTOR_PROXY = 'chime:GetVoiceConnectorProxy',
	GET_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:GetVoiceConnectorStreamingConfiguration',
	GET_VOICE_CONNECTOR_TERMINATION = 'chime:GetVoiceConnectorTermination',
	GET_VOICE_CONNECTOR_TERMINATION_HEALTH = 'chime:GetVoiceConnectorTerminationHealth',
	INVITE_DELEGATE = 'chime:InviteDelegate',
	INVITE_USERS = 'chime:InviteUsers',
	INVITE_USERS_FROM_PROVIDER = 'chime:InviteUsersFromProvider',
	LIST_ACCOUNT_USAGE_REPORT_DATA = 'chime:ListAccountUsageReportData',
	LIST_ACCOUNTS = 'chime:ListAccounts',
	LIST_API_KEYS = 'chime:ListApiKeys',
	LIST_APP_INSTANCE_ADMINS = 'chime:ListAppInstanceAdmins',
	LIST_APP_INSTANCE_USER_ENDPOINTS = 'chime:ListAppInstanceUserEndpoints',
	LIST_APP_INSTANCE_USERS = 'chime:ListAppInstanceUsers',
	LIST_APP_INSTANCES = 'chime:ListAppInstances',
	LIST_ATTENDEE_TAGS = 'chime:ListAttendeeTags',
	LIST_ATTENDEES = 'chime:ListAttendees',
	LIST_BOTS = 'chime:ListBots',
	LIST_CDR_BUCKET = 'chime:ListCDRBucket',
	LIST_CALLING_REGIONS = 'chime:ListCallingRegions',
	LIST_CHANNEL_BANS = 'chime:ListChannelBans',
	LIST_CHANNEL_FLOWS = 'chime:ListChannelFlows',
	LIST_CHANNEL_MEMBERSHIPS = 'chime:ListChannelMemberships',
	LIST_CHANNEL_MEMBERSHIPS_FOR_APP_INSTANCE_USER = 'chime:ListChannelMembershipsForAppInstanceUser',
	LIST_CHANNEL_MESSAGES = 'chime:ListChannelMessages',
	LIST_CHANNEL_MODERATORS = 'chime:ListChannelModerators',
	LIST_CHANNELS = 'chime:ListChannels',
	LIST_CHANNELS_ASSOCIATED_WITH_CHANNEL_FLOW = 'chime:ListChannelsAssociatedWithChannelFlow',
	LIST_CHANNELS_MODERATED_BY_APP_INSTANCE_USER = 'chime:ListChannelsModeratedByAppInstanceUser',
	LIST_DELEGATES = 'chime:ListDelegates',
	LIST_DIRECTORIES = 'chime:ListDirectories',
	LIST_DOMAINS = 'chime:ListDomains',
	LIST_GROUPS = 'chime:ListGroups',
	LIST_MEDIA_CAPTURE_PIPELINES = 'chime:ListMediaCapturePipelines',
	LIST_MEDIA_PIPELINES = 'chime:ListMediaPipelines',
	LIST_MEETING_EVENTS = 'chime:ListMeetingEvents',
	LIST_MEETING_TAGS = 'chime:ListMeetingTags',
	LIST_MEETINGS = 'chime:ListMeetings',
	LIST_MEETINGS_REPORT_DATA = 'chime:ListMeetingsReportData',
	LIST_PHONE_NUMBER_ORDERS = 'chime:ListPhoneNumberOrders',
	LIST_PHONE_NUMBERS = 'chime:ListPhoneNumbers',
	LIST_PROXY_SESSIONS = 'chime:ListProxySessions',
	LIST_ROOM_MEMBERSHIPS = 'chime:ListRoomMemberships',
	LIST_ROOMS = 'chime:ListRooms',
	LIST_SIP_MEDIA_APPLICATIONS = 'chime:ListSipMediaApplications',
	LIST_SIP_RULES = 'chime:ListSipRules',
	LIST_SUB_CHANNELS = 'chime:ListSubChannels',
	LIST_SUPPORTED_PHONE_NUMBER_COUNTRIES = 'chime:ListSupportedPhoneNumberCountries',
	LIST_TAGS_FOR_RESOURCE = 'chime:ListTagsForResource',
	LIST_USERS = 'chime:ListUsers',
	LIST_VOICE_CONNECTOR_GROUPS = 'chime:ListVoiceConnectorGroups',
	LIST_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:ListVoiceConnectorTerminationCredentials',
	LIST_VOICE_CONNECTORS = 'chime:ListVoiceConnectors',
	LOGOUT_USER = 'chime:LogoutUser',
	PUT_APP_INSTANCE_RETENTION_SETTINGS = 'chime:PutAppInstanceRetentionSettings',
	PUT_APP_INSTANCE_STREAMING_CONFIGURATIONS = 'chime:PutAppInstanceStreamingConfigurations',
	PUT_CHANNEL_MEMBERSHIP_PREFERENCES = 'chime:PutChannelMembershipPreferences',
	PUT_EVENTS_CONFIGURATION = 'chime:PutEventsConfiguration',
	PUT_RETENTION_SETTINGS = 'chime:PutRetentionSettings',
	PUT_SIP_MEDIA_APPLICATION_LOGGING_CONFIGURATION = 'chime:PutSipMediaApplicationLoggingConfiguration',
	PUT_VOICE_CONNECTOR_EMERGENCY_CALLING_CONFIGURATION = 'chime:PutVoiceConnectorEmergencyCallingConfiguration',
	PUT_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'chime:PutVoiceConnectorLoggingConfiguration',
	PUT_VOICE_CONNECTOR_ORIGINATION = 'chime:PutVoiceConnectorOrigination',
	PUT_VOICE_CONNECTOR_PROXY = 'chime:PutVoiceConnectorProxy',
	PUT_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'chime:PutVoiceConnectorStreamingConfiguration',
	PUT_VOICE_CONNECTOR_TERMINATION = 'chime:PutVoiceConnectorTermination',
	PUT_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'chime:PutVoiceConnectorTerminationCredentials',
	REDACT_CHANNEL_MESSAGE = 'chime:RedactChannelMessage',
	REDACT_CONVERSATION_MESSAGE = 'chime:RedactConversationMessage',
	REDACT_ROOM_MESSAGE = 'chime:RedactRoomMessage',
	REGENERATE_SECURITY_TOKEN = 'chime:RegenerateSecurityToken',
	REGISTER_APP_INSTANCE_USER_ENDPOINT = 'chime:RegisterAppInstanceUserEndpoint',
	RENAME_ACCOUNT = 'chime:RenameAccount',
	RENEW_DELEGATE = 'chime:RenewDelegate',
	RESET_ACCOUNT_RESOURCE = 'chime:ResetAccountResource',
	RESET_PERSONAL_PIN = 'chime:ResetPersonalPIN',
	RESTORE_PHONE_NUMBER = 'chime:RestorePhoneNumber',
	RETRIEVE_DATA_EXPORTS = 'chime:RetrieveDataExports',
	SEARCH_AVAILABLE_PHONE_NUMBERS = 'chime:SearchAvailablePhoneNumbers',
	SEARCH_CHANNELS = 'chime:SearchChannels',
	SEND_CHANNEL_MESSAGE = 'chime:SendChannelMessage',
	START_DATA_EXPORT = 'chime:StartDataExport',
	START_MEETING_TRANSCRIPTION = 'chime:StartMeetingTranscription',
	STOP_MEETING_TRANSCRIPTION = 'chime:StopMeetingTranscription',
	SUBMIT_SUPPORT_REQUEST = 'chime:SubmitSupportRequest',
	SUSPEND_USERS = 'chime:SuspendUsers',
	TAG_ATTENDEE = 'chime:TagAttendee',
	TAG_MEETING = 'chime:TagMeeting',
	TAG_RESOURCE = 'chime:TagResource',
	UNAUTHORIZE_DIRECTORY = 'chime:UnauthorizeDirectory',
	UNTAG_ATTENDEE = 'chime:UntagAttendee',
	UNTAG_MEETING = 'chime:UntagMeeting',
	UNTAG_RESOURCE = 'chime:UntagResource',
	UPDATE_ACCOUNT = 'chime:UpdateAccount',
	UPDATE_ACCOUNT_OPEN_ID_CONFIG = 'chime:UpdateAccountOpenIdConfig',
	UPDATE_ACCOUNT_RESOURCE = 'chime:UpdateAccountResource',
	UPDATE_ACCOUNT_SETTINGS = 'chime:UpdateAccountSettings',
	UPDATE_APP_INSTANCE = 'chime:UpdateAppInstance',
	UPDATE_APP_INSTANCE_USER = 'chime:UpdateAppInstanceUser',
	UPDATE_APP_INSTANCE_USER_ENDPOINT = 'chime:UpdateAppInstanceUserEndpoint',
	UPDATE_ATTENDEE_CAPABILITIES = 'chime:UpdateAttendeeCapabilities',
	UPDATE_BOT = 'chime:UpdateBot',
	UPDATE_CDR_SETTINGS = 'chime:UpdateCDRSettings',
	UPDATE_CHANNEL = 'chime:UpdateChannel',
	UPDATE_CHANNEL_FLOW = 'chime:UpdateChannelFlow',
	UPDATE_CHANNEL_MESSAGE = 'chime:UpdateChannelMessage',
	UPDATE_CHANNEL_READ_MARKER = 'chime:UpdateChannelReadMarker',
	UPDATE_GLOBAL_SETTINGS = 'chime:UpdateGlobalSettings',
	UPDATE_PHONE_NUMBER = 'chime:UpdatePhoneNumber',
	UPDATE_PHONE_NUMBER_SETTINGS = 'chime:UpdatePhoneNumberSettings',
	UPDATE_PROXY_SESSION = 'chime:UpdateProxySession',
	UPDATE_ROOM = 'chime:UpdateRoom',
	UPDATE_ROOM_MEMBERSHIP = 'chime:UpdateRoomMembership',
	UPDATE_SIP_MEDIA_APPLICATION = 'chime:UpdateSipMediaApplication',
	UPDATE_SIP_MEDIA_APPLICATION_CALL = 'chime:UpdateSipMediaApplicationCall',
	UPDATE_SIP_RULE = 'chime:UpdateSipRule',
	UPDATE_SUPPORTED_LICENSES = 'chime:UpdateSupportedLicenses',
	UPDATE_USER = 'chime:UpdateUser',
	UPDATE_USER_LICENSES = 'chime:UpdateUserLicenses',
	UPDATE_USER_SETTINGS = 'chime:UpdateUserSettings',
	UPDATE_VOICE_CONNECTOR = 'chime:UpdateVoiceConnector',
	UPDATE_VOICE_CONNECTOR_GROUP = 'chime:UpdateVoiceConnectorGroup',
	VALIDATE_ACCOUNT_RESOURCE = 'chime:ValidateAccountResource',
}
export enum ELASTICACHE {
	ADD_TAGS_TO_RESOURCE = 'elasticache:AddTagsToResource',
	AUTHORIZE_CACHE_SECURITY_GROUP_INGRESS = 'elasticache:AuthorizeCacheSecurityGroupIngress',
	BATCH_APPLY_UPDATE_ACTION = 'elasticache:BatchApplyUpdateAction',
	BATCH_STOP_UPDATE_ACTION = 'elasticache:BatchStopUpdateAction',
	COMPLETE_MIGRATION = 'elasticache:CompleteMigration',
	CONNECT = 'elasticache:Connect',
	COPY_SNAPSHOT = 'elasticache:CopySnapshot',
	CREATE_CACHE_CLUSTER = 'elasticache:CreateCacheCluster',
	CREATE_CACHE_PARAMETER_GROUP = 'elasticache:CreateCacheParameterGroup',
	CREATE_CACHE_SECURITY_GROUP = 'elasticache:CreateCacheSecurityGroup',
	CREATE_CACHE_SUBNET_GROUP = 'elasticache:CreateCacheSubnetGroup',
	CREATE_GLOBAL_REPLICATION_GROUP = 'elasticache:CreateGlobalReplicationGroup',
	CREATE_REPLICATION_GROUP = 'elasticache:CreateReplicationGroup',
	CREATE_SNAPSHOT = 'elasticache:CreateSnapshot',
	CREATE_USER = 'elasticache:CreateUser',
	CREATE_USER_GROUP = 'elasticache:CreateUserGroup',
	DECREASE_NODE_GROUPS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:DecreaseNodeGroupsInGlobalReplicationGroup',
	DECREASE_REPLICA_COUNT = 'elasticache:DecreaseReplicaCount',
	DELETE_CACHE_CLUSTER = 'elasticache:DeleteCacheCluster',
	DELETE_CACHE_PARAMETER_GROUP = 'elasticache:DeleteCacheParameterGroup',
	DELETE_CACHE_SECURITY_GROUP = 'elasticache:DeleteCacheSecurityGroup',
	DELETE_CACHE_SUBNET_GROUP = 'elasticache:DeleteCacheSubnetGroup',
	DELETE_GLOBAL_REPLICATION_GROUP = 'elasticache:DeleteGlobalReplicationGroup',
	DELETE_REPLICATION_GROUP = 'elasticache:DeleteReplicationGroup',
	DELETE_SNAPSHOT = 'elasticache:DeleteSnapshot',
	DELETE_USER = 'elasticache:DeleteUser',
	DELETE_USER_GROUP = 'elasticache:DeleteUserGroup',
	DESCRIBE_CACHE_CLUSTERS = 'elasticache:DescribeCacheClusters',
	DESCRIBE_CACHE_ENGINE_VERSIONS = 'elasticache:DescribeCacheEngineVersions',
	DESCRIBE_CACHE_PARAMETER_GROUPS = 'elasticache:DescribeCacheParameterGroups',
	DESCRIBE_CACHE_PARAMETERS = 'elasticache:DescribeCacheParameters',
	DESCRIBE_CACHE_SECURITY_GROUPS = 'elasticache:DescribeCacheSecurityGroups',
	DESCRIBE_CACHE_SUBNET_GROUPS = 'elasticache:DescribeCacheSubnetGroups',
	DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'elasticache:DescribeEngineDefaultParameters',
	DESCRIBE_EVENTS = 'elasticache:DescribeEvents',
	DESCRIBE_GLOBAL_REPLICATION_GROUPS = 'elasticache:DescribeGlobalReplicationGroups',
	DESCRIBE_REPLICATION_GROUPS = 'elasticache:DescribeReplicationGroups',
	DESCRIBE_RESERVED_CACHE_NODES = 'elasticache:DescribeReservedCacheNodes',
	DESCRIBE_RESERVED_CACHE_NODES_OFFERINGS = 'elasticache:DescribeReservedCacheNodesOfferings',
	DESCRIBE_SERVICE_UPDATES = 'elasticache:DescribeServiceUpdates',
	DESCRIBE_SNAPSHOTS = 'elasticache:DescribeSnapshots',
	DESCRIBE_UPDATE_ACTIONS = 'elasticache:DescribeUpdateActions',
	DESCRIBE_USER_GROUPS = 'elasticache:DescribeUserGroups',
	DESCRIBE_USERS = 'elasticache:DescribeUsers',
	DISASSOCIATE_GLOBAL_REPLICATION_GROUP = 'elasticache:DisassociateGlobalReplicationGroup',
	FAILOVER_GLOBAL_REPLICATION_GROUP = 'elasticache:FailoverGlobalReplicationGroup',
	INCREASE_NODE_GROUPS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:IncreaseNodeGroupsInGlobalReplicationGroup',
	INCREASE_REPLICA_COUNT = 'elasticache:IncreaseReplicaCount',
	LIST_ALLOWED_NODE_TYPE_MODIFICATIONS = 'elasticache:ListAllowedNodeTypeModifications',
	LIST_TAGS_FOR_RESOURCE = 'elasticache:ListTagsForResource',
	MODIFY_CACHE_CLUSTER = 'elasticache:ModifyCacheCluster',
	MODIFY_CACHE_PARAMETER_GROUP = 'elasticache:ModifyCacheParameterGroup',
	MODIFY_CACHE_SUBNET_GROUP = 'elasticache:ModifyCacheSubnetGroup',
	MODIFY_GLOBAL_REPLICATION_GROUP = 'elasticache:ModifyGlobalReplicationGroup',
	MODIFY_REPLICATION_GROUP = 'elasticache:ModifyReplicationGroup',
	MODIFY_REPLICATION_GROUP_SHARD_CONFIGURATION = 'elasticache:ModifyReplicationGroupShardConfiguration',
	MODIFY_USER = 'elasticache:ModifyUser',
	MODIFY_USER_GROUP = 'elasticache:ModifyUserGroup',
	PURCHASE_RESERVED_CACHE_NODES_OFFERING = 'elasticache:PurchaseReservedCacheNodesOffering',
	REBALANCE_SLOTS_IN_GLOBAL_REPLICATION_GROUP = 'elasticache:RebalanceSlotsInGlobalReplicationGroup',
	REBOOT_CACHE_CLUSTER = 'elasticache:RebootCacheCluster',
	REMOVE_TAGS_FROM_RESOURCE = 'elasticache:RemoveTagsFromResource',
	RESET_CACHE_PARAMETER_GROUP = 'elasticache:ResetCacheParameterGroup',
	REVOKE_CACHE_SECURITY_GROUP_INGRESS = 'elasticache:RevokeCacheSecurityGroupIngress',
	START_MIGRATION = 'elasticache:StartMigration',
	TEST_FAILOVER = 'elasticache:TestFailover',
}
export enum IOT_CORE_FOR_LORAWAN {
	ASSOCIATE_AWS_ACCOUNT_WITH_PARTNER_ACCOUNT = 'iotwireless:AssociateAwsAccountWithPartnerAccount',
	ASSOCIATE_MULTICAST_GROUP_WITH_FUOTA_TASK = 'iotwireless:AssociateMulticastGroupWithFuotaTask',
	ASSOCIATE_WIRELESS_DEVICE_WITH_FUOTA_TASK = 'iotwireless:AssociateWirelessDeviceWithFuotaTask',
	ASSOCIATE_WIRELESS_DEVICE_WITH_MULTICAST_GROUP = 'iotwireless:AssociateWirelessDeviceWithMulticastGroup',
	ASSOCIATE_WIRELESS_DEVICE_WITH_THING = 'iotwireless:AssociateWirelessDeviceWithThing',
	ASSOCIATE_WIRELESS_GATEWAY_WITH_CERTIFICATE = 'iotwireless:AssociateWirelessGatewayWithCertificate',
	ASSOCIATE_WIRELESS_GATEWAY_WITH_THING = 'iotwireless:AssociateWirelessGatewayWithThing',
	CANCEL_MULTICAST_GROUP_SESSION = 'iotwireless:CancelMulticastGroupSession',
	CREATE_DESTINATION = 'iotwireless:CreateDestination',
	CREATE_DEVICE_PROFILE = 'iotwireless:CreateDeviceProfile',
	CREATE_FUOTA_TASK = 'iotwireless:CreateFuotaTask',
	CREATE_MULTICAST_GROUP = 'iotwireless:CreateMulticastGroup',
	CREATE_NETWORK_ANALYZER_CONFIGURATION = 'iotwireless:CreateNetworkAnalyzerConfiguration',
	CREATE_SERVICE_PROFILE = 'iotwireless:CreateServiceProfile',
	CREATE_WIRELESS_DEVICE = 'iotwireless:CreateWirelessDevice',
	CREATE_WIRELESS_GATEWAY = 'iotwireless:CreateWirelessGateway',
	CREATE_WIRELESS_GATEWAY_TASK = 'iotwireless:CreateWirelessGatewayTask',
	CREATE_WIRELESS_GATEWAY_TASK_DEFINITION = 'iotwireless:CreateWirelessGatewayTaskDefinition',
	DELETE_DESTINATION = 'iotwireless:DeleteDestination',
	DELETE_DEVICE_PROFILE = 'iotwireless:DeleteDeviceProfile',
	DELETE_FUOTA_TASK = 'iotwireless:DeleteFuotaTask',
	DELETE_MULTICAST_GROUP = 'iotwireless:DeleteMulticastGroup',
	DELETE_NETWORK_ANALYZER_CONFIGURATION = 'iotwireless:DeleteNetworkAnalyzerConfiguration',
	DELETE_QUEUED_MESSAGES = 'iotwireless:DeleteQueuedMessages',
	DELETE_SERVICE_PROFILE = 'iotwireless:DeleteServiceProfile',
	DELETE_WIRELESS_DEVICE = 'iotwireless:DeleteWirelessDevice',
	DELETE_WIRELESS_GATEWAY = 'iotwireless:DeleteWirelessGateway',
	DELETE_WIRELESS_GATEWAY_TASK = 'iotwireless:DeleteWirelessGatewayTask',
	DELETE_WIRELESS_GATEWAY_TASK_DEFINITION = 'iotwireless:DeleteWirelessGatewayTaskDefinition',
	DISASSOCIATE_AWS_ACCOUNT_FROM_PARTNER_ACCOUNT = 'iotwireless:DisassociateAwsAccountFromPartnerAccount',
	DISASSOCIATE_MULTICAST_GROUP_FROM_FUOTA_TASK = 'iotwireless:DisassociateMulticastGroupFromFuotaTask',
	DISASSOCIATE_WIRELESS_DEVICE_FROM_FUOTA_TASK = 'iotwireless:DisassociateWirelessDeviceFromFuotaTask',
	DISASSOCIATE_WIRELESS_DEVICE_FROM_MULTICAST_GROUP = 'iotwireless:DisassociateWirelessDeviceFromMulticastGroup',
	DISASSOCIATE_WIRELESS_DEVICE_FROM_THING = 'iotwireless:DisassociateWirelessDeviceFromThing',
	DISASSOCIATE_WIRELESS_GATEWAY_FROM_CERTIFICATE = 'iotwireless:DisassociateWirelessGatewayFromCertificate',
	DISASSOCIATE_WIRELESS_GATEWAY_FROM_THING = 'iotwireless:DisassociateWirelessGatewayFromThing',
	GET_DESTINATION = 'iotwireless:GetDestination',
	GET_DEVICE_PROFILE = 'iotwireless:GetDeviceProfile',
	GET_EVENT_CONFIGURATION_BY_RESOURCE_TYPES = 'iotwireless:GetEventConfigurationByResourceTypes',
	GET_FUOTA_TASK = 'iotwireless:GetFuotaTask',
	GET_LOG_LEVELS_BY_RESOURCE_TYPES = 'iotwireless:GetLogLevelsByResourceTypes',
	GET_MULTICAST_GROUP = 'iotwireless:GetMulticastGroup',
	GET_MULTICAST_GROUP_SESSION = 'iotwireless:GetMulticastGroupSession',
	GET_NETWORK_ANALYZER_CONFIGURATION = 'iotwireless:GetNetworkAnalyzerConfiguration',
	GET_PARTNER_ACCOUNT = 'iotwireless:GetPartnerAccount',
	GET_POSITION = 'iotwireless:GetPosition',
	GET_POSITION_CONFIGURATION = 'iotwireless:GetPositionConfiguration',
	GET_POSITION_ESTIMATE = 'iotwireless:GetPositionEstimate',
	GET_RESOURCE_EVENT_CONFIGURATION = 'iotwireless:GetResourceEventConfiguration',
	GET_RESOURCE_LOG_LEVEL = 'iotwireless:GetResourceLogLevel',
	GET_RESOURCE_POSITION = 'iotwireless:GetResourcePosition',
	GET_SERVICE_ENDPOINT = 'iotwireless:GetServiceEndpoint',
	GET_SERVICE_PROFILE = 'iotwireless:GetServiceProfile',
	GET_WIRELESS_DEVICE = 'iotwireless:GetWirelessDevice',
	GET_WIRELESS_DEVICE_STATISTICS = 'iotwireless:GetWirelessDeviceStatistics',
	GET_WIRELESS_GATEWAY = 'iotwireless:GetWirelessGateway',
	GET_WIRELESS_GATEWAY_CERTIFICATE = 'iotwireless:GetWirelessGatewayCertificate',
	GET_WIRELESS_GATEWAY_FIRMWARE_INFORMATION = 'iotwireless:GetWirelessGatewayFirmwareInformation',
	GET_WIRELESS_GATEWAY_STATISTICS = 'iotwireless:GetWirelessGatewayStatistics',
	GET_WIRELESS_GATEWAY_TASK = 'iotwireless:GetWirelessGatewayTask',
	GET_WIRELESS_GATEWAY_TASK_DEFINITION = 'iotwireless:GetWirelessGatewayTaskDefinition',
	LIST_DESTINATIONS = 'iotwireless:ListDestinations',
	LIST_DEVICE_PROFILES = 'iotwireless:ListDeviceProfiles',
	LIST_EVENT_CONFIGURATIONS = 'iotwireless:ListEventConfigurations',
	LIST_FUOTA_TASKS = 'iotwireless:ListFuotaTasks',
	LIST_MULTICAST_GROUPS = 'iotwireless:ListMulticastGroups',
	LIST_MULTICAST_GROUPS_BY_FUOTA_TASK = 'iotwireless:ListMulticastGroupsByFuotaTask',
	LIST_NETWORK_ANALYZER_CONFIGURATIONS = 'iotwireless:ListNetworkAnalyzerConfigurations',
	LIST_PARTNER_ACCOUNTS = 'iotwireless:ListPartnerAccounts',
	LIST_POSITION_CONFIGURATIONS = 'iotwireless:ListPositionConfigurations',
	LIST_QUEUED_MESSAGES = 'iotwireless:ListQueuedMessages',
	LIST_SERVICE_PROFILES = 'iotwireless:ListServiceProfiles',
	LIST_TAGS_FOR_RESOURCE = 'iotwireless:ListTagsForResource',
	LIST_WIRELESS_DEVICES = 'iotwireless:ListWirelessDevices',
	LIST_WIRELESS_GATEWAY_TASK_DEFINITIONS = 'iotwireless:ListWirelessGatewayTaskDefinitions',
	LIST_WIRELESS_GATEWAYS = 'iotwireless:ListWirelessGateways',
	PUT_POSITION_CONFIGURATION = 'iotwireless:PutPositionConfiguration',
	PUT_RESOURCE_LOG_LEVEL = 'iotwireless:PutResourceLogLevel',
	RESET_ALL_RESOURCE_LOG_LEVELS = 'iotwireless:ResetAllResourceLogLevels',
	RESET_RESOURCE_LOG_LEVEL = 'iotwireless:ResetResourceLogLevel',
	SEND_DATA_TO_MULTICAST_GROUP = 'iotwireless:SendDataToMulticastGroup',
	SEND_DATA_TO_WIRELESS_DEVICE = 'iotwireless:SendDataToWirelessDevice',
	START_BULK_ASSOCIATE_WIRELESS_DEVICE_WITH_MULTICAST_GROUP = 'iotwireless:StartBulkAssociateWirelessDeviceWithMulticastGroup',
	START_BULK_DISASSOCIATE_WIRELESS_DEVICE_FROM_MULTICAST_GROUP = 'iotwireless:StartBulkDisassociateWirelessDeviceFromMulticastGroup',
	START_FUOTA_TASK = 'iotwireless:StartFuotaTask',
	START_MULTICAST_GROUP_SESSION = 'iotwireless:StartMulticastGroupSession',
	START_NETWORK_ANALYZER_STREAM = 'iotwireless:StartNetworkAnalyzerStream',
	TAG_RESOURCE = 'iotwireless:TagResource',
	TEST_WIRELESS_DEVICE = 'iotwireless:TestWirelessDevice',
	UNTAG_RESOURCE = 'iotwireless:UntagResource',
	UPDATE_DESTINATION = 'iotwireless:UpdateDestination',
	UPDATE_EVENT_CONFIGURATION_BY_RESOURCE_TYPES = 'iotwireless:UpdateEventConfigurationByResourceTypes',
	UPDATE_FUOTA_TASK = 'iotwireless:UpdateFuotaTask',
	UPDATE_LOG_LEVELS_BY_RESOURCE_TYPES = 'iotwireless:UpdateLogLevelsByResourceTypes',
	UPDATE_MULTICAST_GROUP = 'iotwireless:UpdateMulticastGroup',
	UPDATE_NETWORK_ANALYZER_CONFIGURATION = 'iotwireless:UpdateNetworkAnalyzerConfiguration',
	UPDATE_PARTNER_ACCOUNT = 'iotwireless:UpdatePartnerAccount',
	UPDATE_POSITION = 'iotwireless:UpdatePosition',
	UPDATE_RESOURCE_EVENT_CONFIGURATION = 'iotwireless:UpdateResourceEventConfiguration',
	UPDATE_RESOURCE_POSITION = 'iotwireless:UpdateResourcePosition',
	UPDATE_WIRELESS_DEVICE = 'iotwireless:UpdateWirelessDevice',
	UPDATE_WIRELESS_GATEWAY = 'iotwireless:UpdateWirelessGateway',
}
export enum KINESIS_FIREHOSE {
	CREATE_DELIVERY_STREAM = 'firehose:CreateDeliveryStream',
	DELETE_DELIVERY_STREAM = 'firehose:DeleteDeliveryStream',
	DESCRIBE_DELIVERY_STREAM = 'firehose:DescribeDeliveryStream',
	LIST_DELIVERY_STREAMS = 'firehose:ListDeliveryStreams',
	LIST_TAGS_FOR_DELIVERY_STREAM = 'firehose:ListTagsForDeliveryStream',
	PUT_RECORD = 'firehose:PutRecord',
	PUT_RECORD_BATCH = 'firehose:PutRecordBatch',
	START_DELIVERY_STREAM_ENCRYPTION = 'firehose:StartDeliveryStreamEncryption',
	STOP_DELIVERY_STREAM_ENCRYPTION = 'firehose:StopDeliveryStreamEncryption',
	TAG_DELIVERY_STREAM = 'firehose:TagDeliveryStream',
	UNTAG_DELIVERY_STREAM = 'firehose:UntagDeliveryStream',
	UPDATE_DESTINATION = 'firehose:UpdateDestination',
}
export enum MECHANICAL_TURK {
	ACCEPT_QUALIFICATION_REQUEST = 'mechanicalturk:AcceptQualificationRequest',
	APPROVE_ASSIGNMENT = 'mechanicalturk:ApproveAssignment',
	ASSOCIATE_QUALIFICATION_WITH_WORKER = 'mechanicalturk:AssociateQualificationWithWorker',
	CREATE_ADDITIONAL_ASSIGNMENTS_FOR_HIT = 'mechanicalturk:CreateAdditionalAssignmentsForHIT',
	CREATE_HIT = 'mechanicalturk:CreateHIT',
	CREATE_HIT_TYPE = 'mechanicalturk:CreateHITType',
	CREATE_HIT_WITH_HIT_TYPE = 'mechanicalturk:CreateHITWithHITType',
	CREATE_QUALIFICATION_TYPE = 'mechanicalturk:CreateQualificationType',
	CREATE_WORKER_BLOCK = 'mechanicalturk:CreateWorkerBlock',
	DELETE_HIT = 'mechanicalturk:DeleteHIT',
	DELETE_QUALIFICATION_TYPE = 'mechanicalturk:DeleteQualificationType',
	DELETE_WORKER_BLOCK = 'mechanicalturk:DeleteWorkerBlock',
	DISASSOCIATE_QUALIFICATION_FROM_WORKER = 'mechanicalturk:DisassociateQualificationFromWorker',
	GET_ACCOUNT_BALANCE = 'mechanicalturk:GetAccountBalance',
	GET_ASSIGNMENT = 'mechanicalturk:GetAssignment',
	GET_FILE_UPLOAD_URL = 'mechanicalturk:GetFileUploadURL',
	GET_HIT = 'mechanicalturk:GetHIT',
	GET_QUALIFICATION_SCORE = 'mechanicalturk:GetQualificationScore',
	GET_QUALIFICATION_TYPE = 'mechanicalturk:GetQualificationType',
	LIST_ASSIGNMENTS_FOR_HIT = 'mechanicalturk:ListAssignmentsForHIT',
	LIST_BONUS_PAYMENTS = 'mechanicalturk:ListBonusPayments',
	LIST_HI_TS = 'mechanicalturk:ListHITs',
	LIST_HI_TS_FOR_QUALIFICATION_TYPE = 'mechanicalturk:ListHITsForQualificationType',
	LIST_QUALIFICATION_REQUESTS = 'mechanicalturk:ListQualificationRequests',
	LIST_QUALIFICATION_TYPES = 'mechanicalturk:ListQualificationTypes',
	LIST_REVIEW_POLICY_RESULTS_FOR_HIT = 'mechanicalturk:ListReviewPolicyResultsForHIT',
	LIST_REVIEWABLE_HI_TS = 'mechanicalturk:ListReviewableHITs',
	LIST_WORKER_BLOCKS = 'mechanicalturk:ListWorkerBlocks',
	LIST_WORKERS_WITH_QUALIFICATION_TYPE = 'mechanicalturk:ListWorkersWithQualificationType',
	NOTIFY_WORKERS = 'mechanicalturk:NotifyWorkers',
	REJECT_ASSIGNMENT = 'mechanicalturk:RejectAssignment',
	REJECT_QUALIFICATION_REQUEST = 'mechanicalturk:RejectQualificationRequest',
	SEND_BONUS = 'mechanicalturk:SendBonus',
	SEND_TEST_EVENT_NOTIFICATION = 'mechanicalturk:SendTestEventNotification',
	UPDATE_EXPIRATION_FOR_HIT = 'mechanicalturk:UpdateExpirationForHIT',
	UPDATE_HIT_REVIEW_STATUS = 'mechanicalturk:UpdateHITReviewStatus',
	UPDATE_HIT_TYPE_OF_HIT = 'mechanicalturk:UpdateHITTypeOfHIT',
	UPDATE_NOTIFICATION_SETTINGS = 'mechanicalturk:UpdateNotificationSettings',
	UPDATE_QUALIFICATION_TYPE = 'mechanicalturk:UpdateQualificationType',
}
export enum STORAGE_GATEWAY {
	ACTIVATE_GATEWAY = 'storagegateway:ActivateGateway',
	ADD_CACHE = 'storagegateway:AddCache',
	ADD_TAGS_TO_RESOURCE = 'storagegateway:AddTagsToResource',
	ADD_UPLOAD_BUFFER = 'storagegateway:AddUploadBuffer',
	ADD_WORKING_STORAGE = 'storagegateway:AddWorkingStorage',
	ASSIGN_TAPE_POOL = 'storagegateway:AssignTapePool',
	ASSOCIATE_FILE_SYSTEM = 'storagegateway:AssociateFileSystem',
	ATTACH_VOLUME = 'storagegateway:AttachVolume',
	BYPASS_GOVERNANCE_RETENTION = 'storagegateway:BypassGovernanceRetention',
	CANCEL_ARCHIVAL = 'storagegateway:CancelArchival',
	CANCEL_RETRIEVAL = 'storagegateway:CancelRetrieval',
	CREATE_CACHEDI_SCSI_VOLUME = 'storagegateway:CreateCachediSCSIVolume',
	CREATE_NFS_FILE_SHARE = 'storagegateway:CreateNFSFileShare',
	CREATE_SMB_FILE_SHARE = 'storagegateway:CreateSMBFileShare',
	CREATE_SNAPSHOT = 'storagegateway:CreateSnapshot',
	CREATE_SNAPSHOT_FROM_VOLUME_RECOVERY_POINT = 'storagegateway:CreateSnapshotFromVolumeRecoveryPoint',
	CREATE_STOREDI_SCSI_VOLUME = 'storagegateway:CreateStorediSCSIVolume',
	CREATE_TAPE_POOL = 'storagegateway:CreateTapePool',
	CREATE_TAPE_WITH_BARCODE = 'storagegateway:CreateTapeWithBarcode',
	CREATE_TAPES = 'storagegateway:CreateTapes',
	DELETE_AUTOMATIC_TAPE_CREATION_POLICY = 'storagegateway:DeleteAutomaticTapeCreationPolicy',
	DELETE_BANDWIDTH_RATE_LIMIT = 'storagegateway:DeleteBandwidthRateLimit',
	DELETE_CHAP_CREDENTIALS = 'storagegateway:DeleteChapCredentials',
	DELETE_FILE_SHARE = 'storagegateway:DeleteFileShare',
	DELETE_GATEWAY = 'storagegateway:DeleteGateway',
	DELETE_SNAPSHOT_SCHEDULE = 'storagegateway:DeleteSnapshotSchedule',
	DELETE_TAPE = 'storagegateway:DeleteTape',
	DELETE_TAPE_ARCHIVE = 'storagegateway:DeleteTapeArchive',
	DELETE_TAPE_POOL = 'storagegateway:DeleteTapePool',
	DELETE_VOLUME = 'storagegateway:DeleteVolume',
	DESCRIBE_AVAILABILITY_MONITOR_TEST = 'storagegateway:DescribeAvailabilityMonitorTest',
	DESCRIBE_BANDWIDTH_RATE_LIMIT = 'storagegateway:DescribeBandwidthRateLimit',
	DESCRIBE_BANDWIDTH_RATE_LIMIT_SCHEDULE = 'storagegateway:DescribeBandwidthRateLimitSchedule',
	DESCRIBE_CACHE = 'storagegateway:DescribeCache',
	DESCRIBE_CACHEDI_SCSI_VOLUMES = 'storagegateway:DescribeCachediSCSIVolumes',
	DESCRIBE_CHAP_CREDENTIALS = 'storagegateway:DescribeChapCredentials',
	DESCRIBE_FILE_SYSTEM_ASSOCIATIONS = 'storagegateway:DescribeFileSystemAssociations',
	DESCRIBE_GATEWAY_INFORMATION = 'storagegateway:DescribeGatewayInformation',
	DESCRIBE_MAINTENANCE_START_TIME = 'storagegateway:DescribeMaintenanceStartTime',
	DESCRIBE_NFS_FILE_SHARES = 'storagegateway:DescribeNFSFileShares',
	DESCRIBE_SMB_FILE_SHARES = 'storagegateway:DescribeSMBFileShares',
	DESCRIBE_SMB_SETTINGS = 'storagegateway:DescribeSMBSettings',
	DESCRIBE_SNAPSHOT_SCHEDULE = 'storagegateway:DescribeSnapshotSchedule',
	DESCRIBE_STOREDI_SCSI_VOLUMES = 'storagegateway:DescribeStorediSCSIVolumes',
	DESCRIBE_TAPE_ARCHIVES = 'storagegateway:DescribeTapeArchives',
	DESCRIBE_TAPE_RECOVERY_POINTS = 'storagegateway:DescribeTapeRecoveryPoints',
	DESCRIBE_TAPES = 'storagegateway:DescribeTapes',
	DESCRIBE_UPLOAD_BUFFER = 'storagegateway:DescribeUploadBuffer',
	DESCRIBE_VTL_DEVICES = 'storagegateway:DescribeVTLDevices',
	DESCRIBE_WORKING_STORAGE = 'storagegateway:DescribeWorkingStorage',
	DETACH_VOLUME = 'storagegateway:DetachVolume',
	DISABLE_GATEWAY = 'storagegateway:DisableGateway',
	DISASSOCIATE_FILE_SYSTEM = 'storagegateway:DisassociateFileSystem',
	JOIN_DOMAIN = 'storagegateway:JoinDomain',
	LIST_AUTOMATIC_TAPE_CREATION_POLICIES = 'storagegateway:ListAutomaticTapeCreationPolicies',
	LIST_FILE_SHARES = 'storagegateway:ListFileShares',
	LIST_FILE_SYSTEM_ASSOCIATIONS = 'storagegateway:ListFileSystemAssociations',
	LIST_GATEWAYS = 'storagegateway:ListGateways',
	LIST_LOCAL_DISKS = 'storagegateway:ListLocalDisks',
	LIST_TAGS_FOR_RESOURCE = 'storagegateway:ListTagsForResource',
	LIST_TAPE_POOLS = 'storagegateway:ListTapePools',
	LIST_TAPES = 'storagegateway:ListTapes',
	LIST_VOLUME_INITIATORS = 'storagegateway:ListVolumeInitiators',
	LIST_VOLUME_RECOVERY_POINTS = 'storagegateway:ListVolumeRecoveryPoints',
	LIST_VOLUMES = 'storagegateway:ListVolumes',
	NOTIFY_WHEN_UPLOADED = 'storagegateway:NotifyWhenUploaded',
	REFRESH_CACHE = 'storagegateway:RefreshCache',
	REMOVE_TAGS_FROM_RESOURCE = 'storagegateway:RemoveTagsFromResource',
	RESET_CACHE = 'storagegateway:ResetCache',
	RETRIEVE_TAPE_ARCHIVE = 'storagegateway:RetrieveTapeArchive',
	RETRIEVE_TAPE_RECOVERY_POINT = 'storagegateway:RetrieveTapeRecoveryPoint',
	SET_LOCAL_CONSOLE_PASSWORD = 'storagegateway:SetLocalConsolePassword',
	SET_SMB_GUEST_PASSWORD = 'storagegateway:SetSMBGuestPassword',
	SHUTDOWN_GATEWAY = 'storagegateway:ShutdownGateway',
	START_AVAILABILITY_MONITOR_TEST = 'storagegateway:StartAvailabilityMonitorTest',
	START_GATEWAY = 'storagegateway:StartGateway',
	UPDATE_AUTOMATIC_TAPE_CREATION_POLICY = 'storagegateway:UpdateAutomaticTapeCreationPolicy',
	UPDATE_BANDWIDTH_RATE_LIMIT = 'storagegateway:UpdateBandwidthRateLimit',
	UPDATE_BANDWIDTH_RATE_LIMIT_SCHEDULE = 'storagegateway:UpdateBandwidthRateLimitSchedule',
	UPDATE_CHAP_CREDENTIALS = 'storagegateway:UpdateChapCredentials',
	UPDATE_FILE_SYSTEM_ASSOCIATION = 'storagegateway:UpdateFileSystemAssociation',
	UPDATE_GATEWAY_INFORMATION = 'storagegateway:UpdateGatewayInformation',
	UPDATE_GATEWAY_SOFTWARE_NOW = 'storagegateway:UpdateGatewaySoftwareNow',
	UPDATE_MAINTENANCE_START_TIME = 'storagegateway:UpdateMaintenanceStartTime',
	UPDATE_NFS_FILE_SHARE = 'storagegateway:UpdateNFSFileShare',
	UPDATE_SMB_FILE_SHARE = 'storagegateway:UpdateSMBFileShare',
	UPDATE_SMB_FILE_SHARE_VISIBILITY = 'storagegateway:UpdateSMBFileShareVisibility',
	UPDATE_SMB_LOCAL_GROUPS = 'storagegateway:UpdateSMBLocalGroups',
	UPDATE_SMB_SECURITY_STRATEGY = 'storagegateway:UpdateSMBSecurityStrategy',
	UPDATE_SNAPSHOT_SCHEDULE = 'storagegateway:UpdateSnapshotSchedule',
	UPDATE_VTL_DEVICE_TYPE = 'storagegateway:UpdateVTLDeviceType',
}
export enum ELASTIC_MAPREDUCE {
	ADD_INSTANCE_FLEET = 'elasticmapreduce:AddInstanceFleet',
	ADD_INSTANCE_GROUPS = 'elasticmapreduce:AddInstanceGroups',
	ADD_JOB_FLOW_STEPS = 'elasticmapreduce:AddJobFlowSteps',
	ADD_TAGS = 'elasticmapreduce:AddTags',
	ATTACH_EDITOR = 'elasticmapreduce:AttachEditor',
	CANCEL_STEPS = 'elasticmapreduce:CancelSteps',
	CREATE_EDITOR = 'elasticmapreduce:CreateEditor',
	CREATE_PERSISTENT_APP_UI = 'elasticmapreduce:CreatePersistentAppUI',
	CREATE_REPOSITORY = 'elasticmapreduce:CreateRepository',
	CREATE_SECURITY_CONFIGURATION = 'elasticmapreduce:CreateSecurityConfiguration',
	CREATE_STUDIO = 'elasticmapreduce:CreateStudio',
	CREATE_STUDIO_PRESIGNED_URL = 'elasticmapreduce:CreateStudioPresignedUrl',
	CREATE_STUDIO_SESSION_MAPPING = 'elasticmapreduce:CreateStudioSessionMapping',
	DELETE_EDITOR = 'elasticmapreduce:DeleteEditor',
	DELETE_REPOSITORY = 'elasticmapreduce:DeleteRepository',
	DELETE_SECURITY_CONFIGURATION = 'elasticmapreduce:DeleteSecurityConfiguration',
	DELETE_STUDIO = 'elasticmapreduce:DeleteStudio',
	DELETE_STUDIO_SESSION_MAPPING = 'elasticmapreduce:DeleteStudioSessionMapping',
	DELETE_WORKSPACE_ACCESS = 'elasticmapreduce:DeleteWorkspaceAccess',
	DESCRIBE_CLUSTER = 'elasticmapreduce:DescribeCluster',
	DESCRIBE_EDITOR = 'elasticmapreduce:DescribeEditor',
	DESCRIBE_JOB_FLOWS = 'elasticmapreduce:DescribeJobFlows',
	DESCRIBE_NOTEBOOK_EXECUTION = 'elasticmapreduce:DescribeNotebookExecution',
	DESCRIBE_PERSISTENT_APP_UI = 'elasticmapreduce:DescribePersistentAppUI',
	DESCRIBE_RELEASE_LABEL = 'elasticmapreduce:DescribeReleaseLabel',
	DESCRIBE_REPOSITORY = 'elasticmapreduce:DescribeRepository',
	DESCRIBE_SECURITY_CONFIGURATION = 'elasticmapreduce:DescribeSecurityConfiguration',
	DESCRIBE_STEP = 'elasticmapreduce:DescribeStep',
	DESCRIBE_STUDIO = 'elasticmapreduce:DescribeStudio',
	DETACH_EDITOR = 'elasticmapreduce:DetachEditor',
	GET_AUTO_TERMINATION_POLICY = 'elasticmapreduce:GetAutoTerminationPolicy',
	GET_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'elasticmapreduce:GetBlockPublicAccessConfiguration',
	GET_MANAGED_SCALING_POLICY = 'elasticmapreduce:GetManagedScalingPolicy',
	GET_ON_CLUSTER_APP_UI_PRESIGNED_URL = 'elasticmapreduce:GetOnClusterAppUIPresignedURL',
	GET_PERSISTENT_APP_UI_PRESIGNED_URL = 'elasticmapreduce:GetPersistentAppUIPresignedURL',
	GET_STUDIO_SESSION_MAPPING = 'elasticmapreduce:GetStudioSessionMapping',
	LINK_REPOSITORY = 'elasticmapreduce:LinkRepository',
	LIST_BOOTSTRAP_ACTIONS = 'elasticmapreduce:ListBootstrapActions',
	LIST_CLUSTERS = 'elasticmapreduce:ListClusters',
	LIST_EDITORS = 'elasticmapreduce:ListEditors',
	LIST_INSTANCE_FLEETS = 'elasticmapreduce:ListInstanceFleets',
	LIST_INSTANCE_GROUPS = 'elasticmapreduce:ListInstanceGroups',
	LIST_INSTANCES = 'elasticmapreduce:ListInstances',
	LIST_NOTEBOOK_EXECUTIONS = 'elasticmapreduce:ListNotebookExecutions',
	LIST_RELEASE_LABELS = 'elasticmapreduce:ListReleaseLabels',
	LIST_REPOSITORIES = 'elasticmapreduce:ListRepositories',
	LIST_SECURITY_CONFIGURATIONS = 'elasticmapreduce:ListSecurityConfigurations',
	LIST_STEPS = 'elasticmapreduce:ListSteps',
	LIST_STUDIO_SESSION_MAPPINGS = 'elasticmapreduce:ListStudioSessionMappings',
	LIST_STUDIOS = 'elasticmapreduce:ListStudios',
	LIST_WORKSPACE_ACCESS_IDENTITIES = 'elasticmapreduce:ListWorkspaceAccessIdentities',
	MODIFY_CLUSTER = 'elasticmapreduce:ModifyCluster',
	MODIFY_INSTANCE_FLEET = 'elasticmapreduce:ModifyInstanceFleet',
	MODIFY_INSTANCE_GROUPS = 'elasticmapreduce:ModifyInstanceGroups',
	OPEN_EDITOR_IN_CONSOLE = 'elasticmapreduce:OpenEditorInConsole',
	PUT_AUTO_SCALING_POLICY = 'elasticmapreduce:PutAutoScalingPolicy',
	PUT_AUTO_TERMINATION_POLICY = 'elasticmapreduce:PutAutoTerminationPolicy',
	PUT_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'elasticmapreduce:PutBlockPublicAccessConfiguration',
	PUT_MANAGED_SCALING_POLICY = 'elasticmapreduce:PutManagedScalingPolicy',
	PUT_WORKSPACE_ACCESS = 'elasticmapreduce:PutWorkspaceAccess',
	REMOVE_AUTO_SCALING_POLICY = 'elasticmapreduce:RemoveAutoScalingPolicy',
	REMOVE_AUTO_TERMINATION_POLICY = 'elasticmapreduce:RemoveAutoTerminationPolicy',
	REMOVE_MANAGED_SCALING_POLICY = 'elasticmapreduce:RemoveManagedScalingPolicy',
	REMOVE_TAGS = 'elasticmapreduce:RemoveTags',
	RUN_JOB_FLOW = 'elasticmapreduce:RunJobFlow',
	SET_TERMINATION_PROTECTION = 'elasticmapreduce:SetTerminationProtection',
	START_EDITOR = 'elasticmapreduce:StartEditor',
	START_NOTEBOOK_EXECUTION = 'elasticmapreduce:StartNotebookExecution',
	STOP_EDITOR = 'elasticmapreduce:StopEditor',
	STOP_NOTEBOOK_EXECUTION = 'elasticmapreduce:StopNotebookExecution',
	TERMINATE_JOB_FLOWS = 'elasticmapreduce:TerminateJobFlows',
	UNLINK_REPOSITORY = 'elasticmapreduce:UnlinkRepository',
	UPDATE_EDITOR = 'elasticmapreduce:UpdateEditor',
	UPDATE_REPOSITORY = 'elasticmapreduce:UpdateRepository',
	UPDATE_STUDIO = 'elasticmapreduce:UpdateStudio',
	UPDATE_STUDIO_SESSION_MAPPING = 'elasticmapreduce:UpdateStudioSessionMapping',
	VIEW_EVENTS_FROM_ALL_CLUSTERS_IN_CONSOLE = 'elasticmapreduce:ViewEventsFromAllClustersInConsole',
}
export enum ROUTE_53_RECOVERY_CLUSTER {
	GET_ROUTING_CONTROL_STATE = 'route53-recovery-cluster:GetRoutingControlState',
	LIST_ROUTING_CONTROLS = 'route53-recovery-cluster:ListRoutingControls',
	UPDATE_ROUTING_CONTROL_STATE = 'route53-recovery-cluster:UpdateRoutingControlState',
	UPDATE_ROUTING_CONTROL_STATES = 'route53-recovery-cluster:UpdateRoutingControlStates',
}
export enum BATCH {
	CANCEL_JOB = 'batch:CancelJob',
	CREATE_COMPUTE_ENVIRONMENT = 'batch:CreateComputeEnvironment',
	CREATE_JOB_QUEUE = 'batch:CreateJobQueue',
	CREATE_SCHEDULING_POLICY = 'batch:CreateSchedulingPolicy',
	DELETE_COMPUTE_ENVIRONMENT = 'batch:DeleteComputeEnvironment',
	DELETE_JOB_QUEUE = 'batch:DeleteJobQueue',
	DELETE_SCHEDULING_POLICY = 'batch:DeleteSchedulingPolicy',
	DEREGISTER_JOB_DEFINITION = 'batch:DeregisterJobDefinition',
	DESCRIBE_COMPUTE_ENVIRONMENTS = 'batch:DescribeComputeEnvironments',
	DESCRIBE_JOB_DEFINITIONS = 'batch:DescribeJobDefinitions',
	DESCRIBE_JOB_QUEUES = 'batch:DescribeJobQueues',
	DESCRIBE_JOBS = 'batch:DescribeJobs',
	DESCRIBE_SCHEDULING_POLICIES = 'batch:DescribeSchedulingPolicies',
	LIST_JOBS = 'batch:ListJobs',
	LIST_SCHEDULING_POLICIES = 'batch:ListSchedulingPolicies',
	LIST_TAGS_FOR_RESOURCE = 'batch:ListTagsForResource',
	REGISTER_JOB_DEFINITION = 'batch:RegisterJobDefinition',
	SUBMIT_JOB = 'batch:SubmitJob',
	TAG_RESOURCE = 'batch:TagResource',
	TERMINATE_JOB = 'batch:TerminateJob',
	UNTAG_RESOURCE = 'batch:UntagResource',
	UPDATE_COMPUTE_ENVIRONMENT = 'batch:UpdateComputeEnvironment',
	UPDATE_JOB_QUEUE = 'batch:UpdateJobQueue',
	UPDATE_SCHEDULING_POLICY = 'batch:UpdateSchedulingPolicy',
}
export enum HIGHVOLUME_OUTBOUND_COMMUNICATIONS {
	CREATE_CAMPAIGN = 'connect-campaigns:CreateCampaign',
	DELETE_CAMPAIGN = 'connect-campaigns:DeleteCampaign',
	DELETE_CONNECT_INSTANCE_CONFIG = 'connect-campaigns:DeleteConnectInstanceConfig',
	DELETE_INSTANCE_ONBOARDING_JOB = 'connect-campaigns:DeleteInstanceOnboardingJob',
	DESCRIBE_CAMPAIGN = 'connect-campaigns:DescribeCampaign',
	GET_CAMPAIGN_STATE = 'connect-campaigns:GetCampaignState',
	GET_CAMPAIGN_STATE_BATCH = 'connect-campaigns:GetCampaignStateBatch',
	GET_CONNECT_INSTANCE_CONFIG = 'connect-campaigns:GetConnectInstanceConfig',
	GET_INSTANCE_ONBOARDING_JOB_STATUS = 'connect-campaigns:GetInstanceOnboardingJobStatus',
	LIST_CAMPAIGNS = 'connect-campaigns:ListCampaigns',
	LIST_TAGS_FOR_RESOURCE = 'connect-campaigns:ListTagsForResource',
	PAUSE_CAMPAIGN = 'connect-campaigns:PauseCampaign',
	PUT_DIAL_REQUEST_BATCH = 'connect-campaigns:PutDialRequestBatch',
	RESUME_CAMPAIGN = 'connect-campaigns:ResumeCampaign',
	START_CAMPAIGN = 'connect-campaigns:StartCampaign',
	START_INSTANCE_ONBOARDING_JOB = 'connect-campaigns:StartInstanceOnboardingJob',
	STOP_CAMPAIGN = 'connect-campaigns:StopCampaign',
	TAG_RESOURCE = 'connect-campaigns:TagResource',
	UNTAG_RESOURCE = 'connect-campaigns:UntagResource',
	UPDATE_CAMPAIGN_DIALER_CONFIG = 'connect-campaigns:UpdateCampaignDialerConfig',
	UPDATE_CAMPAIGN_NAME = 'connect-campaigns:UpdateCampaignName',
	UPDATE_CAMPAIGN_OUTBOUND_CALL_CONFIG = 'connect-campaigns:UpdateCampaignOutboundCallConfig',
}
export enum IOT_EVENTS {
	BATCH_ACKNOWLEDGE_ALARM = 'iotevents:BatchAcknowledgeAlarm',
	BATCH_DELETE_DETECTOR = 'iotevents:BatchDeleteDetector',
	BATCH_DISABLE_ALARM = 'iotevents:BatchDisableAlarm',
	BATCH_ENABLE_ALARM = 'iotevents:BatchEnableAlarm',
	BATCH_PUT_MESSAGE = 'iotevents:BatchPutMessage',
	BATCH_RESET_ALARM = 'iotevents:BatchResetAlarm',
	BATCH_SNOOZE_ALARM = 'iotevents:BatchSnoozeAlarm',
	BATCH_UPDATE_DETECTOR = 'iotevents:BatchUpdateDetector',
	CREATE_ALARM_MODEL = 'iotevents:CreateAlarmModel',
	CREATE_DETECTOR_MODEL = 'iotevents:CreateDetectorModel',
	CREATE_INPUT = 'iotevents:CreateInput',
	DELETE_ALARM_MODEL = 'iotevents:DeleteAlarmModel',
	DELETE_DETECTOR_MODEL = 'iotevents:DeleteDetectorModel',
	DELETE_INPUT = 'iotevents:DeleteInput',
	DESCRIBE_ALARM = 'iotevents:DescribeAlarm',
	DESCRIBE_ALARM_MODEL = 'iotevents:DescribeAlarmModel',
	DESCRIBE_DETECTOR = 'iotevents:DescribeDetector',
	DESCRIBE_DETECTOR_MODEL = 'iotevents:DescribeDetectorModel',
	DESCRIBE_DETECTOR_MODEL_ANALYSIS = 'iotevents:DescribeDetectorModelAnalysis',
	DESCRIBE_INPUT = 'iotevents:DescribeInput',
	DESCRIBE_LOGGING_OPTIONS = 'iotevents:DescribeLoggingOptions',
	GET_DETECTOR_MODEL_ANALYSIS_RESULTS = 'iotevents:GetDetectorModelAnalysisResults',
	LIST_ALARM_MODEL_VERSIONS = 'iotevents:ListAlarmModelVersions',
	LIST_ALARM_MODELS = 'iotevents:ListAlarmModels',
	LIST_ALARMS = 'iotevents:ListAlarms',
	LIST_DETECTOR_MODEL_VERSIONS = 'iotevents:ListDetectorModelVersions',
	LIST_DETECTOR_MODELS = 'iotevents:ListDetectorModels',
	LIST_DETECTORS = 'iotevents:ListDetectors',
	LIST_INPUT_ROUTINGS = 'iotevents:ListInputRoutings',
	LIST_INPUTS = 'iotevents:ListInputs',
	LIST_TAGS_FOR_RESOURCE = 'iotevents:ListTagsForResource',
	PUT_LOGGING_OPTIONS = 'iotevents:PutLoggingOptions',
	START_DETECTOR_MODEL_ANALYSIS = 'iotevents:StartDetectorModelAnalysis',
	TAG_RESOURCE = 'iotevents:TagResource',
	UNTAG_RESOURCE = 'iotevents:UntagResource',
	UPDATE_ALARM_MODEL = 'iotevents:UpdateAlarmModel',
	UPDATE_DETECTOR_MODEL = 'iotevents:UpdateDetectorModel',
	UPDATE_INPUT = 'iotevents:UpdateInput',
	UPDATE_INPUT_ROUTING = 'iotevents:UpdateInputRouting',
}
export enum BILLING_CONDUCTOR {
	ASSOCIATE_ACCOUNTS = 'billingconductor:AssociateAccounts',
	ASSOCIATE_PRICING_RULES = 'billingconductor:AssociatePricingRules',
	BATCH_ASSOCIATE_RESOURCES_TO_CUSTOM_LINE_ITEM = 'billingconductor:BatchAssociateResourcesToCustomLineItem',
	BATCH_DISASSOCIATE_RESOURCES_FROM_CUSTOM_LINE_ITEM = 'billingconductor:BatchDisassociateResourcesFromCustomLineItem',
	CREATE_BILLING_GROUP = 'billingconductor:CreateBillingGroup',
	CREATE_CUSTOM_LINE_ITEM = 'billingconductor:CreateCustomLineItem',
	CREATE_PRICING_PLAN = 'billingconductor:CreatePricingPlan',
	CREATE_PRICING_RULE = 'billingconductor:CreatePricingRule',
	DELETE_BILLING_GROUP = 'billingconductor:DeleteBillingGroup',
	DELETE_CUSTOM_LINE_ITEM = 'billingconductor:DeleteCustomLineItem',
	DELETE_PRICING_PLAN = 'billingconductor:DeletePricingPlan',
	DELETE_PRICING_RULE = 'billingconductor:DeletePricingRule',
	DISASSOCIATE_ACCOUNTS = 'billingconductor:DisassociateAccounts',
	DISASSOCIATE_PRICING_RULES = 'billingconductor:DisassociatePricingRules',
	LIST_ACCOUNT_ASSOCIATIONS = 'billingconductor:ListAccountAssociations',
	LIST_BILLING_GROUP_COST_REPORTS = 'billingconductor:ListBillingGroupCostReports',
	LIST_BILLING_GROUPS = 'billingconductor:ListBillingGroups',
	LIST_CUSTOM_LINE_ITEM_VERSIONS = 'billingconductor:ListCustomLineItemVersions',
	LIST_CUSTOM_LINE_ITEMS = 'billingconductor:ListCustomLineItems',
	LIST_PRICING_PLANS = 'billingconductor:ListPricingPlans',
	LIST_PRICING_PLANS_ASSOCIATED_WITH_PRICING_RULE = 'billingconductor:ListPricingPlansAssociatedWithPricingRule',
	LIST_PRICING_RULES = 'billingconductor:ListPricingRules',
	LIST_PRICING_RULES_ASSOCIATED_TO_PRICING_PLAN = 'billingconductor:ListPricingRulesAssociatedToPricingPlan',
	LIST_RESOURCES_ASSOCIATED_TO_CUSTOM_LINE_ITEM = 'billingconductor:ListResourcesAssociatedToCustomLineItem',
	LIST_TAGS_FOR_RESOURCE = 'billingconductor:ListTagsForResource',
	TAG_RESOURCE = 'billingconductor:TagResource',
	UNTAG_RESOURCE = 'billingconductor:UntagResource',
	UPDATE_BILLING_GROUP = 'billingconductor:UpdateBillingGroup',
	UPDATE_CUSTOM_LINE_ITEM = 'billingconductor:UpdateCustomLineItem',
	UPDATE_PRICING_PLAN = 'billingconductor:UpdatePricingPlan',
	UPDATE_PRICING_RULE = 'billingconductor:UpdatePricingRule',
}
export enum CLOUDTRAIL {
	ADD_TAGS = 'cloudtrail:AddTags',
	CANCEL_QUERY = 'cloudtrail:CancelQuery',
	CREATE_EVENT_DATA_STORE = 'cloudtrail:CreateEventDataStore',
	CREATE_SERVICE_LINKED_CHANNEL = 'cloudtrail:CreateServiceLinkedChannel',
	CREATE_TRAIL = 'cloudtrail:CreateTrail',
	DELETE_EVENT_DATA_STORE = 'cloudtrail:DeleteEventDataStore',
	DELETE_SERVICE_LINKED_CHANNEL = 'cloudtrail:DeleteServiceLinkedChannel',
	DELETE_TRAIL = 'cloudtrail:DeleteTrail',
	DEREGISTER_ORGANIZATION_DELEGATED_ADMIN = 'cloudtrail:DeregisterOrganizationDelegatedAdmin',
	DESCRIBE_QUERY = 'cloudtrail:DescribeQuery',
	DESCRIBE_TRAILS = 'cloudtrail:DescribeTrails',
	GET_EVENT_DATA_STORE = 'cloudtrail:GetEventDataStore',
	GET_EVENT_SELECTORS = 'cloudtrail:GetEventSelectors',
	GET_INSIGHT_SELECTORS = 'cloudtrail:GetInsightSelectors',
	GET_QUERY_RESULTS = 'cloudtrail:GetQueryResults',
	GET_SERVICE_LINKED_CHANNEL = 'cloudtrail:GetServiceLinkedChannel',
	GET_TRAIL = 'cloudtrail:GetTrail',
	GET_TRAIL_STATUS = 'cloudtrail:GetTrailStatus',
	LIST_EVENT_DATA_STORES = 'cloudtrail:ListEventDataStores',
	LIST_PUBLIC_KEYS = 'cloudtrail:ListPublicKeys',
	LIST_QUERIES = 'cloudtrail:ListQueries',
	LIST_SERVICE_LINKED_CHANNELS = 'cloudtrail:ListServiceLinkedChannels',
	LIST_TAGS = 'cloudtrail:ListTags',
	LIST_TRAILS = 'cloudtrail:ListTrails',
	LOOKUP_EVENTS = 'cloudtrail:LookupEvents',
	PUT_EVENT_SELECTORS = 'cloudtrail:PutEventSelectors',
	PUT_INSIGHT_SELECTORS = 'cloudtrail:PutInsightSelectors',
	REGISTER_ORGANIZATION_DELEGATED_ADMIN = 'cloudtrail:RegisterOrganizationDelegatedAdmin',
	REMOVE_TAGS = 'cloudtrail:RemoveTags',
	RESTORE_EVENT_DATA_STORE = 'cloudtrail:RestoreEventDataStore',
	START_LOGGING = 'cloudtrail:StartLogging',
	START_QUERY = 'cloudtrail:StartQuery',
	STOP_LOGGING = 'cloudtrail:StopLogging',
	UPDATE_EVENT_DATA_STORE = 'cloudtrail:UpdateEventDataStore',
	UPDATE_SERVICE_LINKED_CHANNEL = 'cloudtrail:UpdateServiceLinkedChannel',
	UPDATE_TRAIL = 'cloudtrail:UpdateTrail',
}
export enum DYNAMODB {
	BATCH_GET_ITEM = 'dynamodb:BatchGetItem',
	BATCH_WRITE_ITEM = 'dynamodb:BatchWriteItem',
	CONDITION_CHECK_ITEM = 'dynamodb:ConditionCheckItem',
	CREATE_BACKUP = 'dynamodb:CreateBackup',
	CREATE_GLOBAL_TABLE = 'dynamodb:CreateGlobalTable',
	CREATE_TABLE = 'dynamodb:CreateTable',
	CREATE_TABLE_REPLICA = 'dynamodb:CreateTableReplica',
	DELETE_BACKUP = 'dynamodb:DeleteBackup',
	DELETE_ITEM = 'dynamodb:DeleteItem',
	DELETE_TABLE = 'dynamodb:DeleteTable',
	DELETE_TABLE_REPLICA = 'dynamodb:DeleteTableReplica',
	DESCRIBE_BACKUP = 'dynamodb:DescribeBackup',
	DESCRIBE_CONTINUOUS_BACKUPS = 'dynamodb:DescribeContinuousBackups',
	DESCRIBE_CONTRIBUTOR_INSIGHTS = 'dynamodb:DescribeContributorInsights',
	DESCRIBE_EXPORT = 'dynamodb:DescribeExport',
	DESCRIBE_GLOBAL_TABLE = 'dynamodb:DescribeGlobalTable',
	DESCRIBE_GLOBAL_TABLE_SETTINGS = 'dynamodb:DescribeGlobalTableSettings',
	DESCRIBE_IMPORT = 'dynamodb:DescribeImport',
	DESCRIBE_KINESIS_STREAMING_DESTINATION = 'dynamodb:DescribeKinesisStreamingDestination',
	DESCRIBE_LIMITS = 'dynamodb:DescribeLimits',
	DESCRIBE_RESERVED_CAPACITY = 'dynamodb:DescribeReservedCapacity',
	DESCRIBE_RESERVED_CAPACITY_OFFERINGS = 'dynamodb:DescribeReservedCapacityOfferings',
	DESCRIBE_STREAM = 'dynamodb:DescribeStream',
	DESCRIBE_TABLE = 'dynamodb:DescribeTable',
	DESCRIBE_TABLE_REPLICA_AUTO_SCALING = 'dynamodb:DescribeTableReplicaAutoScaling',
	DESCRIBE_TIME_TO_LIVE = 'dynamodb:DescribeTimeToLive',
	DISABLE_KINESIS_STREAMING_DESTINATION = 'dynamodb:DisableKinesisStreamingDestination',
	ENABLE_KINESIS_STREAMING_DESTINATION = 'dynamodb:EnableKinesisStreamingDestination',
	EXPORT_TABLE_TO_POINT_IN_TIME = 'dynamodb:ExportTableToPointInTime',
	GET_ITEM = 'dynamodb:GetItem',
	GET_RECORDS = 'dynamodb:GetRecords',
	GET_SHARD_ITERATOR = 'dynamodb:GetShardIterator',
	IMPORT_TABLE = 'dynamodb:ImportTable',
	LIST_BACKUPS = 'dynamodb:ListBackups',
	LIST_CONTRIBUTOR_INSIGHTS = 'dynamodb:ListContributorInsights',
	LIST_EXPORTS = 'dynamodb:ListExports',
	LIST_GLOBAL_TABLES = 'dynamodb:ListGlobalTables',
	LIST_IMPORTS = 'dynamodb:ListImports',
	LIST_STREAMS = 'dynamodb:ListStreams',
	LIST_TABLES = 'dynamodb:ListTables',
	LIST_TAGS_OF_RESOURCE = 'dynamodb:ListTagsOfResource',
	PARTI_QL_DELETE = 'dynamodb:PartiQLDelete',
	PARTI_QL_INSERT = 'dynamodb:PartiQLInsert',
	PARTI_QL_SELECT = 'dynamodb:PartiQLSelect',
	PARTI_QL_UPDATE = 'dynamodb:PartiQLUpdate',
	PURCHASE_RESERVED_CAPACITY_OFFERINGS = 'dynamodb:PurchaseReservedCapacityOfferings',
	PUT_ITEM = 'dynamodb:PutItem',
	QUERY = 'dynamodb:Query',
	RESTORE_TABLE_FROM_AWS_BACKUP = 'dynamodb:RestoreTableFromAwsBackup',
	RESTORE_TABLE_FROM_BACKUP = 'dynamodb:RestoreTableFromBackup',
	RESTORE_TABLE_TO_POINT_IN_TIME = 'dynamodb:RestoreTableToPointInTime',
	SCAN = 'dynamodb:Scan',
	START_AWS_BACKUP_JOB = 'dynamodb:StartAwsBackupJob',
	TAG_RESOURCE = 'dynamodb:TagResource',
	UNTAG_RESOURCE = 'dynamodb:UntagResource',
	UPDATE_CONTINUOUS_BACKUPS = 'dynamodb:UpdateContinuousBackups',
	UPDATE_CONTRIBUTOR_INSIGHTS = 'dynamodb:UpdateContributorInsights',
	UPDATE_GLOBAL_TABLE = 'dynamodb:UpdateGlobalTable',
	UPDATE_GLOBAL_TABLE_SETTINGS = 'dynamodb:UpdateGlobalTableSettings',
	UPDATE_ITEM = 'dynamodb:UpdateItem',
	UPDATE_TABLE = 'dynamodb:UpdateTable',
	UPDATE_TABLE_REPLICA_AUTO_SCALING = 'dynamodb:UpdateTableReplicaAutoScaling',
	UPDATE_TIME_TO_LIVE = 'dynamodb:UpdateTimeToLive',
}
export enum OPENSEARCH_SERVICE {
	ACCEPT_INBOUND_CONNECTION = 'es:AcceptInboundConnection',
	ACCEPT_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:AcceptInboundCrossClusterSearchConnection',
	ADD_TAGS = 'es:AddTags',
	ASSOCIATE_PACKAGE = 'es:AssociatePackage',
	CANCEL_ELASTICSEARCH_SERVICE_SOFTWARE_UPDATE = 'es:CancelElasticsearchServiceSoftwareUpdate',
	CANCEL_SERVICE_SOFTWARE_UPDATE = 'es:CancelServiceSoftwareUpdate',
	CREATE_DOMAIN = 'es:CreateDomain',
	CREATE_ELASTICSEARCH_DOMAIN = 'es:CreateElasticsearchDomain',
	CREATE_ELASTICSEARCH_SERVICE_ROLE = 'es:CreateElasticsearchServiceRole',
	CREATE_OUTBOUND_CONNECTION = 'es:CreateOutboundConnection',
	CREATE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:CreateOutboundCrossClusterSearchConnection',
	CREATE_PACKAGE = 'es:CreatePackage',
	CREATE_SERVICE_ROLE = 'es:CreateServiceRole',
	DELETE_DOMAIN = 'es:DeleteDomain',
	DELETE_ELASTICSEARCH_DOMAIN = 'es:DeleteElasticsearchDomain',
	DELETE_ELASTICSEARCH_SERVICE_ROLE = 'es:DeleteElasticsearchServiceRole',
	DELETE_INBOUND_CONNECTION = 'es:DeleteInboundConnection',
	DELETE_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:DeleteInboundCrossClusterSearchConnection',
	DELETE_OUTBOUND_CONNECTION = 'es:DeleteOutboundConnection',
	DELETE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:DeleteOutboundCrossClusterSearchConnection',
	DELETE_PACKAGE = 'es:DeletePackage',
	DESCRIBE_DOMAIN = 'es:DescribeDomain',
	DESCRIBE_DOMAIN_AUTO_TUNES = 'es:DescribeDomainAutoTunes',
	DESCRIBE_DOMAIN_CHANGE_PROGRESS = 'es:DescribeDomainChangeProgress',
	DESCRIBE_DOMAIN_CONFIG = 'es:DescribeDomainConfig',
	DESCRIBE_DOMAINS = 'es:DescribeDomains',
	DESCRIBE_ELASTICSEARCH_DOMAIN = 'es:DescribeElasticsearchDomain',
	DESCRIBE_ELASTICSEARCH_DOMAIN_CONFIG = 'es:DescribeElasticsearchDomainConfig',
	DESCRIBE_ELASTICSEARCH_DOMAINS = 'es:DescribeElasticsearchDomains',
	DESCRIBE_ELASTICSEARCH_INSTANCE_TYPE_LIMITS = 'es:DescribeElasticsearchInstanceTypeLimits',
	DESCRIBE_INBOUND_CONNECTIONS = 'es:DescribeInboundConnections',
	DESCRIBE_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTIONS = 'es:DescribeInboundCrossClusterSearchConnections',
	DESCRIBE_INSTANCE_TYPE_LIMITS = 'es:DescribeInstanceTypeLimits',
	DESCRIBE_OUTBOUND_CONNECTIONS = 'es:DescribeOutboundConnections',
	DESCRIBE_OUTBOUND_CROSS_CLUSTER_SEARCH_CONNECTIONS = 'es:DescribeOutboundCrossClusterSearchConnections',
	DESCRIBE_PACKAGES = 'es:DescribePackages',
	DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERINGS = 'es:DescribeReservedElasticsearchInstanceOfferings',
	DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCES = 'es:DescribeReservedElasticsearchInstances',
	DESCRIBE_RESERVED_INSTANCE_OFFERINGS = 'es:DescribeReservedInstanceOfferings',
	DESCRIBE_RESERVED_INSTANCES = 'es:DescribeReservedInstances',
	DISSOCIATE_PACKAGE = 'es:DissociatePackage',
	ES_CROSS_CLUSTER_GET = 'es:ESCrossClusterGet',
	ES_HTTP_DELETE = 'es:ESHttpDelete',
	ES_HTTP_GET = 'es:ESHttpGet',
	ES_HTTP_HEAD = 'es:ESHttpHead',
	ES_HTTP_PATCH = 'es:ESHttpPatch',
	ES_HTTP_POST = 'es:ESHttpPost',
	ES_HTTP_PUT = 'es:ESHttpPut',
	GET_COMPATIBLE_ELASTICSEARCH_VERSIONS = 'es:GetCompatibleElasticsearchVersions',
	GET_COMPATIBLE_VERSIONS = 'es:GetCompatibleVersions',
	GET_PACKAGE_VERSION_HISTORY = 'es:GetPackageVersionHistory',
	GET_UPGRADE_HISTORY = 'es:GetUpgradeHistory',
	GET_UPGRADE_STATUS = 'es:GetUpgradeStatus',
	LIST_DOMAIN_NAMES = 'es:ListDomainNames',
	LIST_DOMAINS_FOR_PACKAGE = 'es:ListDomainsForPackage',
	LIST_ELASTICSEARCH_INSTANCE_TYPE_DETAILS = 'es:ListElasticsearchInstanceTypeDetails',
	LIST_ELASTICSEARCH_INSTANCE_TYPES = 'es:ListElasticsearchInstanceTypes',
	LIST_ELASTICSEARCH_VERSIONS = 'es:ListElasticsearchVersions',
	LIST_INSTANCE_TYPE_DETAILS = 'es:ListInstanceTypeDetails',
	LIST_PACKAGES_FOR_DOMAIN = 'es:ListPackagesForDomain',
	LIST_TAGS = 'es:ListTags',
	LIST_VERSIONS = 'es:ListVersions',
	PURCHASE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERING = 'es:PurchaseReservedElasticsearchInstanceOffering',
	PURCHASE_RESERVED_INSTANCE_OFFERING = 'es:PurchaseReservedInstanceOffering',
	REJECT_INBOUND_CONNECTION = 'es:RejectInboundConnection',
	REJECT_INBOUND_CROSS_CLUSTER_SEARCH_CONNECTION = 'es:RejectInboundCrossClusterSearchConnection',
	REMOVE_TAGS = 'es:RemoveTags',
	START_ELASTICSEARCH_SERVICE_SOFTWARE_UPDATE = 'es:StartElasticsearchServiceSoftwareUpdate',
	START_SERVICE_SOFTWARE_UPDATE = 'es:StartServiceSoftwareUpdate',
	UPDATE_DOMAIN_CONFIG = 'es:UpdateDomainConfig',
	UPDATE_ELASTICSEARCH_DOMAIN_CONFIG = 'es:UpdateElasticsearchDomainConfig',
	UPDATE_PACKAGE = 'es:UpdatePackage',
	UPGRADE_DOMAIN = 'es:UpgradeDomain',
	UPGRADE_ELASTICSEARCH_DOMAIN = 'es:UpgradeElasticsearchDomain',
}
export enum DEEPRACER {
	ADD_LEADERBOARD_ACCESS_PERMISSION = 'deepracer:AddLeaderboardAccessPermission',
	ADMIN_GET_ACCOUNT_CONFIG = 'deepracer:AdminGetAccountConfig',
	ADMIN_LIST_ASSOCIATED_RESOURCES = 'deepracer:AdminListAssociatedResources',
	ADMIN_LIST_ASSOCIATED_USERS = 'deepracer:AdminListAssociatedUsers',
	ADMIN_MANAGE_USER = 'deepracer:AdminManageUser',
	ADMIN_SET_ACCOUNT_CONFIG = 'deepracer:AdminSetAccountConfig',
	CLONE_REINFORCEMENT_LEARNING_MODEL = 'deepracer:CloneReinforcementLearningModel',
	CREATE_CAR = 'deepracer:CreateCar',
	CREATE_LEADERBOARD = 'deepracer:CreateLeaderboard',
	CREATE_LEADERBOARD_ACCESS_TOKEN = 'deepracer:CreateLeaderboardAccessToken',
	CREATE_LEADERBOARD_SUBMISSION = 'deepracer:CreateLeaderboardSubmission',
	CREATE_REINFORCEMENT_LEARNING_MODEL = 'deepracer:CreateReinforcementLearningModel',
	DELETE_LEADERBOARD = 'deepracer:DeleteLeaderboard',
	DELETE_MODEL = 'deepracer:DeleteModel',
	EDIT_LEADERBOARD = 'deepracer:EditLeaderboard',
	GET_ACCOUNT_CONFIG = 'deepracer:GetAccountConfig',
	GET_ALIAS = 'deepracer:GetAlias',
	GET_ASSET_URL = 'deepracer:GetAssetUrl',
	GET_CAR = 'deepracer:GetCar',
	GET_CARS = 'deepracer:GetCars',
	GET_EVALUATION = 'deepracer:GetEvaluation',
	GET_LATEST_USER_SUBMISSION = 'deepracer:GetLatestUserSubmission',
	GET_LEADERBOARD = 'deepracer:GetLeaderboard',
	GET_MODEL = 'deepracer:GetModel',
	GET_PRIVATE_LEADERBOARD = 'deepracer:GetPrivateLeaderboard',
	GET_RANKED_USER_SUBMISSION = 'deepracer:GetRankedUserSubmission',
	GET_TRACK = 'deepracer:GetTrack',
	GET_TRAINING_JOB = 'deepracer:GetTrainingJob',
	IMPORT_MODEL = 'deepracer:ImportModel',
	LIST_EVALUATIONS = 'deepracer:ListEvaluations',
	LIST_LEADERBOARD_SUBMISSIONS = 'deepracer:ListLeaderboardSubmissions',
	LIST_LEADERBOARDS = 'deepracer:ListLeaderboards',
	LIST_MODELS = 'deepracer:ListModels',
	LIST_PRIVATE_LEADERBOARD_PARTICIPANTS = 'deepracer:ListPrivateLeaderboardParticipants',
	LIST_PRIVATE_LEADERBOARDS = 'deepracer:ListPrivateLeaderboards',
	LIST_SUBSCRIBED_PRIVATE_LEADERBOARDS = 'deepracer:ListSubscribedPrivateLeaderboards',
	LIST_TAGS_FOR_RESOURCE = 'deepracer:ListTagsForResource',
	LIST_TRACKS = 'deepracer:ListTracks',
	LIST_TRAINING_JOBS = 'deepracer:ListTrainingJobs',
	MIGRATE_MODELS = 'deepracer:MigrateModels',
	PERFORM_LEADERBOARD_OPERATION = 'deepracer:PerformLeaderboardOperation',
	REMOVE_LEADERBOARD_ACCESS_PERMISSION = 'deepracer:RemoveLeaderboardAccessPermission',
	SET_ALIAS = 'deepracer:SetAlias',
	START_EVALUATION = 'deepracer:StartEvaluation',
	STOP_EVALUATION = 'deepracer:StopEvaluation',
	STOP_TRAINING_REINFORCEMENT_LEARNING_MODEL = 'deepracer:StopTrainingReinforcementLearningModel',
	TAG_RESOURCE = 'deepracer:TagResource',
	TEST_REWARD_FUNCTION = 'deepracer:TestRewardFunction',
	UNTAG_RESOURCE = 'deepracer:UntagResource',
	UPDATE_CAR = 'deepracer:UpdateCar',
}
export enum CONNECT_VOICE_ID {
	CREATE_DOMAIN = 'voiceid:CreateDomain',
	DELETE_DOMAIN = 'voiceid:DeleteDomain',
	DELETE_FRAUDSTER = 'voiceid:DeleteFraudster',
	DELETE_SPEAKER = 'voiceid:DeleteSpeaker',
	DESCRIBE_COMPLIANCE_CONSENT = 'voiceid:DescribeComplianceConsent',
	DESCRIBE_DOMAIN = 'voiceid:DescribeDomain',
	DESCRIBE_FRAUDSTER = 'voiceid:DescribeFraudster',
	DESCRIBE_FRAUDSTER_REGISTRATION_JOB = 'voiceid:DescribeFraudsterRegistrationJob',
	DESCRIBE_SPEAKER = 'voiceid:DescribeSpeaker',
	DESCRIBE_SPEAKER_ENROLLMENT_JOB = 'voiceid:DescribeSpeakerEnrollmentJob',
	EVALUATE_SESSION = 'voiceid:EvaluateSession',
	LIST_DOMAINS = 'voiceid:ListDomains',
	LIST_FRAUDSTER_REGISTRATION_JOBS = 'voiceid:ListFraudsterRegistrationJobs',
	LIST_SPEAKER_ENROLLMENT_JOBS = 'voiceid:ListSpeakerEnrollmentJobs',
	LIST_SPEAKERS = 'voiceid:ListSpeakers',
	LIST_TAGS_FOR_RESOURCE = 'voiceid:ListTagsForResource',
	OPT_OUT_SPEAKER = 'voiceid:OptOutSpeaker',
	REGISTER_COMPLIANCE_CONSENT = 'voiceid:RegisterComplianceConsent',
	START_FRAUDSTER_REGISTRATION_JOB = 'voiceid:StartFraudsterRegistrationJob',
	START_SPEAKER_ENROLLMENT_JOB = 'voiceid:StartSpeakerEnrollmentJob',
	TAG_RESOURCE = 'voiceid:TagResource',
	UNTAG_RESOURCE = 'voiceid:UntagResource',
	UPDATE_DOMAIN = 'voiceid:UpdateDomain',
}
export enum EMR_ON_EKS_EMR_CONTAINERS {
	CANCEL_JOB_RUN = 'emr-containers:CancelJobRun',
	CREATE_JOB_TEMPLATE = 'emr-containers:CreateJobTemplate',
	CREATE_MANAGED_ENDPOINT = 'emr-containers:CreateManagedEndpoint',
	CREATE_VIRTUAL_CLUSTER = 'emr-containers:CreateVirtualCluster',
	DELETE_JOB_TEMPLATE = 'emr-containers:DeleteJobTemplate',
	DELETE_MANAGED_ENDPOINT = 'emr-containers:DeleteManagedEndpoint',
	DELETE_VIRTUAL_CLUSTER = 'emr-containers:DeleteVirtualCluster',
	DESCRIBE_JOB_RUN = 'emr-containers:DescribeJobRun',
	DESCRIBE_JOB_TEMPLATE = 'emr-containers:DescribeJobTemplate',
	DESCRIBE_MANAGED_ENDPOINT = 'emr-containers:DescribeManagedEndpoint',
	DESCRIBE_VIRTUAL_CLUSTER = 'emr-containers:DescribeVirtualCluster',
	LIST_JOB_RUNS = 'emr-containers:ListJobRuns',
	LIST_JOB_TEMPLATES = 'emr-containers:ListJobTemplates',
	LIST_MANAGED_ENDPOINTS = 'emr-containers:ListManagedEndpoints',
	LIST_TAGS_FOR_RESOURCE = 'emr-containers:ListTagsForResource',
	LIST_VIRTUAL_CLUSTERS = 'emr-containers:ListVirtualClusters',
	START_JOB_RUN = 'emr-containers:StartJobRun',
	TAG_RESOURCE = 'emr-containers:TagResource',
	UNTAG_RESOURCE = 'emr-containers:UntagResource',
}
export enum BUDGET_SERVICE {
	CREATE_BUDGET_ACTION = 'budgets:CreateBudgetAction',
	DELETE_BUDGET_ACTION = 'budgets:DeleteBudgetAction',
	DESCRIBE_BUDGET_ACTION = 'budgets:DescribeBudgetAction',
	DESCRIBE_BUDGET_ACTION_HISTORIES = 'budgets:DescribeBudgetActionHistories',
	DESCRIBE_BUDGET_ACTIONS_FOR_ACCOUNT = 'budgets:DescribeBudgetActionsForAccount',
	DESCRIBE_BUDGET_ACTIONS_FOR_BUDGET = 'budgets:DescribeBudgetActionsForBudget',
	EXECUTE_BUDGET_ACTION = 'budgets:ExecuteBudgetAction',
	MODIFY_BUDGET = 'budgets:ModifyBudget',
	UPDATE_BUDGET_ACTION = 'budgets:UpdateBudgetAction',
	VIEW_BUDGET = 'budgets:ViewBudget',
}
export enum EVENTBRIDGE_SCHEMAS {
	CREATE_DISCOVERER = 'schemas:CreateDiscoverer',
	CREATE_REGISTRY = 'schemas:CreateRegistry',
	CREATE_SCHEMA = 'schemas:CreateSchema',
	DELETE_DISCOVERER = 'schemas:DeleteDiscoverer',
	DELETE_REGISTRY = 'schemas:DeleteRegistry',
	DELETE_RESOURCE_POLICY = 'schemas:DeleteResourcePolicy',
	DELETE_SCHEMA = 'schemas:DeleteSchema',
	DELETE_SCHEMA_VERSION = 'schemas:DeleteSchemaVersion',
	DESCRIBE_CODE_BINDING = 'schemas:DescribeCodeBinding',
	DESCRIBE_DISCOVERER = 'schemas:DescribeDiscoverer',
	DESCRIBE_REGISTRY = 'schemas:DescribeRegistry',
	DESCRIBE_SCHEMA = 'schemas:DescribeSchema',
	EXPORT_SCHEMA = 'schemas:ExportSchema',
	GET_CODE_BINDING_SOURCE = 'schemas:GetCodeBindingSource',
	GET_DISCOVERED_SCHEMA = 'schemas:GetDiscoveredSchema',
	GET_RESOURCE_POLICY = 'schemas:GetResourcePolicy',
	LIST_DISCOVERERS = 'schemas:ListDiscoverers',
	LIST_REGISTRIES = 'schemas:ListRegistries',
	LIST_SCHEMA_VERSIONS = 'schemas:ListSchemaVersions',
	LIST_SCHEMAS = 'schemas:ListSchemas',
	LIST_TAGS_FOR_RESOURCE = 'schemas:ListTagsForResource',
	PUT_CODE_BINDING = 'schemas:PutCodeBinding',
	PUT_RESOURCE_POLICY = 'schemas:PutResourcePolicy',
	SEARCH_SCHEMAS = 'schemas:SearchSchemas',
	START_DISCOVERER = 'schemas:StartDiscoverer',
	STOP_DISCOVERER = 'schemas:StopDiscoverer',
	TAG_RESOURCE = 'schemas:TagResource',
	UNTAG_RESOURCE = 'schemas:UntagResource',
	UPDATE_DISCOVERER = 'schemas:UpdateDiscoverer',
	UPDATE_REGISTRY = 'schemas:UpdateRegistry',
	UPDATE_SCHEMA = 'schemas:UpdateSchema',
}
export enum NETWORK_MANAGER {
	ACCEPT_ATTACHMENT = 'networkmanager:AcceptAttachment',
	ASSOCIATE_CONNECT_PEER = 'networkmanager:AssociateConnectPeer',
	ASSOCIATE_CUSTOMER_GATEWAY = 'networkmanager:AssociateCustomerGateway',
	ASSOCIATE_LINK = 'networkmanager:AssociateLink',
	ASSOCIATE_TRANSIT_GATEWAY_CONNECT_PEER = 'networkmanager:AssociateTransitGatewayConnectPeer',
	CREATE_CONNECT_ATTACHMENT = 'networkmanager:CreateConnectAttachment',
	CREATE_CONNECT_PEER = 'networkmanager:CreateConnectPeer',
	CREATE_CONNECTION = 'networkmanager:CreateConnection',
	CREATE_CORE_NETWORK = 'networkmanager:CreateCoreNetwork',
	CREATE_DEVICE = 'networkmanager:CreateDevice',
	CREATE_GLOBAL_NETWORK = 'networkmanager:CreateGlobalNetwork',
	CREATE_LINK = 'networkmanager:CreateLink',
	CREATE_SITE = 'networkmanager:CreateSite',
	CREATE_SITE_TO_SITE_VPN_ATTACHMENT = 'networkmanager:CreateSiteToSiteVpnAttachment',
	CREATE_TRANSIT_GATEWAY_PEERING = 'networkmanager:CreateTransitGatewayPeering',
	CREATE_TRANSIT_GATEWAY_ROUTE_TABLE_ATTACHMENT = 'networkmanager:CreateTransitGatewayRouteTableAttachment',
	CREATE_VPC_ATTACHMENT = 'networkmanager:CreateVpcAttachment',
	DELETE_ATTACHMENT = 'networkmanager:DeleteAttachment',
	DELETE_CONNECT_PEER = 'networkmanager:DeleteConnectPeer',
	DELETE_CONNECTION = 'networkmanager:DeleteConnection',
	DELETE_CORE_NETWORK = 'networkmanager:DeleteCoreNetwork',
	DELETE_CORE_NETWORK_POLICY_VERSION = 'networkmanager:DeleteCoreNetworkPolicyVersion',
	DELETE_DEVICE = 'networkmanager:DeleteDevice',
	DELETE_GLOBAL_NETWORK = 'networkmanager:DeleteGlobalNetwork',
	DELETE_LINK = 'networkmanager:DeleteLink',
	DELETE_PEERING = 'networkmanager:DeletePeering',
	DELETE_RESOURCE_POLICY = 'networkmanager:DeleteResourcePolicy',
	DELETE_SITE = 'networkmanager:DeleteSite',
	DEREGISTER_TRANSIT_GATEWAY = 'networkmanager:DeregisterTransitGateway',
	DESCRIBE_GLOBAL_NETWORKS = 'networkmanager:DescribeGlobalNetworks',
	DISASSOCIATE_CONNECT_PEER = 'networkmanager:DisassociateConnectPeer',
	DISASSOCIATE_CUSTOMER_GATEWAY = 'networkmanager:DisassociateCustomerGateway',
	DISASSOCIATE_LINK = 'networkmanager:DisassociateLink',
	DISASSOCIATE_TRANSIT_GATEWAY_CONNECT_PEER = 'networkmanager:DisassociateTransitGatewayConnectPeer',
	EXECUTE_CORE_NETWORK_CHANGE_SET = 'networkmanager:ExecuteCoreNetworkChangeSet',
	GET_CONNECT_ATTACHMENT = 'networkmanager:GetConnectAttachment',
	GET_CONNECT_PEER = 'networkmanager:GetConnectPeer',
	GET_CONNECT_PEER_ASSOCIATIONS = 'networkmanager:GetConnectPeerAssociations',
	GET_CONNECTIONS = 'networkmanager:GetConnections',
	GET_CORE_NETWORK = 'networkmanager:GetCoreNetwork',
	GET_CORE_NETWORK_CHANGE_EVENTS = 'networkmanager:GetCoreNetworkChangeEvents',
	GET_CORE_NETWORK_CHANGE_SET = 'networkmanager:GetCoreNetworkChangeSet',
	GET_CORE_NETWORK_POLICY = 'networkmanager:GetCoreNetworkPolicy',
	GET_CUSTOMER_GATEWAY_ASSOCIATIONS = 'networkmanager:GetCustomerGatewayAssociations',
	GET_DEVICES = 'networkmanager:GetDevices',
	GET_LINK_ASSOCIATIONS = 'networkmanager:GetLinkAssociations',
	GET_LINKS = 'networkmanager:GetLinks',
	GET_NETWORK_RESOURCE_COUNTS = 'networkmanager:GetNetworkResourceCounts',
	GET_NETWORK_RESOURCE_RELATIONSHIPS = 'networkmanager:GetNetworkResourceRelationships',
	GET_NETWORK_RESOURCES = 'networkmanager:GetNetworkResources',
	GET_NETWORK_ROUTES = 'networkmanager:GetNetworkRoutes',
	GET_NETWORK_TELEMETRY = 'networkmanager:GetNetworkTelemetry',
	GET_RESOURCE_POLICY = 'networkmanager:GetResourcePolicy',
	GET_ROUTE_ANALYSIS = 'networkmanager:GetRouteAnalysis',
	GET_SITE_TO_SITE_VPN_ATTACHMENT = 'networkmanager:GetSiteToSiteVpnAttachment',
	GET_SITES = 'networkmanager:GetSites',
	GET_TRANSIT_GATEWAY_CONNECT_PEER_ASSOCIATIONS = 'networkmanager:GetTransitGatewayConnectPeerAssociations',
	GET_TRANSIT_GATEWAY_PEERING = 'networkmanager:GetTransitGatewayPeering',
	GET_TRANSIT_GATEWAY_REGISTRATIONS = 'networkmanager:GetTransitGatewayRegistrations',
	GET_TRANSIT_GATEWAY_ROUTE_TABLE_ATTACHMENT = 'networkmanager:GetTransitGatewayRouteTableAttachment',
	GET_VPC_ATTACHMENT = 'networkmanager:GetVpcAttachment',
	LIST_ATTACHMENTS = 'networkmanager:ListAttachments',
	LIST_CONNECT_PEERS = 'networkmanager:ListConnectPeers',
	LIST_CORE_NETWORK_POLICY_VERSIONS = 'networkmanager:ListCoreNetworkPolicyVersions',
	LIST_CORE_NETWORKS = 'networkmanager:ListCoreNetworks',
	LIST_ORGANIZATION_SERVICE_ACCESS_STATUS = 'networkmanager:ListOrganizationServiceAccessStatus',
	LIST_PEERINGS = 'networkmanager:ListPeerings',
	LIST_TAGS_FOR_RESOURCE = 'networkmanager:ListTagsForResource',
	PUT_CORE_NETWORK_POLICY = 'networkmanager:PutCoreNetworkPolicy',
	PUT_RESOURCE_POLICY = 'networkmanager:PutResourcePolicy',
	REGISTER_TRANSIT_GATEWAY = 'networkmanager:RegisterTransitGateway',
	REJECT_ATTACHMENT = 'networkmanager:RejectAttachment',
	RESTORE_CORE_NETWORK_POLICY_VERSION = 'networkmanager:RestoreCoreNetworkPolicyVersion',
	START_ORGANIZATION_SERVICE_ACCESS_UPDATE = 'networkmanager:StartOrganizationServiceAccessUpdate',
	START_ROUTE_ANALYSIS = 'networkmanager:StartRouteAnalysis',
	TAG_RESOURCE = 'networkmanager:TagResource',
	UNTAG_RESOURCE = 'networkmanager:UntagResource',
	UPDATE_CONNECTION = 'networkmanager:UpdateConnection',
	UPDATE_CORE_NETWORK = 'networkmanager:UpdateCoreNetwork',
	UPDATE_DEVICE = 'networkmanager:UpdateDevice',
	UPDATE_GLOBAL_NETWORK = 'networkmanager:UpdateGlobalNetwork',
	UPDATE_LINK = 'networkmanager:UpdateLink',
	UPDATE_NETWORK_RESOURCE_METADATA = 'networkmanager:UpdateNetworkResourceMetadata',
	UPDATE_SITE = 'networkmanager:UpdateSite',
	UPDATE_VPC_ATTACHMENT = 'networkmanager:UpdateVpcAttachment',
}
export enum SUPPORT {
	ADD_ATTACHMENTS_TO_SET = 'support:AddAttachmentsToSet',
	ADD_COMMUNICATION_TO_CASE = 'support:AddCommunicationToCase',
	CREATE_CASE = 'support:CreateCase',
	DESCRIBE_ATTACHMENT = 'support:DescribeAttachment',
	DESCRIBE_CASE_ATTRIBUTES = 'support:DescribeCaseAttributes',
	DESCRIBE_CASES = 'support:DescribeCases',
	DESCRIBE_COMMUNICATIONS = 'support:DescribeCommunications',
	DESCRIBE_ISSUE_TYPES = 'support:DescribeIssueTypes',
	DESCRIBE_SERVICES = 'support:DescribeServices',
	DESCRIBE_SEVERITY_LEVELS = 'support:DescribeSeverityLevels',
	DESCRIBE_SUPPORT_LEVEL = 'support:DescribeSupportLevel',
	DESCRIBE_TRUSTED_ADVISOR_CHECK_REFRESH_STATUSES = 'support:DescribeTrustedAdvisorCheckRefreshStatuses',
	DESCRIBE_TRUSTED_ADVISOR_CHECK_RESULT = 'support:DescribeTrustedAdvisorCheckResult',
	DESCRIBE_TRUSTED_ADVISOR_CHECK_SUMMARIES = 'support:DescribeTrustedAdvisorCheckSummaries',
	DESCRIBE_TRUSTED_ADVISOR_CHECKS = 'support:DescribeTrustedAdvisorChecks',
	INITIATE_CALL_FOR_CASE = 'support:InitiateCallForCase',
	INITIATE_CHAT_FOR_CASE = 'support:InitiateChatForCase',
	PUT_CASE_ATTRIBUTES = 'support:PutCaseAttributes',
	RATE_CASE_COMMUNICATION = 'support:RateCaseCommunication',
	REFRESH_TRUSTED_ADVISOR_CHECK = 'support:RefreshTrustedAdvisorCheck',
	RESOLVE_CASE = 'support:ResolveCase',
	SEARCH_FOR_CASES = 'support:SearchForCases',
}
export enum COGNITO_IDENTITY {
	CREATE_IDENTITY_POOL = 'cognito-identity:CreateIdentityPool',
	DELETE_IDENTITIES = 'cognito-identity:DeleteIdentities',
	DELETE_IDENTITY_POOL = 'cognito-identity:DeleteIdentityPool',
	DESCRIBE_IDENTITY = 'cognito-identity:DescribeIdentity',
	DESCRIBE_IDENTITY_POOL = 'cognito-identity:DescribeIdentityPool',
	GET_CREDENTIALS_FOR_IDENTITY = 'cognito-identity:GetCredentialsForIdentity',
	GET_ID = 'cognito-identity:GetId',
	GET_IDENTITY_POOL_ROLES = 'cognito-identity:GetIdentityPoolRoles',
	GET_OPEN_ID_TOKEN = 'cognito-identity:GetOpenIdToken',
	GET_OPEN_ID_TOKEN_FOR_DEVELOPER_IDENTITY = 'cognito-identity:GetOpenIdTokenForDeveloperIdentity',
	GET_PRINCIPAL_TAG_ATTRIBUTE_MAP = 'cognito-identity:GetPrincipalTagAttributeMap',
	LIST_IDENTITIES = 'cognito-identity:ListIdentities',
	LIST_IDENTITY_POOLS = 'cognito-identity:ListIdentityPools',
	LIST_TAGS_FOR_RESOURCE = 'cognito-identity:ListTagsForResource',
	LOOKUP_DEVELOPER_IDENTITY = 'cognito-identity:LookupDeveloperIdentity',
	MERGE_DEVELOPER_IDENTITIES = 'cognito-identity:MergeDeveloperIdentities',
	SET_IDENTITY_POOL_ROLES = 'cognito-identity:SetIdentityPoolRoles',
	SET_PRINCIPAL_TAG_ATTRIBUTE_MAP = 'cognito-identity:SetPrincipalTagAttributeMap',
	TAG_RESOURCE = 'cognito-identity:TagResource',
	UNLINK_DEVELOPER_IDENTITY = 'cognito-identity:UnlinkDeveloperIdentity',
	UNLINK_IDENTITY = 'cognito-identity:UnlinkIdentity',
	UNTAG_RESOURCE = 'cognito-identity:UntagResource',
	UPDATE_IDENTITY_POOL = 'cognito-identity:UpdateIdentityPool',
}
export enum POLLY {
	DELETE_LEXICON = 'polly:DeleteLexicon',
	DESCRIBE_VOICES = 'polly:DescribeVoices',
	GET_LEXICON = 'polly:GetLexicon',
	GET_SPEECH_SYNTHESIS_TASK = 'polly:GetSpeechSynthesisTask',
	LIST_LEXICONS = 'polly:ListLexicons',
	LIST_SPEECH_SYNTHESIS_TASKS = 'polly:ListSpeechSynthesisTasks',
	PUT_LEXICON = 'polly:PutLexicon',
	START_SPEECH_SYNTHESIS_TASK = 'polly:StartSpeechSynthesisTask',
	SYNTHESIZE_SPEECH = 'polly:SynthesizeSpeech',
}
export enum APPCONFIG {
	CREATE_APPLICATION = 'appconfig:CreateApplication',
	CREATE_CONFIGURATION_PROFILE = 'appconfig:CreateConfigurationProfile',
	CREATE_DEPLOYMENT_STRATEGY = 'appconfig:CreateDeploymentStrategy',
	CREATE_ENVIRONMENT = 'appconfig:CreateEnvironment',
	CREATE_EXTENSION = 'appconfig:CreateExtension',
	CREATE_EXTENSION_ASSOCIATION = 'appconfig:CreateExtensionAssociation',
	CREATE_HOSTED_CONFIGURATION_VERSION = 'appconfig:CreateHostedConfigurationVersion',
	DELETE_APPLICATION = 'appconfig:DeleteApplication',
	DELETE_CONFIGURATION_PROFILE = 'appconfig:DeleteConfigurationProfile',
	DELETE_DEPLOYMENT_STRATEGY = 'appconfig:DeleteDeploymentStrategy',
	DELETE_ENVIRONMENT = 'appconfig:DeleteEnvironment',
	DELETE_EXTENSION = 'appconfig:DeleteExtension',
	DELETE_EXTENSION_ASSOCIATION = 'appconfig:DeleteExtensionAssociation',
	DELETE_HOSTED_CONFIGURATION_VERSION = 'appconfig:DeleteHostedConfigurationVersion',
	GET_APPLICATION = 'appconfig:GetApplication',
	GET_CONFIGURATION = 'appconfig:GetConfiguration',
	GET_CONFIGURATION_PROFILE = 'appconfig:GetConfigurationProfile',
	GET_DEPLOYMENT = 'appconfig:GetDeployment',
	GET_DEPLOYMENT_STRATEGY = 'appconfig:GetDeploymentStrategy',
	GET_ENVIRONMENT = 'appconfig:GetEnvironment',
	GET_EXTENSION = 'appconfig:GetExtension',
	GET_EXTENSION_ASSOCIATION = 'appconfig:GetExtensionAssociation',
	GET_HOSTED_CONFIGURATION_VERSION = 'appconfig:GetHostedConfigurationVersion',
	GET_LATEST_CONFIGURATION = 'appconfig:GetLatestConfiguration',
	LIST_APPLICATIONS = 'appconfig:ListApplications',
	LIST_CONFIGURATION_PROFILES = 'appconfig:ListConfigurationProfiles',
	LIST_DEPLOYMENT_STRATEGIES = 'appconfig:ListDeploymentStrategies',
	LIST_DEPLOYMENTS = 'appconfig:ListDeployments',
	LIST_ENVIRONMENTS = 'appconfig:ListEnvironments',
	LIST_EXTENSION_ASSOCIATIONS = 'appconfig:ListExtensionAssociations',
	LIST_EXTENSIONS = 'appconfig:ListExtensions',
	LIST_HOSTED_CONFIGURATION_VERSIONS = 'appconfig:ListHostedConfigurationVersions',
	LIST_TAGS_FOR_RESOURCE = 'appconfig:ListTagsForResource',
	START_CONFIGURATION_SESSION = 'appconfig:StartConfigurationSession',
	START_DEPLOYMENT = 'appconfig:StartDeployment',
	STOP_DEPLOYMENT = 'appconfig:StopDeployment',
	TAG_RESOURCE = 'appconfig:TagResource',
	UNTAG_RESOURCE = 'appconfig:UntagResource',
	UPDATE_APPLICATION = 'appconfig:UpdateApplication',
	UPDATE_CONFIGURATION_PROFILE = 'appconfig:UpdateConfigurationProfile',
	UPDATE_DEPLOYMENT_STRATEGY = 'appconfig:UpdateDeploymentStrategy',
	UPDATE_ENVIRONMENT = 'appconfig:UpdateEnvironment',
	UPDATE_EXTENSION = 'appconfig:UpdateExtension',
	UPDATE_EXTENSION_ASSOCIATION = 'appconfig:UpdateExtensionAssociation',
	VALIDATE_CONFIGURATION = 'appconfig:ValidateConfiguration',
}
export enum APP_RUNNER {
	ASSOCIATE_CUSTOM_DOMAIN = 'apprunner:AssociateCustomDomain',
	CREATE_AUTO_SCALING_CONFIGURATION = 'apprunner:CreateAutoScalingConfiguration',
	CREATE_CONNECTION = 'apprunner:CreateConnection',
	CREATE_OBSERVABILITY_CONFIGURATION = 'apprunner:CreateObservabilityConfiguration',
	CREATE_SERVICE = 'apprunner:CreateService',
	CREATE_VPC_CONNECTOR = 'apprunner:CreateVpcConnector',
	CREATE_VPC_INGRESS_CONNECTION = 'apprunner:CreateVpcIngressConnection',
	DELETE_AUTO_SCALING_CONFIGURATION = 'apprunner:DeleteAutoScalingConfiguration',
	DELETE_CONNECTION = 'apprunner:DeleteConnection',
	DELETE_OBSERVABILITY_CONFIGURATION = 'apprunner:DeleteObservabilityConfiguration',
	DELETE_SERVICE = 'apprunner:DeleteService',
	DELETE_VPC_CONNECTOR = 'apprunner:DeleteVpcConnector',
	DELETE_VPC_INGRESS_CONNECTION = 'apprunner:DeleteVpcIngressConnection',
	DESCRIBE_AUTO_SCALING_CONFIGURATION = 'apprunner:DescribeAutoScalingConfiguration',
	DESCRIBE_CUSTOM_DOMAINS = 'apprunner:DescribeCustomDomains',
	DESCRIBE_OBSERVABILITY_CONFIGURATION = 'apprunner:DescribeObservabilityConfiguration',
	DESCRIBE_OPERATION = 'apprunner:DescribeOperation',
	DESCRIBE_SERVICE = 'apprunner:DescribeService',
	DESCRIBE_VPC_CONNECTOR = 'apprunner:DescribeVpcConnector',
	DESCRIBE_VPC_INGRESS_CONNECTION = 'apprunner:DescribeVpcIngressConnection',
	DISASSOCIATE_CUSTOM_DOMAIN = 'apprunner:DisassociateCustomDomain',
	LIST_AUTO_SCALING_CONFIGURATIONS = 'apprunner:ListAutoScalingConfigurations',
	LIST_CONNECTIONS = 'apprunner:ListConnections',
	LIST_OBSERVABILITY_CONFIGURATIONS = 'apprunner:ListObservabilityConfigurations',
	LIST_OPERATIONS = 'apprunner:ListOperations',
	LIST_SERVICES = 'apprunner:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'apprunner:ListTagsForResource',
	LIST_VPC_CONNECTORS = 'apprunner:ListVpcConnectors',
	LIST_VPC_INGRESS_CONNECTIONS = 'apprunner:ListVpcIngressConnections',
	PAUSE_SERVICE = 'apprunner:PauseService',
	RESUME_SERVICE = 'apprunner:ResumeService',
	START_DEPLOYMENT = 'apprunner:StartDeployment',
	TAG_RESOURCE = 'apprunner:TagResource',
	UNTAG_RESOURCE = 'apprunner:UntagResource',
	UPDATE_SERVICE = 'apprunner:UpdateService',
	UPDATE_VPC_INGRESS_CONNECTION = 'apprunner:UpdateVpcIngressConnection',
}
export enum LICENSE_MANAGER {
	ACCEPT_GRANT = 'license-manager:AcceptGrant',
	CHECK_IN_LICENSE = 'license-manager:CheckInLicense',
	CHECKOUT_BORROW_LICENSE = 'license-manager:CheckoutBorrowLicense',
	CHECKOUT_LICENSE = 'license-manager:CheckoutLicense',
	CREATE_GRANT = 'license-manager:CreateGrant',
	CREATE_GRANT_VERSION = 'license-manager:CreateGrantVersion',
	CREATE_LICENSE = 'license-manager:CreateLicense',
	CREATE_LICENSE_CONFIGURATION = 'license-manager:CreateLicenseConfiguration',
	CREATE_LICENSE_CONVERSION_TASK_FOR_RESOURCE = 'license-manager:CreateLicenseConversionTaskForResource',
	CREATE_LICENSE_MANAGER_REPORT_GENERATOR = 'license-manager:CreateLicenseManagerReportGenerator',
	CREATE_LICENSE_VERSION = 'license-manager:CreateLicenseVersion',
	CREATE_TOKEN = 'license-manager:CreateToken',
	DELETE_GRANT = 'license-manager:DeleteGrant',
	DELETE_LICENSE = 'license-manager:DeleteLicense',
	DELETE_LICENSE_CONFIGURATION = 'license-manager:DeleteLicenseConfiguration',
	DELETE_LICENSE_MANAGER_REPORT_GENERATOR = 'license-manager:DeleteLicenseManagerReportGenerator',
	DELETE_TOKEN = 'license-manager:DeleteToken',
	EXTEND_LICENSE_CONSUMPTION = 'license-manager:ExtendLicenseConsumption',
	GET_ACCESS_TOKEN = 'license-manager:GetAccessToken',
	GET_GRANT = 'license-manager:GetGrant',
	GET_LICENSE = 'license-manager:GetLicense',
	GET_LICENSE_CONFIGURATION = 'license-manager:GetLicenseConfiguration',
	GET_LICENSE_CONVERSION_TASK = 'license-manager:GetLicenseConversionTask',
	GET_LICENSE_MANAGER_REPORT_GENERATOR = 'license-manager:GetLicenseManagerReportGenerator',
	GET_LICENSE_USAGE = 'license-manager:GetLicenseUsage',
	GET_SERVICE_SETTINGS = 'license-manager:GetServiceSettings',
	LIST_ASSOCIATIONS_FOR_LICENSE_CONFIGURATION = 'license-manager:ListAssociationsForLicenseConfiguration',
	LIST_DISTRIBUTED_GRANTS = 'license-manager:ListDistributedGrants',
	LIST_FAILURES_FOR_LICENSE_CONFIGURATION_OPERATIONS = 'license-manager:ListFailuresForLicenseConfigurationOperations',
	LIST_LICENSE_CONFIGURATIONS = 'license-manager:ListLicenseConfigurations',
	LIST_LICENSE_CONVERSION_TASKS = 'license-manager:ListLicenseConversionTasks',
	LIST_LICENSE_MANAGER_REPORT_GENERATORS = 'license-manager:ListLicenseManagerReportGenerators',
	LIST_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'license-manager:ListLicenseSpecificationsForResource',
	LIST_LICENSE_VERSIONS = 'license-manager:ListLicenseVersions',
	LIST_LICENSES = 'license-manager:ListLicenses',
	LIST_RECEIVED_GRANTS = 'license-manager:ListReceivedGrants',
	LIST_RECEIVED_GRANTS_FOR_ORGANIZATION = 'license-manager:ListReceivedGrantsForOrganization',
	LIST_RECEIVED_LICENSES = 'license-manager:ListReceivedLicenses',
	LIST_RECEIVED_LICENSES_FOR_ORGANIZATION = 'license-manager:ListReceivedLicensesForOrganization',
	LIST_RESOURCE_INVENTORY = 'license-manager:ListResourceInventory',
	LIST_TAGS_FOR_RESOURCE = 'license-manager:ListTagsForResource',
	LIST_TOKENS = 'license-manager:ListTokens',
	LIST_USAGE_FOR_LICENSE_CONFIGURATION = 'license-manager:ListUsageForLicenseConfiguration',
	REJECT_GRANT = 'license-manager:RejectGrant',
	TAG_RESOURCE = 'license-manager:TagResource',
	UNTAG_RESOURCE = 'license-manager:UntagResource',
	UPDATE_LICENSE_CONFIGURATION = 'license-manager:UpdateLicenseConfiguration',
	UPDATE_LICENSE_MANAGER_REPORT_GENERATOR = 'license-manager:UpdateLicenseManagerReportGenerator',
	UPDATE_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'license-manager:UpdateLicenseSpecificationsForResource',
	UPDATE_SERVICE_SETTINGS = 'license-manager:UpdateServiceSettings',
}
export enum ALEXA_FOR_BUSINESS {
	APPROVE_SKILL = 'a4b:ApproveSkill',
	ASSOCIATE_CONTACT_WITH_ADDRESS_BOOK = 'a4b:AssociateContactWithAddressBook',
	ASSOCIATE_DEVICE_WITH_NETWORK_PROFILE = 'a4b:AssociateDeviceWithNetworkProfile',
	ASSOCIATE_DEVICE_WITH_ROOM = 'a4b:AssociateDeviceWithRoom',
	ASSOCIATE_SKILL_GROUP_WITH_ROOM = 'a4b:AssociateSkillGroupWithRoom',
	ASSOCIATE_SKILL_WITH_SKILL_GROUP = 'a4b:AssociateSkillWithSkillGroup',
	ASSOCIATE_SKILL_WITH_USERS = 'a4b:AssociateSkillWithUsers',
	COMPLETE_REGISTRATION = 'a4b:CompleteRegistration',
	CREATE_ADDRESS_BOOK = 'a4b:CreateAddressBook',
	CREATE_BUSINESS_REPORT_SCHEDULE = 'a4b:CreateBusinessReportSchedule',
	CREATE_CONFERENCE_PROVIDER = 'a4b:CreateConferenceProvider',
	CREATE_CONTACT = 'a4b:CreateContact',
	CREATE_GATEWAY_GROUP = 'a4b:CreateGatewayGroup',
	CREATE_NETWORK_PROFILE = 'a4b:CreateNetworkProfile',
	CREATE_PROFILE = 'a4b:CreateProfile',
	CREATE_ROOM = 'a4b:CreateRoom',
	CREATE_SKILL_GROUP = 'a4b:CreateSkillGroup',
	CREATE_USER = 'a4b:CreateUser',
	DELETE_ADDRESS_BOOK = 'a4b:DeleteAddressBook',
	DELETE_BUSINESS_REPORT_SCHEDULE = 'a4b:DeleteBusinessReportSchedule',
	DELETE_CONFERENCE_PROVIDER = 'a4b:DeleteConferenceProvider',
	DELETE_CONTACT = 'a4b:DeleteContact',
	DELETE_DEVICE = 'a4b:DeleteDevice',
	DELETE_DEVICE_USAGE_DATA = 'a4b:DeleteDeviceUsageData',
	DELETE_GATEWAY_GROUP = 'a4b:DeleteGatewayGroup',
	DELETE_NETWORK_PROFILE = 'a4b:DeleteNetworkProfile',
	DELETE_PROFILE = 'a4b:DeleteProfile',
	DELETE_ROOM = 'a4b:DeleteRoom',
	DELETE_ROOM_SKILL_PARAMETER = 'a4b:DeleteRoomSkillParameter',
	DELETE_SKILL_AUTHORIZATION = 'a4b:DeleteSkillAuthorization',
	DELETE_SKILL_GROUP = 'a4b:DeleteSkillGroup',
	DELETE_USER = 'a4b:DeleteUser',
	DISASSOCIATE_CONTACT_FROM_ADDRESS_BOOK = 'a4b:DisassociateContactFromAddressBook',
	DISASSOCIATE_DEVICE_FROM_ROOM = 'a4b:DisassociateDeviceFromRoom',
	DISASSOCIATE_SKILL_FROM_SKILL_GROUP = 'a4b:DisassociateSkillFromSkillGroup',
	DISASSOCIATE_SKILL_FROM_USERS = 'a4b:DisassociateSkillFromUsers',
	DISASSOCIATE_SKILL_GROUP_FROM_ROOM = 'a4b:DisassociateSkillGroupFromRoom',
	FORGET_SMART_HOME_APPLIANCES = 'a4b:ForgetSmartHomeAppliances',
	GET_ADDRESS_BOOK = 'a4b:GetAddressBook',
	GET_CONFERENCE_PREFERENCE = 'a4b:GetConferencePreference',
	GET_CONFERENCE_PROVIDER = 'a4b:GetConferenceProvider',
	GET_CONTACT = 'a4b:GetContact',
	GET_DEVICE = 'a4b:GetDevice',
	GET_GATEWAY = 'a4b:GetGateway',
	GET_GATEWAY_GROUP = 'a4b:GetGatewayGroup',
	GET_INVITATION_CONFIGURATION = 'a4b:GetInvitationConfiguration',
	GET_NETWORK_PROFILE = 'a4b:GetNetworkProfile',
	GET_PROFILE = 'a4b:GetProfile',
	GET_ROOM = 'a4b:GetRoom',
	GET_ROOM_SKILL_PARAMETER = 'a4b:GetRoomSkillParameter',
	GET_SKILL_GROUP = 'a4b:GetSkillGroup',
	LIST_BUSINESS_REPORT_SCHEDULES = 'a4b:ListBusinessReportSchedules',
	LIST_CONFERENCE_PROVIDERS = 'a4b:ListConferenceProviders',
	LIST_DEVICE_EVENTS = 'a4b:ListDeviceEvents',
	LIST_GATEWAY_GROUPS = 'a4b:ListGatewayGroups',
	LIST_GATEWAYS = 'a4b:ListGateways',
	LIST_SKILLS = 'a4b:ListSkills',
	LIST_SKILLS_STORE_CATEGORIES = 'a4b:ListSkillsStoreCategories',
	LIST_SKILLS_STORE_SKILLS_BY_CATEGORY = 'a4b:ListSkillsStoreSkillsByCategory',
	LIST_SMART_HOME_APPLIANCES = 'a4b:ListSmartHomeAppliances',
	LIST_TAGS = 'a4b:ListTags',
	PUT_CONFERENCE_PREFERENCE = 'a4b:PutConferencePreference',
	PUT_DEVICE_SETUP_EVENTS = 'a4b:PutDeviceSetupEvents',
	PUT_INVITATION_CONFIGURATION = 'a4b:PutInvitationConfiguration',
	PUT_ROOM_SKILL_PARAMETER = 'a4b:PutRoomSkillParameter',
	PUT_SKILL_AUTHORIZATION = 'a4b:PutSkillAuthorization',
	REGISTER_AVS_DEVICE = 'a4b:RegisterAVSDevice',
	REGISTER_DEVICE = 'a4b:RegisterDevice',
	REJECT_SKILL = 'a4b:RejectSkill',
	RESOLVE_ROOM = 'a4b:ResolveRoom',
	REVOKE_INVITATION = 'a4b:RevokeInvitation',
	SEARCH_ADDRESS_BOOKS = 'a4b:SearchAddressBooks',
	SEARCH_CONTACTS = 'a4b:SearchContacts',
	SEARCH_DEVICES = 'a4b:SearchDevices',
	SEARCH_NETWORK_PROFILES = 'a4b:SearchNetworkProfiles',
	SEARCH_PROFILES = 'a4b:SearchProfiles',
	SEARCH_ROOMS = 'a4b:SearchRooms',
	SEARCH_SKILL_GROUPS = 'a4b:SearchSkillGroups',
	SEARCH_USERS = 'a4b:SearchUsers',
	SEND_ANNOUNCEMENT = 'a4b:SendAnnouncement',
	SEND_INVITATION = 'a4b:SendInvitation',
	START_DEVICE_SYNC = 'a4b:StartDeviceSync',
	START_SMART_HOME_APPLIANCE_DISCOVERY = 'a4b:StartSmartHomeApplianceDiscovery',
	TAG_RESOURCE = 'a4b:TagResource',
	UNTAG_RESOURCE = 'a4b:UntagResource',
	UPDATE_ADDRESS_BOOK = 'a4b:UpdateAddressBook',
	UPDATE_BUSINESS_REPORT_SCHEDULE = 'a4b:UpdateBusinessReportSchedule',
	UPDATE_CONFERENCE_PROVIDER = 'a4b:UpdateConferenceProvider',
	UPDATE_CONTACT = 'a4b:UpdateContact',
	UPDATE_DEVICE = 'a4b:UpdateDevice',
	UPDATE_GATEWAY = 'a4b:UpdateGateway',
	UPDATE_GATEWAY_GROUP = 'a4b:UpdateGatewayGroup',
	UPDATE_NETWORK_PROFILE = 'a4b:UpdateNetworkProfile',
	UPDATE_PROFILE = 'a4b:UpdateProfile',
	UPDATE_ROOM = 'a4b:UpdateRoom',
	UPDATE_SKILL_GROUP = 'a4b:UpdateSkillGroup',
}
export enum PRIVATE_CERTIFICATE_AUTHORITY {
	CREATE_CERTIFICATE_AUTHORITY = 'acm-pca:CreateCertificateAuthority',
	CREATE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'acm-pca:CreateCertificateAuthorityAuditReport',
	CREATE_PERMISSION = 'acm-pca:CreatePermission',
	DELETE_CERTIFICATE_AUTHORITY = 'acm-pca:DeleteCertificateAuthority',
	DELETE_PERMISSION = 'acm-pca:DeletePermission',
	DELETE_POLICY = 'acm-pca:DeletePolicy',
	DESCRIBE_CERTIFICATE_AUTHORITY = 'acm-pca:DescribeCertificateAuthority',
	DESCRIBE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'acm-pca:DescribeCertificateAuthorityAuditReport',
	GET_CERTIFICATE = 'acm-pca:GetCertificate',
	GET_CERTIFICATE_AUTHORITY_CERTIFICATE = 'acm-pca:GetCertificateAuthorityCertificate',
	GET_CERTIFICATE_AUTHORITY_CSR = 'acm-pca:GetCertificateAuthorityCsr',
	GET_POLICY = 'acm-pca:GetPolicy',
	IMPORT_CERTIFICATE_AUTHORITY_CERTIFICATE = 'acm-pca:ImportCertificateAuthorityCertificate',
	ISSUE_CERTIFICATE = 'acm-pca:IssueCertificate',
	LIST_CERTIFICATE_AUTHORITIES = 'acm-pca:ListCertificateAuthorities',
	LIST_PERMISSIONS = 'acm-pca:ListPermissions',
	LIST_TAGS = 'acm-pca:ListTags',
	PUT_POLICY = 'acm-pca:PutPolicy',
	RESTORE_CERTIFICATE_AUTHORITY = 'acm-pca:RestoreCertificateAuthority',
	REVOKE_CERTIFICATE = 'acm-pca:RevokeCertificate',
	TAG_CERTIFICATE_AUTHORITY = 'acm-pca:TagCertificateAuthority',
	UNTAG_CERTIFICATE_AUTHORITY = 'acm-pca:UntagCertificateAuthority',
	UPDATE_CERTIFICATE_AUTHORITY = 'acm-pca:UpdateCertificateAuthority',
}
export enum STEP_FUNCTIONS {
	CREATE_ACTIVITY = 'states:CreateActivity',
	CREATE_STATE_MACHINE = 'states:CreateStateMachine',
	DELETE_ACTIVITY = 'states:DeleteActivity',
	DELETE_STATE_MACHINE = 'states:DeleteStateMachine',
	DESCRIBE_ACTIVITY = 'states:DescribeActivity',
	DESCRIBE_EXECUTION = 'states:DescribeExecution',
	DESCRIBE_MAP_RUN = 'states:DescribeMapRun',
	DESCRIBE_STATE_MACHINE = 'states:DescribeStateMachine',
	DESCRIBE_STATE_MACHINE_FOR_EXECUTION = 'states:DescribeStateMachineForExecution',
	GET_ACTIVITY_TASK = 'states:GetActivityTask',
	GET_EXECUTION_HISTORY = 'states:GetExecutionHistory',
	LIST_ACTIVITIES = 'states:ListActivities',
	LIST_EXECUTIONS = 'states:ListExecutions',
	LIST_MAP_RUNS = 'states:ListMapRuns',
	LIST_STATE_MACHINES = 'states:ListStateMachines',
	LIST_TAGS_FOR_RESOURCE = 'states:ListTagsForResource',
	SEND_TASK_FAILURE = 'states:SendTaskFailure',
	SEND_TASK_HEARTBEAT = 'states:SendTaskHeartbeat',
	SEND_TASK_SUCCESS = 'states:SendTaskSuccess',
	START_EXECUTION = 'states:StartExecution',
	START_SYNC_EXECUTION = 'states:StartSyncExecution',
	STOP_EXECUTION = 'states:StopExecution',
	TAG_RESOURCE = 'states:TagResource',
	UNTAG_RESOURCE = 'states:UntagResource',
	UPDATE_MAP_RUN = 'states:UpdateMapRun',
	UPDATE_STATE_MACHINE = 'states:UpdateStateMachine',
}
export enum CONNECT_WISDOM {
	CREATE_ASSISTANT = 'wisdom:CreateAssistant',
	CREATE_ASSISTANT_ASSOCIATION = 'wisdom:CreateAssistantAssociation',
	CREATE_CONTENT = 'wisdom:CreateContent',
	CREATE_KNOWLEDGE_BASE = 'wisdom:CreateKnowledgeBase',
	CREATE_SESSION = 'wisdom:CreateSession',
	DELETE_ASSISTANT = 'wisdom:DeleteAssistant',
	DELETE_ASSISTANT_ASSOCIATION = 'wisdom:DeleteAssistantAssociation',
	DELETE_CONTENT = 'wisdom:DeleteContent',
	DELETE_KNOWLEDGE_BASE = 'wisdom:DeleteKnowledgeBase',
	GET_ASSISTANT = 'wisdom:GetAssistant',
	GET_ASSISTANT_ASSOCIATION = 'wisdom:GetAssistantAssociation',
	GET_CONTENT = 'wisdom:GetContent',
	GET_CONTENT_SUMMARY = 'wisdom:GetContentSummary',
	GET_KNOWLEDGE_BASE = 'wisdom:GetKnowledgeBase',
	GET_RECOMMENDATIONS = 'wisdom:GetRecommendations',
	GET_SESSION = 'wisdom:GetSession',
	LIST_ASSISTANT_ASSOCIATIONS = 'wisdom:ListAssistantAssociations',
	LIST_ASSISTANTS = 'wisdom:ListAssistants',
	LIST_CONTENTS = 'wisdom:ListContents',
	LIST_KNOWLEDGE_BASES = 'wisdom:ListKnowledgeBases',
	LIST_TAGS_FOR_RESOURCE = 'wisdom:ListTagsForResource',
	NOTIFY_RECOMMENDATIONS_RECEIVED = 'wisdom:NotifyRecommendationsReceived',
	QUERY_ASSISTANT = 'wisdom:QueryAssistant',
	REMOVE_KNOWLEDGE_BASE_TEMPLATE_URI = 'wisdom:RemoveKnowledgeBaseTemplateUri',
	SEARCH_CONTENT = 'wisdom:SearchContent',
	SEARCH_SESSIONS = 'wisdom:SearchSessions',
	START_CONTENT_UPLOAD = 'wisdom:StartContentUpload',
	TAG_RESOURCE = 'wisdom:TagResource',
	UNTAG_RESOURCE = 'wisdom:UntagResource',
	UPDATE_CONTENT = 'wisdom:UpdateContent',
	UPDATE_KNOWLEDGE_BASE_TEMPLATE_URI = 'wisdom:UpdateKnowledgeBaseTemplateUri',
}
export enum EVENTBRIDGE_SCHEDULER {
	CREATE_SCHEDULE = 'scheduler:CreateSchedule',
	CREATE_SCHEDULE_GROUP = 'scheduler:CreateScheduleGroup',
	DELETE_SCHEDULE = 'scheduler:DeleteSchedule',
	DELETE_SCHEDULE_GROUP = 'scheduler:DeleteScheduleGroup',
	GET_SCHEDULE = 'scheduler:GetSchedule',
	GET_SCHEDULE_GROUP = 'scheduler:GetScheduleGroup',
	LIST_SCHEDULE_GROUPS = 'scheduler:ListScheduleGroups',
	LIST_SCHEDULES = 'scheduler:ListSchedules',
	LIST_TAGS_FOR_RESOURCE = 'scheduler:ListTagsForResource',
	TAG_RESOURCE = 'scheduler:TagResource',
	UNTAG_RESOURCE = 'scheduler:UntagResource',
	UPDATE_SCHEDULE = 'scheduler:UpdateSchedule',
}
export enum MESSAGE_DELIVERY_SERVICE {
	ACKNOWLEDGE_MESSAGE = 'ec2messages:AcknowledgeMessage',
	DELETE_MESSAGE = 'ec2messages:DeleteMessage',
	FAIL_MESSAGE = 'ec2messages:FailMessage',
	GET_ENDPOINT = 'ec2messages:GetEndpoint',
	GET_MESSAGES = 'ec2messages:GetMessages',
	SEND_REPLY = 'ec2messages:SendReply',
}
export enum IOT_GREENGRASS_V2 {
	ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'greengrass:AssociateServiceRoleToAccount',
	BATCH_ASSOCIATE_CLIENT_DEVICE_WITH_CORE_DEVICE = 'greengrass:BatchAssociateClientDeviceWithCoreDevice',
	BATCH_DISASSOCIATE_CLIENT_DEVICE_FROM_CORE_DEVICE = 'greengrass:BatchDisassociateClientDeviceFromCoreDevice',
	CANCEL_DEPLOYMENT = 'greengrass:CancelDeployment',
	CREATE_COMPONENT_VERSION = 'greengrass:CreateComponentVersion',
	CREATE_DEPLOYMENT = 'greengrass:CreateDeployment',
	DELETE_COMPONENT = 'greengrass:DeleteComponent',
	DELETE_CORE_DEVICE = 'greengrass:DeleteCoreDevice',
	DELETE_DEPLOYMENT = 'greengrass:DeleteDeployment',
	DESCRIBE_COMPONENT = 'greengrass:DescribeComponent',
	DISASSOCIATE_SERVICE_ROLE_FROM_ACCOUNT = 'greengrass:DisassociateServiceRoleFromAccount',
	GET_COMPONENT = 'greengrass:GetComponent',
	GET_COMPONENT_VERSION_ARTIFACT = 'greengrass:GetComponentVersionArtifact',
	GET_CONNECTIVITY_INFO = 'greengrass:GetConnectivityInfo',
	GET_CORE_DEVICE = 'greengrass:GetCoreDevice',
	GET_DEPLOYMENT = 'greengrass:GetDeployment',
	GET_SERVICE_ROLE_FOR_ACCOUNT = 'greengrass:GetServiceRoleForAccount',
	LIST_CLIENT_DEVICES_ASSOCIATED_WITH_CORE_DEVICE = 'greengrass:ListClientDevicesAssociatedWithCoreDevice',
	LIST_COMPONENT_VERSIONS = 'greengrass:ListComponentVersions',
	LIST_COMPONENTS = 'greengrass:ListComponents',
	LIST_CORE_DEVICES = 'greengrass:ListCoreDevices',
	LIST_DEPLOYMENTS = 'greengrass:ListDeployments',
	LIST_EFFECTIVE_DEPLOYMENTS = 'greengrass:ListEffectiveDeployments',
	LIST_INSTALLED_COMPONENTS = 'greengrass:ListInstalledComponents',
	LIST_TAGS_FOR_RESOURCE = 'greengrass:ListTagsForResource',
	RESOLVE_COMPONENT_CANDIDATES = 'greengrass:ResolveComponentCandidates',
	TAG_RESOURCE = 'greengrass:TagResource',
	UNTAG_RESOURCE = 'greengrass:UntagResource',
	UPDATE_CONNECTIVITY_INFO = 'greengrass:UpdateConnectivityInfo',
}
export enum IOT_GREENGRASS {
	ASSOCIATE_ROLE_TO_GROUP = 'greengrass:AssociateRoleToGroup',
	ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'greengrass:AssociateServiceRoleToAccount',
	CREATE_CONNECTOR_DEFINITION = 'greengrass:CreateConnectorDefinition',
	CREATE_CONNECTOR_DEFINITION_VERSION = 'greengrass:CreateConnectorDefinitionVersion',
	CREATE_CORE_DEFINITION = 'greengrass:CreateCoreDefinition',
	CREATE_CORE_DEFINITION_VERSION = 'greengrass:CreateCoreDefinitionVersion',
	CREATE_DEPLOYMENT = 'greengrass:CreateDeployment',
	CREATE_DEVICE_DEFINITION = 'greengrass:CreateDeviceDefinition',
	CREATE_DEVICE_DEFINITION_VERSION = 'greengrass:CreateDeviceDefinitionVersion',
	CREATE_FUNCTION_DEFINITION = 'greengrass:CreateFunctionDefinition',
	CREATE_FUNCTION_DEFINITION_VERSION = 'greengrass:CreateFunctionDefinitionVersion',
	CREATE_GROUP = 'greengrass:CreateGroup',
	CREATE_GROUP_CERTIFICATE_AUTHORITY = 'greengrass:CreateGroupCertificateAuthority',
	CREATE_GROUP_VERSION = 'greengrass:CreateGroupVersion',
	CREATE_LOGGER_DEFINITION = 'greengrass:CreateLoggerDefinition',
	CREATE_LOGGER_DEFINITION_VERSION = 'greengrass:CreateLoggerDefinitionVersion',
	CREATE_RESOURCE_DEFINITION = 'greengrass:CreateResourceDefinition',
	CREATE_RESOURCE_DEFINITION_VERSION = 'greengrass:CreateResourceDefinitionVersion',
	CREATE_SOFTWARE_UPDATE_JOB = 'greengrass:CreateSoftwareUpdateJob',
	CREATE_SUBSCRIPTION_DEFINITION = 'greengrass:CreateSubscriptionDefinition',
	CREATE_SUBSCRIPTION_DEFINITION_VERSION = 'greengrass:CreateSubscriptionDefinitionVersion',
	DELETE_CONNECTOR_DEFINITION = 'greengrass:DeleteConnectorDefinition',
	DELETE_CORE_DEFINITION = 'greengrass:DeleteCoreDefinition',
	DELETE_DEVICE_DEFINITION = 'greengrass:DeleteDeviceDefinition',
	DELETE_FUNCTION_DEFINITION = 'greengrass:DeleteFunctionDefinition',
	DELETE_GROUP = 'greengrass:DeleteGroup',
	DELETE_LOGGER_DEFINITION = 'greengrass:DeleteLoggerDefinition',
	DELETE_RESOURCE_DEFINITION = 'greengrass:DeleteResourceDefinition',
	DELETE_SUBSCRIPTION_DEFINITION = 'greengrass:DeleteSubscriptionDefinition',
	DISASSOCIATE_ROLE_FROM_GROUP = 'greengrass:DisassociateRoleFromGroup',
	DISASSOCIATE_SERVICE_ROLE_FROM_ACCOUNT = 'greengrass:DisassociateServiceRoleFromAccount',
	DISCOVER = 'greengrass:Discover',
	GET_ASSOCIATED_ROLE = 'greengrass:GetAssociatedRole',
	GET_BULK_DEPLOYMENT_STATUS = 'greengrass:GetBulkDeploymentStatus',
	GET_CONNECTIVITY_INFO = 'greengrass:GetConnectivityInfo',
	GET_CONNECTOR_DEFINITION = 'greengrass:GetConnectorDefinition',
	GET_CONNECTOR_DEFINITION_VERSION = 'greengrass:GetConnectorDefinitionVersion',
	GET_CORE_DEFINITION = 'greengrass:GetCoreDefinition',
	GET_CORE_DEFINITION_VERSION = 'greengrass:GetCoreDefinitionVersion',
	GET_DEPLOYMENT_STATUS = 'greengrass:GetDeploymentStatus',
	GET_DEVICE_DEFINITION = 'greengrass:GetDeviceDefinition',
	GET_DEVICE_DEFINITION_VERSION = 'greengrass:GetDeviceDefinitionVersion',
	GET_FUNCTION_DEFINITION = 'greengrass:GetFunctionDefinition',
	GET_FUNCTION_DEFINITION_VERSION = 'greengrass:GetFunctionDefinitionVersion',
	GET_GROUP = 'greengrass:GetGroup',
	GET_GROUP_CERTIFICATE_AUTHORITY = 'greengrass:GetGroupCertificateAuthority',
	GET_GROUP_CERTIFICATE_CONFIGURATION = 'greengrass:GetGroupCertificateConfiguration',
	GET_GROUP_VERSION = 'greengrass:GetGroupVersion',
	GET_LOGGER_DEFINITION = 'greengrass:GetLoggerDefinition',
	GET_LOGGER_DEFINITION_VERSION = 'greengrass:GetLoggerDefinitionVersion',
	GET_RESOURCE_DEFINITION = 'greengrass:GetResourceDefinition',
	GET_RESOURCE_DEFINITION_VERSION = 'greengrass:GetResourceDefinitionVersion',
	GET_SERVICE_ROLE_FOR_ACCOUNT = 'greengrass:GetServiceRoleForAccount',
	GET_SUBSCRIPTION_DEFINITION = 'greengrass:GetSubscriptionDefinition',
	GET_SUBSCRIPTION_DEFINITION_VERSION = 'greengrass:GetSubscriptionDefinitionVersion',
	GET_THING_RUNTIME_CONFIGURATION = 'greengrass:GetThingRuntimeConfiguration',
	LIST_BULK_DEPLOYMENT_DETAILED_REPORTS = 'greengrass:ListBulkDeploymentDetailedReports',
	LIST_BULK_DEPLOYMENTS = 'greengrass:ListBulkDeployments',
	LIST_CONNECTOR_DEFINITION_VERSIONS = 'greengrass:ListConnectorDefinitionVersions',
	LIST_CONNECTOR_DEFINITIONS = 'greengrass:ListConnectorDefinitions',
	LIST_CORE_DEFINITION_VERSIONS = 'greengrass:ListCoreDefinitionVersions',
	LIST_CORE_DEFINITIONS = 'greengrass:ListCoreDefinitions',
	LIST_DEPLOYMENTS = 'greengrass:ListDeployments',
	LIST_DEVICE_DEFINITION_VERSIONS = 'greengrass:ListDeviceDefinitionVersions',
	LIST_DEVICE_DEFINITIONS = 'greengrass:ListDeviceDefinitions',
	LIST_FUNCTION_DEFINITION_VERSIONS = 'greengrass:ListFunctionDefinitionVersions',
	LIST_FUNCTION_DEFINITIONS = 'greengrass:ListFunctionDefinitions',
	LIST_GROUP_CERTIFICATE_AUTHORITIES = 'greengrass:ListGroupCertificateAuthorities',
	LIST_GROUP_VERSIONS = 'greengrass:ListGroupVersions',
	LIST_GROUPS = 'greengrass:ListGroups',
	LIST_LOGGER_DEFINITION_VERSIONS = 'greengrass:ListLoggerDefinitionVersions',
	LIST_LOGGER_DEFINITIONS = 'greengrass:ListLoggerDefinitions',
	LIST_RESOURCE_DEFINITION_VERSIONS = 'greengrass:ListResourceDefinitionVersions',
	LIST_RESOURCE_DEFINITIONS = 'greengrass:ListResourceDefinitions',
	LIST_SUBSCRIPTION_DEFINITION_VERSIONS = 'greengrass:ListSubscriptionDefinitionVersions',
	LIST_SUBSCRIPTION_DEFINITIONS = 'greengrass:ListSubscriptionDefinitions',
	LIST_TAGS_FOR_RESOURCE = 'greengrass:ListTagsForResource',
	RESET_DEPLOYMENTS = 'greengrass:ResetDeployments',
	START_BULK_DEPLOYMENT = 'greengrass:StartBulkDeployment',
	STOP_BULK_DEPLOYMENT = 'greengrass:StopBulkDeployment',
	TAG_RESOURCE = 'greengrass:TagResource',
	UNTAG_RESOURCE = 'greengrass:UntagResource',
	UPDATE_CONNECTIVITY_INFO = 'greengrass:UpdateConnectivityInfo',
	UPDATE_CONNECTOR_DEFINITION = 'greengrass:UpdateConnectorDefinition',
	UPDATE_CORE_DEFINITION = 'greengrass:UpdateCoreDefinition',
	UPDATE_DEVICE_DEFINITION = 'greengrass:UpdateDeviceDefinition',
	UPDATE_FUNCTION_DEFINITION = 'greengrass:UpdateFunctionDefinition',
	UPDATE_GROUP = 'greengrass:UpdateGroup',
	UPDATE_GROUP_CERTIFICATE_CONFIGURATION = 'greengrass:UpdateGroupCertificateConfiguration',
	UPDATE_LOGGER_DEFINITION = 'greengrass:UpdateLoggerDefinition',
	UPDATE_RESOURCE_DEFINITION = 'greengrass:UpdateResourceDefinition',
	UPDATE_SUBSCRIPTION_DEFINITION = 'greengrass:UpdateSubscriptionDefinition',
	UPDATE_THING_RUNTIME_CONFIGURATION = 'greengrass:UpdateThingRuntimeConfiguration',
}
export enum REDSHIFT {
	ACCEPT_RESERVED_NODE_EXCHANGE = 'redshift:AcceptReservedNodeExchange',
	ADD_PARTNER = 'redshift:AddPartner',
	ASSOCIATE_DATA_SHARE_CONSUMER = 'redshift:AssociateDataShareConsumer',
	AUTHORIZE_CLUSTER_SECURITY_GROUP_INGRESS = 'redshift:AuthorizeClusterSecurityGroupIngress',
	AUTHORIZE_DATA_SHARE = 'redshift:AuthorizeDataShare',
	AUTHORIZE_ENDPOINT_ACCESS = 'redshift:AuthorizeEndpointAccess',
	AUTHORIZE_SNAPSHOT_ACCESS = 'redshift:AuthorizeSnapshotAccess',
	BATCH_DELETE_CLUSTER_SNAPSHOTS = 'redshift:BatchDeleteClusterSnapshots',
	BATCH_MODIFY_CLUSTER_SNAPSHOTS = 'redshift:BatchModifyClusterSnapshots',
	CANCEL_QUERY = 'redshift:CancelQuery',
	CANCEL_QUERY_SESSION = 'redshift:CancelQuerySession',
	CANCEL_RESIZE = 'redshift:CancelResize',
	COPY_CLUSTER_SNAPSHOT = 'redshift:CopyClusterSnapshot',
	CREATE_AUTHENTICATION_PROFILE = 'redshift:CreateAuthenticationProfile',
	CREATE_CLUSTER = 'redshift:CreateCluster',
	CREATE_CLUSTER_PARAMETER_GROUP = 'redshift:CreateClusterParameterGroup',
	CREATE_CLUSTER_SECURITY_GROUP = 'redshift:CreateClusterSecurityGroup',
	CREATE_CLUSTER_SNAPSHOT = 'redshift:CreateClusterSnapshot',
	CREATE_CLUSTER_SUBNET_GROUP = 'redshift:CreateClusterSubnetGroup',
	CREATE_CLUSTER_USER = 'redshift:CreateClusterUser',
	CREATE_ENDPOINT_ACCESS = 'redshift:CreateEndpointAccess',
	CREATE_EVENT_SUBSCRIPTION = 'redshift:CreateEventSubscription',
	CREATE_HSM_CLIENT_CERTIFICATE = 'redshift:CreateHsmClientCertificate',
	CREATE_HSM_CONFIGURATION = 'redshift:CreateHsmConfiguration',
	CREATE_SAVED_QUERY = 'redshift:CreateSavedQuery',
	CREATE_SCHEDULED_ACTION = 'redshift:CreateScheduledAction',
	CREATE_SNAPSHOT_COPY_GRANT = 'redshift:CreateSnapshotCopyGrant',
	CREATE_SNAPSHOT_SCHEDULE = 'redshift:CreateSnapshotSchedule',
	CREATE_TAGS = 'redshift:CreateTags',
	CREATE_USAGE_LIMIT = 'redshift:CreateUsageLimit',
	DEAUTHORIZE_DATA_SHARE = 'redshift:DeauthorizeDataShare',
	DELETE_AUTHENTICATION_PROFILE = 'redshift:DeleteAuthenticationProfile',
	DELETE_CLUSTER = 'redshift:DeleteCluster',
	DELETE_CLUSTER_PARAMETER_GROUP = 'redshift:DeleteClusterParameterGroup',
	DELETE_CLUSTER_SECURITY_GROUP = 'redshift:DeleteClusterSecurityGroup',
	DELETE_CLUSTER_SNAPSHOT = 'redshift:DeleteClusterSnapshot',
	DELETE_CLUSTER_SUBNET_GROUP = 'redshift:DeleteClusterSubnetGroup',
	DELETE_ENDPOINT_ACCESS = 'redshift:DeleteEndpointAccess',
	DELETE_EVENT_SUBSCRIPTION = 'redshift:DeleteEventSubscription',
	DELETE_HSM_CLIENT_CERTIFICATE = 'redshift:DeleteHsmClientCertificate',
	DELETE_HSM_CONFIGURATION = 'redshift:DeleteHsmConfiguration',
	DELETE_PARTNER = 'redshift:DeletePartner',
	DELETE_SAVED_QUERIES = 'redshift:DeleteSavedQueries',
	DELETE_SCHEDULED_ACTION = 'redshift:DeleteScheduledAction',
	DELETE_SNAPSHOT_COPY_GRANT = 'redshift:DeleteSnapshotCopyGrant',
	DELETE_SNAPSHOT_SCHEDULE = 'redshift:DeleteSnapshotSchedule',
	DELETE_TAGS = 'redshift:DeleteTags',
	DELETE_USAGE_LIMIT = 'redshift:DeleteUsageLimit',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'redshift:DescribeAccountAttributes',
	DESCRIBE_AUTHENTICATION_PROFILES = 'redshift:DescribeAuthenticationProfiles',
	DESCRIBE_CLUSTER_DB_REVISIONS = 'redshift:DescribeClusterDbRevisions',
	DESCRIBE_CLUSTER_PARAMETER_GROUPS = 'redshift:DescribeClusterParameterGroups',
	DESCRIBE_CLUSTER_PARAMETERS = 'redshift:DescribeClusterParameters',
	DESCRIBE_CLUSTER_SECURITY_GROUPS = 'redshift:DescribeClusterSecurityGroups',
	DESCRIBE_CLUSTER_SNAPSHOTS = 'redshift:DescribeClusterSnapshots',
	DESCRIBE_CLUSTER_SUBNET_GROUPS = 'redshift:DescribeClusterSubnetGroups',
	DESCRIBE_CLUSTER_TRACKS = 'redshift:DescribeClusterTracks',
	DESCRIBE_CLUSTER_VERSIONS = 'redshift:DescribeClusterVersions',
	DESCRIBE_CLUSTERS = 'redshift:DescribeClusters',
	DESCRIBE_DATA_SHARES = 'redshift:DescribeDataShares',
	DESCRIBE_DATA_SHARES_FOR_CONSUMER = 'redshift:DescribeDataSharesForConsumer',
	DESCRIBE_DATA_SHARES_FOR_PRODUCER = 'redshift:DescribeDataSharesForProducer',
	DESCRIBE_DEFAULT_CLUSTER_PARAMETERS = 'redshift:DescribeDefaultClusterParameters',
	DESCRIBE_ENDPOINT_ACCESS = 'redshift:DescribeEndpointAccess',
	DESCRIBE_ENDPOINT_AUTHORIZATION = 'redshift:DescribeEndpointAuthorization',
	DESCRIBE_EVENT_CATEGORIES = 'redshift:DescribeEventCategories',
	DESCRIBE_EVENT_SUBSCRIPTIONS = 'redshift:DescribeEventSubscriptions',
	DESCRIBE_EVENTS = 'redshift:DescribeEvents',
	DESCRIBE_HSM_CLIENT_CERTIFICATES = 'redshift:DescribeHsmClientCertificates',
	DESCRIBE_HSM_CONFIGURATIONS = 'redshift:DescribeHsmConfigurations',
	DESCRIBE_LOGGING_STATUS = 'redshift:DescribeLoggingStatus',
	DESCRIBE_NODE_CONFIGURATION_OPTIONS = 'redshift:DescribeNodeConfigurationOptions',
	DESCRIBE_ORDERABLE_CLUSTER_OPTIONS = 'redshift:DescribeOrderableClusterOptions',
	DESCRIBE_PARTNERS = 'redshift:DescribePartners',
	DESCRIBE_QUERY = 'redshift:DescribeQuery',
	DESCRIBE_RESERVED_NODE_EXCHANGE_STATUS = 'redshift:DescribeReservedNodeExchangeStatus',
	DESCRIBE_RESERVED_NODE_OFFERINGS = 'redshift:DescribeReservedNodeOfferings',
	DESCRIBE_RESERVED_NODES = 'redshift:DescribeReservedNodes',
	DESCRIBE_RESIZE = 'redshift:DescribeResize',
	DESCRIBE_SAVED_QUERIES = 'redshift:DescribeSavedQueries',
	DESCRIBE_SCHEDULED_ACTIONS = 'redshift:DescribeScheduledActions',
	DESCRIBE_SNAPSHOT_COPY_GRANTS = 'redshift:DescribeSnapshotCopyGrants',
	DESCRIBE_SNAPSHOT_SCHEDULES = 'redshift:DescribeSnapshotSchedules',
	DESCRIBE_STORAGE = 'redshift:DescribeStorage',
	DESCRIBE_TABLE = 'redshift:DescribeTable',
	DESCRIBE_TABLE_RESTORE_STATUS = 'redshift:DescribeTableRestoreStatus',
	DESCRIBE_TAGS = 'redshift:DescribeTags',
	DESCRIBE_USAGE_LIMITS = 'redshift:DescribeUsageLimits',
	DISABLE_LOGGING = 'redshift:DisableLogging',
	DISABLE_SNAPSHOT_COPY = 'redshift:DisableSnapshotCopy',
	DISASSOCIATE_DATA_SHARE_CONSUMER = 'redshift:DisassociateDataShareConsumer',
	ENABLE_LOGGING = 'redshift:EnableLogging',
	ENABLE_SNAPSHOT_COPY = 'redshift:EnableSnapshotCopy',
	EXECUTE_QUERY = 'redshift:ExecuteQuery',
	FETCH_RESULTS = 'redshift:FetchResults',
	GET_CLUSTER_CREDENTIALS = 'redshift:GetClusterCredentials',
	GET_CLUSTER_CREDENTIALS_WITH_IAM = 'redshift:GetClusterCredentialsWithIAM',
	GET_RESERVED_NODE_EXCHANGE_CONFIGURATION_OPTIONS = 'redshift:GetReservedNodeExchangeConfigurationOptions',
	GET_RESERVED_NODE_EXCHANGE_OFFERINGS = 'redshift:GetReservedNodeExchangeOfferings',
	JOIN_GROUP = 'redshift:JoinGroup',
	LIST_DATABASES = 'redshift:ListDatabases',
	LIST_SAVED_QUERIES = 'redshift:ListSavedQueries',
	LIST_SCHEMAS = 'redshift:ListSchemas',
	LIST_TABLES = 'redshift:ListTables',
	MODIFY_AQUA_CONFIGURATION = 'redshift:ModifyAquaConfiguration',
	MODIFY_AUTHENTICATION_PROFILE = 'redshift:ModifyAuthenticationProfile',
	MODIFY_CLUSTER = 'redshift:ModifyCluster',
	MODIFY_CLUSTER_DB_REVISION = 'redshift:ModifyClusterDbRevision',
	MODIFY_CLUSTER_IAM_ROLES = 'redshift:ModifyClusterIamRoles',
	MODIFY_CLUSTER_MAINTENANCE = 'redshift:ModifyClusterMaintenance',
	MODIFY_CLUSTER_PARAMETER_GROUP = 'redshift:ModifyClusterParameterGroup',
	MODIFY_CLUSTER_SNAPSHOT = 'redshift:ModifyClusterSnapshot',
	MODIFY_CLUSTER_SNAPSHOT_SCHEDULE = 'redshift:ModifyClusterSnapshotSchedule',
	MODIFY_CLUSTER_SUBNET_GROUP = 'redshift:ModifyClusterSubnetGroup',
	MODIFY_ENDPOINT_ACCESS = 'redshift:ModifyEndpointAccess',
	MODIFY_EVENT_SUBSCRIPTION = 'redshift:ModifyEventSubscription',
	MODIFY_SAVED_QUERY = 'redshift:ModifySavedQuery',
	MODIFY_SCHEDULED_ACTION = 'redshift:ModifyScheduledAction',
	MODIFY_SNAPSHOT_COPY_RETENTION_PERIOD = 'redshift:ModifySnapshotCopyRetentionPeriod',
	MODIFY_SNAPSHOT_SCHEDULE = 'redshift:ModifySnapshotSchedule',
	MODIFY_USAGE_LIMIT = 'redshift:ModifyUsageLimit',
	PAUSE_CLUSTER = 'redshift:PauseCluster',
	PURCHASE_RESERVED_NODE_OFFERING = 'redshift:PurchaseReservedNodeOffering',
	REBOOT_CLUSTER = 'redshift:RebootCluster',
	REJECT_DATA_SHARE = 'redshift:RejectDataShare',
	RESET_CLUSTER_PARAMETER_GROUP = 'redshift:ResetClusterParameterGroup',
	RESIZE_CLUSTER = 'redshift:ResizeCluster',
	RESTORE_FROM_CLUSTER_SNAPSHOT = 'redshift:RestoreFromClusterSnapshot',
	RESTORE_TABLE_FROM_CLUSTER_SNAPSHOT = 'redshift:RestoreTableFromClusterSnapshot',
	RESUME_CLUSTER = 'redshift:ResumeCluster',
	REVOKE_CLUSTER_SECURITY_GROUP_INGRESS = 'redshift:RevokeClusterSecurityGroupIngress',
	REVOKE_ENDPOINT_ACCESS = 'redshift:RevokeEndpointAccess',
	REVOKE_SNAPSHOT_ACCESS = 'redshift:RevokeSnapshotAccess',
	ROTATE_ENCRYPTION_KEY = 'redshift:RotateEncryptionKey',
	UPDATE_PARTNER_STATUS = 'redshift:UpdatePartnerStatus',
	VIEW_QUERIES_FROM_CONSOLE = 'redshift:ViewQueriesFromConsole',
	VIEW_QUERIES_IN_CONSOLE = 'redshift:ViewQueriesInConsole',
}
export enum WORKDOCS {
	ABORT_DOCUMENT_VERSION_UPLOAD = 'workdocs:AbortDocumentVersionUpload',
	ACTIVATE_USER = 'workdocs:ActivateUser',
	ADD_NOTIFICATION_PERMISSIONS = 'workdocs:AddNotificationPermissions',
	ADD_RESOURCE_PERMISSIONS = 'workdocs:AddResourcePermissions',
	ADD_USER_TO_GROUP = 'workdocs:AddUserToGroup',
	CHECK_ALIAS = 'workdocs:CheckAlias',
	CREATE_COMMENT = 'workdocs:CreateComment',
	CREATE_CUSTOM_METADATA = 'workdocs:CreateCustomMetadata',
	CREATE_FOLDER = 'workdocs:CreateFolder',
	CREATE_INSTANCE = 'workdocs:CreateInstance',
	CREATE_LABELS = 'workdocs:CreateLabels',
	CREATE_NOTIFICATION_SUBSCRIPTION = 'workdocs:CreateNotificationSubscription',
	CREATE_USER = 'workdocs:CreateUser',
	DEACTIVATE_USER = 'workdocs:DeactivateUser',
	DELETE_COMMENT = 'workdocs:DeleteComment',
	DELETE_CUSTOM_METADATA = 'workdocs:DeleteCustomMetadata',
	DELETE_DOCUMENT = 'workdocs:DeleteDocument',
	DELETE_DOCUMENT_VERSION = 'workdocs:DeleteDocumentVersion',
	DELETE_FOLDER = 'workdocs:DeleteFolder',
	DELETE_FOLDER_CONTENTS = 'workdocs:DeleteFolderContents',
	DELETE_INSTANCE = 'workdocs:DeleteInstance',
	DELETE_LABELS = 'workdocs:DeleteLabels',
	DELETE_NOTIFICATION_PERMISSIONS = 'workdocs:DeleteNotificationPermissions',
	DELETE_NOTIFICATION_SUBSCRIPTION = 'workdocs:DeleteNotificationSubscription',
	DELETE_USER = 'workdocs:DeleteUser',
	DEREGISTER_DIRECTORY = 'workdocs:DeregisterDirectory',
	DESCRIBE_ACTIVITIES = 'workdocs:DescribeActivities',
	DESCRIBE_AVAILABLE_DIRECTORIES = 'workdocs:DescribeAvailableDirectories',
	DESCRIBE_COMMENTS = 'workdocs:DescribeComments',
	DESCRIBE_DOCUMENT_VERSIONS = 'workdocs:DescribeDocumentVersions',
	DESCRIBE_FOLDER_CONTENTS = 'workdocs:DescribeFolderContents',
	DESCRIBE_GROUPS = 'workdocs:DescribeGroups',
	DESCRIBE_INSTANCES = 'workdocs:DescribeInstances',
	DESCRIBE_NOTIFICATION_PERMISSIONS = 'workdocs:DescribeNotificationPermissions',
	DESCRIBE_NOTIFICATION_SUBSCRIPTIONS = 'workdocs:DescribeNotificationSubscriptions',
	DESCRIBE_RESOURCE_PERMISSIONS = 'workdocs:DescribeResourcePermissions',
	DESCRIBE_ROOT_FOLDERS = 'workdocs:DescribeRootFolders',
	DESCRIBE_USERS = 'workdocs:DescribeUsers',
	DOWNLOAD_DOCUMENT_VERSION = 'workdocs:DownloadDocumentVersion',
	GET_CURRENT_USER = 'workdocs:GetCurrentUser',
	GET_DOCUMENT = 'workdocs:GetDocument',
	GET_DOCUMENT_PATH = 'workdocs:GetDocumentPath',
	GET_DOCUMENT_VERSION = 'workdocs:GetDocumentVersion',
	GET_FOLDER = 'workdocs:GetFolder',
	GET_FOLDER_PATH = 'workdocs:GetFolderPath',
	GET_GROUP = 'workdocs:GetGroup',
	GET_RESOURCES = 'workdocs:GetResources',
	INITIATE_DOCUMENT_VERSION_UPLOAD = 'workdocs:InitiateDocumentVersionUpload',
	REGISTER_DIRECTORY = 'workdocs:RegisterDirectory',
	REMOVE_ALL_RESOURCE_PERMISSIONS = 'workdocs:RemoveAllResourcePermissions',
	REMOVE_RESOURCE_PERMISSION = 'workdocs:RemoveResourcePermission',
	RESTORE_DOCUMENT_VERSIONS = 'workdocs:RestoreDocumentVersions',
	UPDATE_DOCUMENT = 'workdocs:UpdateDocument',
	UPDATE_DOCUMENT_VERSION = 'workdocs:UpdateDocumentVersion',
	UPDATE_FOLDER = 'workdocs:UpdateFolder',
	UPDATE_INSTANCE_ALIAS = 'workdocs:UpdateInstanceAlias',
	UPDATE_USER = 'workdocs:UpdateUser',
}
export enum MARKETPLACE_MANAGEMENT_PORTAL {
	UPLOAD_FILES = 'aws-marketplace-management:uploadFiles',
	VIEW_MARKETING = 'aws-marketplace-management:viewMarketing',
	VIEW_REPORTS = 'aws-marketplace-management:viewReports',
	VIEW_SETTINGS = 'aws-marketplace-management:viewSettings',
	VIEW_SUPPORT = 'aws-marketplace-management:viewSupport',
}
export enum COMPREHEND_MEDICAL {
	DESCRIBE_ENTITIES_DETECTION_V_2_JOB = 'comprehendmedical:DescribeEntitiesDetectionV2Job',
	DESCRIBE_ICD_10_CM_INFERENCE_JOB = 'comprehendmedical:DescribeICD10CMInferenceJob',
	DESCRIBE_PHI_DETECTION_JOB = 'comprehendmedical:DescribePHIDetectionJob',
	DESCRIBE_RX_NORM_INFERENCE_JOB = 'comprehendmedical:DescribeRxNormInferenceJob',
	DESCRIBE_SNOMEDCT_INFERENCE_JOB = 'comprehendmedical:DescribeSNOMEDCTInferenceJob',
	DETECT_ENTITIES_V_2 = 'comprehendmedical:DetectEntitiesV2',
	DETECT_PHI = 'comprehendmedical:DetectPHI',
	INFER_ICD_10_CM = 'comprehendmedical:InferICD10CM',
	INFER_RX_NORM = 'comprehendmedical:InferRxNorm',
	INFER_SNOMEDCT = 'comprehendmedical:InferSNOMEDCT',
	LIST_ENTITIES_DETECTION_V_2_JOBS = 'comprehendmedical:ListEntitiesDetectionV2Jobs',
	LIST_ICD_10_CM_INFERENCE_JOBS = 'comprehendmedical:ListICD10CMInferenceJobs',
	LIST_PHI_DETECTION_JOBS = 'comprehendmedical:ListPHIDetectionJobs',
	LIST_RX_NORM_INFERENCE_JOBS = 'comprehendmedical:ListRxNormInferenceJobs',
	LIST_SNOMEDCT_INFERENCE_JOBS = 'comprehendmedical:ListSNOMEDCTInferenceJobs',
	START_ENTITIES_DETECTION_V_2_JOB = 'comprehendmedical:StartEntitiesDetectionV2Job',
	START_ICD_10_CM_INFERENCE_JOB = 'comprehendmedical:StartICD10CMInferenceJob',
	START_PHI_DETECTION_JOB = 'comprehendmedical:StartPHIDetectionJob',
	START_RX_NORM_INFERENCE_JOB = 'comprehendmedical:StartRxNormInferenceJob',
	START_SNOMEDCT_INFERENCE_JOB = 'comprehendmedical:StartSNOMEDCTInferenceJob',
	STOP_ENTITIES_DETECTION_V_2_JOB = 'comprehendmedical:StopEntitiesDetectionV2Job',
	STOP_ICD_10_CM_INFERENCE_JOB = 'comprehendmedical:StopICD10CMInferenceJob',
	STOP_PHI_DETECTION_JOB = 'comprehendmedical:StopPHIDetectionJob',
	STOP_RX_NORM_INFERENCE_JOB = 'comprehendmedical:StopRxNormInferenceJob',
	STOP_SNOMEDCT_INFERENCE_JOB = 'comprehendmedical:StopSNOMEDCTInferenceJob',
}
export enum CLOUDWATCH_OBSERVABILITY_ACCESS_MANAGER {
	CREATE_LINK = 'oam:CreateLink',
	CREATE_SINK = 'oam:CreateSink',
	DELETE_LINK = 'oam:DeleteLink',
	DELETE_SINK = 'oam:DeleteSink',
	GET_LINK = 'oam:GetLink',
	GET_SINK = 'oam:GetSink',
	GET_SINK_POLICY = 'oam:GetSinkPolicy',
	LIST_ATTACHED_LINKS = 'oam:ListAttachedLinks',
	LIST_LINKS = 'oam:ListLinks',
	LIST_SINKS = 'oam:ListSinks',
	LIST_TAGS_FOR_RESOURCE = 'oam:ListTagsForResource',
	PUT_SINK_POLICY = 'oam:PutSinkPolicy',
	TAG_RESOURCE = 'oam:TagResource',
	UNTAG_RESOURCE = 'oam:UntagResource',
	UPDATE_LINK = 'oam:UpdateLink',
}
export enum DEEPCOMPOSER {
	ASSOCIATE_COUPON = 'deepcomposer:AssociateCoupon',
	CREATE_AUDIO = 'deepcomposer:CreateAudio',
	CREATE_COMPOSITION = 'deepcomposer:CreateComposition',
	CREATE_MODEL = 'deepcomposer:CreateModel',
	DELETE_COMPOSITION = 'deepcomposer:DeleteComposition',
	DELETE_MODEL = 'deepcomposer:DeleteModel',
	GET_COMPOSITION = 'deepcomposer:GetComposition',
	GET_MODEL = 'deepcomposer:GetModel',
	GET_SAMPLE_MODEL = 'deepcomposer:GetSampleModel',
	LIST_COMPOSITIONS = 'deepcomposer:ListCompositions',
	LIST_MODELS = 'deepcomposer:ListModels',
	LIST_SAMPLE_MODELS = 'deepcomposer:ListSampleModels',
	LIST_TAGS_FOR_RESOURCE = 'deepcomposer:ListTagsForResource',
	LIST_TRAINING_TOPICS = 'deepcomposer:ListTrainingTopics',
	TAG_RESOURCE = 'deepcomposer:TagResource',
	UNTAG_RESOURCE = 'deepcomposer:UntagResource',
	UPDATE_COMPOSITION = 'deepcomposer:UpdateComposition',
	UPDATE_MODEL = 'deepcomposer:UpdateModel',
}
export enum ELEMENTAL_SUPPORT_CONTENT {
	QUERY = 'elemental-support-content:Query',
}
export enum MANAGED_BLOCKCHAIN {
	CREATE_MEMBER = 'managedblockchain:CreateMember',
	CREATE_NETWORK = 'managedblockchain:CreateNetwork',
	CREATE_NODE = 'managedblockchain:CreateNode',
	CREATE_PROPOSAL = 'managedblockchain:CreateProposal',
	DELETE_MEMBER = 'managedblockchain:DeleteMember',
	DELETE_NODE = 'managedblockchain:DeleteNode',
	GET_MEMBER = 'managedblockchain:GetMember',
	GET_NETWORK = 'managedblockchain:GetNetwork',
	GET_NODE = 'managedblockchain:GetNode',
	GET_PROPOSAL = 'managedblockchain:GetProposal',
	LIST_INVITATIONS = 'managedblockchain:ListInvitations',
	LIST_MEMBERS = 'managedblockchain:ListMembers',
	LIST_NETWORKS = 'managedblockchain:ListNetworks',
	LIST_NODES = 'managedblockchain:ListNodes',
	LIST_PROPOSAL_VOTES = 'managedblockchain:ListProposalVotes',
	LIST_PROPOSALS = 'managedblockchain:ListProposals',
	LIST_TAGS_FOR_RESOURCE = 'managedblockchain:ListTagsForResource',
	REJECT_INVITATION = 'managedblockchain:RejectInvitation',
	TAG_RESOURCE = 'managedblockchain:TagResource',
	UNTAG_RESOURCE = 'managedblockchain:UntagResource',
	UPDATE_MEMBER = 'managedblockchain:UpdateMember',
	UPDATE_NODE = 'managedblockchain:UpdateNode',
	VOTE_ON_PROPOSAL = 'managedblockchain:VoteOnProposal',
}
export enum WAF {
	CREATE_BYTE_MATCH_SET = 'waf:CreateByteMatchSet',
	CREATE_GEO_MATCH_SET = 'waf:CreateGeoMatchSet',
	CREATE_IP_SET = 'waf:CreateIPSet',
	CREATE_RATE_BASED_RULE = 'waf:CreateRateBasedRule',
	CREATE_REGEX_MATCH_SET = 'waf:CreateRegexMatchSet',
	CREATE_REGEX_PATTERN_SET = 'waf:CreateRegexPatternSet',
	CREATE_RULE = 'waf:CreateRule',
	CREATE_RULE_GROUP = 'waf:CreateRuleGroup',
	CREATE_SIZE_CONSTRAINT_SET = 'waf:CreateSizeConstraintSet',
	CREATE_SQL_INJECTION_MATCH_SET = 'waf:CreateSqlInjectionMatchSet',
	CREATE_WEB_ACL = 'waf:CreateWebACL',
	CREATE_WEB_ACL_MIGRATION_STACK = 'waf:CreateWebACLMigrationStack',
	CREATE_XSS_MATCH_SET = 'waf:CreateXssMatchSet',
	DELETE_BYTE_MATCH_SET = 'waf:DeleteByteMatchSet',
	DELETE_GEO_MATCH_SET = 'waf:DeleteGeoMatchSet',
	DELETE_IP_SET = 'waf:DeleteIPSet',
	DELETE_LOGGING_CONFIGURATION = 'waf:DeleteLoggingConfiguration',
	DELETE_PERMISSION_POLICY = 'waf:DeletePermissionPolicy',
	DELETE_RATE_BASED_RULE = 'waf:DeleteRateBasedRule',
	DELETE_REGEX_MATCH_SET = 'waf:DeleteRegexMatchSet',
	DELETE_REGEX_PATTERN_SET = 'waf:DeleteRegexPatternSet',
	DELETE_RULE = 'waf:DeleteRule',
	DELETE_RULE_GROUP = 'waf:DeleteRuleGroup',
	DELETE_SIZE_CONSTRAINT_SET = 'waf:DeleteSizeConstraintSet',
	DELETE_SQL_INJECTION_MATCH_SET = 'waf:DeleteSqlInjectionMatchSet',
	DELETE_WEB_ACL = 'waf:DeleteWebACL',
	DELETE_XSS_MATCH_SET = 'waf:DeleteXssMatchSet',
	GET_BYTE_MATCH_SET = 'waf:GetByteMatchSet',
	GET_CHANGE_TOKEN = 'waf:GetChangeToken',
	GET_CHANGE_TOKEN_STATUS = 'waf:GetChangeTokenStatus',
	GET_GEO_MATCH_SET = 'waf:GetGeoMatchSet',
	GET_IP_SET = 'waf:GetIPSet',
	GET_LOGGING_CONFIGURATION = 'waf:GetLoggingConfiguration',
	GET_PERMISSION_POLICY = 'waf:GetPermissionPolicy',
	GET_RATE_BASED_RULE = 'waf:GetRateBasedRule',
	GET_RATE_BASED_RULE_MANAGED_KEYS = 'waf:GetRateBasedRuleManagedKeys',
	GET_REGEX_MATCH_SET = 'waf:GetRegexMatchSet',
	GET_REGEX_PATTERN_SET = 'waf:GetRegexPatternSet',
	GET_RULE = 'waf:GetRule',
	GET_RULE_GROUP = 'waf:GetRuleGroup',
	GET_SAMPLED_REQUESTS = 'waf:GetSampledRequests',
	GET_SIZE_CONSTRAINT_SET = 'waf:GetSizeConstraintSet',
	GET_SQL_INJECTION_MATCH_SET = 'waf:GetSqlInjectionMatchSet',
	GET_WEB_ACL = 'waf:GetWebACL',
	GET_XSS_MATCH_SET = 'waf:GetXssMatchSet',
	LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'waf:ListActivatedRulesInRuleGroup',
	LIST_BYTE_MATCH_SETS = 'waf:ListByteMatchSets',
	LIST_GEO_MATCH_SETS = 'waf:ListGeoMatchSets',
	LIST_IP_SETS = 'waf:ListIPSets',
	LIST_LOGGING_CONFIGURATIONS = 'waf:ListLoggingConfigurations',
	LIST_RATE_BASED_RULES = 'waf:ListRateBasedRules',
	LIST_REGEX_MATCH_SETS = 'waf:ListRegexMatchSets',
	LIST_REGEX_PATTERN_SETS = 'waf:ListRegexPatternSets',
	LIST_RULE_GROUPS = 'waf:ListRuleGroups',
	LIST_RULES = 'waf:ListRules',
	LIST_SIZE_CONSTRAINT_SETS = 'waf:ListSizeConstraintSets',
	LIST_SQL_INJECTION_MATCH_SETS = 'waf:ListSqlInjectionMatchSets',
	LIST_SUBSCRIBED_RULE_GROUPS = 'waf:ListSubscribedRuleGroups',
	LIST_TAGS_FOR_RESOURCE = 'waf:ListTagsForResource',
	LIST_WEB_AC_LS = 'waf:ListWebACLs',
	LIST_XSS_MATCH_SETS = 'waf:ListXssMatchSets',
	PUT_LOGGING_CONFIGURATION = 'waf:PutLoggingConfiguration',
	PUT_PERMISSION_POLICY = 'waf:PutPermissionPolicy',
	TAG_RESOURCE = 'waf:TagResource',
	UNTAG_RESOURCE = 'waf:UntagResource',
	UPDATE_BYTE_MATCH_SET = 'waf:UpdateByteMatchSet',
	UPDATE_GEO_MATCH_SET = 'waf:UpdateGeoMatchSet',
	UPDATE_IP_SET = 'waf:UpdateIPSet',
	UPDATE_RATE_BASED_RULE = 'waf:UpdateRateBasedRule',
	UPDATE_REGEX_MATCH_SET = 'waf:UpdateRegexMatchSet',
	UPDATE_REGEX_PATTERN_SET = 'waf:UpdateRegexPatternSet',
	UPDATE_RULE = 'waf:UpdateRule',
	UPDATE_RULE_GROUP = 'waf:UpdateRuleGroup',
	UPDATE_SIZE_CONSTRAINT_SET = 'waf:UpdateSizeConstraintSet',
	UPDATE_SQL_INJECTION_MATCH_SET = 'waf:UpdateSqlInjectionMatchSet',
	UPDATE_WEB_ACL = 'waf:UpdateWebACL',
	UPDATE_XSS_MATCH_SET = 'waf:UpdateXssMatchSet',
}
export enum EVENTBRIDGE_PIPES {
	CREATE_PIPE = 'pipes:CreatePipe',
	DELETE_PIPE = 'pipes:DeletePipe',
	DESCRIBE_PIPE = 'pipes:DescribePipe',
	LIST_PIPES = 'pipes:ListPipes',
	LIST_TAGS_FOR_RESOURCE = 'pipes:ListTagsForResource',
	START_PIPE = 'pipes:StartPipe',
	STOP_PIPE = 'pipes:StopPipe',
	TAG_RESOURCE = 'pipes:TagResource',
	UNTAG_RESOURCE = 'pipes:UntagResource',
	UPDATE_PIPE = 'pipes:UpdatePipe',
}
export enum APPSTREAM_20 {
	ASSOCIATE_APPLICATION_FLEET = 'appstream:AssociateApplicationFleet',
	ASSOCIATE_APPLICATION_TO_ENTITLEMENT = 'appstream:AssociateApplicationToEntitlement',
	ASSOCIATE_FLEET = 'appstream:AssociateFleet',
	BATCH_ASSOCIATE_USER_STACK = 'appstream:BatchAssociateUserStack',
	BATCH_DISASSOCIATE_USER_STACK = 'appstream:BatchDisassociateUserStack',
	COPY_IMAGE = 'appstream:CopyImage',
	CREATE_APP_BLOCK = 'appstream:CreateAppBlock',
	CREATE_APPLICATION = 'appstream:CreateApplication',
	CREATE_DIRECTORY_CONFIG = 'appstream:CreateDirectoryConfig',
	CREATE_ENTITLEMENT = 'appstream:CreateEntitlement',
	CREATE_FLEET = 'appstream:CreateFleet',
	CREATE_IMAGE_BUILDER = 'appstream:CreateImageBuilder',
	CREATE_IMAGE_BUILDER_STREAMING_URL = 'appstream:CreateImageBuilderStreamingURL',
	CREATE_STACK = 'appstream:CreateStack',
	CREATE_STREAMING_URL = 'appstream:CreateStreamingURL',
	CREATE_UPDATED_IMAGE = 'appstream:CreateUpdatedImage',
	CREATE_USAGE_REPORT_SUBSCRIPTION = 'appstream:CreateUsageReportSubscription',
	CREATE_USER = 'appstream:CreateUser',
	DELETE_APP_BLOCK = 'appstream:DeleteAppBlock',
	DELETE_APPLICATION = 'appstream:DeleteApplication',
	DELETE_DIRECTORY_CONFIG = 'appstream:DeleteDirectoryConfig',
	DELETE_ENTITLEMENT = 'appstream:DeleteEntitlement',
	DELETE_FLEET = 'appstream:DeleteFleet',
	DELETE_IMAGE = 'appstream:DeleteImage',
	DELETE_IMAGE_BUILDER = 'appstream:DeleteImageBuilder',
	DELETE_IMAGE_PERMISSIONS = 'appstream:DeleteImagePermissions',
	DELETE_STACK = 'appstream:DeleteStack',
	DELETE_USAGE_REPORT_SUBSCRIPTION = 'appstream:DeleteUsageReportSubscription',
	DELETE_USER = 'appstream:DeleteUser',
	DESCRIBE_APP_BLOCKS = 'appstream:DescribeAppBlocks',
	DESCRIBE_APPLICATION_FLEET_ASSOCIATIONS = 'appstream:DescribeApplicationFleetAssociations',
	DESCRIBE_APPLICATIONS = 'appstream:DescribeApplications',
	DESCRIBE_DIRECTORY_CONFIGS = 'appstream:DescribeDirectoryConfigs',
	DESCRIBE_ENTITLEMENTS = 'appstream:DescribeEntitlements',
	DESCRIBE_FLEETS = 'appstream:DescribeFleets',
	DESCRIBE_IMAGE_BUILDERS = 'appstream:DescribeImageBuilders',
	DESCRIBE_IMAGE_PERMISSIONS = 'appstream:DescribeImagePermissions',
	DESCRIBE_IMAGES = 'appstream:DescribeImages',
	DESCRIBE_SESSIONS = 'appstream:DescribeSessions',
	DESCRIBE_STACKS = 'appstream:DescribeStacks',
	DESCRIBE_USAGE_REPORT_SUBSCRIPTIONS = 'appstream:DescribeUsageReportSubscriptions',
	DESCRIBE_USER_STACK_ASSOCIATIONS = 'appstream:DescribeUserStackAssociations',
	DESCRIBE_USERS = 'appstream:DescribeUsers',
	DISABLE_USER = 'appstream:DisableUser',
	DISASSOCIATE_APPLICATION_FLEET = 'appstream:DisassociateApplicationFleet',
	DISASSOCIATE_APPLICATION_FROM_ENTITLEMENT = 'appstream:DisassociateApplicationFromEntitlement',
	DISASSOCIATE_FLEET = 'appstream:DisassociateFleet',
	ENABLE_USER = 'appstream:EnableUser',
	EXPIRE_SESSION = 'appstream:ExpireSession',
	LIST_ASSOCIATED_FLEETS = 'appstream:ListAssociatedFleets',
	LIST_ASSOCIATED_STACKS = 'appstream:ListAssociatedStacks',
	LIST_ENTITLED_APPLICATIONS = 'appstream:ListEntitledApplications',
	LIST_TAGS_FOR_RESOURCE = 'appstream:ListTagsForResource',
	START_FLEET = 'appstream:StartFleet',
	START_IMAGE_BUILDER = 'appstream:StartImageBuilder',
	STOP_FLEET = 'appstream:StopFleet',
	STOP_IMAGE_BUILDER = 'appstream:StopImageBuilder',
	STREAM = 'appstream:Stream',
	TAG_RESOURCE = 'appstream:TagResource',
	UNTAG_RESOURCE = 'appstream:UntagResource',
	UPDATE_APPLICATION = 'appstream:UpdateApplication',
	UPDATE_DIRECTORY_CONFIG = 'appstream:UpdateDirectoryConfig',
	UPDATE_ENTITLEMENT = 'appstream:UpdateEntitlement',
	UPDATE_FLEET = 'appstream:UpdateFleet',
	UPDATE_IMAGE_PERMISSIONS = 'appstream:UpdateImagePermissions',
	UPDATE_STACK = 'appstream:UpdateStack',
}
export enum QUICKSIGHT {
	ACCOUNT_CONFIGURATIONS = 'quicksight:AccountConfigurations',
	CANCEL_INGESTION = 'quicksight:CancelIngestion',
	CREATE_ACCOUNT_CUSTOMIZATION = 'quicksight:CreateAccountCustomization',
	CREATE_ACCOUNT_SUBSCRIPTION = 'quicksight:CreateAccountSubscription',
	CREATE_ADMIN = 'quicksight:CreateAdmin',
	CREATE_ANALYSIS = 'quicksight:CreateAnalysis',
	CREATE_CUSTOM_PERMISSIONS = 'quicksight:CreateCustomPermissions',
	CREATE_DASHBOARD = 'quicksight:CreateDashboard',
	CREATE_DATA_SET = 'quicksight:CreateDataSet',
	CREATE_DATA_SOURCE = 'quicksight:CreateDataSource',
	CREATE_EMAIL_CUSTOMIZATION_TEMPLATE = 'quicksight:CreateEmailCustomizationTemplate',
	CREATE_FOLDER = 'quicksight:CreateFolder',
	CREATE_FOLDER_MEMBERSHIP = 'quicksight:CreateFolderMembership',
	CREATE_GROUP = 'quicksight:CreateGroup',
	CREATE_GROUP_MEMBERSHIP = 'quicksight:CreateGroupMembership',
	CREATE_IAM_POLICY_ASSIGNMENT = 'quicksight:CreateIAMPolicyAssignment',
	CREATE_INGESTION = 'quicksight:CreateIngestion',
	CREATE_NAMESPACE = 'quicksight:CreateNamespace',
	CREATE_READER = 'quicksight:CreateReader',
	CREATE_TEMPLATE = 'quicksight:CreateTemplate',
	CREATE_TEMPLATE_ALIAS = 'quicksight:CreateTemplateAlias',
	CREATE_THEME = 'quicksight:CreateTheme',
	CREATE_THEME_ALIAS = 'quicksight:CreateThemeAlias',
	CREATE_USER = 'quicksight:CreateUser',
	CREATE_VPC_CONNECTION = 'quicksight:CreateVPCConnection',
	DELETE_ACCOUNT_CUSTOMIZATION = 'quicksight:DeleteAccountCustomization',
	DELETE_ACCOUNT_SUBSCRIPTION = 'quicksight:DeleteAccountSubscription',
	DELETE_ANALYSIS = 'quicksight:DeleteAnalysis',
	DELETE_CUSTOM_PERMISSIONS = 'quicksight:DeleteCustomPermissions',
	DELETE_DASHBOARD = 'quicksight:DeleteDashboard',
	DELETE_DATA_SET = 'quicksight:DeleteDataSet',
	DELETE_DATA_SOURCE = 'quicksight:DeleteDataSource',
	DELETE_EMAIL_CUSTOMIZATION_TEMPLATE = 'quicksight:DeleteEmailCustomizationTemplate',
	DELETE_FOLDER = 'quicksight:DeleteFolder',
	DELETE_FOLDER_MEMBERSHIP = 'quicksight:DeleteFolderMembership',
	DELETE_GROUP = 'quicksight:DeleteGroup',
	DELETE_GROUP_MEMBERSHIP = 'quicksight:DeleteGroupMembership',
	DELETE_IAM_POLICY_ASSIGNMENT = 'quicksight:DeleteIAMPolicyAssignment',
	DELETE_NAMESPACE = 'quicksight:DeleteNamespace',
	DELETE_TEMPLATE = 'quicksight:DeleteTemplate',
	DELETE_TEMPLATE_ALIAS = 'quicksight:DeleteTemplateAlias',
	DELETE_THEME = 'quicksight:DeleteTheme',
	DELETE_THEME_ALIAS = 'quicksight:DeleteThemeAlias',
	DELETE_USER = 'quicksight:DeleteUser',
	DELETE_USER_BY_PRINCIPAL_ID = 'quicksight:DeleteUserByPrincipalId',
	DELETE_VPC_CONNECTION = 'quicksight:DeleteVPCConnection',
	DESCRIBE_ACCOUNT_CUSTOMIZATION = 'quicksight:DescribeAccountCustomization',
	DESCRIBE_ACCOUNT_SETTINGS = 'quicksight:DescribeAccountSettings',
	DESCRIBE_ACCOUNT_SUBSCRIPTION = 'quicksight:DescribeAccountSubscription',
	DESCRIBE_ANALYSIS = 'quicksight:DescribeAnalysis',
	DESCRIBE_ANALYSIS_PERMISSIONS = 'quicksight:DescribeAnalysisPermissions',
	DESCRIBE_CUSTOM_PERMISSIONS = 'quicksight:DescribeCustomPermissions',
	DESCRIBE_DASHBOARD = 'quicksight:DescribeDashboard',
	DESCRIBE_DASHBOARD_PERMISSIONS = 'quicksight:DescribeDashboardPermissions',
	DESCRIBE_DATA_SET = 'quicksight:DescribeDataSet',
	DESCRIBE_DATA_SET_PERMISSIONS = 'quicksight:DescribeDataSetPermissions',
	DESCRIBE_DATA_SOURCE = 'quicksight:DescribeDataSource',
	DESCRIBE_DATA_SOURCE_PERMISSIONS = 'quicksight:DescribeDataSourcePermissions',
	DESCRIBE_EMAIL_CUSTOMIZATION_TEMPLATE = 'quicksight:DescribeEmailCustomizationTemplate',
	DESCRIBE_FOLDER = 'quicksight:DescribeFolder',
	DESCRIBE_FOLDER_PERMISSIONS = 'quicksight:DescribeFolderPermissions',
	DESCRIBE_FOLDER_RESOLVED_PERMISSIONS = 'quicksight:DescribeFolderResolvedPermissions',
	DESCRIBE_GROUP = 'quicksight:DescribeGroup',
	DESCRIBE_GROUP_MEMBERSHIP = 'quicksight:DescribeGroupMembership',
	DESCRIBE_IAM_POLICY_ASSIGNMENT = 'quicksight:DescribeIAMPolicyAssignment',
	DESCRIBE_INGESTION = 'quicksight:DescribeIngestion',
	DESCRIBE_IP_RESTRICTION = 'quicksight:DescribeIpRestriction',
	DESCRIBE_NAMESPACE = 'quicksight:DescribeNamespace',
	DESCRIBE_TEMPLATE = 'quicksight:DescribeTemplate',
	DESCRIBE_TEMPLATE_ALIAS = 'quicksight:DescribeTemplateAlias',
	DESCRIBE_TEMPLATE_PERMISSIONS = 'quicksight:DescribeTemplatePermissions',
	DESCRIBE_THEME = 'quicksight:DescribeTheme',
	DESCRIBE_THEME_ALIAS = 'quicksight:DescribeThemeAlias',
	DESCRIBE_THEME_PERMISSIONS = 'quicksight:DescribeThemePermissions',
	DESCRIBE_USER = 'quicksight:DescribeUser',
	GENERATE_EMBED_URL_FOR_ANONYMOUS_USER = 'quicksight:GenerateEmbedUrlForAnonymousUser',
	GENERATE_EMBED_URL_FOR_REGISTERED_USER = 'quicksight:GenerateEmbedUrlForRegisteredUser',
	GET_ANONYMOUS_USER_EMBED_URL = 'quicksight:GetAnonymousUserEmbedUrl',
	GET_AUTH_CODE = 'quicksight:GetAuthCode',
	GET_DASHBOARD_EMBED_URL = 'quicksight:GetDashboardEmbedUrl',
	GET_GROUP_MAPPING = 'quicksight:GetGroupMapping',
	GET_SESSION_EMBED_URL = 'quicksight:GetSessionEmbedUrl',
	LIST_ANALYSES = 'quicksight:ListAnalyses',
	LIST_CUSTOM_PERMISSIONS = 'quicksight:ListCustomPermissions',
	LIST_DASHBOARD_VERSIONS = 'quicksight:ListDashboardVersions',
	LIST_DASHBOARDS = 'quicksight:ListDashboards',
	LIST_DATA_SETS = 'quicksight:ListDataSets',
	LIST_DATA_SOURCES = 'quicksight:ListDataSources',
	LIST_FOLDER_MEMBERS = 'quicksight:ListFolderMembers',
	LIST_FOLDERS = 'quicksight:ListFolders',
	LIST_GROUP_MEMBERSHIPS = 'quicksight:ListGroupMemberships',
	LIST_GROUPS = 'quicksight:ListGroups',
	LIST_IAM_POLICY_ASSIGNMENTS = 'quicksight:ListIAMPolicyAssignments',
	LIST_IAM_POLICY_ASSIGNMENTS_FOR_USER = 'quicksight:ListIAMPolicyAssignmentsForUser',
	LIST_INGESTIONS = 'quicksight:ListIngestions',
	LIST_NAMESPACES = 'quicksight:ListNamespaces',
	LIST_TAGS_FOR_RESOURCE = 'quicksight:ListTagsForResource',
	LIST_TEMPLATE_ALIASES = 'quicksight:ListTemplateAliases',
	LIST_TEMPLATE_VERSIONS = 'quicksight:ListTemplateVersions',
	LIST_TEMPLATES = 'quicksight:ListTemplates',
	LIST_THEME_ALIASES = 'quicksight:ListThemeAliases',
	LIST_THEME_VERSIONS = 'quicksight:ListThemeVersions',
	LIST_THEMES = 'quicksight:ListThemes',
	LIST_USER_GROUPS = 'quicksight:ListUserGroups',
	LIST_USERS = 'quicksight:ListUsers',
	PASS_DATA_SET = 'quicksight:PassDataSet',
	PASS_DATA_SOURCE = 'quicksight:PassDataSource',
	REGISTER_USER = 'quicksight:RegisterUser',
	RESTORE_ANALYSIS = 'quicksight:RestoreAnalysis',
	SCOPE_DOWN_POLICY = 'quicksight:ScopeDownPolicy',
	SEARCH_ANALYSES = 'quicksight:SearchAnalyses',
	SEARCH_DASHBOARDS = 'quicksight:SearchDashboards',
	SEARCH_DATA_SETS = 'quicksight:SearchDataSets',
	SEARCH_DATA_SOURCES = 'quicksight:SearchDataSources',
	SEARCH_DIRECTORY_GROUPS = 'quicksight:SearchDirectoryGroups',
	SEARCH_FOLDERS = 'quicksight:SearchFolders',
	SEARCH_GROUPS = 'quicksight:SearchGroups',
	SET_GROUP_MAPPING = 'quicksight:SetGroupMapping',
	SUBSCRIBE = 'quicksight:Subscribe',
	TAG_RESOURCE = 'quicksight:TagResource',
	UNSUBSCRIBE = 'quicksight:Unsubscribe',
	UNTAG_RESOURCE = 'quicksight:UntagResource',
	UPDATE_ACCOUNT_CUSTOMIZATION = 'quicksight:UpdateAccountCustomization',
	UPDATE_ACCOUNT_SETTINGS = 'quicksight:UpdateAccountSettings',
	UPDATE_ANALYSIS = 'quicksight:UpdateAnalysis',
	UPDATE_ANALYSIS_PERMISSIONS = 'quicksight:UpdateAnalysisPermissions',
	UPDATE_CUSTOM_PERMISSIONS = 'quicksight:UpdateCustomPermissions',
	UPDATE_DASHBOARD = 'quicksight:UpdateDashboard',
	UPDATE_DASHBOARD_PERMISSIONS = 'quicksight:UpdateDashboardPermissions',
	UPDATE_DASHBOARD_PUBLISHED_VERSION = 'quicksight:UpdateDashboardPublishedVersion',
	UPDATE_DATA_SET = 'quicksight:UpdateDataSet',
	UPDATE_DATA_SET_PERMISSIONS = 'quicksight:UpdateDataSetPermissions',
	UPDATE_DATA_SOURCE = 'quicksight:UpdateDataSource',
	UPDATE_DATA_SOURCE_PERMISSIONS = 'quicksight:UpdateDataSourcePermissions',
	UPDATE_EMAIL_CUSTOMIZATION_TEMPLATE = 'quicksight:UpdateEmailCustomizationTemplate',
	UPDATE_FOLDER = 'quicksight:UpdateFolder',
	UPDATE_FOLDER_PERMISSIONS = 'quicksight:UpdateFolderPermissions',
	UPDATE_GROUP = 'quicksight:UpdateGroup',
	UPDATE_IAM_POLICY_ASSIGNMENT = 'quicksight:UpdateIAMPolicyAssignment',
	UPDATE_IP_RESTRICTION = 'quicksight:UpdateIpRestriction',
	UPDATE_PUBLIC_SHARING_SETTINGS = 'quicksight:UpdatePublicSharingSettings',
	UPDATE_RESOURCE_PERMISSIONS = 'quicksight:UpdateResourcePermissions',
	UPDATE_TEMPLATE = 'quicksight:UpdateTemplate',
	UPDATE_TEMPLATE_ALIAS = 'quicksight:UpdateTemplateAlias',
	UPDATE_TEMPLATE_PERMISSIONS = 'quicksight:UpdateTemplatePermissions',
	UPDATE_THEME = 'quicksight:UpdateTheme',
	UPDATE_THEME_ALIAS = 'quicksight:UpdateThemeAlias',
	UPDATE_THEME_PERMISSIONS = 'quicksight:UpdateThemePermissions',
	UPDATE_USER = 'quicksight:UpdateUser',
}
export enum WAF_V2 {
	ASSOCIATE_WEB_ACL = 'wafv2:AssociateWebACL',
	CHECK_CAPACITY = 'wafv2:CheckCapacity',
	CREATE_IP_SET = 'wafv2:CreateIPSet',
	CREATE_REGEX_PATTERN_SET = 'wafv2:CreateRegexPatternSet',
	CREATE_RULE_GROUP = 'wafv2:CreateRuleGroup',
	CREATE_WEB_ACL = 'wafv2:CreateWebACL',
	DELETE_FIREWALL_MANAGER_RULE_GROUPS = 'wafv2:DeleteFirewallManagerRuleGroups',
	DELETE_IP_SET = 'wafv2:DeleteIPSet',
	DELETE_LOGGING_CONFIGURATION = 'wafv2:DeleteLoggingConfiguration',
	DELETE_PERMISSION_POLICY = 'wafv2:DeletePermissionPolicy',
	DELETE_REGEX_PATTERN_SET = 'wafv2:DeleteRegexPatternSet',
	DELETE_RULE_GROUP = 'wafv2:DeleteRuleGroup',
	DELETE_WEB_ACL = 'wafv2:DeleteWebACL',
	DESCRIBE_MANAGED_RULE_GROUP = 'wafv2:DescribeManagedRuleGroup',
	DISASSOCIATE_FIREWALL_MANAGER = 'wafv2:DisassociateFirewallManager',
	DISASSOCIATE_WEB_ACL = 'wafv2:DisassociateWebACL',
	GENERATE_MOBILE_SDK_RELEASE_URL = 'wafv2:GenerateMobileSdkReleaseUrl',
	GET_IP_SET = 'wafv2:GetIPSet',
	GET_LOGGING_CONFIGURATION = 'wafv2:GetLoggingConfiguration',
	GET_MANAGED_RULE_SET = 'wafv2:GetManagedRuleSet',
	GET_MOBILE_SDK_RELEASE = 'wafv2:GetMobileSdkRelease',
	GET_PERMISSION_POLICY = 'wafv2:GetPermissionPolicy',
	GET_RATE_BASED_STATEMENT_MANAGED_KEYS = 'wafv2:GetRateBasedStatementManagedKeys',
	GET_REGEX_PATTERN_SET = 'wafv2:GetRegexPatternSet',
	GET_RULE_GROUP = 'wafv2:GetRuleGroup',
	GET_SAMPLED_REQUESTS = 'wafv2:GetSampledRequests',
	GET_WEB_ACL = 'wafv2:GetWebACL',
	GET_WEB_ACL_FOR_RESOURCE = 'wafv2:GetWebACLForResource',
	LIST_AVAILABLE_MANAGED_RULE_GROUP_VERSIONS = 'wafv2:ListAvailableManagedRuleGroupVersions',
	LIST_AVAILABLE_MANAGED_RULE_GROUPS = 'wafv2:ListAvailableManagedRuleGroups',
	LIST_IP_SETS = 'wafv2:ListIPSets',
	LIST_LOGGING_CONFIGURATIONS = 'wafv2:ListLoggingConfigurations',
	LIST_MANAGED_RULE_SETS = 'wafv2:ListManagedRuleSets',
	LIST_MOBILE_SDK_RELEASES = 'wafv2:ListMobileSdkReleases',
	LIST_REGEX_PATTERN_SETS = 'wafv2:ListRegexPatternSets',
	LIST_RESOURCES_FOR_WEB_ACL = 'wafv2:ListResourcesForWebACL',
	LIST_RULE_GROUPS = 'wafv2:ListRuleGroups',
	LIST_TAGS_FOR_RESOURCE = 'wafv2:ListTagsForResource',
	LIST_WEB_AC_LS = 'wafv2:ListWebACLs',
	PUT_FIREWALL_MANAGER_RULE_GROUPS = 'wafv2:PutFirewallManagerRuleGroups',
	PUT_LOGGING_CONFIGURATION = 'wafv2:PutLoggingConfiguration',
	PUT_MANAGED_RULE_SET_VERSIONS = 'wafv2:PutManagedRuleSetVersions',
	PUT_PERMISSION_POLICY = 'wafv2:PutPermissionPolicy',
	TAG_RESOURCE = 'wafv2:TagResource',
	UNTAG_RESOURCE = 'wafv2:UntagResource',
	UPDATE_IP_SET = 'wafv2:UpdateIPSet',
	UPDATE_MANAGED_RULE_SET_VERSION_EXPIRY_DATE = 'wafv2:UpdateManagedRuleSetVersionExpiryDate',
	UPDATE_REGEX_PATTERN_SET = 'wafv2:UpdateRegexPatternSet',
	UPDATE_RULE_GROUP = 'wafv2:UpdateRuleGroup',
	UPDATE_WEB_ACL = 'wafv2:UpdateWebACL',
}
export enum WORKSPACES_APPLICATION_MANAGER {
	AUTHENTICATE_PACKAGER = 'wam:AuthenticatePackager',
}
export enum CONNECT_CASES {
	BATCH_GET_FIELD = 'cases:BatchGetField',
	BATCH_PUT_FIELD_OPTIONS = 'cases:BatchPutFieldOptions',
	CREATE_CASE = 'cases:CreateCase',
	CREATE_DOMAIN = 'cases:CreateDomain',
	CREATE_FIELD = 'cases:CreateField',
	CREATE_LAYOUT = 'cases:CreateLayout',
	CREATE_RELATED_ITEM = 'cases:CreateRelatedItem',
	CREATE_TEMPLATE = 'cases:CreateTemplate',
	GET_CASE = 'cases:GetCase',
	GET_CASE_EVENT_CONFIGURATION = 'cases:GetCaseEventConfiguration',
	GET_DOMAIN = 'cases:GetDomain',
	GET_LAYOUT = 'cases:GetLayout',
	GET_TEMPLATE = 'cases:GetTemplate',
	LIST_CASES_FOR_CONTACT = 'cases:ListCasesForContact',
	LIST_DOMAINS = 'cases:ListDomains',
	LIST_FIELD_OPTIONS = 'cases:ListFieldOptions',
	LIST_FIELDS = 'cases:ListFields',
	LIST_LAYOUTS = 'cases:ListLayouts',
	LIST_TAGS_FOR_RESOURCE = 'cases:ListTagsForResource',
	LIST_TEMPLATES = 'cases:ListTemplates',
	PUT_CASE_EVENT_CONFIGURATION = 'cases:PutCaseEventConfiguration',
	SEARCH_CASES = 'cases:SearchCases',
	SEARCH_RELATED_ITEMS = 'cases:SearchRelatedItems',
	TAG_RESOURCE = 'cases:TagResource',
	UNTAG_RESOURCE = 'cases:UntagResource',
	UPDATE_CASE = 'cases:UpdateCase',
	UPDATE_FIELD = 'cases:UpdateField',
	UPDATE_LAYOUT = 'cases:UpdateLayout',
	UPDATE_TEMPLATE = 'cases:UpdateTemplate',
}
export enum DATA_LIFECYCLE_MANAGER {
	CREATE_LIFECYCLE_POLICY = 'dlm:CreateLifecyclePolicy',
	DELETE_LIFECYCLE_POLICY = 'dlm:DeleteLifecyclePolicy',
	GET_LIFECYCLE_POLICIES = 'dlm:GetLifecyclePolicies',
	GET_LIFECYCLE_POLICY = 'dlm:GetLifecyclePolicy',
	LIST_TAGS_FOR_RESOURCE = 'dlm:ListTagsForResource',
	TAG_RESOURCE = 'dlm:TagResource',
	UNTAG_RESOURCE = 'dlm:UntagResource',
	UPDATE_LIFECYCLE_POLICY = 'dlm:UpdateLifecyclePolicy',
}
export enum WELLARCHITECTED_TOOL {
	ASSOCIATE_LENSES = 'wellarchitected:AssociateLenses',
	CREATE_LENS_SHARE = 'wellarchitected:CreateLensShare',
	CREATE_LENS_VERSION = 'wellarchitected:CreateLensVersion',
	CREATE_MILESTONE = 'wellarchitected:CreateMilestone',
	CREATE_WORKLOAD = 'wellarchitected:CreateWorkload',
	CREATE_WORKLOAD_SHARE = 'wellarchitected:CreateWorkloadShare',
	DELETE_LENS = 'wellarchitected:DeleteLens',
	DELETE_LENS_SHARE = 'wellarchitected:DeleteLensShare',
	DELETE_WORKLOAD = 'wellarchitected:DeleteWorkload',
	DELETE_WORKLOAD_SHARE = 'wellarchitected:DeleteWorkloadShare',
	DISASSOCIATE_LENSES = 'wellarchitected:DisassociateLenses',
	EXPORT_LENS = 'wellarchitected:ExportLens',
	GET_ANSWER = 'wellarchitected:GetAnswer',
	GET_LENS = 'wellarchitected:GetLens',
	GET_LENS_REVIEW = 'wellarchitected:GetLensReview',
	GET_LENS_REVIEW_REPORT = 'wellarchitected:GetLensReviewReport',
	GET_LENS_VERSION_DIFFERENCE = 'wellarchitected:GetLensVersionDifference',
	GET_MILESTONE = 'wellarchitected:GetMilestone',
	GET_WORKLOAD = 'wellarchitected:GetWorkload',
	IMPORT_LENS = 'wellarchitected:ImportLens',
	LIST_ANSWERS = 'wellarchitected:ListAnswers',
	LIST_CHECK_DETAILS = 'wellarchitected:ListCheckDetails',
	LIST_CHECK_SUMMARIES = 'wellarchitected:ListCheckSummaries',
	LIST_LENS_REVIEW_IMPROVEMENTS = 'wellarchitected:ListLensReviewImprovements',
	LIST_LENS_REVIEWS = 'wellarchitected:ListLensReviews',
	LIST_LENS_SHARES = 'wellarchitected:ListLensShares',
	LIST_LENSES = 'wellarchitected:ListLenses',
	LIST_MILESTONES = 'wellarchitected:ListMilestones',
	LIST_NOTIFICATIONS = 'wellarchitected:ListNotifications',
	LIST_SHARE_INVITATIONS = 'wellarchitected:ListShareInvitations',
	LIST_TAGS_FOR_RESOURCE = 'wellarchitected:ListTagsForResource',
	LIST_WORKLOAD_SHARES = 'wellarchitected:ListWorkloadShares',
	LIST_WORKLOADS = 'wellarchitected:ListWorkloads',
	TAG_RESOURCE = 'wellarchitected:TagResource',
	UNTAG_RESOURCE = 'wellarchitected:UntagResource',
	UPDATE_ANSWER = 'wellarchitected:UpdateAnswer',
	UPDATE_GLOBAL_SETTINGS = 'wellarchitected:UpdateGlobalSettings',
	UPDATE_LENS_REVIEW = 'wellarchitected:UpdateLensReview',
	UPDATE_SHARE_INVITATION = 'wellarchitected:UpdateShareInvitation',
	UPDATE_WORKLOAD = 'wellarchitected:UpdateWorkload',
	UPDATE_WORKLOAD_SHARE = 'wellarchitected:UpdateWorkloadShare',
	UPGRADE_LENS_REVIEW = 'wellarchitected:UpgradeLensReview',
}
export enum CONNECTOR_SERVICE {
	GET_CONNECTOR_HEALTH = 'awsconnector:GetConnectorHealth',
	REGISTER_CONNECTOR = 'awsconnector:RegisterConnector',
	VALIDATE_CONNECTOR_ID = 'awsconnector:ValidateConnectorId',
}
export enum KENDRA {
	ASSOCIATE_ENTITIES_TO_EXPERIENCE = 'kendra:AssociateEntitiesToExperience',
	ASSOCIATE_PERSONAS_TO_ENTITIES = 'kendra:AssociatePersonasToEntities',
	BATCH_DELETE_DOCUMENT = 'kendra:BatchDeleteDocument',
	BATCH_GET_DOCUMENT_STATUS = 'kendra:BatchGetDocumentStatus',
	BATCH_PUT_DOCUMENT = 'kendra:BatchPutDocument',
	CLEAR_QUERY_SUGGESTIONS = 'kendra:ClearQuerySuggestions',
	CREATE_DATA_SOURCE = 'kendra:CreateDataSource',
	CREATE_EXPERIENCE = 'kendra:CreateExperience',
	CREATE_FAQ = 'kendra:CreateFaq',
	CREATE_INDEX = 'kendra:CreateIndex',
	CREATE_QUERY_SUGGESTIONS_BLOCK_LIST = 'kendra:CreateQuerySuggestionsBlockList',
	CREATE_THESAURUS = 'kendra:CreateThesaurus',
	DELETE_DATA_SOURCE = 'kendra:DeleteDataSource',
	DELETE_EXPERIENCE = 'kendra:DeleteExperience',
	DELETE_FAQ = 'kendra:DeleteFaq',
	DELETE_INDEX = 'kendra:DeleteIndex',
	DELETE_PRINCIPAL_MAPPING = 'kendra:DeletePrincipalMapping',
	DELETE_QUERY_SUGGESTIONS_BLOCK_LIST = 'kendra:DeleteQuerySuggestionsBlockList',
	DELETE_THESAURUS = 'kendra:DeleteThesaurus',
	DESCRIBE_DATA_SOURCE = 'kendra:DescribeDataSource',
	DESCRIBE_EXPERIENCE = 'kendra:DescribeExperience',
	DESCRIBE_FAQ = 'kendra:DescribeFaq',
	DESCRIBE_INDEX = 'kendra:DescribeIndex',
	DESCRIBE_PRINCIPAL_MAPPING = 'kendra:DescribePrincipalMapping',
	DESCRIBE_QUERY_SUGGESTIONS_BLOCK_LIST = 'kendra:DescribeQuerySuggestionsBlockList',
	DESCRIBE_QUERY_SUGGESTIONS_CONFIG = 'kendra:DescribeQuerySuggestionsConfig',
	DESCRIBE_THESAURUS = 'kendra:DescribeThesaurus',
	DISASSOCIATE_ENTITIES_FROM_EXPERIENCE = 'kendra:DisassociateEntitiesFromExperience',
	DISASSOCIATE_PERSONAS_FROM_ENTITIES = 'kendra:DisassociatePersonasFromEntities',
	GET_QUERY_SUGGESTIONS = 'kendra:GetQuerySuggestions',
	GET_SNAPSHOTS = 'kendra:GetSnapshots',
	LIST_DATA_SOURCE_SYNC_JOBS = 'kendra:ListDataSourceSyncJobs',
	LIST_DATA_SOURCES = 'kendra:ListDataSources',
	LIST_ENTITY_PERSONAS = 'kendra:ListEntityPersonas',
	LIST_EXPERIENCE_ENTITIES = 'kendra:ListExperienceEntities',
	LIST_EXPERIENCES = 'kendra:ListExperiences',
	LIST_FAQS = 'kendra:ListFaqs',
	LIST_GROUPS_OLDER_THAN_ORDERING_ID = 'kendra:ListGroupsOlderThanOrderingId',
	LIST_INDICES = 'kendra:ListIndices',
	LIST_QUERY_SUGGESTIONS_BLOCK_LISTS = 'kendra:ListQuerySuggestionsBlockLists',
	LIST_TAGS_FOR_RESOURCE = 'kendra:ListTagsForResource',
	LIST_THESAURI = 'kendra:ListThesauri',
	PUT_PRINCIPAL_MAPPING = 'kendra:PutPrincipalMapping',
	QUERY = 'kendra:Query',
	START_DATA_SOURCE_SYNC_JOB = 'kendra:StartDataSourceSyncJob',
	STOP_DATA_SOURCE_SYNC_JOB = 'kendra:StopDataSourceSyncJob',
	SUBMIT_FEEDBACK = 'kendra:SubmitFeedback',
	TAG_RESOURCE = 'kendra:TagResource',
	UNTAG_RESOURCE = 'kendra:UntagResource',
	UPDATE_DATA_SOURCE = 'kendra:UpdateDataSource',
	UPDATE_EXPERIENCE = 'kendra:UpdateExperience',
	UPDATE_INDEX = 'kendra:UpdateIndex',
	UPDATE_QUERY_SUGGESTIONS_BLOCK_LIST = 'kendra:UpdateQuerySuggestionsBlockList',
	UPDATE_QUERY_SUGGESTIONS_CONFIG = 'kendra:UpdateQuerySuggestionsConfig',
	UPDATE_THESAURUS = 'kendra:UpdateThesaurus',
}
export enum INTERACTIVE_VIDEO_SERVICE {
	BATCH_GET_CHANNEL = 'ivs:BatchGetChannel',
	BATCH_GET_STREAM_KEY = 'ivs:BatchGetStreamKey',
	CREATE_CHANNEL = 'ivs:CreateChannel',
	CREATE_RECORDING_CONFIGURATION = 'ivs:CreateRecordingConfiguration',
	CREATE_STREAM_KEY = 'ivs:CreateStreamKey',
	DELETE_CHANNEL = 'ivs:DeleteChannel',
	DELETE_PLAYBACK_KEY_PAIR = 'ivs:DeletePlaybackKeyPair',
	DELETE_RECORDING_CONFIGURATION = 'ivs:DeleteRecordingConfiguration',
	DELETE_STREAM_KEY = 'ivs:DeleteStreamKey',
	GET_CHANNEL = 'ivs:GetChannel',
	GET_PLAYBACK_KEY_PAIR = 'ivs:GetPlaybackKeyPair',
	GET_RECORDING_CONFIGURATION = 'ivs:GetRecordingConfiguration',
	GET_STREAM = 'ivs:GetStream',
	GET_STREAM_KEY = 'ivs:GetStreamKey',
	GET_STREAM_SESSION = 'ivs:GetStreamSession',
	IMPORT_PLAYBACK_KEY_PAIR = 'ivs:ImportPlaybackKeyPair',
	LIST_CHANNELS = 'ivs:ListChannels',
	LIST_PLAYBACK_KEY_PAIRS = 'ivs:ListPlaybackKeyPairs',
	LIST_RECORDING_CONFIGURATIONS = 'ivs:ListRecordingConfigurations',
	LIST_STREAM_KEYS = 'ivs:ListStreamKeys',
	LIST_STREAM_SESSIONS = 'ivs:ListStreamSessions',
	LIST_STREAMS = 'ivs:ListStreams',
	LIST_TAGS_FOR_RESOURCE = 'ivs:ListTagsForResource',
	PUT_METADATA = 'ivs:PutMetadata',
	STOP_STREAM = 'ivs:StopStream',
	TAG_RESOURCE = 'ivs:TagResource',
	UNTAG_RESOURCE = 'ivs:UntagResource',
	UPDATE_CHANNEL = 'ivs:UpdateChannel',
}
export enum LIGHTSAIL {
	ALLOCATE_STATIC_IP = 'lightsail:AllocateStaticIp',
	ATTACH_CERTIFICATE_TO_DISTRIBUTION = 'lightsail:AttachCertificateToDistribution',
	ATTACH_DISK = 'lightsail:AttachDisk',
	ATTACH_INSTANCES_TO_LOAD_BALANCER = 'lightsail:AttachInstancesToLoadBalancer',
	ATTACH_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:AttachLoadBalancerTlsCertificate',
	ATTACH_STATIC_IP = 'lightsail:AttachStaticIp',
	CLOSE_INSTANCE_PUBLIC_PORTS = 'lightsail:CloseInstancePublicPorts',
	COPY_SNAPSHOT = 'lightsail:CopySnapshot',
	CREATE_BUCKET = 'lightsail:CreateBucket',
	CREATE_BUCKET_ACCESS_KEY = 'lightsail:CreateBucketAccessKey',
	CREATE_CERTIFICATE = 'lightsail:CreateCertificate',
	CREATE_CLOUD_FORMATION_STACK = 'lightsail:CreateCloudFormationStack',
	CREATE_CONTACT_METHOD = 'lightsail:CreateContactMethod',
	CREATE_CONTAINER_SERVICE = 'lightsail:CreateContainerService',
	CREATE_CONTAINER_SERVICE_DEPLOYMENT = 'lightsail:CreateContainerServiceDeployment',
	CREATE_CONTAINER_SERVICE_REGISTRY_LOGIN = 'lightsail:CreateContainerServiceRegistryLogin',
	CREATE_DISK = 'lightsail:CreateDisk',
	CREATE_DISK_FROM_SNAPSHOT = 'lightsail:CreateDiskFromSnapshot',
	CREATE_DISK_SNAPSHOT = 'lightsail:CreateDiskSnapshot',
	CREATE_DISTRIBUTION = 'lightsail:CreateDistribution',
	CREATE_DOMAIN = 'lightsail:CreateDomain',
	CREATE_DOMAIN_ENTRY = 'lightsail:CreateDomainEntry',
	CREATE_INSTANCE_SNAPSHOT = 'lightsail:CreateInstanceSnapshot',
	CREATE_INSTANCES = 'lightsail:CreateInstances',
	CREATE_INSTANCES_FROM_SNAPSHOT = 'lightsail:CreateInstancesFromSnapshot',
	CREATE_KEY_PAIR = 'lightsail:CreateKeyPair',
	CREATE_LOAD_BALANCER = 'lightsail:CreateLoadBalancer',
	CREATE_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:CreateLoadBalancerTlsCertificate',
	CREATE_RELATIONAL_DATABASE = 'lightsail:CreateRelationalDatabase',
	CREATE_RELATIONAL_DATABASE_FROM_SNAPSHOT = 'lightsail:CreateRelationalDatabaseFromSnapshot',
	CREATE_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:CreateRelationalDatabaseSnapshot',
	DELETE_ALARM = 'lightsail:DeleteAlarm',
	DELETE_AUTO_SNAPSHOT = 'lightsail:DeleteAutoSnapshot',
	DELETE_BUCKET = 'lightsail:DeleteBucket',
	DELETE_BUCKET_ACCESS_KEY = 'lightsail:DeleteBucketAccessKey',
	DELETE_CERTIFICATE = 'lightsail:DeleteCertificate',
	DELETE_CONTACT_METHOD = 'lightsail:DeleteContactMethod',
	DELETE_CONTAINER_IMAGE = 'lightsail:DeleteContainerImage',
	DELETE_CONTAINER_SERVICE = 'lightsail:DeleteContainerService',
	DELETE_DISK = 'lightsail:DeleteDisk',
	DELETE_DISK_SNAPSHOT = 'lightsail:DeleteDiskSnapshot',
	DELETE_DISTRIBUTION = 'lightsail:DeleteDistribution',
	DELETE_DOMAIN = 'lightsail:DeleteDomain',
	DELETE_DOMAIN_ENTRY = 'lightsail:DeleteDomainEntry',
	DELETE_INSTANCE = 'lightsail:DeleteInstance',
	DELETE_INSTANCE_SNAPSHOT = 'lightsail:DeleteInstanceSnapshot',
	DELETE_KEY_PAIR = 'lightsail:DeleteKeyPair',
	DELETE_KNOWN_HOST_KEYS = 'lightsail:DeleteKnownHostKeys',
	DELETE_LOAD_BALANCER = 'lightsail:DeleteLoadBalancer',
	DELETE_LOAD_BALANCER_TLS_CERTIFICATE = 'lightsail:DeleteLoadBalancerTlsCertificate',
	DELETE_RELATIONAL_DATABASE = 'lightsail:DeleteRelationalDatabase',
	DELETE_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:DeleteRelationalDatabaseSnapshot',
	DETACH_CERTIFICATE_FROM_DISTRIBUTION = 'lightsail:DetachCertificateFromDistribution',
	DETACH_DISK = 'lightsail:DetachDisk',
	DETACH_INSTANCES_FROM_LOAD_BALANCER = 'lightsail:DetachInstancesFromLoadBalancer',
	DETACH_STATIC_IP = 'lightsail:DetachStaticIp',
	DISABLE_ADD_ON = 'lightsail:DisableAddOn',
	DOWNLOAD_DEFAULT_KEY_PAIR = 'lightsail:DownloadDefaultKeyPair',
	ENABLE_ADD_ON = 'lightsail:EnableAddOn',
	EXPORT_SNAPSHOT = 'lightsail:ExportSnapshot',
	GET_ACTIVE_NAMES = 'lightsail:GetActiveNames',
	GET_ALARMS = 'lightsail:GetAlarms',
	GET_AUTO_SNAPSHOTS = 'lightsail:GetAutoSnapshots',
	GET_BLUEPRINTS = 'lightsail:GetBlueprints',
	GET_BUCKET_ACCESS_KEYS = 'lightsail:GetBucketAccessKeys',
	GET_BUCKET_BUNDLES = 'lightsail:GetBucketBundles',
	GET_BUCKET_METRIC_DATA = 'lightsail:GetBucketMetricData',
	GET_BUCKETS = 'lightsail:GetBuckets',
	GET_BUNDLES = 'lightsail:GetBundles',
	GET_CERTIFICATES = 'lightsail:GetCertificates',
	GET_CLOUD_FORMATION_STACK_RECORDS = 'lightsail:GetCloudFormationStackRecords',
	GET_CONTACT_METHODS = 'lightsail:GetContactMethods',
	GET_CONTAINER_API_METADATA = 'lightsail:GetContainerAPIMetadata',
	GET_CONTAINER_IMAGES = 'lightsail:GetContainerImages',
	GET_CONTAINER_LOG = 'lightsail:GetContainerLog',
	GET_CONTAINER_SERVICE_DEPLOYMENTS = 'lightsail:GetContainerServiceDeployments',
	GET_CONTAINER_SERVICE_METRIC_DATA = 'lightsail:GetContainerServiceMetricData',
	GET_CONTAINER_SERVICE_POWERS = 'lightsail:GetContainerServicePowers',
	GET_CONTAINER_SERVICES = 'lightsail:GetContainerServices',
	GET_DISK = 'lightsail:GetDisk',
	GET_DISK_SNAPSHOT = 'lightsail:GetDiskSnapshot',
	GET_DISK_SNAPSHOTS = 'lightsail:GetDiskSnapshots',
	GET_DISKS = 'lightsail:GetDisks',
	GET_DISTRIBUTION_BUNDLES = 'lightsail:GetDistributionBundles',
	GET_DISTRIBUTION_LATEST_CACHE_RESET = 'lightsail:GetDistributionLatestCacheReset',
	GET_DISTRIBUTION_METRIC_DATA = 'lightsail:GetDistributionMetricData',
	GET_DISTRIBUTIONS = 'lightsail:GetDistributions',
	GET_DOMAIN = 'lightsail:GetDomain',
	GET_DOMAINS = 'lightsail:GetDomains',
	GET_EXPORT_SNAPSHOT_RECORDS = 'lightsail:GetExportSnapshotRecords',
	GET_INSTANCE = 'lightsail:GetInstance',
	GET_INSTANCE_ACCESS_DETAILS = 'lightsail:GetInstanceAccessDetails',
	GET_INSTANCE_METRIC_DATA = 'lightsail:GetInstanceMetricData',
	GET_INSTANCE_PORT_STATES = 'lightsail:GetInstancePortStates',
	GET_INSTANCE_SNAPSHOT = 'lightsail:GetInstanceSnapshot',
	GET_INSTANCE_SNAPSHOTS = 'lightsail:GetInstanceSnapshots',
	GET_INSTANCE_STATE = 'lightsail:GetInstanceState',
	GET_INSTANCES = 'lightsail:GetInstances',
	GET_KEY_PAIR = 'lightsail:GetKeyPair',
	GET_KEY_PAIRS = 'lightsail:GetKeyPairs',
	GET_LOAD_BALANCER = 'lightsail:GetLoadBalancer',
	GET_LOAD_BALANCER_METRIC_DATA = 'lightsail:GetLoadBalancerMetricData',
	GET_LOAD_BALANCER_TLS_CERTIFICATES = 'lightsail:GetLoadBalancerTlsCertificates',
	GET_LOAD_BALANCER_TLS_POLICIES = 'lightsail:GetLoadBalancerTlsPolicies',
	GET_LOAD_BALANCERS = 'lightsail:GetLoadBalancers',
	GET_OPERATION = 'lightsail:GetOperation',
	GET_OPERATIONS = 'lightsail:GetOperations',
	GET_OPERATIONS_FOR_RESOURCE = 'lightsail:GetOperationsForResource',
	GET_REGIONS = 'lightsail:GetRegions',
	GET_RELATIONAL_DATABASE = 'lightsail:GetRelationalDatabase',
	GET_RELATIONAL_DATABASE_BLUEPRINTS = 'lightsail:GetRelationalDatabaseBlueprints',
	GET_RELATIONAL_DATABASE_BUNDLES = 'lightsail:GetRelationalDatabaseBundles',
	GET_RELATIONAL_DATABASE_EVENTS = 'lightsail:GetRelationalDatabaseEvents',
	GET_RELATIONAL_DATABASE_LOG_EVENTS = 'lightsail:GetRelationalDatabaseLogEvents',
	GET_RELATIONAL_DATABASE_LOG_STREAMS = 'lightsail:GetRelationalDatabaseLogStreams',
	GET_RELATIONAL_DATABASE_MASTER_USER_PASSWORD = 'lightsail:GetRelationalDatabaseMasterUserPassword',
	GET_RELATIONAL_DATABASE_METRIC_DATA = 'lightsail:GetRelationalDatabaseMetricData',
	GET_RELATIONAL_DATABASE_PARAMETERS = 'lightsail:GetRelationalDatabaseParameters',
	GET_RELATIONAL_DATABASE_SNAPSHOT = 'lightsail:GetRelationalDatabaseSnapshot',
	GET_RELATIONAL_DATABASE_SNAPSHOTS = 'lightsail:GetRelationalDatabaseSnapshots',
	GET_RELATIONAL_DATABASES = 'lightsail:GetRelationalDatabases',
	GET_STATIC_IP = 'lightsail:GetStaticIp',
	GET_STATIC_IPS = 'lightsail:GetStaticIps',
	IMPORT_KEY_PAIR = 'lightsail:ImportKeyPair',
	IS_VPC_PEERED = 'lightsail:IsVpcPeered',
	OPEN_INSTANCE_PUBLIC_PORTS = 'lightsail:OpenInstancePublicPorts',
	PEER_VPC = 'lightsail:PeerVpc',
	PUT_ALARM = 'lightsail:PutAlarm',
	PUT_INSTANCE_PUBLIC_PORTS = 'lightsail:PutInstancePublicPorts',
	REBOOT_INSTANCE = 'lightsail:RebootInstance',
	REBOOT_RELATIONAL_DATABASE = 'lightsail:RebootRelationalDatabase',
	REGISTER_CONTAINER_IMAGE = 'lightsail:RegisterContainerImage',
	RELEASE_STATIC_IP = 'lightsail:ReleaseStaticIp',
	RESET_DISTRIBUTION_CACHE = 'lightsail:ResetDistributionCache',
	SEND_CONTACT_METHOD_VERIFICATION = 'lightsail:SendContactMethodVerification',
	SET_IP_ADDRESS_TYPE = 'lightsail:SetIpAddressType',
	SET_RESOURCE_ACCESS_FOR_BUCKET = 'lightsail:SetResourceAccessForBucket',
	START_INSTANCE = 'lightsail:StartInstance',
	START_RELATIONAL_DATABASE = 'lightsail:StartRelationalDatabase',
	STOP_INSTANCE = 'lightsail:StopInstance',
	STOP_RELATIONAL_DATABASE = 'lightsail:StopRelationalDatabase',
	TAG_RESOURCE = 'lightsail:TagResource',
	TEST_ALARM = 'lightsail:TestAlarm',
	UNPEER_VPC = 'lightsail:UnpeerVpc',
	UNTAG_RESOURCE = 'lightsail:UntagResource',
	UPDATE_BUCKET = 'lightsail:UpdateBucket',
	UPDATE_BUCKET_BUNDLE = 'lightsail:UpdateBucketBundle',
	UPDATE_CONTAINER_SERVICE = 'lightsail:UpdateContainerService',
	UPDATE_DISTRIBUTION = 'lightsail:UpdateDistribution',
	UPDATE_DISTRIBUTION_BUNDLE = 'lightsail:UpdateDistributionBundle',
	UPDATE_DOMAIN_ENTRY = 'lightsail:UpdateDomainEntry',
	UPDATE_INSTANCE_METADATA_OPTIONS = 'lightsail:UpdateInstanceMetadataOptions',
	UPDATE_LOAD_BALANCER_ATTRIBUTE = 'lightsail:UpdateLoadBalancerAttribute',
	UPDATE_RELATIONAL_DATABASE = 'lightsail:UpdateRelationalDatabase',
	UPDATE_RELATIONAL_DATABASE_PARAMETERS = 'lightsail:UpdateRelationalDatabaseParameters',
}
export enum BACKUP_STORAGE {
	COMMIT_BACKUP_JOB = 'backup-storage:CommitBackupJob',
	DELETE_OBJECTS = 'backup-storage:DeleteObjects',
	DESCRIBE_BACKUP_JOB = 'backup-storage:DescribeBackupJob',
	GET_BASE_BACKUP = 'backup-storage:GetBaseBackup',
	GET_CHUNK = 'backup-storage:GetChunk',
	GET_INCREMENTAL_BASE_BACKUP = 'backup-storage:GetIncrementalBaseBackup',
	GET_OBJECT_METADATA = 'backup-storage:GetObjectMetadata',
	LIST_CHUNKS = 'backup-storage:ListChunks',
	LIST_OBJECTS = 'backup-storage:ListObjects',
	MOUNT_CAPSULE = 'backup-storage:MountCapsule',
	NOTIFY_OBJECT_COMPLETE = 'backup-storage:NotifyObjectComplete',
	PUT_CHUNK = 'backup-storage:PutChunk',
	PUT_OBJECT = 'backup-storage:PutObject',
	START_OBJECT = 'backup-storage:StartObject',
	UPDATE_OBJECT_COMPLETE = 'backup-storage:UpdateObjectComplete',
}
export enum COGNITO_SYNC {
	BULK_PUBLISH = 'cognito-sync:BulkPublish',
	DELETE_DATASET = 'cognito-sync:DeleteDataset',
	DESCRIBE_DATASET = 'cognito-sync:DescribeDataset',
	DESCRIBE_IDENTITY_POOL_USAGE = 'cognito-sync:DescribeIdentityPoolUsage',
	DESCRIBE_IDENTITY_USAGE = 'cognito-sync:DescribeIdentityUsage',
	GET_BULK_PUBLISH_DETAILS = 'cognito-sync:GetBulkPublishDetails',
	GET_COGNITO_EVENTS = 'cognito-sync:GetCognitoEvents',
	GET_IDENTITY_POOL_CONFIGURATION = 'cognito-sync:GetIdentityPoolConfiguration',
	LIST_DATASETS = 'cognito-sync:ListDatasets',
	LIST_IDENTITY_POOL_USAGE = 'cognito-sync:ListIdentityPoolUsage',
	LIST_RECORDS = 'cognito-sync:ListRecords',
	QUERY_RECORDS = 'cognito-sync:QueryRecords',
	REGISTER_DEVICE = 'cognito-sync:RegisterDevice',
	SET_COGNITO_EVENTS = 'cognito-sync:SetCognitoEvents',
	SET_DATASET_CONFIGURATION = 'cognito-sync:SetDatasetConfiguration',
	SET_IDENTITY_POOL_CONFIGURATION = 'cognito-sync:SetIdentityPoolConfiguration',
	SUBSCRIBE_TO_DATASET = 'cognito-sync:SubscribeToDataset',
	UNSUBSCRIBE_FROM_DATASET = 'cognito-sync:UnsubscribeFromDataset',
	UPDATE_RECORDS = 'cognito-sync:UpdateRecords',
}
export enum CLOUDSEARCH {
	ADD_TAGS = 'cloudsearch:AddTags',
	BUILD_SUGGESTERS = 'cloudsearch:BuildSuggesters',
	CREATE_DOMAIN = 'cloudsearch:CreateDomain',
	DEFINE_ANALYSIS_SCHEME = 'cloudsearch:DefineAnalysisScheme',
	DEFINE_EXPRESSION = 'cloudsearch:DefineExpression',
	DEFINE_INDEX_FIELD = 'cloudsearch:DefineIndexField',
	DEFINE_SUGGESTER = 'cloudsearch:DefineSuggester',
	DELETE_ANALYSIS_SCHEME = 'cloudsearch:DeleteAnalysisScheme',
	DELETE_DOMAIN = 'cloudsearch:DeleteDomain',
	DELETE_EXPRESSION = 'cloudsearch:DeleteExpression',
	DELETE_INDEX_FIELD = 'cloudsearch:DeleteIndexField',
	DELETE_SUGGESTER = 'cloudsearch:DeleteSuggester',
	DESCRIBE_ANALYSIS_SCHEMES = 'cloudsearch:DescribeAnalysisSchemes',
	DESCRIBE_AVAILABILITY_OPTIONS = 'cloudsearch:DescribeAvailabilityOptions',
	DESCRIBE_DOMAIN_ENDPOINT_OPTIONS = 'cloudsearch:DescribeDomainEndpointOptions',
	DESCRIBE_DOMAINS = 'cloudsearch:DescribeDomains',
	DESCRIBE_EXPRESSIONS = 'cloudsearch:DescribeExpressions',
	DESCRIBE_INDEX_FIELDS = 'cloudsearch:DescribeIndexFields',
	DESCRIBE_SCALING_PARAMETERS = 'cloudsearch:DescribeScalingParameters',
	DESCRIBE_SERVICE_ACCESS_POLICIES = 'cloudsearch:DescribeServiceAccessPolicies',
	DESCRIBE_SUGGESTERS = 'cloudsearch:DescribeSuggesters',
	INDEX_DOCUMENTS = 'cloudsearch:IndexDocuments',
	LIST_DOMAIN_NAMES = 'cloudsearch:ListDomainNames',
	LIST_TAGS = 'cloudsearch:ListTags',
	REMOVE_TAGS = 'cloudsearch:RemoveTags',
	UPDATE_AVAILABILITY_OPTIONS = 'cloudsearch:UpdateAvailabilityOptions',
	UPDATE_DOMAIN_ENDPOINT_OPTIONS = 'cloudsearch:UpdateDomainEndpointOptions',
	UPDATE_SCALING_PARAMETERS = 'cloudsearch:UpdateScalingParameters',
	UPDATE_SERVICE_ACCESS_POLICIES = 'cloudsearch:UpdateServiceAccessPolicies',
	DOCUMENT = 'cloudsearch:document',
	SEARCH = 'cloudsearch:search',
	SUGGEST = 'cloudsearch:suggest',
}
export enum EMR_SERVERLESS {
	CANCEL_JOB_RUN = 'emr-serverless:CancelJobRun',
	CREATE_APPLICATION = 'emr-serverless:CreateApplication',
	DELETE_APPLICATION = 'emr-serverless:DeleteApplication',
	GET_APPLICATION = 'emr-serverless:GetApplication',
	GET_DASHBOARD_FOR_JOB_RUN = 'emr-serverless:GetDashboardForJobRun',
	GET_JOB_RUN = 'emr-serverless:GetJobRun',
	LIST_APPLICATIONS = 'emr-serverless:ListApplications',
	LIST_JOB_RUNS = 'emr-serverless:ListJobRuns',
	LIST_TAGS_FOR_RESOURCE = 'emr-serverless:ListTagsForResource',
	START_APPLICATION = 'emr-serverless:StartApplication',
	START_JOB_RUN = 'emr-serverless:StartJobRun',
	STOP_APPLICATION = 'emr-serverless:StopApplication',
	TAG_RESOURCE = 'emr-serverless:TagResource',
	UNTAG_RESOURCE = 'emr-serverless:UntagResource',
	UPDATE_APPLICATION = 'emr-serverless:UpdateApplication',
}
export enum ROUTE_53_APPLICATION_RECOVERY_CONTROLLER_ZONAL_SHIFT {
	CANCEL_ZONAL_SHIFT = 'arc-zonal-shift:CancelZonalShift',
	GET_MANAGED_RESOURCE = 'arc-zonal-shift:GetManagedResource',
	LIST_MANAGED_RESOURCES = 'arc-zonal-shift:ListManagedResources',
	LIST_ZONAL_SHIFTS = 'arc-zonal-shift:ListZonalShifts',
	START_ZONAL_SHIFT = 'arc-zonal-shift:StartZonalShift',
	UPDATE_ZONAL_SHIFT = 'arc-zonal-shift:UpdateZonalShift',
}
export enum ELASTIC_TRANSCODER {
	CANCEL_JOB = 'elastictranscoder:CancelJob',
	CREATE_JOB = 'elastictranscoder:CreateJob',
	CREATE_PIPELINE = 'elastictranscoder:CreatePipeline',
	CREATE_PRESET = 'elastictranscoder:CreatePreset',
	DELETE_PIPELINE = 'elastictranscoder:DeletePipeline',
	DELETE_PRESET = 'elastictranscoder:DeletePreset',
	LIST_JOBS_BY_PIPELINE = 'elastictranscoder:ListJobsByPipeline',
	LIST_JOBS_BY_STATUS = 'elastictranscoder:ListJobsByStatus',
	LIST_PIPELINES = 'elastictranscoder:ListPipelines',
	LIST_PRESETS = 'elastictranscoder:ListPresets',
	READ_JOB = 'elastictranscoder:ReadJob',
	READ_PIPELINE = 'elastictranscoder:ReadPipeline',
	READ_PRESET = 'elastictranscoder:ReadPreset',
	TEST_ROLE = 'elastictranscoder:TestRole',
	UPDATE_PIPELINE = 'elastictranscoder:UpdatePipeline',
	UPDATE_PIPELINE_NOTIFICATIONS = 'elastictranscoder:UpdatePipelineNotifications',
	UPDATE_PIPELINE_STATUS = 'elastictranscoder:UpdatePipelineStatus',
}
export enum SECURITY_LAKE {
	CREATE_AWS_LOG_SOURCE = 'securitylake:CreateAwsLogSource',
	CREATE_CUSTOM_LOG_SOURCE = 'securitylake:CreateCustomLogSource',
	CREATE_DATALAKE = 'securitylake:CreateDatalake',
	CREATE_DATALAKE_AUTO_ENABLE = 'securitylake:CreateDatalakeAutoEnable',
	CREATE_DATALAKE_DELEGATED_ADMIN = 'securitylake:CreateDatalakeDelegatedAdmin',
	CREATE_DATALAKE_EXCEPTIONS_SUBSCRIPTION = 'securitylake:CreateDatalakeExceptionsSubscription',
	CREATE_SUBSCRIBER = 'securitylake:CreateSubscriber',
	CREATE_SUBSCRIPTION_NOTIFICATION_CONFIGURATION = 'securitylake:CreateSubscriptionNotificationConfiguration',
	DELETE_AWS_LOG_SOURCE = 'securitylake:DeleteAwsLogSource',
	DELETE_CUSTOM_LOG_SOURCE = 'securitylake:DeleteCustomLogSource',
	DELETE_DATALAKE = 'securitylake:DeleteDatalake',
	DELETE_DATALAKE_AUTO_ENABLE = 'securitylake:DeleteDatalakeAutoEnable',
	DELETE_DATALAKE_DELEGATED_ADMIN = 'securitylake:DeleteDatalakeDelegatedAdmin',
	DELETE_DATALAKE_EXCEPTIONS_SUBSCRIPTION = 'securitylake:DeleteDatalakeExceptionsSubscription',
	DELETE_SUBSCRIBER = 'securitylake:DeleteSubscriber',
	DELETE_SUBSCRIPTION_NOTIFICATION_CONFIGURATION = 'securitylake:DeleteSubscriptionNotificationConfiguration',
	GET_DATALAKE = 'securitylake:GetDatalake',
	GET_DATALAKE_AUTO_ENABLE = 'securitylake:GetDatalakeAutoEnable',
	GET_DATALAKE_EXCEPTIONS_EXPIRY = 'securitylake:GetDatalakeExceptionsExpiry',
	GET_DATALAKE_EXCEPTIONS_SUBSCRIPTION = 'securitylake:GetDatalakeExceptionsSubscription',
	GET_DATALAKE_STATUS = 'securitylake:GetDatalakeStatus',
	GET_SUBSCRIBER = 'securitylake:GetSubscriber',
	GET_SUBSCRIPTION_NOTIFICATION_CONFIGURATION = 'securitylake:GetSubscriptionNotificationConfiguration',
	LIST_DATALAKE_EXCEPTIONS = 'securitylake:ListDatalakeExceptions',
	LIST_LOG_SOURCES = 'securitylake:ListLogSources',
	LIST_SUBSCRIBERS = 'securitylake:ListSubscribers',
	UPDATE_DATALAKE = 'securitylake:UpdateDatalake',
	UPDATE_DATALAKE_EXCEPTIONS_EXPIRY = 'securitylake:UpdateDatalakeExceptionsExpiry',
	UPDATE_DATALAKE_EXCEPTIONS_SUBSCRIPTION = 'securitylake:UpdateDatalakeExceptionsSubscription',
	UPDATE_SUBSCRIBER = 'securitylake:UpdateSubscriber',
	UPDATE_SUBSCRIPTION_NOTIFICATION_CONFIGURATION = 'securitylake:UpdateSubscriptionNotificationConfiguration',
}
export enum IOT_FLEETWISE {
	ASSOCIATE_VEHICLE_FLEET = 'iotfleetwise:AssociateVehicleFleet',
	CREATE_CAMPAIGN = 'iotfleetwise:CreateCampaign',
	CREATE_DECODER_MANIFEST = 'iotfleetwise:CreateDecoderManifest',
	CREATE_FLEET = 'iotfleetwise:CreateFleet',
	CREATE_MODEL_MANIFEST = 'iotfleetwise:CreateModelManifest',
	CREATE_SIGNAL_CATALOG = 'iotfleetwise:CreateSignalCatalog',
	CREATE_VEHICLE = 'iotfleetwise:CreateVehicle',
	DELETE_CAMPAIGN = 'iotfleetwise:DeleteCampaign',
	DELETE_DECODER_MANIFEST = 'iotfleetwise:DeleteDecoderManifest',
	DELETE_FLEET = 'iotfleetwise:DeleteFleet',
	DELETE_MODEL_MANIFEST = 'iotfleetwise:DeleteModelManifest',
	DELETE_SIGNAL_CATALOG = 'iotfleetwise:DeleteSignalCatalog',
	DELETE_VEHICLE = 'iotfleetwise:DeleteVehicle',
	DISASSOCIATE_VEHICLE_FLEET = 'iotfleetwise:DisassociateVehicleFleet',
	GET_CAMPAIGN = 'iotfleetwise:GetCampaign',
	GET_DECODER_MANIFEST = 'iotfleetwise:GetDecoderManifest',
	GET_FLEET = 'iotfleetwise:GetFleet',
	GET_LOGGING_OPTIONS = 'iotfleetwise:GetLoggingOptions',
	GET_MODEL_MANIFEST = 'iotfleetwise:GetModelManifest',
	GET_REGISTER_ACCOUNT_STATUS = 'iotfleetwise:GetRegisterAccountStatus',
	GET_SIGNAL_CATALOG = 'iotfleetwise:GetSignalCatalog',
	GET_VEHICLE = 'iotfleetwise:GetVehicle',
	GET_VEHICLE_STATUS = 'iotfleetwise:GetVehicleStatus',
	IMPORT_DECODER_MANIFEST = 'iotfleetwise:ImportDecoderManifest',
	IMPORT_SIGNAL_CATALOG = 'iotfleetwise:ImportSignalCatalog',
	LIST_CAMPAIGNS = 'iotfleetwise:ListCampaigns',
	LIST_DECODER_MANIFEST_NETWORK_INTERFACES = 'iotfleetwise:ListDecoderManifestNetworkInterfaces',
	LIST_DECODER_MANIFEST_SIGNALS = 'iotfleetwise:ListDecoderManifestSignals',
	LIST_DECODER_MANIFESTS = 'iotfleetwise:ListDecoderManifests',
	LIST_FLEETS = 'iotfleetwise:ListFleets',
	LIST_FLEETS_FOR_VEHICLE = 'iotfleetwise:ListFleetsForVehicle',
	LIST_MODEL_MANIFEST_NODES = 'iotfleetwise:ListModelManifestNodes',
	LIST_MODEL_MANIFESTS = 'iotfleetwise:ListModelManifests',
	LIST_SIGNAL_CATALOG_NODES = 'iotfleetwise:ListSignalCatalogNodes',
	LIST_SIGNAL_CATALOGS = 'iotfleetwise:ListSignalCatalogs',
	LIST_TAGS_FOR_RESOURCE = 'iotfleetwise:ListTagsForResource',
	LIST_VEHICLES = 'iotfleetwise:ListVehicles',
	LIST_VEHICLES_IN_FLEET = 'iotfleetwise:ListVehiclesInFleet',
	PUT_LOGGING_OPTIONS = 'iotfleetwise:PutLoggingOptions',
	REGISTER_ACCOUNT = 'iotfleetwise:RegisterAccount',
	TAG_RESOURCE = 'iotfleetwise:TagResource',
	UNTAG_RESOURCE = 'iotfleetwise:UntagResource',
	UPDATE_CAMPAIGN = 'iotfleetwise:UpdateCampaign',
	UPDATE_DECODER_MANIFEST = 'iotfleetwise:UpdateDecoderManifest',
	UPDATE_FLEET = 'iotfleetwise:UpdateFleet',
	UPDATE_MODEL_MANIFEST = 'iotfleetwise:UpdateModelManifest',
	UPDATE_SIGNAL_CATALOG = 'iotfleetwise:UpdateSignalCatalog',
	UPDATE_VEHICLE = 'iotfleetwise:UpdateVehicle',
}
export enum PRICE_LIST {
	DESCRIBE_SERVICES = 'pricing:DescribeServices',
	GET_ATTRIBUTE_VALUES = 'pricing:GetAttributeValues',
	GET_PRODUCTS = 'pricing:GetProducts',
}
export enum BACKUP {
	CANCEL_LEGAL_HOLD = 'backup:CancelLegalHold',
	COPY_FROM_BACKUP_VAULT = 'backup:CopyFromBackupVault',
	COPY_INTO_BACKUP_VAULT = 'backup:CopyIntoBackupVault',
	CREATE_BACKUP_PLAN = 'backup:CreateBackupPlan',
	CREATE_BACKUP_SELECTION = 'backup:CreateBackupSelection',
	CREATE_BACKUP_VAULT = 'backup:CreateBackupVault',
	CREATE_FRAMEWORK = 'backup:CreateFramework',
	CREATE_LEGAL_HOLD = 'backup:CreateLegalHold',
	CREATE_REPORT_PLAN = 'backup:CreateReportPlan',
	DELETE_BACKUP_PLAN = 'backup:DeleteBackupPlan',
	DELETE_BACKUP_SELECTION = 'backup:DeleteBackupSelection',
	DELETE_BACKUP_VAULT = 'backup:DeleteBackupVault',
	DELETE_BACKUP_VAULT_ACCESS_POLICY = 'backup:DeleteBackupVaultAccessPolicy',
	DELETE_BACKUP_VAULT_LOCK_CONFIGURATION = 'backup:DeleteBackupVaultLockConfiguration',
	DELETE_BACKUP_VAULT_NOTIFICATIONS = 'backup:DeleteBackupVaultNotifications',
	DELETE_FRAMEWORK = 'backup:DeleteFramework',
	DELETE_RECOVERY_POINT = 'backup:DeleteRecoveryPoint',
	DELETE_REPORT_PLAN = 'backup:DeleteReportPlan',
	DESCRIBE_BACKUP_JOB = 'backup:DescribeBackupJob',
	DESCRIBE_BACKUP_VAULT = 'backup:DescribeBackupVault',
	DESCRIBE_COPY_JOB = 'backup:DescribeCopyJob',
	DESCRIBE_FRAMEWORK = 'backup:DescribeFramework',
	DESCRIBE_GLOBAL_SETTINGS = 'backup:DescribeGlobalSettings',
	DESCRIBE_PROTECTED_RESOURCE = 'backup:DescribeProtectedResource',
	DESCRIBE_RECOVERY_POINT = 'backup:DescribeRecoveryPoint',
	DESCRIBE_REGION_SETTINGS = 'backup:DescribeRegionSettings',
	DESCRIBE_REPORT_JOB = 'backup:DescribeReportJob',
	DESCRIBE_REPORT_PLAN = 'backup:DescribeReportPlan',
	DESCRIBE_RESTORE_JOB = 'backup:DescribeRestoreJob',
	DISASSOCIATE_RECOVERY_POINT = 'backup:DisassociateRecoveryPoint',
	DISASSOCIATE_RECOVERY_POINT_FROM_PARENT = 'backup:DisassociateRecoveryPointFromParent',
	EXPORT_BACKUP_PLAN_TEMPLATE = 'backup:ExportBackupPlanTemplate',
	GET_BACKUP_PLAN = 'backup:GetBackupPlan',
	GET_BACKUP_PLAN_FROM_JSON = 'backup:GetBackupPlanFromJSON',
	GET_BACKUP_PLAN_FROM_TEMPLATE = 'backup:GetBackupPlanFromTemplate',
	GET_BACKUP_SELECTION = 'backup:GetBackupSelection',
	GET_BACKUP_VAULT_ACCESS_POLICY = 'backup:GetBackupVaultAccessPolicy',
	GET_BACKUP_VAULT_NOTIFICATIONS = 'backup:GetBackupVaultNotifications',
	GET_LEGAL_HOLD = 'backup:GetLegalHold',
	GET_RECOVERY_POINT_RESTORE_METADATA = 'backup:GetRecoveryPointRestoreMetadata',
	GET_SUPPORTED_RESOURCE_TYPES = 'backup:GetSupportedResourceTypes',
	LIST_BACKUP_JOBS = 'backup:ListBackupJobs',
	LIST_BACKUP_PLAN_TEMPLATES = 'backup:ListBackupPlanTemplates',
	LIST_BACKUP_PLAN_VERSIONS = 'backup:ListBackupPlanVersions',
	LIST_BACKUP_PLANS = 'backup:ListBackupPlans',
	LIST_BACKUP_SELECTIONS = 'backup:ListBackupSelections',
	LIST_BACKUP_VAULTS = 'backup:ListBackupVaults',
	LIST_COPY_JOBS = 'backup:ListCopyJobs',
	LIST_FRAMEWORKS = 'backup:ListFrameworks',
	LIST_LEGAL_HOLDS = 'backup:ListLegalHolds',
	LIST_PROTECTED_RESOURCES = 'backup:ListProtectedResources',
	LIST_RECOVERY_POINTS_BY_BACKUP_VAULT = 'backup:ListRecoveryPointsByBackupVault',
	LIST_RECOVERY_POINTS_BY_LEGAL_HOLD = 'backup:ListRecoveryPointsByLegalHold',
	LIST_RECOVERY_POINTS_BY_RESOURCE = 'backup:ListRecoveryPointsByResource',
	LIST_REPORT_JOBS = 'backup:ListReportJobs',
	LIST_REPORT_PLANS = 'backup:ListReportPlans',
	LIST_RESTORE_JOBS = 'backup:ListRestoreJobs',
	LIST_TAGS = 'backup:ListTags',
	PUT_BACKUP_VAULT_ACCESS_POLICY = 'backup:PutBackupVaultAccessPolicy',
	PUT_BACKUP_VAULT_LOCK_CONFIGURATION = 'backup:PutBackupVaultLockConfiguration',
	PUT_BACKUP_VAULT_NOTIFICATIONS = 'backup:PutBackupVaultNotifications',
	START_BACKUP_JOB = 'backup:StartBackupJob',
	START_COPY_JOB = 'backup:StartCopyJob',
	START_REPORT_JOB = 'backup:StartReportJob',
	START_RESTORE_JOB = 'backup:StartRestoreJob',
	STOP_BACKUP_JOB = 'backup:StopBackupJob',
	TAG_RESOURCE = 'backup:TagResource',
	UNTAG_RESOURCE = 'backup:UntagResource',
	UPDATE_BACKUP_PLAN = 'backup:UpdateBackupPlan',
	UPDATE_FRAMEWORK = 'backup:UpdateFramework',
	UPDATE_GLOBAL_SETTINGS = 'backup:UpdateGlobalSettings',
	UPDATE_RECOVERY_POINT_LIFECYCLE = 'backup:UpdateRecoveryPointLifecycle',
	UPDATE_REGION_SETTINGS = 'backup:UpdateRegionSettings',
	UPDATE_REPORT_PLAN = 'backup:UpdateReportPlan',
}
export enum MOBILE_ANALYTICS {
	GET_FINANCIAL_REPORTS = 'mobileanalytics:GetFinancialReports',
	GET_REPORTS = 'mobileanalytics:GetReports',
	PUT_EVENTS = 'mobileanalytics:PutEvents',
}
export enum GLUE_DATABREW {
	BATCH_DELETE_RECIPE_VERSION = 'databrew:BatchDeleteRecipeVersion',
	CREATE_DATASET = 'databrew:CreateDataset',
	CREATE_PROFILE_JOB = 'databrew:CreateProfileJob',
	CREATE_PROJECT = 'databrew:CreateProject',
	CREATE_RECIPE = 'databrew:CreateRecipe',
	CREATE_RECIPE_JOB = 'databrew:CreateRecipeJob',
	CREATE_RULESET = 'databrew:CreateRuleset',
	CREATE_SCHEDULE = 'databrew:CreateSchedule',
	DELETE_DATASET = 'databrew:DeleteDataset',
	DELETE_JOB = 'databrew:DeleteJob',
	DELETE_PROJECT = 'databrew:DeleteProject',
	DELETE_RECIPE_VERSION = 'databrew:DeleteRecipeVersion',
	DELETE_RULESET = 'databrew:DeleteRuleset',
	DELETE_SCHEDULE = 'databrew:DeleteSchedule',
	DESCRIBE_DATASET = 'databrew:DescribeDataset',
	DESCRIBE_JOB = 'databrew:DescribeJob',
	DESCRIBE_JOB_RUN = 'databrew:DescribeJobRun',
	DESCRIBE_PROJECT = 'databrew:DescribeProject',
	DESCRIBE_RECIPE = 'databrew:DescribeRecipe',
	DESCRIBE_RULESET = 'databrew:DescribeRuleset',
	DESCRIBE_SCHEDULE = 'databrew:DescribeSchedule',
	LIST_DATASETS = 'databrew:ListDatasets',
	LIST_JOB_RUNS = 'databrew:ListJobRuns',
	LIST_JOBS = 'databrew:ListJobs',
	LIST_PROJECTS = 'databrew:ListProjects',
	LIST_RECIPE_VERSIONS = 'databrew:ListRecipeVersions',
	LIST_RECIPES = 'databrew:ListRecipes',
	LIST_RULESETS = 'databrew:ListRulesets',
	LIST_SCHEDULES = 'databrew:ListSchedules',
	LIST_TAGS_FOR_RESOURCE = 'databrew:ListTagsForResource',
	PUBLISH_RECIPE = 'databrew:PublishRecipe',
	SEND_PROJECT_SESSION_ACTION = 'databrew:SendProjectSessionAction',
	START_JOB_RUN = 'databrew:StartJobRun',
	START_PROJECT_SESSION = 'databrew:StartProjectSession',
	STOP_JOB_RUN = 'databrew:StopJobRun',
	TAG_RESOURCE = 'databrew:TagResource',
	UNTAG_RESOURCE = 'databrew:UntagResource',
	UPDATE_DATASET = 'databrew:UpdateDataset',
	UPDATE_PROFILE_JOB = 'databrew:UpdateProfileJob',
	UPDATE_PROJECT = 'databrew:UpdateProject',
	UPDATE_RECIPE = 'databrew:UpdateRecipe',
	UPDATE_RECIPE_JOB = 'databrew:UpdateRecipeJob',
	UPDATE_RULESET = 'databrew:UpdateRuleset',
	UPDATE_SCHEDULE = 'databrew:UpdateSchedule',
}
export enum RHEL_KNOWLEDGEBASE_PORTAL {
	GET_RHEL_URL = 'rhelkb:GetRhelURL',
}
export enum VPC_LATTICE {
	CREATE_ACCESS_LOG_SUBSCRIPTION = 'vpc-lattice:CreateAccessLogSubscription',
	CREATE_LISTENER = 'vpc-lattice:CreateListener',
	CREATE_RULE = 'vpc-lattice:CreateRule',
	CREATE_SERVICE = 'vpc-lattice:CreateService',
	CREATE_SERVICE_NETWORK = 'vpc-lattice:CreateServiceNetwork',
	CREATE_SERVICE_NETWORK_SERVICE_ASSOCIATION = 'vpc-lattice:CreateServiceNetworkServiceAssociation',
	CREATE_SERVICE_NETWORK_VPC_ASSOCIATION = 'vpc-lattice:CreateServiceNetworkVpcAssociation',
	CREATE_TARGET_GROUP = 'vpc-lattice:CreateTargetGroup',
	DELETE_ACCESS_LOG_SUBSCRIPTION = 'vpc-lattice:DeleteAccessLogSubscription',
	DELETE_AUTH_POLICY = 'vpc-lattice:DeleteAuthPolicy',
	DELETE_LISTENER = 'vpc-lattice:DeleteListener',
	DELETE_RESOURCE_POLICY = 'vpc-lattice:DeleteResourcePolicy',
	DELETE_RULE = 'vpc-lattice:DeleteRule',
	DELETE_SERVICE = 'vpc-lattice:DeleteService',
	DELETE_SERVICE_NETWORK = 'vpc-lattice:DeleteServiceNetwork',
	DELETE_SERVICE_NETWORK_SERVICE_ASSOCIATION = 'vpc-lattice:DeleteServiceNetworkServiceAssociation',
	DELETE_SERVICE_NETWORK_VPC_ASSOCIATION = 'vpc-lattice:DeleteServiceNetworkVpcAssociation',
	DELETE_TARGET_GROUP = 'vpc-lattice:DeleteTargetGroup',
	DEREGISTER_TARGETS = 'vpc-lattice:DeregisterTargets',
	GET_ACCESS_LOG_SUBSCRIPTION = 'vpc-lattice:GetAccessLogSubscription',
	GET_AUTH_POLICY = 'vpc-lattice:GetAuthPolicy',
	GET_LISTENER = 'vpc-lattice:GetListener',
	GET_RESOURCE_POLICY = 'vpc-lattice:GetResourcePolicy',
	GET_RULE = 'vpc-lattice:GetRule',
	GET_SERVICE = 'vpc-lattice:GetService',
	GET_SERVICE_NETWORK = 'vpc-lattice:GetServiceNetwork',
	GET_SERVICE_NETWORK_SERVICE_ASSOCIATION = 'vpc-lattice:GetServiceNetworkServiceAssociation',
	GET_SERVICE_NETWORK_VPC_ASSOCIATION = 'vpc-lattice:GetServiceNetworkVpcAssociation',
	GET_TARGET_GROUP = 'vpc-lattice:GetTargetGroup',
	LIST_ACCESS_LOG_SUBSCRIPTIONS = 'vpc-lattice:ListAccessLogSubscriptions',
	LIST_LISTENERS = 'vpc-lattice:ListListeners',
	LIST_RULES = 'vpc-lattice:ListRules',
	LIST_SERVICE_NETWORK_SERVICE_ASSOCIATIONS = 'vpc-lattice:ListServiceNetworkServiceAssociations',
	LIST_SERVICE_NETWORK_VPC_ASSOCIATIONS = 'vpc-lattice:ListServiceNetworkVpcAssociations',
	LIST_SERVICE_NETWORKS = 'vpc-lattice:ListServiceNetworks',
	LIST_SERVICES = 'vpc-lattice:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'vpc-lattice:ListTagsForResource',
	LIST_TARGET_GROUPS = 'vpc-lattice:ListTargetGroups',
	LIST_TARGETS = 'vpc-lattice:ListTargets',
	PUT_AUTH_POLICY = 'vpc-lattice:PutAuthPolicy',
	PUT_RESOURCE_POLICY = 'vpc-lattice:PutResourcePolicy',
	REGISTER_TARGETS = 'vpc-lattice:RegisterTargets',
	TAG_RESOURCE = 'vpc-lattice:TagResource',
	UNTAG_RESOURCE = 'vpc-lattice:UntagResource',
	UPDATE_ACCESS_LOG_SUBSCRIPTION = 'vpc-lattice:UpdateAccessLogSubscription',
	UPDATE_LISTENER = 'vpc-lattice:UpdateListener',
	UPDATE_RULE = 'vpc-lattice:UpdateRule',
	UPDATE_SERVICE = 'vpc-lattice:UpdateService',
	UPDATE_SERVICE_NETWORK = 'vpc-lattice:UpdateServiceNetwork',
	UPDATE_SERVICE_NETWORK_VPC_ASSOCIATION = 'vpc-lattice:UpdateServiceNetworkVpcAssociation',
	UPDATE_TARGET_GROUP = 'vpc-lattice:UpdateTargetGroup',
}
export enum BRAKET {
	CANCEL_JOB = 'braket:CancelJob',
	CANCEL_QUANTUM_TASK = 'braket:CancelQuantumTask',
	CREATE_JOB = 'braket:CreateJob',
	CREATE_QUANTUM_TASK = 'braket:CreateQuantumTask',
	GET_DEVICE = 'braket:GetDevice',
	GET_JOB = 'braket:GetJob',
	GET_QUANTUM_TASK = 'braket:GetQuantumTask',
	LIST_TAGS_FOR_RESOURCE = 'braket:ListTagsForResource',
	SEARCH_DEVICES = 'braket:SearchDevices',
	SEARCH_JOBS = 'braket:SearchJobs',
	SEARCH_QUANTUM_TASKS = 'braket:SearchQuantumTasks',
	TAG_RESOURCE = 'braket:TagResource',
	UNTAG_RESOURCE = 'braket:UntagResource',
}
export enum IOT_DEVICE_TESTER {
	CHECK_VERSION = 'iot-device-tester:CheckVersion',
	DOWNLOAD_TEST_SUITE = 'iot-device-tester:DownloadTestSuite',
	LATEST_IDT = 'iot-device-tester:LatestIdt',
	SEND_METRICS = 'iot-device-tester:SendMetrics',
	SUPPORTED_VERSION = 'iot-device-tester:SupportedVersion',
}
export enum DATABASE_MIGRATION_SERVICE {
	ADD_TAGS_TO_RESOURCE = 'dms:AddTagsToResource',
	APPLY_PENDING_MAINTENANCE_ACTION = 'dms:ApplyPendingMaintenanceAction',
	ASSOCIATE_EXTENSION_PACK = 'dms:AssociateExtensionPack',
	CANCEL_METADATA_MODEL_ASSESSMENT = 'dms:CancelMetadataModelAssessment',
	CANCEL_METADATA_MODEL_CONVERSION = 'dms:CancelMetadataModelConversion',
	CANCEL_METADATA_MODEL_EXPORT = 'dms:CancelMetadataModelExport',
	CANCEL_REPLICATION_TASK_ASSESSMENT_RUN = 'dms:CancelReplicationTaskAssessmentRun',
	CREATE_DATA_PROVIDER = 'dms:CreateDataProvider',
	CREATE_ENDPOINT = 'dms:CreateEndpoint',
	CREATE_EVENT_SUBSCRIPTION = 'dms:CreateEventSubscription',
	CREATE_INSTANCE_PROFILE = 'dms:CreateInstanceProfile',
	CREATE_MIGRATION_PROJECT = 'dms:CreateMigrationProject',
	CREATE_REPLICATION_INSTANCE = 'dms:CreateReplicationInstance',
	CREATE_REPLICATION_SUBNET_GROUP = 'dms:CreateReplicationSubnetGroup',
	CREATE_REPLICATION_TASK = 'dms:CreateReplicationTask',
	DELETE_CERTIFICATE = 'dms:DeleteCertificate',
	DELETE_CONNECTION = 'dms:DeleteConnection',
	DELETE_DATA_PROVIDER = 'dms:DeleteDataProvider',
	DELETE_ENDPOINT = 'dms:DeleteEndpoint',
	DELETE_EVENT_SUBSCRIPTION = 'dms:DeleteEventSubscription',
	DELETE_INSTANCE_PROFILE = 'dms:DeleteInstanceProfile',
	DELETE_MIGRATION_PROJECT = 'dms:DeleteMigrationProject',
	DELETE_REPLICATION_INSTANCE = 'dms:DeleteReplicationInstance',
	DELETE_REPLICATION_SUBNET_GROUP = 'dms:DeleteReplicationSubnetGroup',
	DELETE_REPLICATION_TASK = 'dms:DeleteReplicationTask',
	DELETE_REPLICATION_TASK_ASSESSMENT_RUN = 'dms:DeleteReplicationTaskAssessmentRun',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'dms:DescribeAccountAttributes',
	DESCRIBE_APPLICABLE_INDIVIDUAL_ASSESSMENTS = 'dms:DescribeApplicableIndividualAssessments',
	DESCRIBE_CERTIFICATES = 'dms:DescribeCertificates',
	DESCRIBE_CONNECTIONS = 'dms:DescribeConnections',
	DESCRIBE_ENDPOINT_SETTINGS = 'dms:DescribeEndpointSettings',
	DESCRIBE_ENDPOINT_TYPES = 'dms:DescribeEndpointTypes',
	DESCRIBE_ENDPOINTS = 'dms:DescribeEndpoints',
	DESCRIBE_EVENT_CATEGORIES = 'dms:DescribeEventCategories',
	DESCRIBE_EVENT_SUBSCRIPTIONS = 'dms:DescribeEventSubscriptions',
	DESCRIBE_EVENTS = 'dms:DescribeEvents',
	DESCRIBE_ORDERABLE_REPLICATION_INSTANCES = 'dms:DescribeOrderableReplicationInstances',
	DESCRIBE_PENDING_MAINTENANCE_ACTIONS = 'dms:DescribePendingMaintenanceActions',
	DESCRIBE_REFRESH_SCHEMAS_STATUS = 'dms:DescribeRefreshSchemasStatus',
	DESCRIBE_REPLICATION_INSTANCE_TASK_LOGS = 'dms:DescribeReplicationInstanceTaskLogs',
	DESCRIBE_REPLICATION_INSTANCES = 'dms:DescribeReplicationInstances',
	DESCRIBE_REPLICATION_SUBNET_GROUPS = 'dms:DescribeReplicationSubnetGroups',
	DESCRIBE_REPLICATION_TASK_ASSESSMENT_RESULTS = 'dms:DescribeReplicationTaskAssessmentResults',
	DESCRIBE_REPLICATION_TASK_ASSESSMENT_RUNS = 'dms:DescribeReplicationTaskAssessmentRuns',
	DESCRIBE_REPLICATION_TASK_INDIVIDUAL_ASSESSMENTS = 'dms:DescribeReplicationTaskIndividualAssessments',
	DESCRIBE_REPLICATION_TASKS = 'dms:DescribeReplicationTasks',
	DESCRIBE_SCHEMAS = 'dms:DescribeSchemas',
	DESCRIBE_TABLE_STATISTICS = 'dms:DescribeTableStatistics',
	DISASSOCIATE_EXTENSION_PACK = 'dms:DisassociateExtensionPack',
	EXPORT_METADATA_MODEL_ASSESSMENT = 'dms:ExportMetadataModelAssessment',
	GET_METADATA_MODEL = 'dms:GetMetadataModel',
	IMPORT_CERTIFICATE = 'dms:ImportCertificate',
	LIST_DATA_PROVIDERS = 'dms:ListDataProviders',
	LIST_EXTENSION_PACKS = 'dms:ListExtensionPacks',
	LIST_INSTANCE_PROFILES = 'dms:ListInstanceProfiles',
	LIST_METADATA_MODEL_ASSESSMENT_ACTION_ITEMS = 'dms:ListMetadataModelAssessmentActionItems',
	LIST_METADATA_MODEL_ASSESSMENTS = 'dms:ListMetadataModelAssessments',
	LIST_METADATA_MODEL_CONVERSIONS = 'dms:ListMetadataModelConversions',
	LIST_METADATA_MODEL_EXPORTS = 'dms:ListMetadataModelExports',
	LIST_MIGRATION_PROJECTS = 'dms:ListMigrationProjects',
	LIST_TAGS_FOR_RESOURCE = 'dms:ListTagsForResource',
	MODIFY_ENDPOINT = 'dms:ModifyEndpoint',
	MODIFY_EVENT_SUBSCRIPTION = 'dms:ModifyEventSubscription',
	MODIFY_REPLICATION_INSTANCE = 'dms:ModifyReplicationInstance',
	MODIFY_REPLICATION_SUBNET_GROUP = 'dms:ModifyReplicationSubnetGroup',
	MODIFY_REPLICATION_TASK = 'dms:ModifyReplicationTask',
	MOVE_REPLICATION_TASK = 'dms:MoveReplicationTask',
	REBOOT_REPLICATION_INSTANCE = 'dms:RebootReplicationInstance',
	REFRESH_SCHEMAS = 'dms:RefreshSchemas',
	RELOAD_TABLES = 'dms:ReloadTables',
	REMOVE_TAGS_FROM_RESOURCE = 'dms:RemoveTagsFromResource',
	START_METADATA_MODEL_ASSESSMENT = 'dms:StartMetadataModelAssessment',
	START_METADATA_MODEL_CONVERSION = 'dms:StartMetadataModelConversion',
	START_METADATA_MODEL_EXPORT_AS_SCRIPTS = 'dms:StartMetadataModelExportAsScripts',
	START_METADATA_MODEL_EXPORT_TO_TARGET = 'dms:StartMetadataModelExportToTarget',
	START_METADATA_MODEL_IMPORT = 'dms:StartMetadataModelImport',
	START_REPLICATION_TASK = 'dms:StartReplicationTask',
	START_REPLICATION_TASK_ASSESSMENT = 'dms:StartReplicationTaskAssessment',
	START_REPLICATION_TASK_ASSESSMENT_RUN = 'dms:StartReplicationTaskAssessmentRun',
	STOP_REPLICATION_TASK = 'dms:StopReplicationTask',
	TEST_CONNECTION = 'dms:TestConnection',
	UPDATE_CONVERSION_CONFIGURATION = 'dms:UpdateConversionConfiguration',
	UPDATE_DATA_PROVIDER = 'dms:UpdateDataProvider',
	UPDATE_INSTANCE_PROFILE = 'dms:UpdateInstanceProfile',
	UPDATE_MIGRATION_PROJECT = 'dms:UpdateMigrationProject',
}
export enum SESSION_MANAGER_MESSAGE_GATEWAY_SERVICE {
	CREATE_CONTROL_CHANNEL = 'ssmmessages:CreateControlChannel',
	CREATE_DATA_CHANNEL = 'ssmmessages:CreateDataChannel',
	OPEN_CONTROL_CHANNEL = 'ssmmessages:OpenControlChannel',
	OPEN_DATA_CHANNEL = 'ssmmessages:OpenDataChannel',
}
export enum NETWORK_FIREWALL {
	ASSOCIATE_FIREWALL_POLICY = 'network-firewall:AssociateFirewallPolicy',
	ASSOCIATE_SUBNETS = 'network-firewall:AssociateSubnets',
	CREATE_FIREWALL = 'network-firewall:CreateFirewall',
	CREATE_FIREWALL_POLICY = 'network-firewall:CreateFirewallPolicy',
	CREATE_RULE_GROUP = 'network-firewall:CreateRuleGroup',
	DELETE_FIREWALL = 'network-firewall:DeleteFirewall',
	DELETE_FIREWALL_POLICY = 'network-firewall:DeleteFirewallPolicy',
	DELETE_RESOURCE_POLICY = 'network-firewall:DeleteResourcePolicy',
	DELETE_RULE_GROUP = 'network-firewall:DeleteRuleGroup',
	DESCRIBE_FIREWALL = 'network-firewall:DescribeFirewall',
	DESCRIBE_FIREWALL_POLICY = 'network-firewall:DescribeFirewallPolicy',
	DESCRIBE_LOGGING_CONFIGURATION = 'network-firewall:DescribeLoggingConfiguration',
	DESCRIBE_RESOURCE_POLICY = 'network-firewall:DescribeResourcePolicy',
	DESCRIBE_RULE_GROUP = 'network-firewall:DescribeRuleGroup',
	DESCRIBE_RULE_GROUP_METADATA = 'network-firewall:DescribeRuleGroupMetadata',
	DISASSOCIATE_SUBNETS = 'network-firewall:DisassociateSubnets',
	LIST_FIREWALL_POLICIES = 'network-firewall:ListFirewallPolicies',
	LIST_FIREWALLS = 'network-firewall:ListFirewalls',
	LIST_RULE_GROUPS = 'network-firewall:ListRuleGroups',
	LIST_TAGS_FOR_RESOURCE = 'network-firewall:ListTagsForResource',
	PUT_RESOURCE_POLICY = 'network-firewall:PutResourcePolicy',
	TAG_RESOURCE = 'network-firewall:TagResource',
	UNTAG_RESOURCE = 'network-firewall:UntagResource',
	UPDATE_FIREWALL_DELETE_PROTECTION = 'network-firewall:UpdateFirewallDeleteProtection',
	UPDATE_FIREWALL_DESCRIPTION = 'network-firewall:UpdateFirewallDescription',
	UPDATE_FIREWALL_ENCRYPTION_CONFIGURATION = 'network-firewall:UpdateFirewallEncryptionConfiguration',
	UPDATE_FIREWALL_POLICY = 'network-firewall:UpdateFirewallPolicy',
	UPDATE_FIREWALL_POLICY_CHANGE_PROTECTION = 'network-firewall:UpdateFirewallPolicyChangeProtection',
	UPDATE_LOGGING_CONFIGURATION = 'network-firewall:UpdateLoggingConfiguration',
	UPDATE_RULE_GROUP = 'network-firewall:UpdateRuleGroup',
	UPDATE_SUBNET_CHANGE_PROTECTION = 'network-firewall:UpdateSubnetChangeProtection',
}
export enum BILLING_ {
	LIST_BILLING_VIEWS = 'billing:ListBillingViews',
}
export enum ARTIFACT {
	ACCEPT_AGREEMENT = 'artifact:AcceptAgreement',
	DOWNLOAD_AGREEMENT = 'artifact:DownloadAgreement',
	GET = 'artifact:Get',
	GET_REPORT = 'artifact:GetReport',
	GET_REPORT_METADATA = 'artifact:GetReportMetadata',
	GET_TERM_FOR_REPORT = 'artifact:GetTermForReport',
	LIST_REPORTS = 'artifact:ListReports',
	TERMINATE_AGREEMENT = 'artifact:TerminateAgreement',
}
export enum SYSTEMS_MANAGER_INCIDENT_MANAGER_CONTACTS {
	ACCEPT_PAGE = 'ssm-contacts:AcceptPage',
	ACTIVATE_CONTACT_CHANNEL = 'ssm-contacts:ActivateContactChannel',
	ASSOCIATE_CONTACT = 'ssm-contacts:AssociateContact',
	CREATE_CONTACT = 'ssm-contacts:CreateContact',
	CREATE_CONTACT_CHANNEL = 'ssm-contacts:CreateContactChannel',
	DEACTIVATE_CONTACT_CHANNEL = 'ssm-contacts:DeactivateContactChannel',
	DELETE_CONTACT = 'ssm-contacts:DeleteContact',
	DELETE_CONTACT_CHANNEL = 'ssm-contacts:DeleteContactChannel',
	DESCRIBE_ENGAGEMENT = 'ssm-contacts:DescribeEngagement',
	DESCRIBE_PAGE = 'ssm-contacts:DescribePage',
	GET_CONTACT = 'ssm-contacts:GetContact',
	GET_CONTACT_CHANNEL = 'ssm-contacts:GetContactChannel',
	GET_CONTACT_POLICY = 'ssm-contacts:GetContactPolicy',
	LIST_CONTACT_CHANNELS = 'ssm-contacts:ListContactChannels',
	LIST_CONTACTS = 'ssm-contacts:ListContacts',
	LIST_ENGAGEMENTS = 'ssm-contacts:ListEngagements',
	LIST_PAGE_RECEIPTS = 'ssm-contacts:ListPageReceipts',
	LIST_PAGES_BY_CONTACT = 'ssm-contacts:ListPagesByContact',
	LIST_PAGES_BY_ENGAGEMENT = 'ssm-contacts:ListPagesByEngagement',
	LIST_TAGS_FOR_RESOURCE = 'ssm-contacts:ListTagsForResource',
	PUT_CONTACT_POLICY = 'ssm-contacts:PutContactPolicy',
	SEND_ACTIVATION_CODE = 'ssm-contacts:SendActivationCode',
	START_ENGAGEMENT = 'ssm-contacts:StartEngagement',
	STOP_ENGAGEMENT = 'ssm-contacts:StopEngagement',
	TAG_RESOURCE = 'ssm-contacts:TagResource',
	UNTAG_RESOURCE = 'ssm-contacts:UntagResource',
	UPDATE_CONTACT = 'ssm-contacts:UpdateContact',
	UPDATE_CONTACT_CHANNEL = 'ssm-contacts:UpdateContactChannel',
}
export enum TRANSCRIBE {
	CREATE_CALL_ANALYTICS_CATEGORY = 'transcribe:CreateCallAnalyticsCategory',
	CREATE_LANGUAGE_MODEL = 'transcribe:CreateLanguageModel',
	CREATE_MEDICAL_VOCABULARY = 'transcribe:CreateMedicalVocabulary',
	CREATE_VOCABULARY = 'transcribe:CreateVocabulary',
	CREATE_VOCABULARY_FILTER = 'transcribe:CreateVocabularyFilter',
	DELETE_CALL_ANALYTICS_CATEGORY = 'transcribe:DeleteCallAnalyticsCategory',
	DELETE_CALL_ANALYTICS_JOB = 'transcribe:DeleteCallAnalyticsJob',
	DELETE_LANGUAGE_MODEL = 'transcribe:DeleteLanguageModel',
	DELETE_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:DeleteMedicalTranscriptionJob',
	DELETE_MEDICAL_VOCABULARY = 'transcribe:DeleteMedicalVocabulary',
	DELETE_TRANSCRIPTION_JOB = 'transcribe:DeleteTranscriptionJob',
	DELETE_VOCABULARY = 'transcribe:DeleteVocabulary',
	DELETE_VOCABULARY_FILTER = 'transcribe:DeleteVocabularyFilter',
	DESCRIBE_LANGUAGE_MODEL = 'transcribe:DescribeLanguageModel',
	GET_CALL_ANALYTICS_CATEGORY = 'transcribe:GetCallAnalyticsCategory',
	GET_CALL_ANALYTICS_JOB = 'transcribe:GetCallAnalyticsJob',
	GET_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:GetMedicalTranscriptionJob',
	GET_MEDICAL_VOCABULARY = 'transcribe:GetMedicalVocabulary',
	GET_TRANSCRIPTION_JOB = 'transcribe:GetTranscriptionJob',
	GET_VOCABULARY = 'transcribe:GetVocabulary',
	GET_VOCABULARY_FILTER = 'transcribe:GetVocabularyFilter',
	LIST_CALL_ANALYTICS_CATEGORIES = 'transcribe:ListCallAnalyticsCategories',
	LIST_CALL_ANALYTICS_JOBS = 'transcribe:ListCallAnalyticsJobs',
	LIST_LANGUAGE_MODELS = 'transcribe:ListLanguageModels',
	LIST_MEDICAL_TRANSCRIPTION_JOBS = 'transcribe:ListMedicalTranscriptionJobs',
	LIST_MEDICAL_VOCABULARIES = 'transcribe:ListMedicalVocabularies',
	LIST_TAGS_FOR_RESOURCE = 'transcribe:ListTagsForResource',
	LIST_TRANSCRIPTION_JOBS = 'transcribe:ListTranscriptionJobs',
	LIST_VOCABULARIES = 'transcribe:ListVocabularies',
	LIST_VOCABULARY_FILTERS = 'transcribe:ListVocabularyFilters',
	START_CALL_ANALYTICS_JOB = 'transcribe:StartCallAnalyticsJob',
	START_CALL_ANALYTICS_STREAM_TRANSCRIPTION = 'transcribe:StartCallAnalyticsStreamTranscription',
	START_CALL_ANALYTICS_STREAM_TRANSCRIPTION_WEB_SOCKET = 'transcribe:StartCallAnalyticsStreamTranscriptionWebSocket',
	START_MEDICAL_STREAM_TRANSCRIPTION = 'transcribe:StartMedicalStreamTranscription',
	START_MEDICAL_STREAM_TRANSCRIPTION_WEB_SOCKET = 'transcribe:StartMedicalStreamTranscriptionWebSocket',
	START_MEDICAL_TRANSCRIPTION_JOB = 'transcribe:StartMedicalTranscriptionJob',
	START_STREAM_TRANSCRIPTION = 'transcribe:StartStreamTranscription',
	START_STREAM_TRANSCRIPTION_WEB_SOCKET = 'transcribe:StartStreamTranscriptionWebSocket',
	START_TRANSCRIPTION_JOB = 'transcribe:StartTranscriptionJob',
	TAG_RESOURCE = 'transcribe:TagResource',
	UNTAG_RESOURCE = 'transcribe:UntagResource',
	UPDATE_CALL_ANALYTICS_CATEGORY = 'transcribe:UpdateCallAnalyticsCategory',
	UPDATE_MEDICAL_VOCABULARY = 'transcribe:UpdateMedicalVocabulary',
	UPDATE_VOCABULARY = 'transcribe:UpdateVocabulary',
	UPDATE_VOCABULARY_FILTER = 'transcribe:UpdateVocabularyFilter',
}
export enum IQ_PERMISSIONS {
	APPROVE_ACCESS_GRANT = 'iq-permission:ApproveAccessGrant',
}
export enum ELEMENTAL_MEDIAPACKAGE_VOD {
	CONFIGURE_LOGS = 'mediapackage-vod:ConfigureLogs',
	CREATE_ASSET = 'mediapackage-vod:CreateAsset',
	CREATE_PACKAGING_CONFIGURATION = 'mediapackage-vod:CreatePackagingConfiguration',
	CREATE_PACKAGING_GROUP = 'mediapackage-vod:CreatePackagingGroup',
	DELETE_ASSET = 'mediapackage-vod:DeleteAsset',
	DELETE_PACKAGING_CONFIGURATION = 'mediapackage-vod:DeletePackagingConfiguration',
	DELETE_PACKAGING_GROUP = 'mediapackage-vod:DeletePackagingGroup',
	DESCRIBE_ASSET = 'mediapackage-vod:DescribeAsset',
	DESCRIBE_PACKAGING_CONFIGURATION = 'mediapackage-vod:DescribePackagingConfiguration',
	DESCRIBE_PACKAGING_GROUP = 'mediapackage-vod:DescribePackagingGroup',
	LIST_ASSETS = 'mediapackage-vod:ListAssets',
	LIST_PACKAGING_CONFIGURATIONS = 'mediapackage-vod:ListPackagingConfigurations',
	LIST_PACKAGING_GROUPS = 'mediapackage-vod:ListPackagingGroups',
	LIST_TAGS_FOR_RESOURCE = 'mediapackage-vod:ListTagsForResource',
	TAG_RESOURCE = 'mediapackage-vod:TagResource',
	UNTAG_RESOURCE = 'mediapackage-vod:UntagResource',
	UPDATE_PACKAGING_GROUP = 'mediapackage-vod:UpdatePackagingGroup',
}
export enum DEVICE_FARM {
	CREATE_DEVICE_POOL = 'devicefarm:CreateDevicePool',
	CREATE_INSTANCE_PROFILE = 'devicefarm:CreateInstanceProfile',
	CREATE_NETWORK_PROFILE = 'devicefarm:CreateNetworkProfile',
	CREATE_PROJECT = 'devicefarm:CreateProject',
	CREATE_REMOTE_ACCESS_SESSION = 'devicefarm:CreateRemoteAccessSession',
	CREATE_TEST_GRID_PROJECT = 'devicefarm:CreateTestGridProject',
	CREATE_TEST_GRID_URL = 'devicefarm:CreateTestGridUrl',
	CREATE_UPLOAD = 'devicefarm:CreateUpload',
	CREATE_VPCE_CONFIGURATION = 'devicefarm:CreateVPCEConfiguration',
	DELETE_DEVICE_POOL = 'devicefarm:DeleteDevicePool',
	DELETE_INSTANCE_PROFILE = 'devicefarm:DeleteInstanceProfile',
	DELETE_NETWORK_PROFILE = 'devicefarm:DeleteNetworkProfile',
	DELETE_PROJECT = 'devicefarm:DeleteProject',
	DELETE_REMOTE_ACCESS_SESSION = 'devicefarm:DeleteRemoteAccessSession',
	DELETE_RUN = 'devicefarm:DeleteRun',
	DELETE_TEST_GRID_PROJECT = 'devicefarm:DeleteTestGridProject',
	DELETE_UPLOAD = 'devicefarm:DeleteUpload',
	DELETE_VPCE_CONFIGURATION = 'devicefarm:DeleteVPCEConfiguration',
	GET_ACCOUNT_SETTINGS = 'devicefarm:GetAccountSettings',
	GET_DEVICE = 'devicefarm:GetDevice',
	GET_DEVICE_INSTANCE = 'devicefarm:GetDeviceInstance',
	GET_DEVICE_POOL = 'devicefarm:GetDevicePool',
	GET_DEVICE_POOL_COMPATIBILITY = 'devicefarm:GetDevicePoolCompatibility',
	GET_INSTANCE_PROFILE = 'devicefarm:GetInstanceProfile',
	GET_JOB = 'devicefarm:GetJob',
	GET_NETWORK_PROFILE = 'devicefarm:GetNetworkProfile',
	GET_OFFERING_STATUS = 'devicefarm:GetOfferingStatus',
	GET_PROJECT = 'devicefarm:GetProject',
	GET_REMOTE_ACCESS_SESSION = 'devicefarm:GetRemoteAccessSession',
	GET_RUN = 'devicefarm:GetRun',
	GET_SUITE = 'devicefarm:GetSuite',
	GET_TEST = 'devicefarm:GetTest',
	GET_TEST_GRID_PROJECT = 'devicefarm:GetTestGridProject',
	GET_TEST_GRID_SESSION = 'devicefarm:GetTestGridSession',
	GET_UPLOAD = 'devicefarm:GetUpload',
	GET_VPCE_CONFIGURATION = 'devicefarm:GetVPCEConfiguration',
	INSTALL_TO_REMOTE_ACCESS_SESSION = 'devicefarm:InstallToRemoteAccessSession',
	LIST_ARTIFACTS = 'devicefarm:ListArtifacts',
	LIST_DEVICE_INSTANCES = 'devicefarm:ListDeviceInstances',
	LIST_DEVICE_POOLS = 'devicefarm:ListDevicePools',
	LIST_DEVICES = 'devicefarm:ListDevices',
	LIST_INSTANCE_PROFILES = 'devicefarm:ListInstanceProfiles',
	LIST_JOBS = 'devicefarm:ListJobs',
	LIST_NETWORK_PROFILES = 'devicefarm:ListNetworkProfiles',
	LIST_OFFERING_PROMOTIONS = 'devicefarm:ListOfferingPromotions',
	LIST_OFFERING_TRANSACTIONS = 'devicefarm:ListOfferingTransactions',
	LIST_OFFERINGS = 'devicefarm:ListOfferings',
	LIST_PROJECTS = 'devicefarm:ListProjects',
	LIST_REMOTE_ACCESS_SESSIONS = 'devicefarm:ListRemoteAccessSessions',
	LIST_RUNS = 'devicefarm:ListRuns',
	LIST_SAMPLES = 'devicefarm:ListSamples',
	LIST_SUITES = 'devicefarm:ListSuites',
	LIST_TAGS_FOR_RESOURCE = 'devicefarm:ListTagsForResource',
	LIST_TEST_GRID_PROJECTS = 'devicefarm:ListTestGridProjects',
	LIST_TEST_GRID_SESSION_ACTIONS = 'devicefarm:ListTestGridSessionActions',
	LIST_TEST_GRID_SESSION_ARTIFACTS = 'devicefarm:ListTestGridSessionArtifacts',
	LIST_TEST_GRID_SESSIONS = 'devicefarm:ListTestGridSessions',
	LIST_TESTS = 'devicefarm:ListTests',
	LIST_UNIQUE_PROBLEMS = 'devicefarm:ListUniqueProblems',
	LIST_UPLOADS = 'devicefarm:ListUploads',
	LIST_VPCE_CONFIGURATIONS = 'devicefarm:ListVPCEConfigurations',
	PURCHASE_OFFERING = 'devicefarm:PurchaseOffering',
	RENEW_OFFERING = 'devicefarm:RenewOffering',
	SCHEDULE_RUN = 'devicefarm:ScheduleRun',
	STOP_JOB = 'devicefarm:StopJob',
	STOP_REMOTE_ACCESS_SESSION = 'devicefarm:StopRemoteAccessSession',
	STOP_RUN = 'devicefarm:StopRun',
	TAG_RESOURCE = 'devicefarm:TagResource',
	UNTAG_RESOURCE = 'devicefarm:UntagResource',
	UPDATE_DEVICE_INSTANCE = 'devicefarm:UpdateDeviceInstance',
	UPDATE_DEVICE_POOL = 'devicefarm:UpdateDevicePool',
	UPDATE_INSTANCE_PROFILE = 'devicefarm:UpdateInstanceProfile',
	UPDATE_NETWORK_PROFILE = 'devicefarm:UpdateNetworkProfile',
	UPDATE_PROJECT = 'devicefarm:UpdateProject',
	UPDATE_TEST_GRID_PROJECT = 'devicefarm:UpdateTestGridProject',
	UPDATE_UPLOAD = 'devicefarm:UpdateUpload',
	UPDATE_VPCE_CONFIGURATION = 'devicefarm:UpdateVPCEConfiguration',
}
export enum GROUND_STATION {
	CANCEL_CONTACT = 'groundstation:CancelContact',
	CREATE_CONFIG = 'groundstation:CreateConfig',
	CREATE_DATAFLOW_ENDPOINT_GROUP = 'groundstation:CreateDataflowEndpointGroup',
	CREATE_MISSION_PROFILE = 'groundstation:CreateMissionProfile',
	DELETE_CONFIG = 'groundstation:DeleteConfig',
	DELETE_DATAFLOW_ENDPOINT_GROUP = 'groundstation:DeleteDataflowEndpointGroup',
	DELETE_MISSION_PROFILE = 'groundstation:DeleteMissionProfile',
	DESCRIBE_CONTACT = 'groundstation:DescribeContact',
	GET_CONFIG = 'groundstation:GetConfig',
	GET_DATAFLOW_ENDPOINT_GROUP = 'groundstation:GetDataflowEndpointGroup',
	GET_MINUTE_USAGE = 'groundstation:GetMinuteUsage',
	GET_MISSION_PROFILE = 'groundstation:GetMissionProfile',
	GET_SATELLITE = 'groundstation:GetSatellite',
	LIST_CONFIGS = 'groundstation:ListConfigs',
	LIST_CONTACTS = 'groundstation:ListContacts',
	LIST_DATAFLOW_ENDPOINT_GROUPS = 'groundstation:ListDataflowEndpointGroups',
	LIST_GROUND_STATIONS = 'groundstation:ListGroundStations',
	LIST_MISSION_PROFILES = 'groundstation:ListMissionProfiles',
	LIST_SATELLITES = 'groundstation:ListSatellites',
	LIST_TAGS_FOR_RESOURCE = 'groundstation:ListTagsForResource',
	RESERVE_CONTACT = 'groundstation:ReserveContact',
	TAG_RESOURCE = 'groundstation:TagResource',
	UNTAG_RESOURCE = 'groundstation:UntagResource',
	UPDATE_CONFIG = 'groundstation:UpdateConfig',
	UPDATE_MISSION_PROFILE = 'groundstation:UpdateMissionProfile',
}
export enum DEVOPS_GURU {
	ADD_NOTIFICATION_CHANNEL = 'devops-guru:AddNotificationChannel',
	DELETE_INSIGHT = 'devops-guru:DeleteInsight',
	DESCRIBE_ACCOUNT_HEALTH = 'devops-guru:DescribeAccountHealth',
	DESCRIBE_ACCOUNT_OVERVIEW = 'devops-guru:DescribeAccountOverview',
	DESCRIBE_ANOMALY = 'devops-guru:DescribeAnomaly',
	DESCRIBE_EVENT_SOURCES_CONFIG = 'devops-guru:DescribeEventSourcesConfig',
	DESCRIBE_FEEDBACK = 'devops-guru:DescribeFeedback',
	DESCRIBE_INSIGHT = 'devops-guru:DescribeInsight',
	DESCRIBE_ORGANIZATION_HEALTH = 'devops-guru:DescribeOrganizationHealth',
	DESCRIBE_ORGANIZATION_OVERVIEW = 'devops-guru:DescribeOrganizationOverview',
	DESCRIBE_ORGANIZATION_RESOURCE_COLLECTION_HEALTH = 'devops-guru:DescribeOrganizationResourceCollectionHealth',
	DESCRIBE_RESOURCE_COLLECTION_HEALTH = 'devops-guru:DescribeResourceCollectionHealth',
	DESCRIBE_SERVICE_INTEGRATION = 'devops-guru:DescribeServiceIntegration',
	GET_COST_ESTIMATION = 'devops-guru:GetCostEstimation',
	GET_RESOURCE_COLLECTION = 'devops-guru:GetResourceCollection',
	LIST_ANOMALIES_FOR_INSIGHT = 'devops-guru:ListAnomaliesForInsight',
	LIST_ANOMALOUS_LOG_GROUPS = 'devops-guru:ListAnomalousLogGroups',
	LIST_EVENTS = 'devops-guru:ListEvents',
	LIST_INSIGHTS = 'devops-guru:ListInsights',
	LIST_MONITORED_RESOURCES = 'devops-guru:ListMonitoredResources',
	LIST_NOTIFICATION_CHANNELS = 'devops-guru:ListNotificationChannels',
	LIST_ORGANIZATION_INSIGHTS = 'devops-guru:ListOrganizationInsights',
	LIST_RECOMMENDATIONS = 'devops-guru:ListRecommendations',
	PUT_FEEDBACK = 'devops-guru:PutFeedback',
	REMOVE_NOTIFICATION_CHANNEL = 'devops-guru:RemoveNotificationChannel',
	SEARCH_INSIGHTS = 'devops-guru:SearchInsights',
	SEARCH_ORGANIZATION_INSIGHTS = 'devops-guru:SearchOrganizationInsights',
	START_COST_ESTIMATION = 'devops-guru:StartCostEstimation',
	UPDATE_EVENT_SOURCES_CONFIG = 'devops-guru:UpdateEventSourcesConfig',
	UPDATE_RESOURCE_COLLECTION = 'devops-guru:UpdateResourceCollection',
	UPDATE_SERVICE_INTEGRATION = 'devops-guru:UpdateServiceIntegration',
}
export enum SIGNER {
	ADD_PROFILE_PERMISSION = 'signer:AddProfilePermission',
	CANCEL_SIGNING_PROFILE = 'signer:CancelSigningProfile',
	DESCRIBE_SIGNING_JOB = 'signer:DescribeSigningJob',
	GET_SIGNING_PLATFORM = 'signer:GetSigningPlatform',
	GET_SIGNING_PROFILE = 'signer:GetSigningProfile',
	LIST_PROFILE_PERMISSIONS = 'signer:ListProfilePermissions',
	LIST_SIGNING_JOBS = 'signer:ListSigningJobs',
	LIST_SIGNING_PLATFORMS = 'signer:ListSigningPlatforms',
	LIST_SIGNING_PROFILES = 'signer:ListSigningProfiles',
	LIST_TAGS_FOR_RESOURCE = 'signer:ListTagsForResource',
	PUT_SIGNING_PROFILE = 'signer:PutSigningProfile',
	REMOVE_PROFILE_PERMISSION = 'signer:RemoveProfilePermission',
	REVOKE_SIGNATURE = 'signer:RevokeSignature',
	REVOKE_SIGNING_PROFILE = 'signer:RevokeSigningProfile',
	START_SIGNING_JOB = 'signer:StartSigningJob',
	TAG_RESOURCE = 'signer:TagResource',
	UNTAG_RESOURCE = 'signer:UntagResource',
}
export enum PURCHASE_ORDERS_CONSOLE {
	MODIFY_PURCHASE_ORDERS = 'purchase-orders:ModifyPurchaseOrders',
	VIEW_PURCHASE_ORDERS = 'purchase-orders:ViewPurchaseOrders',
}
export enum OPENSEARCH_SERVERLESS {
	BATCH_GET_COLLECTION = 'aoss:BatchGetCollection',
	BATCH_GET_VPC_ENDPOINT = 'aoss:BatchGetVpcEndpoint',
	CREATE_ACCESS_POLICY = 'aoss:CreateAccessPolicy',
	CREATE_COLLECTION = 'aoss:CreateCollection',
	CREATE_SECURITY_CONFIG = 'aoss:CreateSecurityConfig',
	CREATE_SECURITY_POLICY = 'aoss:CreateSecurityPolicy',
	CREATE_VPC_ENDPOINT = 'aoss:CreateVpcEndpoint',
	DELETE_ACCESS_POLICY = 'aoss:DeleteAccessPolicy',
	DELETE_COLLECTION = 'aoss:DeleteCollection',
	DELETE_SECURITY_CONFIG = 'aoss:DeleteSecurityConfig',
	DELETE_SECURITY_POLICY = 'aoss:DeleteSecurityPolicy',
	DELETE_VPC_ENDPOINT = 'aoss:DeleteVpcEndpoint',
	GET_ACCESS_POLICY = 'aoss:GetAccessPolicy',
	GET_ACCOUNT_SETTINGS = 'aoss:GetAccountSettings',
	GET_POLICIES_STATS = 'aoss:GetPoliciesStats',
	GET_SECURITY_CONFIG = 'aoss:GetSecurityConfig',
	GET_SECURITY_POLICY = 'aoss:GetSecurityPolicy',
	LIST_ACCESS_POLICIES = 'aoss:ListAccessPolicies',
	LIST_COLLECTIONS = 'aoss:ListCollections',
	LIST_SECURITY_CONFIGS = 'aoss:ListSecurityConfigs',
	LIST_SECURITY_POLICIES = 'aoss:ListSecurityPolicies',
	LIST_TAGS_FOR_RESOURCE = 'aoss:ListTagsForResource',
	LIST_VPC_ENDPOINTS = 'aoss:ListVpcEndpoints',
	TAG_RESOURCE = 'aoss:TagResource',
	UNTAG_RESOURCE = 'aoss:UntagResource',
	UPDATE_ACCESS_POLICY = 'aoss:UpdateAccessPolicy',
	UPDATE_ACCOUNT_SETTINGS = 'aoss:UpdateAccountSettings',
	UPDATE_COLLECTION = 'aoss:UpdateCollection',
	UPDATE_SECURITY_CONFIG = 'aoss:UpdateSecurityConfig',
	UPDATE_SECURITY_POLICY = 'aoss:UpdateSecurityPolicy',
	UPDATE_VPC_ENDPOINT = 'aoss:UpdateVpcEndpoint',
}
export enum RESOURCE_GROUPS {
	CREATE_GROUP = 'resource-groups:CreateGroup',
	DELETE_GROUP = 'resource-groups:DeleteGroup',
	GET_GROUP = 'resource-groups:GetGroup',
	GET_GROUP_CONFIGURATION = 'resource-groups:GetGroupConfiguration',
	GET_GROUP_QUERY = 'resource-groups:GetGroupQuery',
	GET_TAGS = 'resource-groups:GetTags',
	GROUP_RESOURCES = 'resource-groups:GroupResources',
	LIST_GROUP_RESOURCES = 'resource-groups:ListGroupResources',
	LIST_GROUPS = 'resource-groups:ListGroups',
	PUT_GROUP_CONFIGURATION = 'resource-groups:PutGroupConfiguration',
	PUT_GROUP_POLICY = 'resource-groups:PutGroupPolicy',
	SEARCH_RESOURCES = 'resource-groups:SearchResources',
	TAG = 'resource-groups:Tag',
	UNGROUP_RESOURCES = 'resource-groups:UngroupResources',
	UNTAG = 'resource-groups:Untag',
	UPDATE_GROUP = 'resource-groups:UpdateGroup',
	UPDATE_GROUP_QUERY = 'resource-groups:UpdateGroupQuery',
}
export enum HONEYCODE {
	APPROVE_TEAM_ASSOCIATION = 'honeycode:ApproveTeamAssociation',
	BATCH_CREATE_TABLE_ROWS = 'honeycode:BatchCreateTableRows',
	BATCH_DELETE_TABLE_ROWS = 'honeycode:BatchDeleteTableRows',
	BATCH_UPDATE_TABLE_ROWS = 'honeycode:BatchUpdateTableRows',
	BATCH_UPSERT_TABLE_ROWS = 'honeycode:BatchUpsertTableRows',
	CREATE_TEAM = 'honeycode:CreateTeam',
	CREATE_TENANT = 'honeycode:CreateTenant',
	DELETE_DOMAINS = 'honeycode:DeleteDomains',
	DEREGISTER_GROUPS = 'honeycode:DeregisterGroups',
	DESCRIBE_TABLE_DATA_IMPORT_JOB = 'honeycode:DescribeTableDataImportJob',
	DESCRIBE_TEAM = 'honeycode:DescribeTeam',
	GET_SCREEN_DATA = 'honeycode:GetScreenData',
	INVOKE_SCREEN_AUTOMATION = 'honeycode:InvokeScreenAutomation',
	LIST_DOMAINS = 'honeycode:ListDomains',
	LIST_GROUPS = 'honeycode:ListGroups',
	LIST_TABLE_COLUMNS = 'honeycode:ListTableColumns',
	LIST_TABLE_ROWS = 'honeycode:ListTableRows',
	LIST_TABLES = 'honeycode:ListTables',
	LIST_TAGS_FOR_RESOURCE = 'honeycode:ListTagsForResource',
	LIST_TEAM_ASSOCIATIONS = 'honeycode:ListTeamAssociations',
	LIST_TENANTS = 'honeycode:ListTenants',
	QUERY_TABLE_ROWS = 'honeycode:QueryTableRows',
	REGISTER_DOMAIN_FOR_VERIFICATION = 'honeycode:RegisterDomainForVerification',
	REGISTER_GROUPS = 'honeycode:RegisterGroups',
	REJECT_TEAM_ASSOCIATION = 'honeycode:RejectTeamAssociation',
	RESTART_DOMAIN_VERIFICATION = 'honeycode:RestartDomainVerification',
	START_TABLE_DATA_IMPORT_JOB = 'honeycode:StartTableDataImportJob',
	TAG_RESOURCE = 'honeycode:TagResource',
	UNTAG_RESOURCE = 'honeycode:UntagResource',
	UPDATE_TEAM = 'honeycode:UpdateTeam',
}
export enum SUPPORT_PLANS {
	GET_SUPPORT_PLAN = 'supportplans:GetSupportPlan',
	GET_SUPPORT_PLAN_UPDATE_STATUS = 'supportplans:GetSupportPlanUpdateStatus',
	START_SUPPORT_PLAN_UPDATE = 'supportplans:StartSupportPlanUpdate',
}
export enum IQ {
	CREATE_PROJECT = 'iq:CreateProject',
}
export enum AMPLIFY_UI_BUILDER {
	CREATE_COMPONENT = 'amplifyuibuilder:CreateComponent',
	CREATE_FORM = 'amplifyuibuilder:CreateForm',
	CREATE_THEME = 'amplifyuibuilder:CreateTheme',
	DELETE_COMPONENT = 'amplifyuibuilder:DeleteComponent',
	DELETE_FORM = 'amplifyuibuilder:DeleteForm',
	DELETE_THEME = 'amplifyuibuilder:DeleteTheme',
	EXPORT_COMPONENTS = 'amplifyuibuilder:ExportComponents',
	EXPORT_FORMS = 'amplifyuibuilder:ExportForms',
	EXPORT_THEMES = 'amplifyuibuilder:ExportThemes',
	GET_COMPONENT = 'amplifyuibuilder:GetComponent',
	GET_FORM = 'amplifyuibuilder:GetForm',
	GET_METADATA = 'amplifyuibuilder:GetMetadata',
	GET_THEME = 'amplifyuibuilder:GetTheme',
	LIST_COMPONENTS = 'amplifyuibuilder:ListComponents',
	LIST_FORMS = 'amplifyuibuilder:ListForms',
	LIST_THEMES = 'amplifyuibuilder:ListThemes',
	PUT_METADATA_FLAG = 'amplifyuibuilder:PutMetadataFlag',
	RESET_METADATA_FLAG = 'amplifyuibuilder:ResetMetadataFlag',
	UPDATE_COMPONENT = 'amplifyuibuilder:UpdateComponent',
	UPDATE_FORM = 'amplifyuibuilder:UpdateForm',
	UPDATE_THEME = 'amplifyuibuilder:UpdateTheme',
}
export enum WORKSPACES_WEB {
	ASSOCIATE_BROWSER_SETTINGS = 'workspaces-web:AssociateBrowserSettings',
	ASSOCIATE_NETWORK_SETTINGS = 'workspaces-web:AssociateNetworkSettings',
	ASSOCIATE_TRUST_STORE = 'workspaces-web:AssociateTrustStore',
	ASSOCIATE_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:AssociateUserAccessLoggingSettings',
	ASSOCIATE_USER_SETTINGS = 'workspaces-web:AssociateUserSettings',
	CREATE_BROWSER_SETTINGS = 'workspaces-web:CreateBrowserSettings',
	CREATE_IDENTITY_PROVIDER = 'workspaces-web:CreateIdentityProvider',
	CREATE_NETWORK_SETTINGS = 'workspaces-web:CreateNetworkSettings',
	CREATE_PORTAL = 'workspaces-web:CreatePortal',
	CREATE_TRUST_STORE = 'workspaces-web:CreateTrustStore',
	CREATE_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:CreateUserAccessLoggingSettings',
	CREATE_USER_SETTINGS = 'workspaces-web:CreateUserSettings',
	DELETE_BROWSER_SETTINGS = 'workspaces-web:DeleteBrowserSettings',
	DELETE_IDENTITY_PROVIDER = 'workspaces-web:DeleteIdentityProvider',
	DELETE_NETWORK_SETTINGS = 'workspaces-web:DeleteNetworkSettings',
	DELETE_PORTAL = 'workspaces-web:DeletePortal',
	DELETE_TRUST_STORE = 'workspaces-web:DeleteTrustStore',
	DELETE_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:DeleteUserAccessLoggingSettings',
	DELETE_USER_SETTINGS = 'workspaces-web:DeleteUserSettings',
	DISASSOCIATE_BROWSER_SETTINGS = 'workspaces-web:DisassociateBrowserSettings',
	DISASSOCIATE_NETWORK_SETTINGS = 'workspaces-web:DisassociateNetworkSettings',
	DISASSOCIATE_TRUST_STORE = 'workspaces-web:DisassociateTrustStore',
	DISASSOCIATE_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:DisassociateUserAccessLoggingSettings',
	DISASSOCIATE_USER_SETTINGS = 'workspaces-web:DisassociateUserSettings',
	GET_BROWSER_SETTINGS = 'workspaces-web:GetBrowserSettings',
	GET_IDENTITY_PROVIDER = 'workspaces-web:GetIdentityProvider',
	GET_NETWORK_SETTINGS = 'workspaces-web:GetNetworkSettings',
	GET_PORTAL = 'workspaces-web:GetPortal',
	GET_PORTAL_SERVICE_PROVIDER_METADATA = 'workspaces-web:GetPortalServiceProviderMetadata',
	GET_TRUST_STORE = 'workspaces-web:GetTrustStore',
	GET_TRUST_STORE_CERTIFICATE = 'workspaces-web:GetTrustStoreCertificate',
	GET_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:GetUserAccessLoggingSettings',
	GET_USER_SETTINGS = 'workspaces-web:GetUserSettings',
	LIST_BROWSER_SETTINGS = 'workspaces-web:ListBrowserSettings',
	LIST_IDENTITY_PROVIDERS = 'workspaces-web:ListIdentityProviders',
	LIST_NETWORK_SETTINGS = 'workspaces-web:ListNetworkSettings',
	LIST_PORTALS = 'workspaces-web:ListPortals',
	LIST_TAGS_FOR_RESOURCE = 'workspaces-web:ListTagsForResource',
	LIST_TRUST_STORE_CERTIFICATES = 'workspaces-web:ListTrustStoreCertificates',
	LIST_TRUST_STORES = 'workspaces-web:ListTrustStores',
	LIST_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:ListUserAccessLoggingSettings',
	LIST_USER_SETTINGS = 'workspaces-web:ListUserSettings',
	TAG_RESOURCE = 'workspaces-web:TagResource',
	UNTAG_RESOURCE = 'workspaces-web:UntagResource',
	UPDATE_BROWSER_SETTINGS = 'workspaces-web:UpdateBrowserSettings',
	UPDATE_IDENTITY_PROVIDER = 'workspaces-web:UpdateIdentityProvider',
	UPDATE_NETWORK_SETTINGS = 'workspaces-web:UpdateNetworkSettings',
	UPDATE_PORTAL = 'workspaces-web:UpdatePortal',
	UPDATE_TRUST_STORE = 'workspaces-web:UpdateTrustStore',
	UPDATE_USER_ACCESS_LOGGING_SETTINGS = 'workspaces-web:UpdateUserAccessLoggingSettings',
	UPDATE_USER_SETTINGS = 'workspaces-web:UpdateUserSettings',
}
export enum ELASTIC_CONTAINER_REGISTRY_PUBLIC {
	BATCH_CHECK_LAYER_AVAILABILITY = 'ecr-public:BatchCheckLayerAvailability',
	BATCH_DELETE_IMAGE = 'ecr-public:BatchDeleteImage',
	COMPLETE_LAYER_UPLOAD = 'ecr-public:CompleteLayerUpload',
	CREATE_REPOSITORY = 'ecr-public:CreateRepository',
	DELETE_REPOSITORY = 'ecr-public:DeleteRepository',
	DELETE_REPOSITORY_POLICY = 'ecr-public:DeleteRepositoryPolicy',
	DESCRIBE_IMAGE_TAGS = 'ecr-public:DescribeImageTags',
	DESCRIBE_IMAGES = 'ecr-public:DescribeImages',
	DESCRIBE_REGISTRIES = 'ecr-public:DescribeRegistries',
	DESCRIBE_REPOSITORIES = 'ecr-public:DescribeRepositories',
	GET_AUTHORIZATION_TOKEN = 'ecr-public:GetAuthorizationToken',
	GET_REGISTRY_CATALOG_DATA = 'ecr-public:GetRegistryCatalogData',
	GET_REPOSITORY_CATALOG_DATA = 'ecr-public:GetRepositoryCatalogData',
	GET_REPOSITORY_POLICY = 'ecr-public:GetRepositoryPolicy',
	INITIATE_LAYER_UPLOAD = 'ecr-public:InitiateLayerUpload',
	LIST_TAGS_FOR_RESOURCE = 'ecr-public:ListTagsForResource',
	PUT_IMAGE = 'ecr-public:PutImage',
	PUT_REGISTRY_CATALOG_DATA = 'ecr-public:PutRegistryCatalogData',
	PUT_REPOSITORY_CATALOG_DATA = 'ecr-public:PutRepositoryCatalogData',
	SET_REPOSITORY_POLICY = 'ecr-public:SetRepositoryPolicy',
	TAG_RESOURCE = 'ecr-public:TagResource',
	UNTAG_RESOURCE = 'ecr-public:UntagResource',
	UPLOAD_LAYER_PART = 'ecr-public:UploadLayerPart',
}
export enum SNOW_DEVICE_MANAGEMENT {
	CANCEL_TASK = 'snow-device-management:CancelTask',
	CREATE_TASK = 'snow-device-management:CreateTask',
	DESCRIBE_DEVICE = 'snow-device-management:DescribeDevice',
	DESCRIBE_DEVICE_EC_2_INSTANCES = 'snow-device-management:DescribeDeviceEc2Instances',
	DESCRIBE_EXECUTION = 'snow-device-management:DescribeExecution',
	DESCRIBE_TASK = 'snow-device-management:DescribeTask',
	LIST_DEVICE_RESOURCES = 'snow-device-management:ListDeviceResources',
	LIST_DEVICES = 'snow-device-management:ListDevices',
	LIST_EXECUTIONS = 'snow-device-management:ListExecutions',
	LIST_TAGS_FOR_RESOURCE = 'snow-device-management:ListTagsForResource',
	LIST_TASKS = 'snow-device-management:ListTasks',
	TAG_RESOURCE = 'snow-device-management:TagResource',
	UNTAG_RESOURCE = 'snow-device-management:UntagResource',
}
export enum API_GATEWAY_MANAGEMENT_V2 {
	DELETE = 'apigateway:DELETE',
	GET = 'apigateway:GET',
	PATCH = 'apigateway:PATCH',
	POST = 'apigateway:POST',
	PUT = 'apigateway:PUT',
}
export enum API_GATEWAY_MANAGEMENT {
	ADD_CERTIFICATE_TO_DOMAIN = 'apigateway:AddCertificateToDomain',
	DELETE = 'apigateway:DELETE',
	GET = 'apigateway:GET',
	PATCH = 'apigateway:PATCH',
	POST = 'apigateway:POST',
	PUT = 'apigateway:PUT',
	REMOVE_CERTIFICATE_FROM_DOMAIN = 'apigateway:RemoveCertificateFromDomain',
	SET_WEB_ACL = 'apigateway:SetWebACL',
	UPDATE_REST_API_POLICY = 'apigateway:UpdateRestApiPolicy',
}
export enum APACHE_KAFKA_APIS_FOR_MSK_CLUSTERS {
	ALTER_CLUSTER = 'kafka-cluster:AlterCluster',
	ALTER_CLUSTER_DYNAMIC_CONFIGURATION = 'kafka-cluster:AlterClusterDynamicConfiguration',
	ALTER_GROUP = 'kafka-cluster:AlterGroup',
	ALTER_TOPIC = 'kafka-cluster:AlterTopic',
	ALTER_TOPIC_DYNAMIC_CONFIGURATION = 'kafka-cluster:AlterTopicDynamicConfiguration',
	ALTER_TRANSACTIONAL_ID = 'kafka-cluster:AlterTransactionalId',
	CONNECT = 'kafka-cluster:Connect',
	CREATE_TOPIC = 'kafka-cluster:CreateTopic',
	DELETE_GROUP = 'kafka-cluster:DeleteGroup',
	DELETE_TOPIC = 'kafka-cluster:DeleteTopic',
	DESCRIBE_CLUSTER = 'kafka-cluster:DescribeCluster',
	DESCRIBE_CLUSTER_DYNAMIC_CONFIGURATION = 'kafka-cluster:DescribeClusterDynamicConfiguration',
	DESCRIBE_GROUP = 'kafka-cluster:DescribeGroup',
	DESCRIBE_TOPIC = 'kafka-cluster:DescribeTopic',
	DESCRIBE_TOPIC_DYNAMIC_CONFIGURATION = 'kafka-cluster:DescribeTopicDynamicConfiguration',
	DESCRIBE_TRANSACTIONAL_ID = 'kafka-cluster:DescribeTransactionalId',
	READ_DATA = 'kafka-cluster:ReadData',
	WRITE_DATA = 'kafka-cluster:WriteData',
	WRITE_DATA_IDEMPOTENTLY = 'kafka-cluster:WriteDataIdempotently',
}
export enum IDENTITY_AND_ACCESS_MANAGEMENT_ROLES_ANYWHERE {
	CREATE_PROFILE = 'rolesanywhere:CreateProfile',
	CREATE_TRUST_ANCHOR = 'rolesanywhere:CreateTrustAnchor',
	DELETE_CRL = 'rolesanywhere:DeleteCrl',
	DELETE_PROFILE = 'rolesanywhere:DeleteProfile',
	DELETE_TRUST_ANCHOR = 'rolesanywhere:DeleteTrustAnchor',
	DISABLE_CRL = 'rolesanywhere:DisableCrl',
	DISABLE_PROFILE = 'rolesanywhere:DisableProfile',
	DISABLE_TRUST_ANCHOR = 'rolesanywhere:DisableTrustAnchor',
	ENABLE_CRL = 'rolesanywhere:EnableCrl',
	ENABLE_PROFILE = 'rolesanywhere:EnableProfile',
	ENABLE_TRUST_ANCHOR = 'rolesanywhere:EnableTrustAnchor',
	GET_CRL = 'rolesanywhere:GetCrl',
	GET_PROFILE = 'rolesanywhere:GetProfile',
	GET_SUBJECT = 'rolesanywhere:GetSubject',
	GET_TRUST_ANCHOR = 'rolesanywhere:GetTrustAnchor',
	IMPORT_CRL = 'rolesanywhere:ImportCrl',
	LIST_CRLS = 'rolesanywhere:ListCrls',
	LIST_PROFILES = 'rolesanywhere:ListProfiles',
	LIST_SUBJECTS = 'rolesanywhere:ListSubjects',
	LIST_TAGS_FOR_RESOURCE = 'rolesanywhere:ListTagsForResource',
	LIST_TRUST_ANCHORS = 'rolesanywhere:ListTrustAnchors',
	TAG_RESOURCE = 'rolesanywhere:TagResource',
	UNTAG_RESOURCE = 'rolesanywhere:UntagResource',
	UPDATE_CRL = 'rolesanywhere:UpdateCrl',
	UPDATE_PROFILE = 'rolesanywhere:UpdateProfile',
	UPDATE_TRUST_ANCHOR = 'rolesanywhere:UpdateTrustAnchor',
}
export enum CODEWHISPERER {
	CREATE_PROFILE = 'codewhisperer:CreateProfile',
	GENERATE_RECOMMENDATIONS = 'codewhisperer:GenerateRecommendations',
	LIST_PROFILES = 'codewhisperer:ListProfiles',
	UPDATE_PROFILE = 'codewhisperer:UpdateProfile',
}
export enum ELEMENTAL_APPLIANCES_AND_SOFTWARE_ACTIVATION_SERVICE {
	COMPLETE_ACCOUNT_REGISTRATION = 'elemental-activations:CompleteAccountRegistration',
	COMPLETE_FILE_UPLOAD = 'elemental-activations:CompleteFileUpload',
	DOWNLOAD_SOFTWARE = 'elemental-activations:DownloadSoftware',
	GENERATE_LICENSES = 'elemental-activations:GenerateLicenses',
	GET_ACTIVATION = 'elemental-activations:GetActivation',
	LIST_TAGS_FOR_RESOURCE = 'elemental-activations:ListTagsForResource',
	START_ACCOUNT_REGISTRATION = 'elemental-activations:StartAccountRegistration',
	START_FILE_UPLOAD = 'elemental-activations:StartFileUpload',
	TAG_RESOURCE = 'elemental-activations:TagResource',
	UNTAG_RESOURCE = 'elemental-activations:UntagResource',
}
export enum MANAGED_GRAFANA {
	ASSOCIATE_LICENSE = 'grafana:AssociateLicense',
	CREATE_WORKSPACE = 'grafana:CreateWorkspace',
	CREATE_WORKSPACE_API_KEY = 'grafana:CreateWorkspaceApiKey',
	DELETE_WORKSPACE = 'grafana:DeleteWorkspace',
	DELETE_WORKSPACE_API_KEY = 'grafana:DeleteWorkspaceApiKey',
	DESCRIBE_WORKSPACE = 'grafana:DescribeWorkspace',
	DESCRIBE_WORKSPACE_AUTHENTICATION = 'grafana:DescribeWorkspaceAuthentication',
	DISASSOCIATE_LICENSE = 'grafana:DisassociateLicense',
	LIST_PERMISSIONS = 'grafana:ListPermissions',
	LIST_TAGS_FOR_RESOURCE = 'grafana:ListTagsForResource',
	LIST_WORKSPACES = 'grafana:ListWorkspaces',
	TAG_RESOURCE = 'grafana:TagResource',
	UNTAG_RESOURCE = 'grafana:UntagResource',
	UPDATE_PERMISSIONS = 'grafana:UpdatePermissions',
	UPDATE_WORKSPACE = 'grafana:UpdateWorkspace',
	UPDATE_WORKSPACE_AUTHENTICATION = 'grafana:UpdateWorkspaceAuthentication',
}
export enum APP_MESH {
	CREATE_GATEWAY_ROUTE = 'appmesh:CreateGatewayRoute',
	CREATE_MESH = 'appmesh:CreateMesh',
	CREATE_ROUTE = 'appmesh:CreateRoute',
	CREATE_VIRTUAL_GATEWAY = 'appmesh:CreateVirtualGateway',
	CREATE_VIRTUAL_NODE = 'appmesh:CreateVirtualNode',
	CREATE_VIRTUAL_ROUTER = 'appmesh:CreateVirtualRouter',
	CREATE_VIRTUAL_SERVICE = 'appmesh:CreateVirtualService',
	DELETE_GATEWAY_ROUTE = 'appmesh:DeleteGatewayRoute',
	DELETE_MESH = 'appmesh:DeleteMesh',
	DELETE_ROUTE = 'appmesh:DeleteRoute',
	DELETE_VIRTUAL_GATEWAY = 'appmesh:DeleteVirtualGateway',
	DELETE_VIRTUAL_NODE = 'appmesh:DeleteVirtualNode',
	DELETE_VIRTUAL_ROUTER = 'appmesh:DeleteVirtualRouter',
	DELETE_VIRTUAL_SERVICE = 'appmesh:DeleteVirtualService',
	DESCRIBE_GATEWAY_ROUTE = 'appmesh:DescribeGatewayRoute',
	DESCRIBE_MESH = 'appmesh:DescribeMesh',
	DESCRIBE_ROUTE = 'appmesh:DescribeRoute',
	DESCRIBE_VIRTUAL_GATEWAY = 'appmesh:DescribeVirtualGateway',
	DESCRIBE_VIRTUAL_NODE = 'appmesh:DescribeVirtualNode',
	DESCRIBE_VIRTUAL_ROUTER = 'appmesh:DescribeVirtualRouter',
	DESCRIBE_VIRTUAL_SERVICE = 'appmesh:DescribeVirtualService',
	LIST_GATEWAY_ROUTES = 'appmesh:ListGatewayRoutes',
	LIST_MESHES = 'appmesh:ListMeshes',
	LIST_ROUTES = 'appmesh:ListRoutes',
	LIST_TAGS_FOR_RESOURCE = 'appmesh:ListTagsForResource',
	LIST_VIRTUAL_GATEWAYS = 'appmesh:ListVirtualGateways',
	LIST_VIRTUAL_NODES = 'appmesh:ListVirtualNodes',
	LIST_VIRTUAL_ROUTERS = 'appmesh:ListVirtualRouters',
	LIST_VIRTUAL_SERVICES = 'appmesh:ListVirtualServices',
	STREAM_AGGREGATED_RESOURCES = 'appmesh:StreamAggregatedResources',
	TAG_RESOURCE = 'appmesh:TagResource',
	UNTAG_RESOURCE = 'appmesh:UntagResource',
	UPDATE_GATEWAY_ROUTE = 'appmesh:UpdateGatewayRoute',
	UPDATE_MESH = 'appmesh:UpdateMesh',
	UPDATE_ROUTE = 'appmesh:UpdateRoute',
	UPDATE_VIRTUAL_GATEWAY = 'appmesh:UpdateVirtualGateway',
	UPDATE_VIRTUAL_NODE = 'appmesh:UpdateVirtualNode',
	UPDATE_VIRTUAL_ROUTER = 'appmesh:UpdateVirtualRouter',
	UPDATE_VIRTUAL_SERVICE = 'appmesh:UpdateVirtualService',
}
export enum DATABASE_QUERY_METADATA_SERVICE {
	CREATE_FAVORITE_QUERY = 'dbqms:CreateFavoriteQuery',
	CREATE_QUERY_HISTORY = 'dbqms:CreateQueryHistory',
	CREATE_TAB = 'dbqms:CreateTab',
	DELETE_FAVORITE_QUERIES = 'dbqms:DeleteFavoriteQueries',
	DELETE_QUERY_HISTORY = 'dbqms:DeleteQueryHistory',
	DELETE_TAB = 'dbqms:DeleteTab',
	DESCRIBE_FAVORITE_QUERIES = 'dbqms:DescribeFavoriteQueries',
	DESCRIBE_QUERY_HISTORY = 'dbqms:DescribeQueryHistory',
	DESCRIBE_TABS = 'dbqms:DescribeTabs',
	GET_QUERY_STRING = 'dbqms:GetQueryString',
	UPDATE_FAVORITE_QUERY = 'dbqms:UpdateFavoriteQuery',
	UPDATE_QUERY_HISTORY = 'dbqms:UpdateQueryHistory',
	UPDATE_TAB = 'dbqms:UpdateTab',
}
export enum MANAGED_STREAMING_FOR_APACHE_KAFKA {
	BATCH_ASSOCIATE_SCRAM_SECRET = 'kafka:BatchAssociateScramSecret',
	BATCH_DISASSOCIATE_SCRAM_SECRET = 'kafka:BatchDisassociateScramSecret',
	CREATE_CLUSTER = 'kafka:CreateCluster',
	CREATE_CLUSTER_V_2 = 'kafka:CreateClusterV2',
	CREATE_CONFIGURATION = 'kafka:CreateConfiguration',
	DELETE_CLUSTER = 'kafka:DeleteCluster',
	DELETE_CONFIGURATION = 'kafka:DeleteConfiguration',
	DESCRIBE_CLUSTER = 'kafka:DescribeCluster',
	DESCRIBE_CLUSTER_OPERATION = 'kafka:DescribeClusterOperation',
	DESCRIBE_CLUSTER_V_2 = 'kafka:DescribeClusterV2',
	DESCRIBE_CONFIGURATION = 'kafka:DescribeConfiguration',
	DESCRIBE_CONFIGURATION_REVISION = 'kafka:DescribeConfigurationRevision',
	GET_BOOTSTRAP_BROKERS = 'kafka:GetBootstrapBrokers',
	GET_COMPATIBLE_KAFKA_VERSIONS = 'kafka:GetCompatibleKafkaVersions',
	LIST_CLUSTER_OPERATIONS = 'kafka:ListClusterOperations',
	LIST_CLUSTERS = 'kafka:ListClusters',
	LIST_CLUSTERS_V_2 = 'kafka:ListClustersV2',
	LIST_CONFIGURATION_REVISIONS = 'kafka:ListConfigurationRevisions',
	LIST_CONFIGURATIONS = 'kafka:ListConfigurations',
	LIST_KAFKA_VERSIONS = 'kafka:ListKafkaVersions',
	LIST_NODES = 'kafka:ListNodes',
	LIST_SCRAM_SECRETS = 'kafka:ListScramSecrets',
	LIST_TAGS_FOR_RESOURCE = 'kafka:ListTagsForResource',
	REBOOT_BROKER = 'kafka:RebootBroker',
	TAG_RESOURCE = 'kafka:TagResource',
	UNTAG_RESOURCE = 'kafka:UntagResource',
	UPDATE_BROKER_COUNT = 'kafka:UpdateBrokerCount',
	UPDATE_BROKER_STORAGE = 'kafka:UpdateBrokerStorage',
	UPDATE_BROKER_TYPE = 'kafka:UpdateBrokerType',
	UPDATE_CLUSTER_CONFIGURATION = 'kafka:UpdateClusterConfiguration',
	UPDATE_CLUSTER_KAFKA_VERSION = 'kafka:UpdateClusterKafkaVersion',
	UPDATE_CONFIGURATION = 'kafka:UpdateConfiguration',
	UPDATE_CONNECTIVITY = 'kafka:UpdateConnectivity',
	UPDATE_MONITORING = 'kafka:UpdateMonitoring',
	UPDATE_SECURITY = 'kafka:UpdateSecurity',
	UPDATE_STORAGE = 'kafka:UpdateStorage',
}
export enum CODEGURU_REVIEWER {
	ASSOCIATE_REPOSITORY = 'codeguru-reviewer:AssociateRepository',
	CREATE_CODE_REVIEW = 'codeguru-reviewer:CreateCodeReview',
	CREATE_CONNECTION_TOKEN = 'codeguru-reviewer:CreateConnectionToken',
	DESCRIBE_CODE_REVIEW = 'codeguru-reviewer:DescribeCodeReview',
	DESCRIBE_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:DescribeRecommendationFeedback',
	DESCRIBE_REPOSITORY_ASSOCIATION = 'codeguru-reviewer:DescribeRepositoryAssociation',
	DISASSOCIATE_REPOSITORY = 'codeguru-reviewer:DisassociateRepository',
	GET_METRICS_DATA = 'codeguru-reviewer:GetMetricsData',
	LIST_CODE_REVIEWS = 'codeguru-reviewer:ListCodeReviews',
	LIST_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:ListRecommendationFeedback',
	LIST_RECOMMENDATIONS = 'codeguru-reviewer:ListRecommendations',
	LIST_REPOSITORY_ASSOCIATIONS = 'codeguru-reviewer:ListRepositoryAssociations',
	LIST_TAGS_FOR_RESOURCE = 'codeguru-reviewer:ListTagsForResource',
	LIST_THIRD_PARTY_REPOSITORIES = 'codeguru-reviewer:ListThirdPartyRepositories',
	PUT_RECOMMENDATION_FEEDBACK = 'codeguru-reviewer:PutRecommendationFeedback',
	TAG_RESOURCE = 'codeguru-reviewer:TagResource',
	UN_TAG_RESOURCE = 'codeguru-reviewer:UnTagResource',
}
export enum CODEDEPLOY_SECURE_HOST_COMMANDS_SERVICE {
	GET_DEPLOYMENT_SPECIFICATION = 'codedeploy-commands-secure:GetDeploymentSpecification',
	POLL_HOST_COMMAND = 'codedeploy-commands-secure:PollHostCommand',
	PUT_HOST_COMMAND_ACKNOWLEDGEMENT = 'codedeploy-commands-secure:PutHostCommandAcknowledgement',
	PUT_HOST_COMMAND_COMPLETE = 'codedeploy-commands-secure:PutHostCommandComplete',
}
export enum MEMORYDB {
	BATCH_UPDATE_CLUSTER = 'memorydb:BatchUpdateCluster',
	COPY_SNAPSHOT = 'memorydb:CopySnapshot',
	CREATE_ACL = 'memorydb:CreateAcl',
	CREATE_CLUSTER = 'memorydb:CreateCluster',
	CREATE_PARAMETER_GROUP = 'memorydb:CreateParameterGroup',
	CREATE_SNAPSHOT = 'memorydb:CreateSnapshot',
	CREATE_SUBNET_GROUP = 'memorydb:CreateSubnetGroup',
	CREATE_USER = 'memorydb:CreateUser',
	DELETE_ACL = 'memorydb:DeleteAcl',
	DELETE_CLUSTER = 'memorydb:DeleteCluster',
	DELETE_PARAMETER_GROUP = 'memorydb:DeleteParameterGroup',
	DELETE_SNAPSHOT = 'memorydb:DeleteSnapshot',
	DELETE_SUBNET_GROUP = 'memorydb:DeleteSubnetGroup',
	DELETE_USER = 'memorydb:DeleteUser',
	DESCRIBE_ACLS = 'memorydb:DescribeAcls',
	DESCRIBE_CLUSTERS = 'memorydb:DescribeClusters',
	DESCRIBE_ENGINE_VERSIONS = 'memorydb:DescribeEngineVersions',
	DESCRIBE_EVENTS = 'memorydb:DescribeEvents',
	DESCRIBE_PARAMETER_GROUPS = 'memorydb:DescribeParameterGroups',
	DESCRIBE_PARAMETERS = 'memorydb:DescribeParameters',
	DESCRIBE_RESERVED_NODES = 'memorydb:DescribeReservedNodes',
	DESCRIBE_RESERVED_NODES_OFFERINGS = 'memorydb:DescribeReservedNodesOfferings',
	DESCRIBE_SERVICE_UPDATES = 'memorydb:DescribeServiceUpdates',
	DESCRIBE_SNAPSHOTS = 'memorydb:DescribeSnapshots',
	DESCRIBE_SUBNET_GROUPS = 'memorydb:DescribeSubnetGroups',
	DESCRIBE_USERS = 'memorydb:DescribeUsers',
	FAILOVER_SHARD = 'memorydb:FailoverShard',
	LIST_ALLOWED_NODE_TYPE_UPDATES = 'memorydb:ListAllowedNodeTypeUpdates',
	LIST_TAGS = 'memorydb:ListTags',
	PURCHASE_RESERVED_NODES_OFFERING = 'memorydb:PurchaseReservedNodesOffering',
	RESET_PARAMETER_GROUP = 'memorydb:ResetParameterGroup',
	TAG_RESOURCE = 'memorydb:TagResource',
	UNTAG_RESOURCE = 'memorydb:UntagResource',
	UPDATE_ACL = 'memorydb:UpdateAcl',
	UPDATE_CLUSTER = 'memorydb:UpdateCluster',
	UPDATE_PARAMETER_GROUP = 'memorydb:UpdateParameterGroup',
	UPDATE_SUBNET_GROUP = 'memorydb:UpdateSubnetGroup',
	UPDATE_USER = 'memorydb:UpdateUser',
}
export enum PINPOINT_SMS_VOICE_V2 {
	ASSOCIATE_ORIGINATION_IDENTITY = 'sms-voice:AssociateOriginationIdentity',
	CREATE_CONFIGURATION_SET = 'sms-voice:CreateConfigurationSet',
	CREATE_EVENT_DESTINATION = 'sms-voice:CreateEventDestination',
	CREATE_OPT_OUT_LIST = 'sms-voice:CreateOptOutList',
	CREATE_POOL = 'sms-voice:CreatePool',
	DELETE_CONFIGURATION_SET = 'sms-voice:DeleteConfigurationSet',
	DELETE_DEFAULT_MESSAGE_TYPE = 'sms-voice:DeleteDefaultMessageType',
	DELETE_DEFAULT_SENDER_ID = 'sms-voice:DeleteDefaultSenderId',
	DELETE_EVENT_DESTINATION = 'sms-voice:DeleteEventDestination',
	DELETE_KEYWORD = 'sms-voice:DeleteKeyword',
	DELETE_OPT_OUT_LIST = 'sms-voice:DeleteOptOutList',
	DELETE_OPTED_OUT_NUMBER = 'sms-voice:DeleteOptedOutNumber',
	DELETE_POOL = 'sms-voice:DeletePool',
	DELETE_TEXT_MESSAGE_SPEND_LIMIT_OVERRIDE = 'sms-voice:DeleteTextMessageSpendLimitOverride',
	DELETE_VOICE_MESSAGE_SPEND_LIMIT_OVERRIDE = 'sms-voice:DeleteVoiceMessageSpendLimitOverride',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'sms-voice:DescribeAccountAttributes',
	DESCRIBE_ACCOUNT_LIMITS = 'sms-voice:DescribeAccountLimits',
	DESCRIBE_CONFIGURATION_SETS = 'sms-voice:DescribeConfigurationSets',
	DESCRIBE_KEYWORDS = 'sms-voice:DescribeKeywords',
	DESCRIBE_OPT_OUT_LISTS = 'sms-voice:DescribeOptOutLists',
	DESCRIBE_OPTED_OUT_NUMBERS = 'sms-voice:DescribeOptedOutNumbers',
	DESCRIBE_PHONE_NUMBERS = 'sms-voice:DescribePhoneNumbers',
	DESCRIBE_POOLS = 'sms-voice:DescribePools',
	DESCRIBE_SENDER_IDS = 'sms-voice:DescribeSenderIds',
	DESCRIBE_SPEND_LIMITS = 'sms-voice:DescribeSpendLimits',
	DISASSOCIATE_ORIGINATION_IDENTITY = 'sms-voice:DisassociateOriginationIdentity',
	LIST_POOL_ORIGINATION_IDENTITIES = 'sms-voice:ListPoolOriginationIdentities',
	LIST_TAGS_FOR_RESOURCE = 'sms-voice:ListTagsForResource',
	PUT_KEYWORD = 'sms-voice:PutKeyword',
	PUT_OPTED_OUT_NUMBER = 'sms-voice:PutOptedOutNumber',
	RELEASE_PHONE_NUMBER = 'sms-voice:ReleasePhoneNumber',
	REQUEST_PHONE_NUMBER = 'sms-voice:RequestPhoneNumber',
	SEND_TEXT_MESSAGE = 'sms-voice:SendTextMessage',
	SEND_VOICE_MESSAGE = 'sms-voice:SendVoiceMessage',
	SET_DEFAULT_MESSAGE_TYPE = 'sms-voice:SetDefaultMessageType',
	SET_DEFAULT_SENDER_ID = 'sms-voice:SetDefaultSenderId',
	SET_TEXT_MESSAGE_SPEND_LIMIT_OVERRIDE = 'sms-voice:SetTextMessageSpendLimitOverride',
	SET_VOICE_MESSAGE_SPEND_LIMIT_OVERRIDE = 'sms-voice:SetVoiceMessageSpendLimitOverride',
	TAG_RESOURCE = 'sms-voice:TagResource',
	UNTAG_RESOURCE = 'sms-voice:UntagResource',
	UPDATE_EVENT_DESTINATION = 'sms-voice:UpdateEventDestination',
	UPDATE_PHONE_NUMBER = 'sms-voice:UpdatePhoneNumber',
	UPDATE_POOL = 'sms-voice:UpdatePool',
}
export enum PINPOINT_SMS_AND_VOICE_SERVICE {
	CREATE_CONFIGURATION_SET = 'sms-voice:CreateConfigurationSet',
	CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:CreateConfigurationSetEventDestination',
	DELETE_CONFIGURATION_SET = 'sms-voice:DeleteConfigurationSet',
	DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:DeleteConfigurationSetEventDestination',
	GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'sms-voice:GetConfigurationSetEventDestinations',
	LIST_CONFIGURATION_SETS = 'sms-voice:ListConfigurationSets',
	SEND_VOICE_MESSAGE = 'sms-voice:SendVoiceMessage',
	UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'sms-voice:UpdateConfigurationSetEventDestination',
}
export enum SIMSPACE_WEAVER {
	DELETE_APP = 'simspaceweaver:DeleteApp',
	DELETE_SIMULATION = 'simspaceweaver:DeleteSimulation',
	DESCRIBE_APP = 'simspaceweaver:DescribeApp',
	DESCRIBE_SIMULATION = 'simspaceweaver:DescribeSimulation',
	LIST_APPS = 'simspaceweaver:ListApps',
	LIST_SIMULATIONS = 'simspaceweaver:ListSimulations',
	LIST_TAGS_FOR_RESOURCE = 'simspaceweaver:ListTagsForResource',
	START_APP = 'simspaceweaver:StartApp',
	START_CLOCK = 'simspaceweaver:StartClock',
	START_SIMULATION = 'simspaceweaver:StartSimulation',
	STOP_APP = 'simspaceweaver:StopApp',
	STOP_CLOCK = 'simspaceweaver:StopClock',
	STOP_SIMULATION = 'simspaceweaver:StopSimulation',
	TAG_RESOURCE = 'simspaceweaver:TagResource',
	UNTAG_RESOURCE = 'simspaceweaver:UntagResource',
}
export enum CLOUDWATCH {
	DELETE_ALARMS = 'cloudwatch:DeleteAlarms',
	DELETE_ANOMALY_DETECTOR = 'cloudwatch:DeleteAnomalyDetector',
	DELETE_DASHBOARDS = 'cloudwatch:DeleteDashboards',
	DELETE_INSIGHT_RULES = 'cloudwatch:DeleteInsightRules',
	DELETE_METRIC_STREAM = 'cloudwatch:DeleteMetricStream',
	DESCRIBE_ALARM_HISTORY = 'cloudwatch:DescribeAlarmHistory',
	DESCRIBE_ALARMS = 'cloudwatch:DescribeAlarms',
	DESCRIBE_ALARMS_FOR_METRIC = 'cloudwatch:DescribeAlarmsForMetric',
	DESCRIBE_ANOMALY_DETECTORS = 'cloudwatch:DescribeAnomalyDetectors',
	DESCRIBE_INSIGHT_RULES = 'cloudwatch:DescribeInsightRules',
	DISABLE_ALARM_ACTIONS = 'cloudwatch:DisableAlarmActions',
	DISABLE_INSIGHT_RULES = 'cloudwatch:DisableInsightRules',
	ENABLE_ALARM_ACTIONS = 'cloudwatch:EnableAlarmActions',
	ENABLE_INSIGHT_RULES = 'cloudwatch:EnableInsightRules',
	GET_DASHBOARD = 'cloudwatch:GetDashboard',
	GET_INSIGHT_RULE_REPORT = 'cloudwatch:GetInsightRuleReport',
	GET_METRIC_DATA = 'cloudwatch:GetMetricData',
	GET_METRIC_STATISTICS = 'cloudwatch:GetMetricStatistics',
	GET_METRIC_STREAM = 'cloudwatch:GetMetricStream',
	GET_METRIC_WIDGET_IMAGE = 'cloudwatch:GetMetricWidgetImage',
	LINK = 'cloudwatch:Link',
	LIST_DASHBOARDS = 'cloudwatch:ListDashboards',
	LIST_MANAGED_INSIGHT_RULES = 'cloudwatch:ListManagedInsightRules',
	LIST_METRIC_STREAMS = 'cloudwatch:ListMetricStreams',
	LIST_METRICS = 'cloudwatch:ListMetrics',
	LIST_TAGS_FOR_RESOURCE = 'cloudwatch:ListTagsForResource',
	PUT_ANOMALY_DETECTOR = 'cloudwatch:PutAnomalyDetector',
	PUT_COMPOSITE_ALARM = 'cloudwatch:PutCompositeAlarm',
	PUT_DASHBOARD = 'cloudwatch:PutDashboard',
	PUT_INSIGHT_RULE = 'cloudwatch:PutInsightRule',
	PUT_MANAGED_INSIGHT_RULES = 'cloudwatch:PutManagedInsightRules',
	PUT_METRIC_ALARM = 'cloudwatch:PutMetricAlarm',
	PUT_METRIC_DATA = 'cloudwatch:PutMetricData',
	PUT_METRIC_STREAM = 'cloudwatch:PutMetricStream',
	SET_ALARM_STATE = 'cloudwatch:SetAlarmState',
	START_METRIC_STREAMS = 'cloudwatch:StartMetricStreams',
	STOP_METRIC_STREAMS = 'cloudwatch:StopMetricStreams',
	TAG_RESOURCE = 'cloudwatch:TagResource',
	UNTAG_RESOURCE = 'cloudwatch:UntagResource',
}
export enum EC2_AUTO_SCALING {
	ATTACH_INSTANCES = 'autoscaling:AttachInstances',
	ATTACH_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:AttachLoadBalancerTargetGroups',
	ATTACH_LOAD_BALANCERS = 'autoscaling:AttachLoadBalancers',
	BATCH_DELETE_SCHEDULED_ACTION = 'autoscaling:BatchDeleteScheduledAction',
	BATCH_PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'autoscaling:BatchPutScheduledUpdateGroupAction',
	CANCEL_INSTANCE_REFRESH = 'autoscaling:CancelInstanceRefresh',
	COMPLETE_LIFECYCLE_ACTION = 'autoscaling:CompleteLifecycleAction',
	CREATE_AUTO_SCALING_GROUP = 'autoscaling:CreateAutoScalingGroup',
	CREATE_LAUNCH_CONFIGURATION = 'autoscaling:CreateLaunchConfiguration',
	CREATE_OR_UPDATE_TAGS = 'autoscaling:CreateOrUpdateTags',
	DELETE_AUTO_SCALING_GROUP = 'autoscaling:DeleteAutoScalingGroup',
	DELETE_LAUNCH_CONFIGURATION = 'autoscaling:DeleteLaunchConfiguration',
	DELETE_LIFECYCLE_HOOK = 'autoscaling:DeleteLifecycleHook',
	DELETE_NOTIFICATION_CONFIGURATION = 'autoscaling:DeleteNotificationConfiguration',
	DELETE_POLICY = 'autoscaling:DeletePolicy',
	DELETE_SCHEDULED_ACTION = 'autoscaling:DeleteScheduledAction',
	DELETE_TAGS = 'autoscaling:DeleteTags',
	DELETE_WARM_POOL = 'autoscaling:DeleteWarmPool',
	DESCRIBE_ACCOUNT_LIMITS = 'autoscaling:DescribeAccountLimits',
	DESCRIBE_ADJUSTMENT_TYPES = 'autoscaling:DescribeAdjustmentTypes',
	DESCRIBE_AUTO_SCALING_GROUPS = 'autoscaling:DescribeAutoScalingGroups',
	DESCRIBE_AUTO_SCALING_INSTANCES = 'autoscaling:DescribeAutoScalingInstances',
	DESCRIBE_AUTO_SCALING_NOTIFICATION_TYPES = 'autoscaling:DescribeAutoScalingNotificationTypes',
	DESCRIBE_INSTANCE_REFRESHES = 'autoscaling:DescribeInstanceRefreshes',
	DESCRIBE_LAUNCH_CONFIGURATIONS = 'autoscaling:DescribeLaunchConfigurations',
	DESCRIBE_LIFECYCLE_HOOK_TYPES = 'autoscaling:DescribeLifecycleHookTypes',
	DESCRIBE_LIFECYCLE_HOOKS = 'autoscaling:DescribeLifecycleHooks',
	DESCRIBE_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:DescribeLoadBalancerTargetGroups',
	DESCRIBE_LOAD_BALANCERS = 'autoscaling:DescribeLoadBalancers',
	DESCRIBE_METRIC_COLLECTION_TYPES = 'autoscaling:DescribeMetricCollectionTypes',
	DESCRIBE_NOTIFICATION_CONFIGURATIONS = 'autoscaling:DescribeNotificationConfigurations',
	DESCRIBE_POLICIES = 'autoscaling:DescribePolicies',
	DESCRIBE_SCALING_ACTIVITIES = 'autoscaling:DescribeScalingActivities',
	DESCRIBE_SCALING_PROCESS_TYPES = 'autoscaling:DescribeScalingProcessTypes',
	DESCRIBE_SCHEDULED_ACTIONS = 'autoscaling:DescribeScheduledActions',
	DESCRIBE_TAGS = 'autoscaling:DescribeTags',
	DESCRIBE_TERMINATION_POLICY_TYPES = 'autoscaling:DescribeTerminationPolicyTypes',
	DESCRIBE_WARM_POOL = 'autoscaling:DescribeWarmPool',
	DETACH_INSTANCES = 'autoscaling:DetachInstances',
	DETACH_LOAD_BALANCER_TARGET_GROUPS = 'autoscaling:DetachLoadBalancerTargetGroups',
	DETACH_LOAD_BALANCERS = 'autoscaling:DetachLoadBalancers',
	DISABLE_METRICS_COLLECTION = 'autoscaling:DisableMetricsCollection',
	ENABLE_METRICS_COLLECTION = 'autoscaling:EnableMetricsCollection',
	ENTER_STANDBY = 'autoscaling:EnterStandby',
	EXECUTE_POLICY = 'autoscaling:ExecutePolicy',
	EXIT_STANDBY = 'autoscaling:ExitStandby',
	GET_PREDICTIVE_SCALING_FORECAST = 'autoscaling:GetPredictiveScalingForecast',
	PUT_LIFECYCLE_HOOK = 'autoscaling:PutLifecycleHook',
	PUT_NOTIFICATION_CONFIGURATION = 'autoscaling:PutNotificationConfiguration',
	PUT_SCALING_POLICY = 'autoscaling:PutScalingPolicy',
	PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'autoscaling:PutScheduledUpdateGroupAction',
	PUT_WARM_POOL = 'autoscaling:PutWarmPool',
	RECORD_LIFECYCLE_ACTION_HEARTBEAT = 'autoscaling:RecordLifecycleActionHeartbeat',
	RESUME_PROCESSES = 'autoscaling:ResumeProcesses',
	SET_DESIRED_CAPACITY = 'autoscaling:SetDesiredCapacity',
	SET_INSTANCE_HEALTH = 'autoscaling:SetInstanceHealth',
	SET_INSTANCE_PROTECTION = 'autoscaling:SetInstanceProtection',
	START_INSTANCE_REFRESH = 'autoscaling:StartInstanceRefresh',
	SUSPEND_PROCESSES = 'autoscaling:SuspendProcesses',
	TERMINATE_INSTANCE_IN_AUTO_SCALING_GROUP = 'autoscaling:TerminateInstanceInAutoScalingGroup',
	UPDATE_AUTO_SCALING_GROUP = 'autoscaling:UpdateAutoScalingGroup',
}
export enum SNOWBALL {
	CANCEL_CLUSTER = 'snowball:CancelCluster',
	CANCEL_JOB = 'snowball:CancelJob',
	CREATE_ADDRESS = 'snowball:CreateAddress',
	CREATE_CLUSTER = 'snowball:CreateCluster',
	CREATE_JOB = 'snowball:CreateJob',
	CREATE_LONG_TERM_PRICING = 'snowball:CreateLongTermPricing',
	CREATE_RETURN_SHIPPING_LABEL = 'snowball:CreateReturnShippingLabel',
	DESCRIBE_ADDRESS = 'snowball:DescribeAddress',
	DESCRIBE_ADDRESSES = 'snowball:DescribeAddresses',
	DESCRIBE_CLUSTER = 'snowball:DescribeCluster',
	DESCRIBE_JOB = 'snowball:DescribeJob',
	DESCRIBE_RETURN_SHIPPING_LABEL = 'snowball:DescribeReturnShippingLabel',
	GET_JOB_MANIFEST = 'snowball:GetJobManifest',
	GET_JOB_UNLOCK_CODE = 'snowball:GetJobUnlockCode',
	GET_SNOWBALL_USAGE = 'snowball:GetSnowballUsage',
	GET_SOFTWARE_UPDATES = 'snowball:GetSoftwareUpdates',
	LIST_CLUSTER_JOBS = 'snowball:ListClusterJobs',
	LIST_CLUSTERS = 'snowball:ListClusters',
	LIST_COMPATIBLE_IMAGES = 'snowball:ListCompatibleImages',
	LIST_JOBS = 'snowball:ListJobs',
	LIST_LONG_TERM_PRICING = 'snowball:ListLongTermPricing',
	UPDATE_CLUSTER = 'snowball:UpdateCluster',
	UPDATE_JOB = 'snowball:UpdateJob',
	UPDATE_JOB_SHIPMENT_STATE = 'snowball:UpdateJobShipmentState',
	UPDATE_LONG_TERM_PRICING = 'snowball:UpdateLongTermPricing',
}
export enum SHIELD {
	ASSOCIATE_DRT_LOG_BUCKET = 'shield:AssociateDRTLogBucket',
	ASSOCIATE_DRT_ROLE = 'shield:AssociateDRTRole',
	ASSOCIATE_HEALTH_CHECK = 'shield:AssociateHealthCheck',
	ASSOCIATE_PROACTIVE_ENGAGEMENT_DETAILS = 'shield:AssociateProactiveEngagementDetails',
	CREATE_PROTECTION = 'shield:CreateProtection',
	CREATE_PROTECTION_GROUP = 'shield:CreateProtectionGroup',
	CREATE_SUBSCRIPTION = 'shield:CreateSubscription',
	DELETE_PROTECTION = 'shield:DeleteProtection',
	DELETE_PROTECTION_GROUP = 'shield:DeleteProtectionGroup',
	DELETE_SUBSCRIPTION = 'shield:DeleteSubscription',
	DESCRIBE_ATTACK = 'shield:DescribeAttack',
	DESCRIBE_ATTACK_STATISTICS = 'shield:DescribeAttackStatistics',
	DESCRIBE_DRT_ACCESS = 'shield:DescribeDRTAccess',
	DESCRIBE_EMERGENCY_CONTACT_SETTINGS = 'shield:DescribeEmergencyContactSettings',
	DESCRIBE_PROTECTION = 'shield:DescribeProtection',
	DESCRIBE_PROTECTION_GROUP = 'shield:DescribeProtectionGroup',
	DESCRIBE_SUBSCRIPTION = 'shield:DescribeSubscription',
	DISABLE_APPLICATION_LAYER_AUTOMATIC_RESPONSE = 'shield:DisableApplicationLayerAutomaticResponse',
	DISABLE_PROACTIVE_ENGAGEMENT = 'shield:DisableProactiveEngagement',
	DISASSOCIATE_DRT_LOG_BUCKET = 'shield:DisassociateDRTLogBucket',
	DISASSOCIATE_DRT_ROLE = 'shield:DisassociateDRTRole',
	DISASSOCIATE_HEALTH_CHECK = 'shield:DisassociateHealthCheck',
	ENABLE_APPLICATION_LAYER_AUTOMATIC_RESPONSE = 'shield:EnableApplicationLayerAutomaticResponse',
	ENABLE_PROACTIVE_ENGAGEMENT = 'shield:EnableProactiveEngagement',
	GET_SUBSCRIPTION_STATE = 'shield:GetSubscriptionState',
	LIST_ATTACKS = 'shield:ListAttacks',
	LIST_PROTECTION_GROUPS = 'shield:ListProtectionGroups',
	LIST_PROTECTIONS = 'shield:ListProtections',
	LIST_RESOURCES_IN_PROTECTION_GROUP = 'shield:ListResourcesInProtectionGroup',
	LIST_TAGS_FOR_RESOURCE = 'shield:ListTagsForResource',
	TAG_RESOURCE = 'shield:TagResource',
	UNTAG_RESOURCE = 'shield:UntagResource',
	UPDATE_APPLICATION_LAYER_AUTOMATIC_RESPONSE = 'shield:UpdateApplicationLayerAutomaticResponse',
	UPDATE_EMERGENCY_CONTACT_SETTINGS = 'shield:UpdateEmergencyContactSettings',
	UPDATE_PROTECTION_GROUP = 'shield:UpdateProtectionGroup',
	UPDATE_SUBSCRIPTION = 'shield:UpdateSubscription',
}
export enum IOT_TWINMAKER {
	BATCH_PUT_PROPERTY_VALUES = 'iottwinmaker:BatchPutPropertyValues',
	CREATE_COMPONENT_TYPE = 'iottwinmaker:CreateComponentType',
	CREATE_ENTITY = 'iottwinmaker:CreateEntity',
	CREATE_SCENE = 'iottwinmaker:CreateScene',
	CREATE_SYNC_JOB = 'iottwinmaker:CreateSyncJob',
	CREATE_WORKSPACE = 'iottwinmaker:CreateWorkspace',
	DELETE_COMPONENT_TYPE = 'iottwinmaker:DeleteComponentType',
	DELETE_ENTITY = 'iottwinmaker:DeleteEntity',
	DELETE_SCENE = 'iottwinmaker:DeleteScene',
	DELETE_SYNC_JOB = 'iottwinmaker:DeleteSyncJob',
	DELETE_WORKSPACE = 'iottwinmaker:DeleteWorkspace',
	EXECUTE_QUERY = 'iottwinmaker:ExecuteQuery',
	GET_COMPONENT_TYPE = 'iottwinmaker:GetComponentType',
	GET_ENTITY = 'iottwinmaker:GetEntity',
	GET_PRICING_PLAN = 'iottwinmaker:GetPricingPlan',
	GET_PROPERTY_VALUE = 'iottwinmaker:GetPropertyValue',
	GET_PROPERTY_VALUE_HISTORY = 'iottwinmaker:GetPropertyValueHistory',
	GET_SCENE = 'iottwinmaker:GetScene',
	GET_SYNC_JOB = 'iottwinmaker:GetSyncJob',
	GET_WORKSPACE = 'iottwinmaker:GetWorkspace',
	LIST_COMPONENT_TYPES = 'iottwinmaker:ListComponentTypes',
	LIST_ENTITIES = 'iottwinmaker:ListEntities',
	LIST_SCENES = 'iottwinmaker:ListScenes',
	LIST_SYNC_JOBS = 'iottwinmaker:ListSyncJobs',
	LIST_SYNC_RESOURCES = 'iottwinmaker:ListSyncResources',
	LIST_TAGS_FOR_RESOURCE = 'iottwinmaker:ListTagsForResource',
	LIST_WORKSPACES = 'iottwinmaker:ListWorkspaces',
	TAG_RESOURCE = 'iottwinmaker:TagResource',
	UNTAG_RESOURCE = 'iottwinmaker:UntagResource',
	UPDATE_COMPONENT_TYPE = 'iottwinmaker:UpdateComponentType',
	UPDATE_ENTITY = 'iottwinmaker:UpdateEntity',
	UPDATE_PRICING_PLAN = 'iottwinmaker:UpdatePricingPlan',
	UPDATE_SCENE = 'iottwinmaker:UpdateScene',
	UPDATE_WORKSPACE = 'iottwinmaker:UpdateWorkspace',
}
export enum SECRETS_MANAGER {
	CANCEL_ROTATE_SECRET = 'secretsmanager:CancelRotateSecret',
	CREATE_SECRET = 'secretsmanager:CreateSecret',
	DELETE_RESOURCE_POLICY = 'secretsmanager:DeleteResourcePolicy',
	DELETE_SECRET = 'secretsmanager:DeleteSecret',
	DESCRIBE_SECRET = 'secretsmanager:DescribeSecret',
	GET_RANDOM_PASSWORD = 'secretsmanager:GetRandomPassword',
	GET_RESOURCE_POLICY = 'secretsmanager:GetResourcePolicy',
	GET_SECRET_VALUE = 'secretsmanager:GetSecretValue',
	LIST_SECRET_VERSION_IDS = 'secretsmanager:ListSecretVersionIds',
	LIST_SECRETS = 'secretsmanager:ListSecrets',
	PUT_RESOURCE_POLICY = 'secretsmanager:PutResourcePolicy',
	PUT_SECRET_VALUE = 'secretsmanager:PutSecretValue',
	REMOVE_REGIONS_FROM_REPLICATION = 'secretsmanager:RemoveRegionsFromReplication',
	REPLICATE_SECRET_TO_REGIONS = 'secretsmanager:ReplicateSecretToRegions',
	RESTORE_SECRET = 'secretsmanager:RestoreSecret',
	ROTATE_SECRET = 'secretsmanager:RotateSecret',
	STOP_REPLICATION_TO_REPLICA = 'secretsmanager:StopReplicationToReplica',
	TAG_RESOURCE = 'secretsmanager:TagResource',
	UNTAG_RESOURCE = 'secretsmanager:UntagResource',
	UPDATE_SECRET = 'secretsmanager:UpdateSecret',
	UPDATE_SECRET_VERSION_STAGE = 'secretsmanager:UpdateSecretVersionStage',
	VALIDATE_RESOURCE_POLICY = 'secretsmanager:ValidateResourcePolicy',
}
export enum APPLICATION_AUTO_SCALING {
	DELETE_SCALING_POLICY = 'application-autoscaling:DeleteScalingPolicy',
	DELETE_SCHEDULED_ACTION = 'application-autoscaling:DeleteScheduledAction',
	DEREGISTER_SCALABLE_TARGET = 'application-autoscaling:DeregisterScalableTarget',
	DESCRIBE_SCALABLE_TARGETS = 'application-autoscaling:DescribeScalableTargets',
	DESCRIBE_SCALING_ACTIVITIES = 'application-autoscaling:DescribeScalingActivities',
	DESCRIBE_SCALING_POLICIES = 'application-autoscaling:DescribeScalingPolicies',
	DESCRIBE_SCHEDULED_ACTIONS = 'application-autoscaling:DescribeScheduledActions',
	PUT_SCALING_POLICY = 'application-autoscaling:PutScalingPolicy',
	PUT_SCHEDULED_ACTION = 'application-autoscaling:PutScheduledAction',
	REGISTER_SCALABLE_TARGET = 'application-autoscaling:RegisterScalableTarget',
}
export enum FSX {
	ASSOCIATE_FILE_GATEWAY = 'fsx:AssociateFileGateway',
	ASSOCIATE_FILE_SYSTEM_ALIASES = 'fsx:AssociateFileSystemAliases',
	CANCEL_DATA_REPOSITORY_TASK = 'fsx:CancelDataRepositoryTask',
	COPY_BACKUP = 'fsx:CopyBackup',
	CREATE_BACKUP = 'fsx:CreateBackup',
	CREATE_DATA_REPOSITORY_ASSOCIATION = 'fsx:CreateDataRepositoryAssociation',
	CREATE_DATA_REPOSITORY_TASK = 'fsx:CreateDataRepositoryTask',
	CREATE_FILE_CACHE = 'fsx:CreateFileCache',
	CREATE_FILE_SYSTEM = 'fsx:CreateFileSystem',
	CREATE_FILE_SYSTEM_FROM_BACKUP = 'fsx:CreateFileSystemFromBackup',
	CREATE_SNAPSHOT = 'fsx:CreateSnapshot',
	CREATE_STORAGE_VIRTUAL_MACHINE = 'fsx:CreateStorageVirtualMachine',
	CREATE_VOLUME = 'fsx:CreateVolume',
	CREATE_VOLUME_FROM_BACKUP = 'fsx:CreateVolumeFromBackup',
	DELETE_BACKUP = 'fsx:DeleteBackup',
	DELETE_DATA_REPOSITORY_ASSOCIATION = 'fsx:DeleteDataRepositoryAssociation',
	DELETE_FILE_CACHE = 'fsx:DeleteFileCache',
	DELETE_FILE_SYSTEM = 'fsx:DeleteFileSystem',
	DELETE_SNAPSHOT = 'fsx:DeleteSnapshot',
	DELETE_STORAGE_VIRTUAL_MACHINE = 'fsx:DeleteStorageVirtualMachine',
	DELETE_VOLUME = 'fsx:DeleteVolume',
	DESCRIBE_ASSOCIATED_FILE_GATEWAYS = 'fsx:DescribeAssociatedFileGateways',
	DESCRIBE_BACKUPS = 'fsx:DescribeBackups',
	DESCRIBE_DATA_REPOSITORY_ASSOCIATIONS = 'fsx:DescribeDataRepositoryAssociations',
	DESCRIBE_DATA_REPOSITORY_TASKS = 'fsx:DescribeDataRepositoryTasks',
	DESCRIBE_FILE_CACHES = 'fsx:DescribeFileCaches',
	DESCRIBE_FILE_SYSTEM_ALIASES = 'fsx:DescribeFileSystemAliases',
	DESCRIBE_FILE_SYSTEMS = 'fsx:DescribeFileSystems',
	DESCRIBE_SNAPSHOTS = 'fsx:DescribeSnapshots',
	DESCRIBE_STORAGE_VIRTUAL_MACHINES = 'fsx:DescribeStorageVirtualMachines',
	DESCRIBE_VOLUMES = 'fsx:DescribeVolumes',
	DISASSOCIATE_FILE_GATEWAY = 'fsx:DisassociateFileGateway',
	DISASSOCIATE_FILE_SYSTEM_ALIASES = 'fsx:DisassociateFileSystemAliases',
	LIST_TAGS_FOR_RESOURCE = 'fsx:ListTagsForResource',
	MANAGE_BACKUP_PRINCIPAL_ASSOCIATIONS = 'fsx:ManageBackupPrincipalAssociations',
	RELEASE_FILE_SYSTEM_NFS_V_3_LOCKS = 'fsx:ReleaseFileSystemNfsV3Locks',
	RESTORE_VOLUME_FROM_SNAPSHOT = 'fsx:RestoreVolumeFromSnapshot',
	TAG_RESOURCE = 'fsx:TagResource',
	UNTAG_RESOURCE = 'fsx:UntagResource',
	UPDATE_DATA_REPOSITORY_ASSOCIATION = 'fsx:UpdateDataRepositoryAssociation',
	UPDATE_FILE_CACHE = 'fsx:UpdateFileCache',
	UPDATE_FILE_SYSTEM = 'fsx:UpdateFileSystem',
	UPDATE_SNAPSHOT = 'fsx:UpdateSnapshot',
	UPDATE_STORAGE_VIRTUAL_MACHINE = 'fsx:UpdateStorageVirtualMachine',
	UPDATE_VOLUME = 'fsx:UpdateVolume',
}
export enum AMPLIFY {
	CREATE_APP = 'amplify:CreateApp',
	CREATE_BACKEND_ENVIRONMENT = 'amplify:CreateBackendEnvironment',
	CREATE_BRANCH = 'amplify:CreateBranch',
	CREATE_DEPLOYMENT = 'amplify:CreateDeployment',
	CREATE_DOMAIN_ASSOCIATION = 'amplify:CreateDomainAssociation',
	CREATE_WEB_HOOK = 'amplify:CreateWebHook',
	DELETE_APP = 'amplify:DeleteApp',
	DELETE_BACKEND_ENVIRONMENT = 'amplify:DeleteBackendEnvironment',
	DELETE_BRANCH = 'amplify:DeleteBranch',
	DELETE_DOMAIN_ASSOCIATION = 'amplify:DeleteDomainAssociation',
	DELETE_JOB = 'amplify:DeleteJob',
	DELETE_WEB_HOOK = 'amplify:DeleteWebHook',
	GENERATE_ACCESS_LOGS = 'amplify:GenerateAccessLogs',
	GET_APP = 'amplify:GetApp',
	GET_ARTIFACT_URL = 'amplify:GetArtifactUrl',
	GET_BACKEND_ENVIRONMENT = 'amplify:GetBackendEnvironment',
	GET_BRANCH = 'amplify:GetBranch',
	GET_DOMAIN_ASSOCIATION = 'amplify:GetDomainAssociation',
	GET_JOB = 'amplify:GetJob',
	GET_WEB_HOOK = 'amplify:GetWebHook',
	LIST_APPS = 'amplify:ListApps',
	LIST_ARTIFACTS = 'amplify:ListArtifacts',
	LIST_BACKEND_ENVIRONMENTS = 'amplify:ListBackendEnvironments',
	LIST_BRANCHES = 'amplify:ListBranches',
	LIST_DOMAIN_ASSOCIATIONS = 'amplify:ListDomainAssociations',
	LIST_JOBS = 'amplify:ListJobs',
	LIST_TAGS_FOR_RESOURCE = 'amplify:ListTagsForResource',
	LIST_WEB_HOOKS = 'amplify:ListWebHooks',
	START_DEPLOYMENT = 'amplify:StartDeployment',
	START_JOB = 'amplify:StartJob',
	STOP_JOB = 'amplify:StopJob',
	TAG_RESOURCE = 'amplify:TagResource',
	UNTAG_RESOURCE = 'amplify:UntagResource',
	UPDATE_APP = 'amplify:UpdateApp',
	UPDATE_BRANCH = 'amplify:UpdateBranch',
	UPDATE_DOMAIN_ASSOCIATION = 'amplify:UpdateDomainAssociation',
	UPDATE_WEB_HOOK = 'amplify:UpdateWebHook',
}
export enum APP_MESH_PREVIEW {
	CREATE_GATEWAY_ROUTE = 'appmesh-preview:CreateGatewayRoute',
	CREATE_MESH = 'appmesh-preview:CreateMesh',
	CREATE_ROUTE = 'appmesh-preview:CreateRoute',
	CREATE_VIRTUAL_GATEWAY = 'appmesh-preview:CreateVirtualGateway',
	CREATE_VIRTUAL_NODE = 'appmesh-preview:CreateVirtualNode',
	CREATE_VIRTUAL_ROUTER = 'appmesh-preview:CreateVirtualRouter',
	CREATE_VIRTUAL_SERVICE = 'appmesh-preview:CreateVirtualService',
	DELETE_GATEWAY_ROUTE = 'appmesh-preview:DeleteGatewayRoute',
	DELETE_MESH = 'appmesh-preview:DeleteMesh',
	DELETE_ROUTE = 'appmesh-preview:DeleteRoute',
	DELETE_VIRTUAL_GATEWAY = 'appmesh-preview:DeleteVirtualGateway',
	DELETE_VIRTUAL_NODE = 'appmesh-preview:DeleteVirtualNode',
	DELETE_VIRTUAL_ROUTER = 'appmesh-preview:DeleteVirtualRouter',
	DELETE_VIRTUAL_SERVICE = 'appmesh-preview:DeleteVirtualService',
	DESCRIBE_GATEWAY_ROUTE = 'appmesh-preview:DescribeGatewayRoute',
	DESCRIBE_MESH = 'appmesh-preview:DescribeMesh',
	DESCRIBE_ROUTE = 'appmesh-preview:DescribeRoute',
	DESCRIBE_VIRTUAL_GATEWAY = 'appmesh-preview:DescribeVirtualGateway',
	DESCRIBE_VIRTUAL_NODE = 'appmesh-preview:DescribeVirtualNode',
	DESCRIBE_VIRTUAL_ROUTER = 'appmesh-preview:DescribeVirtualRouter',
	DESCRIBE_VIRTUAL_SERVICE = 'appmesh-preview:DescribeVirtualService',
	LIST_GATEWAY_ROUTES = 'appmesh-preview:ListGatewayRoutes',
	LIST_MESHES = 'appmesh-preview:ListMeshes',
	LIST_ROUTES = 'appmesh-preview:ListRoutes',
	LIST_VIRTUAL_GATEWAYS = 'appmesh-preview:ListVirtualGateways',
	LIST_VIRTUAL_NODES = 'appmesh-preview:ListVirtualNodes',
	LIST_VIRTUAL_ROUTERS = 'appmesh-preview:ListVirtualRouters',
	LIST_VIRTUAL_SERVICES = 'appmesh-preview:ListVirtualServices',
	STREAM_AGGREGATED_RESOURCES = 'appmesh-preview:StreamAggregatedResources',
	UPDATE_GATEWAY_ROUTE = 'appmesh-preview:UpdateGatewayRoute',
	UPDATE_MESH = 'appmesh-preview:UpdateMesh',
	UPDATE_ROUTE = 'appmesh-preview:UpdateRoute',
	UPDATE_VIRTUAL_GATEWAY = 'appmesh-preview:UpdateVirtualGateway',
	UPDATE_VIRTUAL_NODE = 'appmesh-preview:UpdateVirtualNode',
	UPDATE_VIRTUAL_ROUTER = 'appmesh-preview:UpdateVirtualRouter',
	UPDATE_VIRTUAL_SERVICE = 'appmesh-preview:UpdateVirtualService',
}
export enum KINESIS_VIDEO_STREAMS {
	CONNECT_AS_MASTER = 'kinesisvideo:ConnectAsMaster',
	CONNECT_AS_VIEWER = 'kinesisvideo:ConnectAsViewer',
	CREATE_SIGNALING_CHANNEL = 'kinesisvideo:CreateSignalingChannel',
	CREATE_STREAM = 'kinesisvideo:CreateStream',
	DELETE_SIGNALING_CHANNEL = 'kinesisvideo:DeleteSignalingChannel',
	DELETE_STREAM = 'kinesisvideo:DeleteStream',
	DESCRIBE_EDGE_CONFIGURATION = 'kinesisvideo:DescribeEdgeConfiguration',
	DESCRIBE_IMAGE_GENERATION_CONFIGURATION = 'kinesisvideo:DescribeImageGenerationConfiguration',
	DESCRIBE_NOTIFICATION_CONFIGURATION = 'kinesisvideo:DescribeNotificationConfiguration',
	DESCRIBE_SIGNALING_CHANNEL = 'kinesisvideo:DescribeSignalingChannel',
	DESCRIBE_STREAM = 'kinesisvideo:DescribeStream',
	GET_CLIP = 'kinesisvideo:GetClip',
	GET_DASH_STREAMING_SESSION_URL = 'kinesisvideo:GetDASHStreamingSessionURL',
	GET_DATA_ENDPOINT = 'kinesisvideo:GetDataEndpoint',
	GET_HLS_STREAMING_SESSION_URL = 'kinesisvideo:GetHLSStreamingSessionURL',
	GET_ICE_SERVER_CONFIG = 'kinesisvideo:GetIceServerConfig',
	GET_IMAGES = 'kinesisvideo:GetImages',
	GET_MEDIA = 'kinesisvideo:GetMedia',
	GET_MEDIA_FOR_FRAGMENT_LIST = 'kinesisvideo:GetMediaForFragmentList',
	GET_SIGNALING_CHANNEL_ENDPOINT = 'kinesisvideo:GetSignalingChannelEndpoint',
	LIST_FRAGMENTS = 'kinesisvideo:ListFragments',
	LIST_SIGNALING_CHANNELS = 'kinesisvideo:ListSignalingChannels',
	LIST_STREAMS = 'kinesisvideo:ListStreams',
	LIST_TAGS_FOR_RESOURCE = 'kinesisvideo:ListTagsForResource',
	LIST_TAGS_FOR_STREAM = 'kinesisvideo:ListTagsForStream',
	PUT_MEDIA = 'kinesisvideo:PutMedia',
	SEND_ALEXA_OFFER_TO_MASTER = 'kinesisvideo:SendAlexaOfferToMaster',
	START_EDGE_CONFIGURATION_UPDATE = 'kinesisvideo:StartEdgeConfigurationUpdate',
	TAG_RESOURCE = 'kinesisvideo:TagResource',
	TAG_STREAM = 'kinesisvideo:TagStream',
	UNTAG_RESOURCE = 'kinesisvideo:UntagResource',
	UNTAG_STREAM = 'kinesisvideo:UntagStream',
	UPDATE_DATA_RETENTION = 'kinesisvideo:UpdateDataRetention',
	UPDATE_IMAGE_GENERATION_CONFIGURATION = 'kinesisvideo:UpdateImageGenerationConfiguration',
	UPDATE_NOTIFICATION_CONFIGURATION = 'kinesisvideo:UpdateNotificationConfiguration',
	UPDATE_SIGNALING_CHANNEL = 'kinesisvideo:UpdateSignalingChannel',
	UPDATE_STREAM = 'kinesisvideo:UpdateStream',
}
export enum API_GATEWAY {
	INVALIDATE_CACHE = 'execute-api:InvalidateCache',
	INVOKE = 'execute-api:Invoke',
	MANAGE_CONNECTIONS = 'execute-api:ManageConnections',
}
export enum MIGRATION_HUB_STRATEGY_RECOMMENDATIONS {
	GET_ANTI_PATTERN = 'migrationhub-strategy:GetAntiPattern',
	GET_APPLICATION_COMPONENT_DETAILS = 'migrationhub-strategy:GetApplicationComponentDetails',
	GET_APPLICATION_COMPONENT_STRATEGIES = 'migrationhub-strategy:GetApplicationComponentStrategies',
	GET_ASSESSMENT = 'migrationhub-strategy:GetAssessment',
	GET_IMPORT_FILE_TASK = 'migrationhub-strategy:GetImportFileTask',
	GET_LATEST_ASSESSMENT_ID = 'migrationhub-strategy:GetLatestAssessmentId',
	GET_MESSAGE = 'migrationhub-strategy:GetMessage',
	GET_PORTFOLIO_PREFERENCES = 'migrationhub-strategy:GetPortfolioPreferences',
	GET_PORTFOLIO_SUMMARY = 'migrationhub-strategy:GetPortfolioSummary',
	GET_RECOMMENDATION_REPORT_DETAILS = 'migrationhub-strategy:GetRecommendationReportDetails',
	GET_SERVER_DETAILS = 'migrationhub-strategy:GetServerDetails',
	GET_SERVER_STRATEGIES = 'migrationhub-strategy:GetServerStrategies',
	LIST_ANTI_PATTERNS = 'migrationhub-strategy:ListAntiPatterns',
	LIST_APPLICATION_COMPONENTS = 'migrationhub-strategy:ListApplicationComponents',
	LIST_COLLECTORS = 'migrationhub-strategy:ListCollectors',
	LIST_IMPORT_FILE_TASK = 'migrationhub-strategy:ListImportFileTask',
	LIST_JAR_ARTIFACTS = 'migrationhub-strategy:ListJarArtifacts',
	LIST_SERVERS = 'migrationhub-strategy:ListServers',
	PUT_PORTFOLIO_PREFERENCES = 'migrationhub-strategy:PutPortfolioPreferences',
	REGISTER_COLLECTOR = 'migrationhub-strategy:RegisterCollector',
	SEND_MESSAGE = 'migrationhub-strategy:SendMessage',
	START_ASSESSMENT = 'migrationhub-strategy:StartAssessment',
	START_IMPORT_FILE_TASK = 'migrationhub-strategy:StartImportFileTask',
	START_RECOMMENDATION_REPORT_GENERATION = 'migrationhub-strategy:StartRecommendationReportGeneration',
	STOP_ASSESSMENT = 'migrationhub-strategy:StopAssessment',
	UPDATE_APPLICATION_COMPONENT_CONFIG = 'migrationhub-strategy:UpdateApplicationComponentConfig',
	UPDATE_COLLECTOR_CONFIGURATION = 'migrationhub-strategy:UpdateCollectorConfiguration',
	UPDATE_SERVER_CONFIG = 'migrationhub-strategy:UpdateServerConfig',
}
export enum ELEMENTAL_MEDIALIVE {
	ACCEPT_INPUT_DEVICE_TRANSFER = 'medialive:AcceptInputDeviceTransfer',
	BATCH_DELETE = 'medialive:BatchDelete',
	BATCH_START = 'medialive:BatchStart',
	BATCH_STOP = 'medialive:BatchStop',
	BATCH_UPDATE_SCHEDULE = 'medialive:BatchUpdateSchedule',
	CANCEL_INPUT_DEVICE_TRANSFER = 'medialive:CancelInputDeviceTransfer',
	CLAIM_DEVICE = 'medialive:ClaimDevice',
	CREATE_CHANNEL = 'medialive:CreateChannel',
	CREATE_INPUT = 'medialive:CreateInput',
	CREATE_INPUT_SECURITY_GROUP = 'medialive:CreateInputSecurityGroup',
	CREATE_MULTIPLEX = 'medialive:CreateMultiplex',
	CREATE_MULTIPLEX_PROGRAM = 'medialive:CreateMultiplexProgram',
	CREATE_PARTNER_INPUT = 'medialive:CreatePartnerInput',
	CREATE_TAGS = 'medialive:CreateTags',
	DELETE_CHANNEL = 'medialive:DeleteChannel',
	DELETE_INPUT = 'medialive:DeleteInput',
	DELETE_INPUT_SECURITY_GROUP = 'medialive:DeleteInputSecurityGroup',
	DELETE_MULTIPLEX = 'medialive:DeleteMultiplex',
	DELETE_MULTIPLEX_PROGRAM = 'medialive:DeleteMultiplexProgram',
	DELETE_RESERVATION = 'medialive:DeleteReservation',
	DELETE_SCHEDULE = 'medialive:DeleteSchedule',
	DELETE_TAGS = 'medialive:DeleteTags',
	DESCRIBE_CHANNEL = 'medialive:DescribeChannel',
	DESCRIBE_INPUT = 'medialive:DescribeInput',
	DESCRIBE_INPUT_DEVICE = 'medialive:DescribeInputDevice',
	DESCRIBE_INPUT_DEVICE_THUMBNAIL = 'medialive:DescribeInputDeviceThumbnail',
	DESCRIBE_INPUT_SECURITY_GROUP = 'medialive:DescribeInputSecurityGroup',
	DESCRIBE_MULTIPLEX = 'medialive:DescribeMultiplex',
	DESCRIBE_MULTIPLEX_PROGRAM = 'medialive:DescribeMultiplexProgram',
	DESCRIBE_OFFERING = 'medialive:DescribeOffering',
	DESCRIBE_RESERVATION = 'medialive:DescribeReservation',
	DESCRIBE_SCHEDULE = 'medialive:DescribeSchedule',
	LIST_CHANNELS = 'medialive:ListChannels',
	LIST_INPUT_DEVICE_TRANSFERS = 'medialive:ListInputDeviceTransfers',
	LIST_INPUT_DEVICES = 'medialive:ListInputDevices',
	LIST_INPUT_SECURITY_GROUPS = 'medialive:ListInputSecurityGroups',
	LIST_INPUTS = 'medialive:ListInputs',
	LIST_MULTIPLEX_PROGRAMS = 'medialive:ListMultiplexPrograms',
	LIST_MULTIPLEXES = 'medialive:ListMultiplexes',
	LIST_OFFERINGS = 'medialive:ListOfferings',
	LIST_RESERVATIONS = 'medialive:ListReservations',
	LIST_TAGS_FOR_RESOURCE = 'medialive:ListTagsForResource',
	PURCHASE_OFFERING = 'medialive:PurchaseOffering',
	REBOOT_INPUT_DEVICE = 'medialive:RebootInputDevice',
	REJECT_INPUT_DEVICE_TRANSFER = 'medialive:RejectInputDeviceTransfer',
	START_CHANNEL = 'medialive:StartChannel',
	START_INPUT_DEVICE_MAINTENANCE_WINDOW = 'medialive:StartInputDeviceMaintenanceWindow',
	START_MULTIPLEX = 'medialive:StartMultiplex',
	STOP_CHANNEL = 'medialive:StopChannel',
	STOP_MULTIPLEX = 'medialive:StopMultiplex',
	TRANSFER_INPUT_DEVICE = 'medialive:TransferInputDevice',
	UPDATE_CHANNEL = 'medialive:UpdateChannel',
	UPDATE_CHANNEL_CLASS = 'medialive:UpdateChannelClass',
	UPDATE_INPUT = 'medialive:UpdateInput',
	UPDATE_INPUT_DEVICE = 'medialive:UpdateInputDevice',
	UPDATE_INPUT_SECURITY_GROUP = 'medialive:UpdateInputSecurityGroup',
	UPDATE_MULTIPLEX = 'medialive:UpdateMultiplex',
	UPDATE_MULTIPLEX_PROGRAM = 'medialive:UpdateMultiplexProgram',
	UPDATE_RESERVATION = 'medialive:UpdateReservation',
}
export enum CLOUDSHELL {
	CREATE_ENVIRONMENT = 'cloudshell:CreateEnvironment',
	CREATE_SESSION = 'cloudshell:CreateSession',
	DELETE_ENVIRONMENT = 'cloudshell:DeleteEnvironment',
	GET_ENVIRONMENT_STATUS = 'cloudshell:GetEnvironmentStatus',
	GET_FILE_DOWNLOAD_URLS = 'cloudshell:GetFileDownloadUrls',
	GET_FILE_UPLOAD_URLS = 'cloudshell:GetFileUploadUrls',
	PUT_CREDENTIALS = 'cloudshell:PutCredentials',
	START_ENVIRONMENT = 'cloudshell:StartEnvironment',
	STOP_ENVIRONMENT = 'cloudshell:StopEnvironment',
}
export enum LOCATION {
	ASSOCIATE_TRACKER_CONSUMER = 'geo:AssociateTrackerConsumer',
	BATCH_DELETE_DEVICE_POSITION_HISTORY = 'geo:BatchDeleteDevicePositionHistory',
	BATCH_DELETE_GEOFENCE = 'geo:BatchDeleteGeofence',
	BATCH_EVALUATE_GEOFENCES = 'geo:BatchEvaluateGeofences',
	BATCH_GET_DEVICE_POSITION = 'geo:BatchGetDevicePosition',
	BATCH_PUT_GEOFENCE = 'geo:BatchPutGeofence',
	BATCH_UPDATE_DEVICE_POSITION = 'geo:BatchUpdateDevicePosition',
	CALCULATE_ROUTE = 'geo:CalculateRoute',
	CALCULATE_ROUTE_MATRIX = 'geo:CalculateRouteMatrix',
	CREATE_GEOFENCE_COLLECTION = 'geo:CreateGeofenceCollection',
	CREATE_MAP = 'geo:CreateMap',
	CREATE_PLACE_INDEX = 'geo:CreatePlaceIndex',
	CREATE_ROUTE_CALCULATOR = 'geo:CreateRouteCalculator',
	CREATE_TRACKER = 'geo:CreateTracker',
	DELETE_GEOFENCE_COLLECTION = 'geo:DeleteGeofenceCollection',
	DELETE_MAP = 'geo:DeleteMap',
	DELETE_PLACE_INDEX = 'geo:DeletePlaceIndex',
	DELETE_ROUTE_CALCULATOR = 'geo:DeleteRouteCalculator',
	DELETE_TRACKER = 'geo:DeleteTracker',
	DESCRIBE_GEOFENCE_COLLECTION = 'geo:DescribeGeofenceCollection',
	DESCRIBE_MAP = 'geo:DescribeMap',
	DESCRIBE_PLACE_INDEX = 'geo:DescribePlaceIndex',
	DESCRIBE_ROUTE_CALCULATOR = 'geo:DescribeRouteCalculator',
	DESCRIBE_TRACKER = 'geo:DescribeTracker',
	DISASSOCIATE_TRACKER_CONSUMER = 'geo:DisassociateTrackerConsumer',
	GET_DEVICE_POSITION = 'geo:GetDevicePosition',
	GET_DEVICE_POSITION_HISTORY = 'geo:GetDevicePositionHistory',
	GET_GEOFENCE = 'geo:GetGeofence',
	GET_MAP_GLYPHS = 'geo:GetMapGlyphs',
	GET_MAP_SPRITES = 'geo:GetMapSprites',
	GET_MAP_STYLE_DESCRIPTOR = 'geo:GetMapStyleDescriptor',
	GET_MAP_TILE = 'geo:GetMapTile',
	GET_PLACE = 'geo:GetPlace',
	LIST_DEVICE_POSITIONS = 'geo:ListDevicePositions',
	LIST_GEOFENCE_COLLECTIONS = 'geo:ListGeofenceCollections',
	LIST_GEOFENCES = 'geo:ListGeofences',
	LIST_MAPS = 'geo:ListMaps',
	LIST_PLACE_INDEXES = 'geo:ListPlaceIndexes',
	LIST_ROUTE_CALCULATORS = 'geo:ListRouteCalculators',
	LIST_TAGS_FOR_RESOURCE = 'geo:ListTagsForResource',
	LIST_TRACKER_CONSUMERS = 'geo:ListTrackerConsumers',
	LIST_TRACKERS = 'geo:ListTrackers',
	PUT_GEOFENCE = 'geo:PutGeofence',
	SEARCH_PLACE_INDEX_FOR_POSITION = 'geo:SearchPlaceIndexForPosition',
	SEARCH_PLACE_INDEX_FOR_SUGGESTIONS = 'geo:SearchPlaceIndexForSuggestions',
	SEARCH_PLACE_INDEX_FOR_TEXT = 'geo:SearchPlaceIndexForText',
	TAG_RESOURCE = 'geo:TagResource',
	UNTAG_RESOURCE = 'geo:UntagResource',
	UPDATE_GEOFENCE_COLLECTION = 'geo:UpdateGeofenceCollection',
	UPDATE_MAP = 'geo:UpdateMap',
	UPDATE_PLACE_INDEX = 'geo:UpdatePlaceIndex',
	UPDATE_ROUTE_CALCULATOR = 'geo:UpdateRouteCalculator',
	UPDATE_TRACKER = 'geo:UpdateTracker',
}
export enum KEY_MANAGEMENT_SERVICE {
	CANCEL_KEY_DELETION = 'kms:CancelKeyDeletion',
	CONNECT_CUSTOM_KEY_STORE = 'kms:ConnectCustomKeyStore',
	CREATE_ALIAS = 'kms:CreateAlias',
	CREATE_CUSTOM_KEY_STORE = 'kms:CreateCustomKeyStore',
	CREATE_GRANT = 'kms:CreateGrant',
	CREATE_KEY = 'kms:CreateKey',
	DECRYPT = 'kms:Decrypt',
	DELETE_ALIAS = 'kms:DeleteAlias',
	DELETE_CUSTOM_KEY_STORE = 'kms:DeleteCustomKeyStore',
	DELETE_IMPORTED_KEY_MATERIAL = 'kms:DeleteImportedKeyMaterial',
	DESCRIBE_CUSTOM_KEY_STORES = 'kms:DescribeCustomKeyStores',
	DESCRIBE_KEY = 'kms:DescribeKey',
	DISABLE_KEY = 'kms:DisableKey',
	DISABLE_KEY_ROTATION = 'kms:DisableKeyRotation',
	DISCONNECT_CUSTOM_KEY_STORE = 'kms:DisconnectCustomKeyStore',
	ENABLE_KEY = 'kms:EnableKey',
	ENABLE_KEY_ROTATION = 'kms:EnableKeyRotation',
	ENCRYPT = 'kms:Encrypt',
	GENERATE_DATA_KEY = 'kms:GenerateDataKey',
	GENERATE_DATA_KEY_PAIR = 'kms:GenerateDataKeyPair',
	GENERATE_DATA_KEY_PAIR_WITHOUT_PLAINTEXT = 'kms:GenerateDataKeyPairWithoutPlaintext',
	GENERATE_DATA_KEY_WITHOUT_PLAINTEXT = 'kms:GenerateDataKeyWithoutPlaintext',
	GENERATE_MAC = 'kms:GenerateMac',
	GENERATE_RANDOM = 'kms:GenerateRandom',
	GET_KEY_POLICY = 'kms:GetKeyPolicy',
	GET_KEY_ROTATION_STATUS = 'kms:GetKeyRotationStatus',
	GET_PARAMETERS_FOR_IMPORT = 'kms:GetParametersForImport',
	GET_PUBLIC_KEY = 'kms:GetPublicKey',
	IMPORT_KEY_MATERIAL = 'kms:ImportKeyMaterial',
	LIST_ALIASES = 'kms:ListAliases',
	LIST_GRANTS = 'kms:ListGrants',
	LIST_KEY_POLICIES = 'kms:ListKeyPolicies',
	LIST_KEYS = 'kms:ListKeys',
	LIST_RESOURCE_TAGS = 'kms:ListResourceTags',
	LIST_RETIRABLE_GRANTS = 'kms:ListRetirableGrants',
	PUT_KEY_POLICY = 'kms:PutKeyPolicy',
	RE_ENCRYPT_FROM = 'kms:ReEncryptFrom',
	RE_ENCRYPT_TO = 'kms:ReEncryptTo',
	REPLICATE_KEY = 'kms:ReplicateKey',
	RETIRE_GRANT = 'kms:RetireGrant',
	REVOKE_GRANT = 'kms:RevokeGrant',
	SCHEDULE_KEY_DELETION = 'kms:ScheduleKeyDeletion',
	SIGN = 'kms:Sign',
	SYNCHRONIZE_MULTI_REGION_KEY = 'kms:SynchronizeMultiRegionKey',
	TAG_RESOURCE = 'kms:TagResource',
	UNTAG_RESOURCE = 'kms:UntagResource',
	UPDATE_ALIAS = 'kms:UpdateAlias',
	UPDATE_CUSTOM_KEY_STORE = 'kms:UpdateCustomKeyStore',
	UPDATE_KEY_DESCRIPTION = 'kms:UpdateKeyDescription',
	UPDATE_PRIMARY_REGION = 'kms:UpdatePrimaryRegion',
	VERIFY = 'kms:Verify',
	VERIFY_MAC = 'kms:VerifyMac',
}
export enum SAGEMAKER_GROUND_TRUTH_SYNTHETIC {
	CREATE_PROJECT = 'sagemaker-groundtruth-synthetic:CreateProject',
	DELETE_PROJECT = 'sagemaker-groundtruth-synthetic:DeleteProject',
	GET_ACCOUNT_DETAILS = 'sagemaker-groundtruth-synthetic:GetAccountDetails',
	GET_BATCH = 'sagemaker-groundtruth-synthetic:GetBatch',
	GET_PROJECT = 'sagemaker-groundtruth-synthetic:GetProject',
	LIST_BATCH_DATA_TRANSFERS = 'sagemaker-groundtruth-synthetic:ListBatchDataTransfers',
	LIST_BATCH_SUMMARIES = 'sagemaker-groundtruth-synthetic:ListBatchSummaries',
	LIST_PROJECT_DATA_TRANSFERS = 'sagemaker-groundtruth-synthetic:ListProjectDataTransfers',
	LIST_PROJECT_SUMMARIES = 'sagemaker-groundtruth-synthetic:ListProjectSummaries',
	START_BATCH_DATA_TRANSFER = 'sagemaker-groundtruth-synthetic:StartBatchDataTransfer',
	START_PROJECT_DATA_TRANSFER = 'sagemaker-groundtruth-synthetic:StartProjectDataTransfer',
	UPDATE_BATCH = 'sagemaker-groundtruth-synthetic:UpdateBatch',
}
export enum CLOUDHSM {
	ADD_TAGS_TO_RESOURCE = 'cloudhsm:AddTagsToResource',
	COPY_BACKUP_TO_REGION = 'cloudhsm:CopyBackupToRegion',
	CREATE_CLUSTER = 'cloudhsm:CreateCluster',
	CREATE_HAPG = 'cloudhsm:CreateHapg',
	CREATE_HSM = 'cloudhsm:CreateHsm',
	CREATE_LUNA_CLIENT = 'cloudhsm:CreateLunaClient',
	DELETE_BACKUP = 'cloudhsm:DeleteBackup',
	DELETE_CLUSTER = 'cloudhsm:DeleteCluster',
	DELETE_HAPG = 'cloudhsm:DeleteHapg',
	DELETE_HSM = 'cloudhsm:DeleteHsm',
	DELETE_LUNA_CLIENT = 'cloudhsm:DeleteLunaClient',
	DESCRIBE_BACKUPS = 'cloudhsm:DescribeBackups',
	DESCRIBE_CLUSTERS = 'cloudhsm:DescribeClusters',
	DESCRIBE_HAPG = 'cloudhsm:DescribeHapg',
	DESCRIBE_HSM = 'cloudhsm:DescribeHsm',
	DESCRIBE_LUNA_CLIENT = 'cloudhsm:DescribeLunaClient',
	GET_CONFIG = 'cloudhsm:GetConfig',
	INITIALIZE_CLUSTER = 'cloudhsm:InitializeCluster',
	LIST_AVAILABLE_ZONES = 'cloudhsm:ListAvailableZones',
	LIST_HAPGS = 'cloudhsm:ListHapgs',
	LIST_HSMS = 'cloudhsm:ListHsms',
	LIST_LUNA_CLIENTS = 'cloudhsm:ListLunaClients',
	LIST_TAGS = 'cloudhsm:ListTags',
	LIST_TAGS_FOR_RESOURCE = 'cloudhsm:ListTagsForResource',
	MODIFY_BACKUP_ATTRIBUTES = 'cloudhsm:ModifyBackupAttributes',
	MODIFY_CLUSTER = 'cloudhsm:ModifyCluster',
	MODIFY_HAPG = 'cloudhsm:ModifyHapg',
	MODIFY_HSM = 'cloudhsm:ModifyHsm',
	MODIFY_LUNA_CLIENT = 'cloudhsm:ModifyLunaClient',
	REMOVE_TAGS_FROM_RESOURCE = 'cloudhsm:RemoveTagsFromResource',
	RESTORE_BACKUP = 'cloudhsm:RestoreBackup',
	TAG_RESOURCE = 'cloudhsm:TagResource',
	UNTAG_RESOURCE = 'cloudhsm:UntagResource',
}
export enum CODEGURU {
	GET_CODE_GURU_FREE_TRIAL_SUMMARY = 'codeguru:GetCodeGuruFreeTrialSummary',
}
export enum EC2 {
	ACCEPT_ADDRESS_TRANSFER = 'ec2:AcceptAddressTransfer',
	ACCEPT_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'ec2:AcceptReservedInstancesExchangeQuote',
	ACCEPT_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS = 'ec2:AcceptTransitGatewayMulticastDomainAssociations',
	ACCEPT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:AcceptTransitGatewayPeeringAttachment',
	ACCEPT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:AcceptTransitGatewayVpcAttachment',
	ACCEPT_VPC_ENDPOINT_CONNECTIONS = 'ec2:AcceptVpcEndpointConnections',
	ACCEPT_VPC_PEERING_CONNECTION = 'ec2:AcceptVpcPeeringConnection',
	ADVERTISE_BYOIP_CIDR = 'ec2:AdvertiseByoipCidr',
	ALLOCATE_ADDRESS = 'ec2:AllocateAddress',
	ALLOCATE_HOSTS = 'ec2:AllocateHosts',
	ALLOCATE_IPAM_POOL_CIDR = 'ec2:AllocateIpamPoolCidr',
	APPLY_SECURITY_GROUPS_TO_CLIENT_VPN_TARGET_NETWORK = 'ec2:ApplySecurityGroupsToClientVpnTargetNetwork',
	ASSIGN_IPV_6_ADDRESSES = 'ec2:AssignIpv6Addresses',
	ASSIGN_PRIVATE_IP_ADDRESSES = 'ec2:AssignPrivateIpAddresses',
	ASSOCIATE_ADDRESS = 'ec2:AssociateAddress',
	ASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'ec2:AssociateClientVpnTargetNetwork',
	ASSOCIATE_DHCP_OPTIONS = 'ec2:AssociateDhcpOptions',
	ASSOCIATE_ENCLAVE_CERTIFICATE_IAM_ROLE = 'ec2:AssociateEnclaveCertificateIamRole',
	ASSOCIATE_IAM_INSTANCE_PROFILE = 'ec2:AssociateIamInstanceProfile',
	ASSOCIATE_INSTANCE_EVENT_WINDOW = 'ec2:AssociateInstanceEventWindow',
	ASSOCIATE_ROUTE_TABLE = 'ec2:AssociateRouteTable',
	ASSOCIATE_SUBNET_CIDR_BLOCK = 'ec2:AssociateSubnetCidrBlock',
	ASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:AssociateTransitGatewayMulticastDomain',
	ASSOCIATE_TRANSIT_GATEWAY_POLICY_TABLE = 'ec2:AssociateTransitGatewayPolicyTable',
	ASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:AssociateTransitGatewayRouteTable',
	ASSOCIATE_TRUNK_INTERFACE = 'ec2:AssociateTrunkInterface',
	ASSOCIATE_VPC_CIDR_BLOCK = 'ec2:AssociateVpcCidrBlock',
	ATTACH_CLASSIC_LINK_VPC = 'ec2:AttachClassicLinkVpc',
	ATTACH_INTERNET_GATEWAY = 'ec2:AttachInternetGateway',
	ATTACH_NETWORK_INTERFACE = 'ec2:AttachNetworkInterface',
	ATTACH_VERIFIED_ACCESS_TRUST_PROVIDER = 'ec2:AttachVerifiedAccessTrustProvider',
	ATTACH_VOLUME = 'ec2:AttachVolume',
	ATTACH_VPN_GATEWAY = 'ec2:AttachVpnGateway',
	AUTHORIZE_CLIENT_VPN_INGRESS = 'ec2:AuthorizeClientVpnIngress',
	AUTHORIZE_SECURITY_GROUP_EGRESS = 'ec2:AuthorizeSecurityGroupEgress',
	AUTHORIZE_SECURITY_GROUP_INGRESS = 'ec2:AuthorizeSecurityGroupIngress',
	BUNDLE_INSTANCE = 'ec2:BundleInstance',
	CANCEL_BUNDLE_TASK = 'ec2:CancelBundleTask',
	CANCEL_CAPACITY_RESERVATION = 'ec2:CancelCapacityReservation',
	CANCEL_CAPACITY_RESERVATION_FLEETS = 'ec2:CancelCapacityReservationFleets',
	CANCEL_CONVERSION_TASK = 'ec2:CancelConversionTask',
	CANCEL_EXPORT_TASK = 'ec2:CancelExportTask',
	CANCEL_IMAGE_LAUNCH_PERMISSION = 'ec2:CancelImageLaunchPermission',
	CANCEL_IMPORT_TASK = 'ec2:CancelImportTask',
	CANCEL_RESERVED_INSTANCES_LISTING = 'ec2:CancelReservedInstancesListing',
	CANCEL_SPOT_FLEET_REQUESTS = 'ec2:CancelSpotFleetRequests',
	CANCEL_SPOT_INSTANCE_REQUESTS = 'ec2:CancelSpotInstanceRequests',
	CONFIRM_PRODUCT_INSTANCE = 'ec2:ConfirmProductInstance',
	COPY_FPGA_IMAGE = 'ec2:CopyFpgaImage',
	COPY_IMAGE = 'ec2:CopyImage',
	COPY_SNAPSHOT = 'ec2:CopySnapshot',
	CREATE_CAPACITY_RESERVATION = 'ec2:CreateCapacityReservation',
	CREATE_CAPACITY_RESERVATION_FLEET = 'ec2:CreateCapacityReservationFleet',
	CREATE_CARRIER_GATEWAY = 'ec2:CreateCarrierGateway',
	CREATE_CLIENT_VPN_ENDPOINT = 'ec2:CreateClientVpnEndpoint',
	CREATE_CLIENT_VPN_ROUTE = 'ec2:CreateClientVpnRoute',
	CREATE_COIP_CIDR = 'ec2:CreateCoipCidr',
	CREATE_COIP_POOL = 'ec2:CreateCoipPool',
	CREATE_COIP_POOL_PERMISSION = 'ec2:CreateCoipPoolPermission',
	CREATE_CUSTOMER_GATEWAY = 'ec2:CreateCustomerGateway',
	CREATE_DEFAULT_SUBNET = 'ec2:CreateDefaultSubnet',
	CREATE_DEFAULT_VPC = 'ec2:CreateDefaultVpc',
	CREATE_DHCP_OPTIONS = 'ec2:CreateDhcpOptions',
	CREATE_EGRESS_ONLY_INTERNET_GATEWAY = 'ec2:CreateEgressOnlyInternetGateway',
	CREATE_FLEET = 'ec2:CreateFleet',
	CREATE_FLOW_LOGS = 'ec2:CreateFlowLogs',
	CREATE_FPGA_IMAGE = 'ec2:CreateFpgaImage',
	CREATE_IMAGE = 'ec2:CreateImage',
	CREATE_INSTANCE_EVENT_WINDOW = 'ec2:CreateInstanceEventWindow',
	CREATE_INSTANCE_EXPORT_TASK = 'ec2:CreateInstanceExportTask',
	CREATE_INTERNET_GATEWAY = 'ec2:CreateInternetGateway',
	CREATE_IPAM = 'ec2:CreateIpam',
	CREATE_IPAM_POOL = 'ec2:CreateIpamPool',
	CREATE_IPAM_SCOPE = 'ec2:CreateIpamScope',
	CREATE_KEY_PAIR = 'ec2:CreateKeyPair',
	CREATE_LAUNCH_TEMPLATE = 'ec2:CreateLaunchTemplate',
	CREATE_LAUNCH_TEMPLATE_VERSION = 'ec2:CreateLaunchTemplateVersion',
	CREATE_LOCAL_GATEWAY_ROUTE = 'ec2:CreateLocalGatewayRoute',
	CREATE_LOCAL_GATEWAY_ROUTE_TABLE = 'ec2:CreateLocalGatewayRouteTable',
	CREATE_LOCAL_GATEWAY_ROUTE_TABLE_PERMISSION = 'ec2:CreateLocalGatewayRouteTablePermission',
	CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATION = 'ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation',
	CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'ec2:CreateLocalGatewayRouteTableVpcAssociation',
	CREATE_MANAGED_PREFIX_LIST = 'ec2:CreateManagedPrefixList',
	CREATE_NAT_GATEWAY = 'ec2:CreateNatGateway',
	CREATE_NETWORK_ACL = 'ec2:CreateNetworkAcl',
	CREATE_NETWORK_ACL_ENTRY = 'ec2:CreateNetworkAclEntry',
	CREATE_NETWORK_INSIGHTS_ACCESS_SCOPE = 'ec2:CreateNetworkInsightsAccessScope',
	CREATE_NETWORK_INSIGHTS_PATH = 'ec2:CreateNetworkInsightsPath',
	CREATE_NETWORK_INTERFACE = 'ec2:CreateNetworkInterface',
	CREATE_NETWORK_INTERFACE_PERMISSION = 'ec2:CreateNetworkInterfacePermission',
	CREATE_PLACEMENT_GROUP = 'ec2:CreatePlacementGroup',
	CREATE_PUBLIC_IPV_4_POOL = 'ec2:CreatePublicIpv4Pool',
	CREATE_REPLACE_ROOT_VOLUME_TASK = 'ec2:CreateReplaceRootVolumeTask',
	CREATE_RESERVED_INSTANCES_LISTING = 'ec2:CreateReservedInstancesListing',
	CREATE_RESTORE_IMAGE_TASK = 'ec2:CreateRestoreImageTask',
	CREATE_ROUTE = 'ec2:CreateRoute',
	CREATE_ROUTE_TABLE = 'ec2:CreateRouteTable',
	CREATE_SECURITY_GROUP = 'ec2:CreateSecurityGroup',
	CREATE_SNAPSHOT = 'ec2:CreateSnapshot',
	CREATE_SNAPSHOTS = 'ec2:CreateSnapshots',
	CREATE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:CreateSpotDatafeedSubscription',
	CREATE_STORE_IMAGE_TASK = 'ec2:CreateStoreImageTask',
	CREATE_SUBNET = 'ec2:CreateSubnet',
	CREATE_SUBNET_CIDR_RESERVATION = 'ec2:CreateSubnetCidrReservation',
	CREATE_TAGS = 'ec2:CreateTags',
	CREATE_TRAFFIC_MIRROR_FILTER = 'ec2:CreateTrafficMirrorFilter',
	CREATE_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:CreateTrafficMirrorFilterRule',
	CREATE_TRAFFIC_MIRROR_SESSION = 'ec2:CreateTrafficMirrorSession',
	CREATE_TRAFFIC_MIRROR_TARGET = 'ec2:CreateTrafficMirrorTarget',
	CREATE_TRANSIT_GATEWAY = 'ec2:CreateTransitGateway',
	CREATE_TRANSIT_GATEWAY_CONNECT = 'ec2:CreateTransitGatewayConnect',
	CREATE_TRANSIT_GATEWAY_CONNECT_PEER = 'ec2:CreateTransitGatewayConnectPeer',
	CREATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:CreateTransitGatewayMulticastDomain',
	CREATE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:CreateTransitGatewayPeeringAttachment',
	CREATE_TRANSIT_GATEWAY_POLICY_TABLE = 'ec2:CreateTransitGatewayPolicyTable',
	CREATE_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:CreateTransitGatewayPrefixListReference',
	CREATE_TRANSIT_GATEWAY_ROUTE = 'ec2:CreateTransitGatewayRoute',
	CREATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:CreateTransitGatewayRouteTable',
	CREATE_TRANSIT_GATEWAY_ROUTE_TABLE_ANNOUNCEMENT = 'ec2:CreateTransitGatewayRouteTableAnnouncement',
	CREATE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:CreateTransitGatewayVpcAttachment',
	CREATE_VERIFIED_ACCESS_ENDPOINT = 'ec2:CreateVerifiedAccessEndpoint',
	CREATE_VERIFIED_ACCESS_GROUP = 'ec2:CreateVerifiedAccessGroup',
	CREATE_VERIFIED_ACCESS_INSTANCE = 'ec2:CreateVerifiedAccessInstance',
	CREATE_VERIFIED_ACCESS_TRUST_PROVIDER = 'ec2:CreateVerifiedAccessTrustProvider',
	CREATE_VOLUME = 'ec2:CreateVolume',
	CREATE_VPC = 'ec2:CreateVpc',
	CREATE_VPC_ENDPOINT = 'ec2:CreateVpcEndpoint',
	CREATE_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'ec2:CreateVpcEndpointConnectionNotification',
	CREATE_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'ec2:CreateVpcEndpointServiceConfiguration',
	CREATE_VPC_PEERING_CONNECTION = 'ec2:CreateVpcPeeringConnection',
	CREATE_VPN_CONNECTION = 'ec2:CreateVpnConnection',
	CREATE_VPN_CONNECTION_ROUTE = 'ec2:CreateVpnConnectionRoute',
	CREATE_VPN_GATEWAY = 'ec2:CreateVpnGateway',
	DELETE_CARRIER_GATEWAY = 'ec2:DeleteCarrierGateway',
	DELETE_CLIENT_VPN_ENDPOINT = 'ec2:DeleteClientVpnEndpoint',
	DELETE_CLIENT_VPN_ROUTE = 'ec2:DeleteClientVpnRoute',
	DELETE_COIP_CIDR = 'ec2:DeleteCoipCidr',
	DELETE_COIP_POOL = 'ec2:DeleteCoipPool',
	DELETE_COIP_POOL_PERMISSION = 'ec2:DeleteCoipPoolPermission',
	DELETE_CUSTOMER_GATEWAY = 'ec2:DeleteCustomerGateway',
	DELETE_DHCP_OPTIONS = 'ec2:DeleteDhcpOptions',
	DELETE_EGRESS_ONLY_INTERNET_GATEWAY = 'ec2:DeleteEgressOnlyInternetGateway',
	DELETE_FLEETS = 'ec2:DeleteFleets',
	DELETE_FLOW_LOGS = 'ec2:DeleteFlowLogs',
	DELETE_FPGA_IMAGE = 'ec2:DeleteFpgaImage',
	DELETE_INSTANCE_EVENT_WINDOW = 'ec2:DeleteInstanceEventWindow',
	DELETE_INTERNET_GATEWAY = 'ec2:DeleteInternetGateway',
	DELETE_IPAM = 'ec2:DeleteIpam',
	DELETE_IPAM_POOL = 'ec2:DeleteIpamPool',
	DELETE_IPAM_SCOPE = 'ec2:DeleteIpamScope',
	DELETE_KEY_PAIR = 'ec2:DeleteKeyPair',
	DELETE_LAUNCH_TEMPLATE = 'ec2:DeleteLaunchTemplate',
	DELETE_LAUNCH_TEMPLATE_VERSIONS = 'ec2:DeleteLaunchTemplateVersions',
	DELETE_LOCAL_GATEWAY_ROUTE = 'ec2:DeleteLocalGatewayRoute',
	DELETE_LOCAL_GATEWAY_ROUTE_TABLE = 'ec2:DeleteLocalGatewayRouteTable',
	DELETE_LOCAL_GATEWAY_ROUTE_TABLE_PERMISSION = 'ec2:DeleteLocalGatewayRouteTablePermission',
	DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATION = 'ec2:DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation',
	DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'ec2:DeleteLocalGatewayRouteTableVpcAssociation',
	DELETE_MANAGED_PREFIX_LIST = 'ec2:DeleteManagedPrefixList',
	DELETE_NAT_GATEWAY = 'ec2:DeleteNatGateway',
	DELETE_NETWORK_ACL = 'ec2:DeleteNetworkAcl',
	DELETE_NETWORK_ACL_ENTRY = 'ec2:DeleteNetworkAclEntry',
	DELETE_NETWORK_INSIGHTS_ACCESS_SCOPE = 'ec2:DeleteNetworkInsightsAccessScope',
	DELETE_NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSIS = 'ec2:DeleteNetworkInsightsAccessScopeAnalysis',
	DELETE_NETWORK_INSIGHTS_ANALYSIS = 'ec2:DeleteNetworkInsightsAnalysis',
	DELETE_NETWORK_INSIGHTS_PATH = 'ec2:DeleteNetworkInsightsPath',
	DELETE_NETWORK_INTERFACE = 'ec2:DeleteNetworkInterface',
	DELETE_NETWORK_INTERFACE_PERMISSION = 'ec2:DeleteNetworkInterfacePermission',
	DELETE_PLACEMENT_GROUP = 'ec2:DeletePlacementGroup',
	DELETE_PUBLIC_IPV_4_POOL = 'ec2:DeletePublicIpv4Pool',
	DELETE_QUEUED_RESERVED_INSTANCES = 'ec2:DeleteQueuedReservedInstances',
	DELETE_RESOURCE_POLICY = 'ec2:DeleteResourcePolicy',
	DELETE_ROUTE = 'ec2:DeleteRoute',
	DELETE_ROUTE_TABLE = 'ec2:DeleteRouteTable',
	DELETE_SECURITY_GROUP = 'ec2:DeleteSecurityGroup',
	DELETE_SNAPSHOT = 'ec2:DeleteSnapshot',
	DELETE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:DeleteSpotDatafeedSubscription',
	DELETE_SUBNET = 'ec2:DeleteSubnet',
	DELETE_SUBNET_CIDR_RESERVATION = 'ec2:DeleteSubnetCidrReservation',
	DELETE_TAGS = 'ec2:DeleteTags',
	DELETE_TRAFFIC_MIRROR_FILTER = 'ec2:DeleteTrafficMirrorFilter',
	DELETE_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:DeleteTrafficMirrorFilterRule',
	DELETE_TRAFFIC_MIRROR_SESSION = 'ec2:DeleteTrafficMirrorSession',
	DELETE_TRAFFIC_MIRROR_TARGET = 'ec2:DeleteTrafficMirrorTarget',
	DELETE_TRANSIT_GATEWAY = 'ec2:DeleteTransitGateway',
	DELETE_TRANSIT_GATEWAY_CONNECT = 'ec2:DeleteTransitGatewayConnect',
	DELETE_TRANSIT_GATEWAY_CONNECT_PEER = 'ec2:DeleteTransitGatewayConnectPeer',
	DELETE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:DeleteTransitGatewayMulticastDomain',
	DELETE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:DeleteTransitGatewayPeeringAttachment',
	DELETE_TRANSIT_GATEWAY_POLICY_TABLE = 'ec2:DeleteTransitGatewayPolicyTable',
	DELETE_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:DeleteTransitGatewayPrefixListReference',
	DELETE_TRANSIT_GATEWAY_ROUTE = 'ec2:DeleteTransitGatewayRoute',
	DELETE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:DeleteTransitGatewayRouteTable',
	DELETE_TRANSIT_GATEWAY_ROUTE_TABLE_ANNOUNCEMENT = 'ec2:DeleteTransitGatewayRouteTableAnnouncement',
	DELETE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:DeleteTransitGatewayVpcAttachment',
	DELETE_VERIFIED_ACCESS_ENDPOINT = 'ec2:DeleteVerifiedAccessEndpoint',
	DELETE_VERIFIED_ACCESS_GROUP = 'ec2:DeleteVerifiedAccessGroup',
	DELETE_VERIFIED_ACCESS_INSTANCE = 'ec2:DeleteVerifiedAccessInstance',
	DELETE_VERIFIED_ACCESS_TRUST_PROVIDER = 'ec2:DeleteVerifiedAccessTrustProvider',
	DELETE_VOLUME = 'ec2:DeleteVolume',
	DELETE_VPC = 'ec2:DeleteVpc',
	DELETE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'ec2:DeleteVpcEndpointConnectionNotifications',
	DELETE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'ec2:DeleteVpcEndpointServiceConfigurations',
	DELETE_VPC_ENDPOINTS = 'ec2:DeleteVpcEndpoints',
	DELETE_VPC_PEERING_CONNECTION = 'ec2:DeleteVpcPeeringConnection',
	DELETE_VPN_CONNECTION = 'ec2:DeleteVpnConnection',
	DELETE_VPN_CONNECTION_ROUTE = 'ec2:DeleteVpnConnectionRoute',
	DELETE_VPN_GATEWAY = 'ec2:DeleteVpnGateway',
	DEPROVISION_BYOIP_CIDR = 'ec2:DeprovisionByoipCidr',
	DEPROVISION_IPAM_POOL_CIDR = 'ec2:DeprovisionIpamPoolCidr',
	DEPROVISION_PUBLIC_IPV_4_POOL_CIDR = 'ec2:DeprovisionPublicIpv4PoolCidr',
	DEREGISTER_IMAGE = 'ec2:DeregisterImage',
	DEREGISTER_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:DeregisterInstanceEventNotificationAttributes',
	DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'ec2:DeregisterTransitGatewayMulticastGroupMembers',
	DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'ec2:DeregisterTransitGatewayMulticastGroupSources',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'ec2:DescribeAccountAttributes',
	DESCRIBE_ADDRESS_TRANSFERS = 'ec2:DescribeAddressTransfers',
	DESCRIBE_ADDRESSES = 'ec2:DescribeAddresses',
	DESCRIBE_ADDRESSES_ATTRIBUTE = 'ec2:DescribeAddressesAttribute',
	DESCRIBE_AGGREGATE_ID_FORMAT = 'ec2:DescribeAggregateIdFormat',
	DESCRIBE_AVAILABILITY_ZONES = 'ec2:DescribeAvailabilityZones',
	DESCRIBE_AWS_NETWORK_PERFORMANCE_METRIC_SUBSCRIPTIONS = 'ec2:DescribeAwsNetworkPerformanceMetricSubscriptions',
	DESCRIBE_BUNDLE_TASKS = 'ec2:DescribeBundleTasks',
	DESCRIBE_BYOIP_CIDRS = 'ec2:DescribeByoipCidrs',
	DESCRIBE_CAPACITY_RESERVATION_FLEETS = 'ec2:DescribeCapacityReservationFleets',
	DESCRIBE_CAPACITY_RESERVATIONS = 'ec2:DescribeCapacityReservations',
	DESCRIBE_CARRIER_GATEWAYS = 'ec2:DescribeCarrierGateways',
	DESCRIBE_CLASSIC_LINK_INSTANCES = 'ec2:DescribeClassicLinkInstances',
	DESCRIBE_CLIENT_VPN_AUTHORIZATION_RULES = 'ec2:DescribeClientVpnAuthorizationRules',
	DESCRIBE_CLIENT_VPN_CONNECTIONS = 'ec2:DescribeClientVpnConnections',
	DESCRIBE_CLIENT_VPN_ENDPOINTS = 'ec2:DescribeClientVpnEndpoints',
	DESCRIBE_CLIENT_VPN_ROUTES = 'ec2:DescribeClientVpnRoutes',
	DESCRIBE_CLIENT_VPN_TARGET_NETWORKS = 'ec2:DescribeClientVpnTargetNetworks',
	DESCRIBE_COIP_POOLS = 'ec2:DescribeCoipPools',
	DESCRIBE_CONVERSION_TASKS = 'ec2:DescribeConversionTasks',
	DESCRIBE_CUSTOMER_GATEWAYS = 'ec2:DescribeCustomerGateways',
	DESCRIBE_DHCP_OPTIONS = 'ec2:DescribeDhcpOptions',
	DESCRIBE_EGRESS_ONLY_INTERNET_GATEWAYS = 'ec2:DescribeEgressOnlyInternetGateways',
	DESCRIBE_ELASTIC_GPUS = 'ec2:DescribeElasticGpus',
	DESCRIBE_EXPORT_IMAGE_TASKS = 'ec2:DescribeExportImageTasks',
	DESCRIBE_EXPORT_TASKS = 'ec2:DescribeExportTasks',
	DESCRIBE_FAST_LAUNCH_IMAGES = 'ec2:DescribeFastLaunchImages',
	DESCRIBE_FAST_SNAPSHOT_RESTORES = 'ec2:DescribeFastSnapshotRestores',
	DESCRIBE_FLEET_HISTORY = 'ec2:DescribeFleetHistory',
	DESCRIBE_FLEET_INSTANCES = 'ec2:DescribeFleetInstances',
	DESCRIBE_FLEETS = 'ec2:DescribeFleets',
	DESCRIBE_FLOW_LOGS = 'ec2:DescribeFlowLogs',
	DESCRIBE_FPGA_IMAGE_ATTRIBUTE = 'ec2:DescribeFpgaImageAttribute',
	DESCRIBE_FPGA_IMAGES = 'ec2:DescribeFpgaImages',
	DESCRIBE_HOST_RESERVATION_OFFERINGS = 'ec2:DescribeHostReservationOfferings',
	DESCRIBE_HOST_RESERVATIONS = 'ec2:DescribeHostReservations',
	DESCRIBE_HOSTS = 'ec2:DescribeHosts',
	DESCRIBE_IAM_INSTANCE_PROFILE_ASSOCIATIONS = 'ec2:DescribeIamInstanceProfileAssociations',
	DESCRIBE_ID_FORMAT = 'ec2:DescribeIdFormat',
	DESCRIBE_IDENTITY_ID_FORMAT = 'ec2:DescribeIdentityIdFormat',
	DESCRIBE_IMAGE_ATTRIBUTE = 'ec2:DescribeImageAttribute',
	DESCRIBE_IMAGES = 'ec2:DescribeImages',
	DESCRIBE_IMPORT_IMAGE_TASKS = 'ec2:DescribeImportImageTasks',
	DESCRIBE_IMPORT_SNAPSHOT_TASKS = 'ec2:DescribeImportSnapshotTasks',
	DESCRIBE_INSTANCE_ATTRIBUTE = 'ec2:DescribeInstanceAttribute',
	DESCRIBE_INSTANCE_CREDIT_SPECIFICATIONS = 'ec2:DescribeInstanceCreditSpecifications',
	DESCRIBE_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:DescribeInstanceEventNotificationAttributes',
	DESCRIBE_INSTANCE_EVENT_WINDOWS = 'ec2:DescribeInstanceEventWindows',
	DESCRIBE_INSTANCE_STATUS = 'ec2:DescribeInstanceStatus',
	DESCRIBE_INSTANCE_TYPE_OFFERINGS = 'ec2:DescribeInstanceTypeOfferings',
	DESCRIBE_INSTANCE_TYPES = 'ec2:DescribeInstanceTypes',
	DESCRIBE_INSTANCES = 'ec2:DescribeInstances',
	DESCRIBE_INTERNET_GATEWAYS = 'ec2:DescribeInternetGateways',
	DESCRIBE_IPAM_POOLS = 'ec2:DescribeIpamPools',
	DESCRIBE_IPAM_SCOPES = 'ec2:DescribeIpamScopes',
	DESCRIBE_IPAMS = 'ec2:DescribeIpams',
	DESCRIBE_IPV_6_POOLS = 'ec2:DescribeIpv6Pools',
	DESCRIBE_KEY_PAIRS = 'ec2:DescribeKeyPairs',
	DESCRIBE_LAUNCH_TEMPLATE_VERSIONS = 'ec2:DescribeLaunchTemplateVersions',
	DESCRIBE_LAUNCH_TEMPLATES = 'ec2:DescribeLaunchTemplates',
	DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_PERMISSIONS = 'ec2:DescribeLocalGatewayRouteTablePermissions',
	DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATIONS = 'ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
	DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATIONS = 'ec2:DescribeLocalGatewayRouteTableVpcAssociations',
	DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLES = 'ec2:DescribeLocalGatewayRouteTables',
	DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUPS = 'ec2:DescribeLocalGatewayVirtualInterfaceGroups',
	DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACES = 'ec2:DescribeLocalGatewayVirtualInterfaces',
	DESCRIBE_LOCAL_GATEWAYS = 'ec2:DescribeLocalGateways',
	DESCRIBE_MANAGED_PREFIX_LISTS = 'ec2:DescribeManagedPrefixLists',
	DESCRIBE_MOVING_ADDRESSES = 'ec2:DescribeMovingAddresses',
	DESCRIBE_NAT_GATEWAYS = 'ec2:DescribeNatGateways',
	DESCRIBE_NETWORK_ACLS = 'ec2:DescribeNetworkAcls',
	DESCRIBE_NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSES = 'ec2:DescribeNetworkInsightsAccessScopeAnalyses',
	DESCRIBE_NETWORK_INSIGHTS_ACCESS_SCOPES = 'ec2:DescribeNetworkInsightsAccessScopes',
	DESCRIBE_NETWORK_INSIGHTS_ANALYSES = 'ec2:DescribeNetworkInsightsAnalyses',
	DESCRIBE_NETWORK_INSIGHTS_PATHS = 'ec2:DescribeNetworkInsightsPaths',
	DESCRIBE_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:DescribeNetworkInterfaceAttribute',
	DESCRIBE_NETWORK_INTERFACE_PERMISSIONS = 'ec2:DescribeNetworkInterfacePermissions',
	DESCRIBE_NETWORK_INTERFACES = 'ec2:DescribeNetworkInterfaces',
	DESCRIBE_PLACEMENT_GROUPS = 'ec2:DescribePlacementGroups',
	DESCRIBE_PREFIX_LISTS = 'ec2:DescribePrefixLists',
	DESCRIBE_PRINCIPAL_ID_FORMAT = 'ec2:DescribePrincipalIdFormat',
	DESCRIBE_PUBLIC_IPV_4_POOLS = 'ec2:DescribePublicIpv4Pools',
	DESCRIBE_REGIONS = 'ec2:DescribeRegions',
	DESCRIBE_REPLACE_ROOT_VOLUME_TASKS = 'ec2:DescribeReplaceRootVolumeTasks',
	DESCRIBE_RESERVED_INSTANCES = 'ec2:DescribeReservedInstances',
	DESCRIBE_RESERVED_INSTANCES_LISTINGS = 'ec2:DescribeReservedInstancesListings',
	DESCRIBE_RESERVED_INSTANCES_MODIFICATIONS = 'ec2:DescribeReservedInstancesModifications',
	DESCRIBE_RESERVED_INSTANCES_OFFERINGS = 'ec2:DescribeReservedInstancesOfferings',
	DESCRIBE_ROUTE_TABLES = 'ec2:DescribeRouteTables',
	DESCRIBE_SCHEDULED_INSTANCE_AVAILABILITY = 'ec2:DescribeScheduledInstanceAvailability',
	DESCRIBE_SCHEDULED_INSTANCES = 'ec2:DescribeScheduledInstances',
	DESCRIBE_SECURITY_GROUP_REFERENCES = 'ec2:DescribeSecurityGroupReferences',
	DESCRIBE_SECURITY_GROUP_RULES = 'ec2:DescribeSecurityGroupRules',
	DESCRIBE_SECURITY_GROUPS = 'ec2:DescribeSecurityGroups',
	DESCRIBE_SNAPSHOT_ATTRIBUTE = 'ec2:DescribeSnapshotAttribute',
	DESCRIBE_SNAPSHOT_TIER_STATUS = 'ec2:DescribeSnapshotTierStatus',
	DESCRIBE_SNAPSHOTS = 'ec2:DescribeSnapshots',
	DESCRIBE_SPOT_DATAFEED_SUBSCRIPTION = 'ec2:DescribeSpotDatafeedSubscription',
	DESCRIBE_SPOT_FLEET_INSTANCES = 'ec2:DescribeSpotFleetInstances',
	DESCRIBE_SPOT_FLEET_REQUEST_HISTORY = 'ec2:DescribeSpotFleetRequestHistory',
	DESCRIBE_SPOT_FLEET_REQUESTS = 'ec2:DescribeSpotFleetRequests',
	DESCRIBE_SPOT_INSTANCE_REQUESTS = 'ec2:DescribeSpotInstanceRequests',
	DESCRIBE_SPOT_PRICE_HISTORY = 'ec2:DescribeSpotPriceHistory',
	DESCRIBE_STALE_SECURITY_GROUPS = 'ec2:DescribeStaleSecurityGroups',
	DESCRIBE_STORE_IMAGE_TASKS = 'ec2:DescribeStoreImageTasks',
	DESCRIBE_SUBNETS = 'ec2:DescribeSubnets',
	DESCRIBE_TAGS = 'ec2:DescribeTags',
	DESCRIBE_TRAFFIC_MIRROR_FILTERS = 'ec2:DescribeTrafficMirrorFilters',
	DESCRIBE_TRAFFIC_MIRROR_SESSIONS = 'ec2:DescribeTrafficMirrorSessions',
	DESCRIBE_TRAFFIC_MIRROR_TARGETS = 'ec2:DescribeTrafficMirrorTargets',
	DESCRIBE_TRANSIT_GATEWAY_ATTACHMENTS = 'ec2:DescribeTransitGatewayAttachments',
	DESCRIBE_TRANSIT_GATEWAY_CONNECT_PEERS = 'ec2:DescribeTransitGatewayConnectPeers',
	DESCRIBE_TRANSIT_GATEWAY_CONNECTS = 'ec2:DescribeTransitGatewayConnects',
	DESCRIBE_TRANSIT_GATEWAY_MULTICAST_DOMAINS = 'ec2:DescribeTransitGatewayMulticastDomains',
	DESCRIBE_TRANSIT_GATEWAY_PEERING_ATTACHMENTS = 'ec2:DescribeTransitGatewayPeeringAttachments',
	DESCRIBE_TRANSIT_GATEWAY_POLICY_TABLES = 'ec2:DescribeTransitGatewayPolicyTables',
	DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLE_ANNOUNCEMENTS = 'ec2:DescribeTransitGatewayRouteTableAnnouncements',
	DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLES = 'ec2:DescribeTransitGatewayRouteTables',
	DESCRIBE_TRANSIT_GATEWAY_VPC_ATTACHMENTS = 'ec2:DescribeTransitGatewayVpcAttachments',
	DESCRIBE_TRANSIT_GATEWAYS = 'ec2:DescribeTransitGateways',
	DESCRIBE_TRUNK_INTERFACE_ASSOCIATIONS = 'ec2:DescribeTrunkInterfaceAssociations',
	DESCRIBE_VERIFIED_ACCESS_ENDPOINTS = 'ec2:DescribeVerifiedAccessEndpoints',
	DESCRIBE_VERIFIED_ACCESS_GROUPS = 'ec2:DescribeVerifiedAccessGroups',
	DESCRIBE_VERIFIED_ACCESS_INSTANCE_LOGGING_CONFIGURATIONS = 'ec2:DescribeVerifiedAccessInstanceLoggingConfigurations',
	DESCRIBE_VERIFIED_ACCESS_INSTANCES = 'ec2:DescribeVerifiedAccessInstances',
	DESCRIBE_VERIFIED_ACCESS_TRUST_PROVIDERS = 'ec2:DescribeVerifiedAccessTrustProviders',
	DESCRIBE_VOLUME_ATTRIBUTE = 'ec2:DescribeVolumeAttribute',
	DESCRIBE_VOLUME_STATUS = 'ec2:DescribeVolumeStatus',
	DESCRIBE_VOLUMES = 'ec2:DescribeVolumes',
	DESCRIBE_VOLUMES_MODIFICATIONS = 'ec2:DescribeVolumesModifications',
	DESCRIBE_VPC_ATTRIBUTE = 'ec2:DescribeVpcAttribute',
	DESCRIBE_VPC_CLASSIC_LINK = 'ec2:DescribeVpcClassicLink',
	DESCRIBE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:DescribeVpcClassicLinkDnsSupport',
	DESCRIBE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'ec2:DescribeVpcEndpointConnectionNotifications',
	DESCRIBE_VPC_ENDPOINT_CONNECTIONS = 'ec2:DescribeVpcEndpointConnections',
	DESCRIBE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'ec2:DescribeVpcEndpointServiceConfigurations',
	DESCRIBE_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'ec2:DescribeVpcEndpointServicePermissions',
	DESCRIBE_VPC_ENDPOINT_SERVICES = 'ec2:DescribeVpcEndpointServices',
	DESCRIBE_VPC_ENDPOINTS = 'ec2:DescribeVpcEndpoints',
	DESCRIBE_VPC_PEERING_CONNECTIONS = 'ec2:DescribeVpcPeeringConnections',
	DESCRIBE_VPCS = 'ec2:DescribeVpcs',
	DESCRIBE_VPN_CONNECTIONS = 'ec2:DescribeVpnConnections',
	DESCRIBE_VPN_GATEWAYS = 'ec2:DescribeVpnGateways',
	DETACH_CLASSIC_LINK_VPC = 'ec2:DetachClassicLinkVpc',
	DETACH_INTERNET_GATEWAY = 'ec2:DetachInternetGateway',
	DETACH_NETWORK_INTERFACE = 'ec2:DetachNetworkInterface',
	DETACH_VERIFIED_ACCESS_TRUST_PROVIDER = 'ec2:DetachVerifiedAccessTrustProvider',
	DETACH_VOLUME = 'ec2:DetachVolume',
	DETACH_VPN_GATEWAY = 'ec2:DetachVpnGateway',
	DISABLE_ADDRESS_TRANSFER = 'ec2:DisableAddressTransfer',
	DISABLE_AWS_NETWORK_PERFORMANCE_METRIC_SUBSCRIPTION = 'ec2:DisableAwsNetworkPerformanceMetricSubscription',
	DISABLE_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:DisableEbsEncryptionByDefault',
	DISABLE_FAST_LAUNCH = 'ec2:DisableFastLaunch',
	DISABLE_FAST_SNAPSHOT_RESTORES = 'ec2:DisableFastSnapshotRestores',
	DISABLE_IMAGE_DEPRECATION = 'ec2:DisableImageDeprecation',
	DISABLE_IPAM_ORGANIZATION_ADMIN_ACCOUNT = 'ec2:DisableIpamOrganizationAdminAccount',
	DISABLE_SERIAL_CONSOLE_ACCESS = 'ec2:DisableSerialConsoleAccess',
	DISABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'ec2:DisableTransitGatewayRouteTablePropagation',
	DISABLE_VGW_ROUTE_PROPAGATION = 'ec2:DisableVgwRoutePropagation',
	DISABLE_VPC_CLASSIC_LINK = 'ec2:DisableVpcClassicLink',
	DISABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:DisableVpcClassicLinkDnsSupport',
	DISASSOCIATE_ADDRESS = 'ec2:DisassociateAddress',
	DISASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'ec2:DisassociateClientVpnTargetNetwork',
	DISASSOCIATE_ENCLAVE_CERTIFICATE_IAM_ROLE = 'ec2:DisassociateEnclaveCertificateIamRole',
	DISASSOCIATE_IAM_INSTANCE_PROFILE = 'ec2:DisassociateIamInstanceProfile',
	DISASSOCIATE_INSTANCE_EVENT_WINDOW = 'ec2:DisassociateInstanceEventWindow',
	DISASSOCIATE_ROUTE_TABLE = 'ec2:DisassociateRouteTable',
	DISASSOCIATE_SUBNET_CIDR_BLOCK = 'ec2:DisassociateSubnetCidrBlock',
	DISASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'ec2:DisassociateTransitGatewayMulticastDomain',
	DISASSOCIATE_TRANSIT_GATEWAY_POLICY_TABLE = 'ec2:DisassociateTransitGatewayPolicyTable',
	DISASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'ec2:DisassociateTransitGatewayRouteTable',
	DISASSOCIATE_TRUNK_INTERFACE = 'ec2:DisassociateTrunkInterface',
	DISASSOCIATE_VPC_CIDR_BLOCK = 'ec2:DisassociateVpcCidrBlock',
	ENABLE_ADDRESS_TRANSFER = 'ec2:EnableAddressTransfer',
	ENABLE_AWS_NETWORK_PERFORMANCE_METRIC_SUBSCRIPTION = 'ec2:EnableAwsNetworkPerformanceMetricSubscription',
	ENABLE_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:EnableEbsEncryptionByDefault',
	ENABLE_FAST_LAUNCH = 'ec2:EnableFastLaunch',
	ENABLE_FAST_SNAPSHOT_RESTORES = 'ec2:EnableFastSnapshotRestores',
	ENABLE_IMAGE_DEPRECATION = 'ec2:EnableImageDeprecation',
	ENABLE_IPAM_ORGANIZATION_ADMIN_ACCOUNT = 'ec2:EnableIpamOrganizationAdminAccount',
	ENABLE_REACHABILITY_ANALYZER_ORGANIZATION_SHARING = 'ec2:EnableReachabilityAnalyzerOrganizationSharing',
	ENABLE_SERIAL_CONSOLE_ACCESS = 'ec2:EnableSerialConsoleAccess',
	ENABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'ec2:EnableTransitGatewayRouteTablePropagation',
	ENABLE_VGW_ROUTE_PROPAGATION = 'ec2:EnableVgwRoutePropagation',
	ENABLE_VOLUME_IO = 'ec2:EnableVolumeIO',
	ENABLE_VPC_CLASSIC_LINK = 'ec2:EnableVpcClassicLink',
	ENABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'ec2:EnableVpcClassicLinkDnsSupport',
	EXPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ec2:ExportClientVpnClientCertificateRevocationList',
	EXPORT_CLIENT_VPN_CLIENT_CONFIGURATION = 'ec2:ExportClientVpnClientConfiguration',
	EXPORT_IMAGE = 'ec2:ExportImage',
	EXPORT_TRANSIT_GATEWAY_ROUTES = 'ec2:ExportTransitGatewayRoutes',
	GET_ASSOCIATED_ENCLAVE_CERTIFICATE_IAM_ROLES = 'ec2:GetAssociatedEnclaveCertificateIamRoles',
	GET_ASSOCIATED_IPV_6_POOL_CIDRS = 'ec2:GetAssociatedIpv6PoolCidrs',
	GET_AWS_NETWORK_PERFORMANCE_DATA = 'ec2:GetAwsNetworkPerformanceData',
	GET_CAPACITY_RESERVATION_USAGE = 'ec2:GetCapacityReservationUsage',
	GET_COIP_POOL_USAGE = 'ec2:GetCoipPoolUsage',
	GET_CONSOLE_OUTPUT = 'ec2:GetConsoleOutput',
	GET_CONSOLE_SCREENSHOT = 'ec2:GetConsoleScreenshot',
	GET_DEFAULT_CREDIT_SPECIFICATION = 'ec2:GetDefaultCreditSpecification',
	GET_EBS_DEFAULT_KMS_KEY_ID = 'ec2:GetEbsDefaultKmsKeyId',
	GET_EBS_ENCRYPTION_BY_DEFAULT = 'ec2:GetEbsEncryptionByDefault',
	GET_FLOW_LOGS_INTEGRATION_TEMPLATE = 'ec2:GetFlowLogsIntegrationTemplate',
	GET_GROUPS_FOR_CAPACITY_RESERVATION = 'ec2:GetGroupsForCapacityReservation',
	GET_HOST_RESERVATION_PURCHASE_PREVIEW = 'ec2:GetHostReservationPurchasePreview',
	GET_INSTANCE_TYPES_FROM_INSTANCE_REQUIREMENTS = 'ec2:GetInstanceTypesFromInstanceRequirements',
	GET_INSTANCE_UEFI_DATA = 'ec2:GetInstanceUefiData',
	GET_IPAM_ADDRESS_HISTORY = 'ec2:GetIpamAddressHistory',
	GET_IPAM_POOL_ALLOCATIONS = 'ec2:GetIpamPoolAllocations',
	GET_IPAM_POOL_CIDRS = 'ec2:GetIpamPoolCidrs',
	GET_IPAM_RESOURCE_CIDRS = 'ec2:GetIpamResourceCidrs',
	GET_LAUNCH_TEMPLATE_DATA = 'ec2:GetLaunchTemplateData',
	GET_MANAGED_PREFIX_LIST_ASSOCIATIONS = 'ec2:GetManagedPrefixListAssociations',
	GET_MANAGED_PREFIX_LIST_ENTRIES = 'ec2:GetManagedPrefixListEntries',
	GET_NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSIS_FINDINGS = 'ec2:GetNetworkInsightsAccessScopeAnalysisFindings',
	GET_NETWORK_INSIGHTS_ACCESS_SCOPE_CONTENT = 'ec2:GetNetworkInsightsAccessScopeContent',
	GET_PASSWORD_DATA = 'ec2:GetPasswordData',
	GET_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'ec2:GetReservedInstancesExchangeQuote',
	GET_RESOURCE_POLICY = 'ec2:GetResourcePolicy',
	GET_SERIAL_CONSOLE_ACCESS_STATUS = 'ec2:GetSerialConsoleAccessStatus',
	GET_SPOT_PLACEMENT_SCORES = 'ec2:GetSpotPlacementScores',
	GET_SUBNET_CIDR_RESERVATIONS = 'ec2:GetSubnetCidrReservations',
	GET_TRANSIT_GATEWAY_ATTACHMENT_PROPAGATIONS = 'ec2:GetTransitGatewayAttachmentPropagations',
	GET_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS = 'ec2:GetTransitGatewayMulticastDomainAssociations',
	GET_TRANSIT_GATEWAY_POLICY_TABLE_ASSOCIATIONS = 'ec2:GetTransitGatewayPolicyTableAssociations',
	GET_TRANSIT_GATEWAY_POLICY_TABLE_ENTRIES = 'ec2:GetTransitGatewayPolicyTableEntries',
	GET_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCES = 'ec2:GetTransitGatewayPrefixListReferences',
	GET_TRANSIT_GATEWAY_ROUTE_TABLE_ASSOCIATIONS = 'ec2:GetTransitGatewayRouteTableAssociations',
	GET_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATIONS = 'ec2:GetTransitGatewayRouteTablePropagations',
	GET_VERIFIED_ACCESS_ENDPOINT_POLICY = 'ec2:GetVerifiedAccessEndpointPolicy',
	GET_VERIFIED_ACCESS_GROUP_POLICY = 'ec2:GetVerifiedAccessGroupPolicy',
	GET_VPN_CONNECTION_DEVICE_SAMPLE_CONFIGURATION = 'ec2:GetVpnConnectionDeviceSampleConfiguration',
	GET_VPN_CONNECTION_DEVICE_TYPES = 'ec2:GetVpnConnectionDeviceTypes',
	IMPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ec2:ImportClientVpnClientCertificateRevocationList',
	IMPORT_IMAGE = 'ec2:ImportImage',
	IMPORT_INSTANCE = 'ec2:ImportInstance',
	IMPORT_KEY_PAIR = 'ec2:ImportKeyPair',
	IMPORT_SNAPSHOT = 'ec2:ImportSnapshot',
	IMPORT_VOLUME = 'ec2:ImportVolume',
	LIST_IMAGES_IN_RECYCLE_BIN = 'ec2:ListImagesInRecycleBin',
	LIST_SNAPSHOTS_IN_RECYCLE_BIN = 'ec2:ListSnapshotsInRecycleBin',
	MODIFY_ADDRESS_ATTRIBUTE = 'ec2:ModifyAddressAttribute',
	MODIFY_AVAILABILITY_ZONE_GROUP = 'ec2:ModifyAvailabilityZoneGroup',
	MODIFY_CAPACITY_RESERVATION = 'ec2:ModifyCapacityReservation',
	MODIFY_CAPACITY_RESERVATION_FLEET = 'ec2:ModifyCapacityReservationFleet',
	MODIFY_CLIENT_VPN_ENDPOINT = 'ec2:ModifyClientVpnEndpoint',
	MODIFY_DEFAULT_CREDIT_SPECIFICATION = 'ec2:ModifyDefaultCreditSpecification',
	MODIFY_EBS_DEFAULT_KMS_KEY_ID = 'ec2:ModifyEbsDefaultKmsKeyId',
	MODIFY_FLEET = 'ec2:ModifyFleet',
	MODIFY_FPGA_IMAGE_ATTRIBUTE = 'ec2:ModifyFpgaImageAttribute',
	MODIFY_HOSTS = 'ec2:ModifyHosts',
	MODIFY_ID_FORMAT = 'ec2:ModifyIdFormat',
	MODIFY_IDENTITY_ID_FORMAT = 'ec2:ModifyIdentityIdFormat',
	MODIFY_IMAGE_ATTRIBUTE = 'ec2:ModifyImageAttribute',
	MODIFY_INSTANCE_ATTRIBUTE = 'ec2:ModifyInstanceAttribute',
	MODIFY_INSTANCE_CAPACITY_RESERVATION_ATTRIBUTES = 'ec2:ModifyInstanceCapacityReservationAttributes',
	MODIFY_INSTANCE_CREDIT_SPECIFICATION = 'ec2:ModifyInstanceCreditSpecification',
	MODIFY_INSTANCE_EVENT_START_TIME = 'ec2:ModifyInstanceEventStartTime',
	MODIFY_INSTANCE_EVENT_WINDOW = 'ec2:ModifyInstanceEventWindow',
	MODIFY_INSTANCE_MAINTENANCE_OPTIONS = 'ec2:ModifyInstanceMaintenanceOptions',
	MODIFY_INSTANCE_METADATA_OPTIONS = 'ec2:ModifyInstanceMetadataOptions',
	MODIFY_INSTANCE_PLACEMENT = 'ec2:ModifyInstancePlacement',
	MODIFY_IPAM = 'ec2:ModifyIpam',
	MODIFY_IPAM_POOL = 'ec2:ModifyIpamPool',
	MODIFY_IPAM_RESOURCE_CIDR = 'ec2:ModifyIpamResourceCidr',
	MODIFY_IPAM_SCOPE = 'ec2:ModifyIpamScope',
	MODIFY_LAUNCH_TEMPLATE = 'ec2:ModifyLaunchTemplate',
	MODIFY_LOCAL_GATEWAY_ROUTE = 'ec2:ModifyLocalGatewayRoute',
	MODIFY_MANAGED_PREFIX_LIST = 'ec2:ModifyManagedPrefixList',
	MODIFY_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:ModifyNetworkInterfaceAttribute',
	MODIFY_PRIVATE_DNS_NAME_OPTIONS = 'ec2:ModifyPrivateDnsNameOptions',
	MODIFY_RESERVED_INSTANCES = 'ec2:ModifyReservedInstances',
	MODIFY_SECURITY_GROUP_RULES = 'ec2:ModifySecurityGroupRules',
	MODIFY_SNAPSHOT_ATTRIBUTE = 'ec2:ModifySnapshotAttribute',
	MODIFY_SNAPSHOT_TIER = 'ec2:ModifySnapshotTier',
	MODIFY_SPOT_FLEET_REQUEST = 'ec2:ModifySpotFleetRequest',
	MODIFY_SUBNET_ATTRIBUTE = 'ec2:ModifySubnetAttribute',
	MODIFY_TRAFFIC_MIRROR_FILTER_NETWORK_SERVICES = 'ec2:ModifyTrafficMirrorFilterNetworkServices',
	MODIFY_TRAFFIC_MIRROR_FILTER_RULE = 'ec2:ModifyTrafficMirrorFilterRule',
	MODIFY_TRAFFIC_MIRROR_SESSION = 'ec2:ModifyTrafficMirrorSession',
	MODIFY_TRANSIT_GATEWAY = 'ec2:ModifyTransitGateway',
	MODIFY_TRANSIT_GATEWAY_PREFIX_LIST_REFERENCE = 'ec2:ModifyTransitGatewayPrefixListReference',
	MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:ModifyTransitGatewayVpcAttachment',
	MODIFY_VERIFIED_ACCESS_ENDPOINT = 'ec2:ModifyVerifiedAccessEndpoint',
	MODIFY_VERIFIED_ACCESS_ENDPOINT_POLICY = 'ec2:ModifyVerifiedAccessEndpointPolicy',
	MODIFY_VERIFIED_ACCESS_GROUP = 'ec2:ModifyVerifiedAccessGroup',
	MODIFY_VERIFIED_ACCESS_GROUP_POLICY = 'ec2:ModifyVerifiedAccessGroupPolicy',
	MODIFY_VERIFIED_ACCESS_INSTANCE = 'ec2:ModifyVerifiedAccessInstance',
	MODIFY_VERIFIED_ACCESS_INSTANCE_LOGGING_CONFIGURATION = 'ec2:ModifyVerifiedAccessInstanceLoggingConfiguration',
	MODIFY_VERIFIED_ACCESS_TRUST_PROVIDER = 'ec2:ModifyVerifiedAccessTrustProvider',
	MODIFY_VOLUME = 'ec2:ModifyVolume',
	MODIFY_VOLUME_ATTRIBUTE = 'ec2:ModifyVolumeAttribute',
	MODIFY_VPC_ATTRIBUTE = 'ec2:ModifyVpcAttribute',
	MODIFY_VPC_ENDPOINT = 'ec2:ModifyVpcEndpoint',
	MODIFY_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'ec2:ModifyVpcEndpointConnectionNotification',
	MODIFY_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'ec2:ModifyVpcEndpointServiceConfiguration',
	MODIFY_VPC_ENDPOINT_SERVICE_PAYER_RESPONSIBILITY = 'ec2:ModifyVpcEndpointServicePayerResponsibility',
	MODIFY_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'ec2:ModifyVpcEndpointServicePermissions',
	MODIFY_VPC_PEERING_CONNECTION_OPTIONS = 'ec2:ModifyVpcPeeringConnectionOptions',
	MODIFY_VPC_TENANCY = 'ec2:ModifyVpcTenancy',
	MODIFY_VPN_CONNECTION = 'ec2:ModifyVpnConnection',
	MODIFY_VPN_CONNECTION_OPTIONS = 'ec2:ModifyVpnConnectionOptions',
	MODIFY_VPN_TUNNEL_CERTIFICATE = 'ec2:ModifyVpnTunnelCertificate',
	MODIFY_VPN_TUNNEL_OPTIONS = 'ec2:ModifyVpnTunnelOptions',
	MONITOR_INSTANCES = 'ec2:MonitorInstances',
	MOVE_ADDRESS_TO_VPC = 'ec2:MoveAddressToVpc',
	MOVE_BYOIP_CIDR_TO_IPAM = 'ec2:MoveByoipCidrToIpam',
	PROVISION_BYOIP_CIDR = 'ec2:ProvisionByoipCidr',
	PROVISION_IPAM_POOL_CIDR = 'ec2:ProvisionIpamPoolCidr',
	PROVISION_PUBLIC_IPV_4_POOL_CIDR = 'ec2:ProvisionPublicIpv4PoolCidr',
	PURCHASE_HOST_RESERVATION = 'ec2:PurchaseHostReservation',
	PURCHASE_RESERVED_INSTANCES_OFFERING = 'ec2:PurchaseReservedInstancesOffering',
	PURCHASE_SCHEDULED_INSTANCES = 'ec2:PurchaseScheduledInstances',
	PUT_RESOURCE_POLICY = 'ec2:PutResourcePolicy',
	REBOOT_INSTANCES = 'ec2:RebootInstances',
	REGISTER_IMAGE = 'ec2:RegisterImage',
	REGISTER_INSTANCE_EVENT_NOTIFICATION_ATTRIBUTES = 'ec2:RegisterInstanceEventNotificationAttributes',
	REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'ec2:RegisterTransitGatewayMulticastGroupMembers',
	REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'ec2:RegisterTransitGatewayMulticastGroupSources',
	REJECT_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS = 'ec2:RejectTransitGatewayMulticastDomainAssociations',
	REJECT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'ec2:RejectTransitGatewayPeeringAttachment',
	REJECT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ec2:RejectTransitGatewayVpcAttachment',
	REJECT_VPC_ENDPOINT_CONNECTIONS = 'ec2:RejectVpcEndpointConnections',
	REJECT_VPC_PEERING_CONNECTION = 'ec2:RejectVpcPeeringConnection',
	RELEASE_ADDRESS = 'ec2:ReleaseAddress',
	RELEASE_HOSTS = 'ec2:ReleaseHosts',
	RELEASE_IPAM_POOL_ALLOCATION = 'ec2:ReleaseIpamPoolAllocation',
	REPLACE_IAM_INSTANCE_PROFILE_ASSOCIATION = 'ec2:ReplaceIamInstanceProfileAssociation',
	REPLACE_NETWORK_ACL_ASSOCIATION = 'ec2:ReplaceNetworkAclAssociation',
	REPLACE_NETWORK_ACL_ENTRY = 'ec2:ReplaceNetworkAclEntry',
	REPLACE_ROUTE = 'ec2:ReplaceRoute',
	REPLACE_ROUTE_TABLE_ASSOCIATION = 'ec2:ReplaceRouteTableAssociation',
	REPLACE_TRANSIT_GATEWAY_ROUTE = 'ec2:ReplaceTransitGatewayRoute',
	REPORT_INSTANCE_STATUS = 'ec2:ReportInstanceStatus',
	REQUEST_SPOT_FLEET = 'ec2:RequestSpotFleet',
	REQUEST_SPOT_INSTANCES = 'ec2:RequestSpotInstances',
	RESET_ADDRESS_ATTRIBUTE = 'ec2:ResetAddressAttribute',
	RESET_EBS_DEFAULT_KMS_KEY_ID = 'ec2:ResetEbsDefaultKmsKeyId',
	RESET_FPGA_IMAGE_ATTRIBUTE = 'ec2:ResetFpgaImageAttribute',
	RESET_IMAGE_ATTRIBUTE = 'ec2:ResetImageAttribute',
	RESET_INSTANCE_ATTRIBUTE = 'ec2:ResetInstanceAttribute',
	RESET_NETWORK_INTERFACE_ATTRIBUTE = 'ec2:ResetNetworkInterfaceAttribute',
	RESET_SNAPSHOT_ATTRIBUTE = 'ec2:ResetSnapshotAttribute',
	RESTORE_ADDRESS_TO_CLASSIC = 'ec2:RestoreAddressToClassic',
	RESTORE_IMAGE_FROM_RECYCLE_BIN = 'ec2:RestoreImageFromRecycleBin',
	RESTORE_MANAGED_PREFIX_LIST_VERSION = 'ec2:RestoreManagedPrefixListVersion',
	RESTORE_SNAPSHOT_FROM_RECYCLE_BIN = 'ec2:RestoreSnapshotFromRecycleBin',
	RESTORE_SNAPSHOT_TIER = 'ec2:RestoreSnapshotTier',
	REVOKE_CLIENT_VPN_INGRESS = 'ec2:RevokeClientVpnIngress',
	REVOKE_SECURITY_GROUP_EGRESS = 'ec2:RevokeSecurityGroupEgress',
	REVOKE_SECURITY_GROUP_INGRESS = 'ec2:RevokeSecurityGroupIngress',
	RUN_INSTANCES = 'ec2:RunInstances',
	RUN_SCHEDULED_INSTANCES = 'ec2:RunScheduledInstances',
	SEARCH_LOCAL_GATEWAY_ROUTES = 'ec2:SearchLocalGatewayRoutes',
	SEARCH_TRANSIT_GATEWAY_MULTICAST_GROUPS = 'ec2:SearchTransitGatewayMulticastGroups',
	SEARCH_TRANSIT_GATEWAY_ROUTES = 'ec2:SearchTransitGatewayRoutes',
	SEND_DIAGNOSTIC_INTERRUPT = 'ec2:SendDiagnosticInterrupt',
	SEND_SPOT_INSTANCE_INTERRUPTIONS = 'ec2:SendSpotInstanceInterruptions',
	START_INSTANCES = 'ec2:StartInstances',
	START_NETWORK_INSIGHTS_ACCESS_SCOPE_ANALYSIS = 'ec2:StartNetworkInsightsAccessScopeAnalysis',
	START_NETWORK_INSIGHTS_ANALYSIS = 'ec2:StartNetworkInsightsAnalysis',
	START_VPC_ENDPOINT_SERVICE_PRIVATE_DNS_VERIFICATION = 'ec2:StartVpcEndpointServicePrivateDnsVerification',
	STOP_INSTANCES = 'ec2:StopInstances',
	TERMINATE_CLIENT_VPN_CONNECTIONS = 'ec2:TerminateClientVpnConnections',
	TERMINATE_INSTANCES = 'ec2:TerminateInstances',
	UNASSIGN_IPV_6_ADDRESSES = 'ec2:UnassignIpv6Addresses',
	UNASSIGN_PRIVATE_IP_ADDRESSES = 'ec2:UnassignPrivateIpAddresses',
	UNMONITOR_INSTANCES = 'ec2:UnmonitorInstances',
	UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_EGRESS = 'ec2:UpdateSecurityGroupRuleDescriptionsEgress',
	UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_INGRESS = 'ec2:UpdateSecurityGroupRuleDescriptionsIngress',
	WITHDRAW_BYOIP_CIDR = 'ec2:WithdrawByoipCidr',
}
export enum IMPORT_EXPORT_DISK_SERVICE {
	CANCEL_JOB = 'importexport:CancelJob',
	CREATE_JOB = 'importexport:CreateJob',
	GET_SHIPPING_LABEL = 'importexport:GetShippingLabel',
	GET_STATUS = 'importexport:GetStatus',
	LIST_JOBS = 'importexport:ListJobs',
	UPDATE_JOB = 'importexport:UpdateJob',
}
export enum MICROSERVICE_EXTRACTOR_FOR_NET {
	GET_CONFIG = 'serviceextract:GetConfig',
}
export enum DATA_PIPELINE {
	ACTIVATE_PIPELINE = 'datapipeline:ActivatePipeline',
	ADD_TAGS = 'datapipeline:AddTags',
	CREATE_PIPELINE = 'datapipeline:CreatePipeline',
	DEACTIVATE_PIPELINE = 'datapipeline:DeactivatePipeline',
	DELETE_PIPELINE = 'datapipeline:DeletePipeline',
	DESCRIBE_OBJECTS = 'datapipeline:DescribeObjects',
	DESCRIBE_PIPELINES = 'datapipeline:DescribePipelines',
	EVALUATE_EXPRESSION = 'datapipeline:EvaluateExpression',
	GET_ACCOUNT_LIMITS = 'datapipeline:GetAccountLimits',
	GET_PIPELINE_DEFINITION = 'datapipeline:GetPipelineDefinition',
	LIST_PIPELINES = 'datapipeline:ListPipelines',
	POLL_FOR_TASK = 'datapipeline:PollForTask',
	PUT_ACCOUNT_LIMITS = 'datapipeline:PutAccountLimits',
	PUT_PIPELINE_DEFINITION = 'datapipeline:PutPipelineDefinition',
	QUERY_OBJECTS = 'datapipeline:QueryObjects',
	REMOVE_TAGS = 'datapipeline:RemoveTags',
	REPORT_TASK_PROGRESS = 'datapipeline:ReportTaskProgress',
	REPORT_TASK_RUNNER_HEARTBEAT = 'datapipeline:ReportTaskRunnerHeartbeat',
	SET_STATUS = 'datapipeline:SetStatus',
	SET_TASK_STATUS = 'datapipeline:SetTaskStatus',
	VALIDATE_PIPELINE_DEFINITION = 'datapipeline:ValidatePipelineDefinition',
}
export enum SERVER_MIGRATION_SERVICE {
	CREATE_APP = 'sms:CreateApp',
	CREATE_REPLICATION_JOB = 'sms:CreateReplicationJob',
	DELETE_APP = 'sms:DeleteApp',
	DELETE_APP_LAUNCH_CONFIGURATION = 'sms:DeleteAppLaunchConfiguration',
	DELETE_APP_REPLICATION_CONFIGURATION = 'sms:DeleteAppReplicationConfiguration',
	DELETE_APP_VALIDATION_CONFIGURATION = 'sms:DeleteAppValidationConfiguration',
	DELETE_REPLICATION_JOB = 'sms:DeleteReplicationJob',
	DELETE_SERVER_CATALOG = 'sms:DeleteServerCatalog',
	DISASSOCIATE_CONNECTOR = 'sms:DisassociateConnector',
	GENERATE_CHANGE_SET = 'sms:GenerateChangeSet',
	GENERATE_TEMPLATE = 'sms:GenerateTemplate',
	GET_APP = 'sms:GetApp',
	GET_APP_LAUNCH_CONFIGURATION = 'sms:GetAppLaunchConfiguration',
	GET_APP_REPLICATION_CONFIGURATION = 'sms:GetAppReplicationConfiguration',
	GET_APP_VALIDATION_CONFIGURATION = 'sms:GetAppValidationConfiguration',
	GET_APP_VALIDATION_OUTPUT = 'sms:GetAppValidationOutput',
	GET_CONNECTORS = 'sms:GetConnectors',
	GET_MESSAGES = 'sms:GetMessages',
	GET_REPLICATION_JOBS = 'sms:GetReplicationJobs',
	GET_REPLICATION_RUNS = 'sms:GetReplicationRuns',
	GET_SERVERS = 'sms:GetServers',
	IMPORT_APP_CATALOG = 'sms:ImportAppCatalog',
	IMPORT_SERVER_CATALOG = 'sms:ImportServerCatalog',
	LAUNCH_APP = 'sms:LaunchApp',
	LIST_APPS = 'sms:ListApps',
	NOTIFY_APP_VALIDATION_OUTPUT = 'sms:NotifyAppValidationOutput',
	PUT_APP_LAUNCH_CONFIGURATION = 'sms:PutAppLaunchConfiguration',
	PUT_APP_REPLICATION_CONFIGURATION = 'sms:PutAppReplicationConfiguration',
	PUT_APP_VALIDATION_CONFIGURATION = 'sms:PutAppValidationConfiguration',
	SEND_MESSAGE = 'sms:SendMessage',
	START_APP_REPLICATION = 'sms:StartAppReplication',
	START_ON_DEMAND_APP_REPLICATION = 'sms:StartOnDemandAppReplication',
	START_ON_DEMAND_REPLICATION_RUN = 'sms:StartOnDemandReplicationRun',
	STOP_APP_REPLICATION = 'sms:StopAppReplication',
	TERMINATE_APP = 'sms:TerminateApp',
	UPDATE_APP = 'sms:UpdateApp',
	UPDATE_REPLICATION_JOB = 'sms:UpdateReplicationJob',
}
export enum SAGEMAKER_GEOSPATIAL_CAPABILITIES {
	DELETE_EARTH_OBSERVATION_JOB = 'sagemaker-geospatial:DeleteEarthObservationJob',
	DELETE_VECTOR_ENRICHMENT_JOB = 'sagemaker-geospatial:DeleteVectorEnrichmentJob',
	EXPORT_EARTH_OBSERVATION_JOB = 'sagemaker-geospatial:ExportEarthObservationJob',
	EXPORT_VECTOR_ENRICHMENT_JOB = 'sagemaker-geospatial:ExportVectorEnrichmentJob',
	GET_EARTH_OBSERVATION_JOB = 'sagemaker-geospatial:GetEarthObservationJob',
	GET_RASTER_DATA_COLLECTION = 'sagemaker-geospatial:GetRasterDataCollection',
	GET_TILE = 'sagemaker-geospatial:GetTile',
	GET_VECTOR_ENRICHMENT_JOB = 'sagemaker-geospatial:GetVectorEnrichmentJob',
	LIST_EARTH_OBSERVATION_JOBS = 'sagemaker-geospatial:ListEarthObservationJobs',
	LIST_RASTER_DATA_COLLECTIONS = 'sagemaker-geospatial:ListRasterDataCollections',
	LIST_TAGS_FOR_RESOURCE = 'sagemaker-geospatial:ListTagsForResource',
	LIST_VECTOR_ENRICHMENT_JOBS = 'sagemaker-geospatial:ListVectorEnrichmentJobs',
	SEARCH_RASTER_DATA_COLLECTION = 'sagemaker-geospatial:SearchRasterDataCollection',
	START_EARTH_OBSERVATION_JOB = 'sagemaker-geospatial:StartEarthObservationJob',
	START_VECTOR_ENRICHMENT_JOB = 'sagemaker-geospatial:StartVectorEnrichmentJob',
	STOP_EARTH_OBSERVATION_JOB = 'sagemaker-geospatial:StopEarthObservationJob',
	STOP_VECTOR_ENRICHMENT_JOB = 'sagemaker-geospatial:StopVectorEnrichmentJob',
	TAG_RESOURCE = 'sagemaker-geospatial:TagResource',
	UNTAG_RESOURCE = 'sagemaker-geospatial:UntagResource',
}
export enum MONITRON {
	ASSOCIATE_PROJECT_ADMIN_USER = 'monitron:AssociateProjectAdminUser',
	CREATE_PROJECT = 'monitron:CreateProject',
	DELETE_PROJECT = 'monitron:DeleteProject',
	DISASSOCIATE_PROJECT_ADMIN_USER = 'monitron:DisassociateProjectAdminUser',
	GET_PROJECT = 'monitron:GetProject',
	GET_PROJECT_ADMIN_USER = 'monitron:GetProjectAdminUser',
	LIST_PROJECT_ADMIN_USERS = 'monitron:ListProjectAdminUsers',
	LIST_PROJECTS = 'monitron:ListProjects',
	LIST_TAGS_FOR_RESOURCE = 'monitron:ListTagsForResource',
	TAG_RESOURCE = 'monitron:TagResource',
	UNTAG_RESOURCE = 'monitron:UntagResource',
	UPDATE_PROJECT = 'monitron:UpdateProject',
}
export enum CLOUDFORMATION {
	ACTIVATE_TYPE = 'cloudformation:ActivateType',
	BATCH_DESCRIBE_TYPE_CONFIGURATIONS = 'cloudformation:BatchDescribeTypeConfigurations',
	CANCEL_UPDATE_STACK = 'cloudformation:CancelUpdateStack',
	CONTINUE_UPDATE_ROLLBACK = 'cloudformation:ContinueUpdateRollback',
	CREATE_CHANGE_SET = 'cloudformation:CreateChangeSet',
	CREATE_STACK = 'cloudformation:CreateStack',
	CREATE_STACK_INSTANCES = 'cloudformation:CreateStackInstances',
	CREATE_STACK_SET = 'cloudformation:CreateStackSet',
	CREATE_UPLOAD_BUCKET = 'cloudformation:CreateUploadBucket',
	DEACTIVATE_TYPE = 'cloudformation:DeactivateType',
	DELETE_CHANGE_SET = 'cloudformation:DeleteChangeSet',
	DELETE_STACK = 'cloudformation:DeleteStack',
	DELETE_STACK_INSTANCES = 'cloudformation:DeleteStackInstances',
	DELETE_STACK_SET = 'cloudformation:DeleteStackSet',
	DEREGISTER_TYPE = 'cloudformation:DeregisterType',
	DESCRIBE_ACCOUNT_LIMITS = 'cloudformation:DescribeAccountLimits',
	DESCRIBE_CHANGE_SET = 'cloudformation:DescribeChangeSet',
	DESCRIBE_CHANGE_SET_HOOKS = 'cloudformation:DescribeChangeSetHooks',
	DESCRIBE_PUBLISHER = 'cloudformation:DescribePublisher',
	DESCRIBE_STACK_DRIFT_DETECTION_STATUS = 'cloudformation:DescribeStackDriftDetectionStatus',
	DESCRIBE_STACK_EVENTS = 'cloudformation:DescribeStackEvents',
	DESCRIBE_STACK_INSTANCE = 'cloudformation:DescribeStackInstance',
	DESCRIBE_STACK_RESOURCE = 'cloudformation:DescribeStackResource',
	DESCRIBE_STACK_RESOURCE_DRIFTS = 'cloudformation:DescribeStackResourceDrifts',
	DESCRIBE_STACK_RESOURCES = 'cloudformation:DescribeStackResources',
	DESCRIBE_STACK_SET = 'cloudformation:DescribeStackSet',
	DESCRIBE_STACK_SET_OPERATION = 'cloudformation:DescribeStackSetOperation',
	DESCRIBE_STACKS = 'cloudformation:DescribeStacks',
	DESCRIBE_TYPE = 'cloudformation:DescribeType',
	DESCRIBE_TYPE_REGISTRATION = 'cloudformation:DescribeTypeRegistration',
	DETECT_STACK_DRIFT = 'cloudformation:DetectStackDrift',
	DETECT_STACK_RESOURCE_DRIFT = 'cloudformation:DetectStackResourceDrift',
	DETECT_STACK_SET_DRIFT = 'cloudformation:DetectStackSetDrift',
	ESTIMATE_TEMPLATE_COST = 'cloudformation:EstimateTemplateCost',
	EXECUTE_CHANGE_SET = 'cloudformation:ExecuteChangeSet',
	GET_STACK_POLICY = 'cloudformation:GetStackPolicy',
	GET_TEMPLATE = 'cloudformation:GetTemplate',
	GET_TEMPLATE_SUMMARY = 'cloudformation:GetTemplateSummary',
	IMPORT_STACKS_TO_STACK_SET = 'cloudformation:ImportStacksToStackSet',
	LIST_CHANGE_SETS = 'cloudformation:ListChangeSets',
	LIST_EXPORTS = 'cloudformation:ListExports',
	LIST_IMPORTS = 'cloudformation:ListImports',
	LIST_STACK_INSTANCES = 'cloudformation:ListStackInstances',
	LIST_STACK_RESOURCES = 'cloudformation:ListStackResources',
	LIST_STACK_SET_OPERATION_RESULTS = 'cloudformation:ListStackSetOperationResults',
	LIST_STACK_SET_OPERATIONS = 'cloudformation:ListStackSetOperations',
	LIST_STACK_SETS = 'cloudformation:ListStackSets',
	LIST_STACKS = 'cloudformation:ListStacks',
	LIST_TYPE_REGISTRATIONS = 'cloudformation:ListTypeRegistrations',
	LIST_TYPE_VERSIONS = 'cloudformation:ListTypeVersions',
	LIST_TYPES = 'cloudformation:ListTypes',
	PUBLISH_TYPE = 'cloudformation:PublishType',
	RECORD_HANDLER_PROGRESS = 'cloudformation:RecordHandlerProgress',
	REGISTER_PUBLISHER = 'cloudformation:RegisterPublisher',
	REGISTER_TYPE = 'cloudformation:RegisterType',
	ROLLBACK_STACK = 'cloudformation:RollbackStack',
	SET_STACK_POLICY = 'cloudformation:SetStackPolicy',
	SET_TYPE_CONFIGURATION = 'cloudformation:SetTypeConfiguration',
	SET_TYPE_DEFAULT_VERSION = 'cloudformation:SetTypeDefaultVersion',
	SIGNAL_RESOURCE = 'cloudformation:SignalResource',
	STOP_STACK_SET_OPERATION = 'cloudformation:StopStackSetOperation',
	TAG_RESOURCE = 'cloudformation:TagResource',
	TEST_TYPE = 'cloudformation:TestType',
	UNTAG_RESOURCE = 'cloudformation:UntagResource',
	UPDATE_STACK = 'cloudformation:UpdateStack',
	UPDATE_STACK_INSTANCES = 'cloudformation:UpdateStackInstances',
	UPDATE_STACK_SET = 'cloudformation:UpdateStackSet',
	UPDATE_TERMINATION_PROTECTION = 'cloudformation:UpdateTerminationProtection',
	VALIDATE_TEMPLATE = 'cloudformation:ValidateTemplate',
}
export enum CLOUD_CONTROL_API {
	CANCEL_RESOURCE_REQUEST = 'cloudformation:CancelResourceRequest',
	CREATE_RESOURCE = 'cloudformation:CreateResource',
	DELETE_RESOURCE = 'cloudformation:DeleteResource',
	GET_RESOURCE = 'cloudformation:GetResource',
	GET_RESOURCE_REQUEST_STATUS = 'cloudformation:GetResourceRequestStatus',
	LIST_RESOURCE_REQUESTS = 'cloudformation:ListResourceRequests',
	LIST_RESOURCES = 'cloudformation:ListResources',
	UPDATE_RESOURCE = 'cloudformation:UpdateResource',
}
export enum WORKMAIL_MESSAGE_FLOW {
	GET_RAW_MESSAGE_CONTENT = 'workmailmessageflow:GetRawMessageContent',
	PUT_RAW_MESSAGE_CONTENT = 'workmailmessageflow:PutRawMessageContent',
}
export enum RECYCLE_BIN {
	CREATE_RULE = 'rbin:CreateRule',
	DELETE_RULE = 'rbin:DeleteRule',
	GET_RULE = 'rbin:GetRule',
	LIST_RULES = 'rbin:ListRules',
	LIST_TAGS_FOR_RESOURCE = 'rbin:ListTagsForResource',
	LOCK_RULE = 'rbin:LockRule',
	TAG_RESOURCE = 'rbin:TagResource',
	UNLOCK_RULE = 'rbin:UnlockRule',
	UNTAG_RESOURCE = 'rbin:UntagResource',
	UPDATE_RULE = 'rbin:UpdateRule',
}
export enum CHATBOT {
	CREATE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:CreateChimeWebhookConfiguration',
	CREATE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:CreateSlackChannelConfiguration',
	DELETE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:DeleteChimeWebhookConfiguration',
	DELETE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:DeleteSlackChannelConfiguration',
	DELETE_SLACK_USER_IDENTITY = 'chatbot:DeleteSlackUserIdentity',
	DELETE_SLACK_WORKSPACE_AUTHORIZATION = 'chatbot:DeleteSlackWorkspaceAuthorization',
	DESCRIBE_CHIME_WEBHOOK_CONFIGURATIONS = 'chatbot:DescribeChimeWebhookConfigurations',
	DESCRIBE_SLACK_CHANNEL_CONFIGURATIONS = 'chatbot:DescribeSlackChannelConfigurations',
	DESCRIBE_SLACK_CHANNELS = 'chatbot:DescribeSlackChannels',
	DESCRIBE_SLACK_USER_IDENTITIES = 'chatbot:DescribeSlackUserIdentities',
	DESCRIBE_SLACK_WORKSPACES = 'chatbot:DescribeSlackWorkspaces',
	GET_ACCOUNT_PREFERENCES = 'chatbot:GetAccountPreferences',
	GET_SLACK_OAUTH_PARAMETERS = 'chatbot:GetSlackOauthParameters',
	REDEEM_SLACK_OAUTH_CODE = 'chatbot:RedeemSlackOauthCode',
	UPDATE_ACCOUNT_PREFERENCES = 'chatbot:UpdateAccountPreferences',
	UPDATE_CHIME_WEBHOOK_CONFIGURATION = 'chatbot:UpdateChimeWebhookConfiguration',
	UPDATE_SLACK_CHANNEL_CONFIGURATION = 'chatbot:UpdateSlackChannelConfiguration',
}
export enum MACIE {
	ACCEPT_INVITATION = 'macie2:AcceptInvitation',
	BATCH_GET_CUSTOM_DATA_IDENTIFIERS = 'macie2:BatchGetCustomDataIdentifiers',
	CREATE_ALLOW_LIST = 'macie2:CreateAllowList',
	CREATE_CLASSIFICATION_JOB = 'macie2:CreateClassificationJob',
	CREATE_CUSTOM_DATA_IDENTIFIER = 'macie2:CreateCustomDataIdentifier',
	CREATE_FINDINGS_FILTER = 'macie2:CreateFindingsFilter',
	CREATE_INVITATIONS = 'macie2:CreateInvitations',
	CREATE_MEMBER = 'macie2:CreateMember',
	CREATE_SAMPLE_FINDINGS = 'macie2:CreateSampleFindings',
	DECLINE_INVITATIONS = 'macie2:DeclineInvitations',
	DELETE_ALLOW_LIST = 'macie2:DeleteAllowList',
	DELETE_CUSTOM_DATA_IDENTIFIER = 'macie2:DeleteCustomDataIdentifier',
	DELETE_FINDINGS_FILTER = 'macie2:DeleteFindingsFilter',
	DELETE_INVITATIONS = 'macie2:DeleteInvitations',
	DELETE_MEMBER = 'macie2:DeleteMember',
	DESCRIBE_BUCKETS = 'macie2:DescribeBuckets',
	DESCRIBE_CLASSIFICATION_JOB = 'macie2:DescribeClassificationJob',
	DESCRIBE_ORGANIZATION_CONFIGURATION = 'macie2:DescribeOrganizationConfiguration',
	DISABLE_MACIE = 'macie2:DisableMacie',
	DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'macie2:DisableOrganizationAdminAccount',
	DISASSOCIATE_FROM_ADMINISTRATOR_ACCOUNT = 'macie2:DisassociateFromAdministratorAccount',
	DISASSOCIATE_FROM_MASTER_ACCOUNT = 'macie2:DisassociateFromMasterAccount',
	DISASSOCIATE_MEMBER = 'macie2:DisassociateMember',
	ENABLE_MACIE = 'macie2:EnableMacie',
	ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'macie2:EnableOrganizationAdminAccount',
	GET_ADMINISTRATOR_ACCOUNT = 'macie2:GetAdministratorAccount',
	GET_ALLOW_LIST = 'macie2:GetAllowList',
	GET_AUTOMATED_DISCOVERY_CONFIGURATION = 'macie2:GetAutomatedDiscoveryConfiguration',
	GET_BUCKET_STATISTICS = 'macie2:GetBucketStatistics',
	GET_CLASSIFICATION_EXPORT_CONFIGURATION = 'macie2:GetClassificationExportConfiguration',
	GET_CLASSIFICATION_SCOPE = 'macie2:GetClassificationScope',
	GET_CUSTOM_DATA_IDENTIFIER = 'macie2:GetCustomDataIdentifier',
	GET_FINDING_STATISTICS = 'macie2:GetFindingStatistics',
	GET_FINDINGS = 'macie2:GetFindings',
	GET_FINDINGS_FILTER = 'macie2:GetFindingsFilter',
	GET_FINDINGS_PUBLICATION_CONFIGURATION = 'macie2:GetFindingsPublicationConfiguration',
	GET_INVITATIONS_COUNT = 'macie2:GetInvitationsCount',
	GET_MACIE_SESSION = 'macie2:GetMacieSession',
	GET_MASTER_ACCOUNT = 'macie2:GetMasterAccount',
	GET_MEMBER = 'macie2:GetMember',
	GET_RESOURCE_PROFILE = 'macie2:GetResourceProfile',
	GET_REVEAL_CONFIGURATION = 'macie2:GetRevealConfiguration',
	GET_SENSITIVE_DATA_OCCURRENCES = 'macie2:GetSensitiveDataOccurrences',
	GET_SENSITIVE_DATA_OCCURRENCES_AVAILABILITY = 'macie2:GetSensitiveDataOccurrencesAvailability',
	GET_SENSITIVITY_INSPECTION_TEMPLATE = 'macie2:GetSensitivityInspectionTemplate',
	GET_USAGE_STATISTICS = 'macie2:GetUsageStatistics',
	GET_USAGE_TOTALS = 'macie2:GetUsageTotals',
	LIST_ALLOW_LISTS = 'macie2:ListAllowLists',
	LIST_CLASSIFICATION_JOBS = 'macie2:ListClassificationJobs',
	LIST_CLASSIFICATION_SCOPES = 'macie2:ListClassificationScopes',
	LIST_CUSTOM_DATA_IDENTIFIERS = 'macie2:ListCustomDataIdentifiers',
	LIST_FINDINGS = 'macie2:ListFindings',
	LIST_FINDINGS_FILTERS = 'macie2:ListFindingsFilters',
	LIST_INVITATIONS = 'macie2:ListInvitations',
	LIST_MANAGED_DATA_IDENTIFIERS = 'macie2:ListManagedDataIdentifiers',
	LIST_MEMBERS = 'macie2:ListMembers',
	LIST_ORGANIZATION_ADMIN_ACCOUNTS = 'macie2:ListOrganizationAdminAccounts',
	LIST_RESOURCE_PROFILE_ARTIFACTS = 'macie2:ListResourceProfileArtifacts',
	LIST_RESOURCE_PROFILE_DETECTIONS = 'macie2:ListResourceProfileDetections',
	LIST_SENSITIVITY_INSPECTION_TEMPLATES = 'macie2:ListSensitivityInspectionTemplates',
	LIST_TAGS_FOR_RESOURCE = 'macie2:ListTagsForResource',
	PUT_CLASSIFICATION_EXPORT_CONFIGURATION = 'macie2:PutClassificationExportConfiguration',
	PUT_FINDINGS_PUBLICATION_CONFIGURATION = 'macie2:PutFindingsPublicationConfiguration',
	SEARCH_RESOURCES = 'macie2:SearchResources',
	TAG_RESOURCE = 'macie2:TagResource',
	TEST_CUSTOM_DATA_IDENTIFIER = 'macie2:TestCustomDataIdentifier',
	UNTAG_RESOURCE = 'macie2:UntagResource',
	UPDATE_ALLOW_LIST = 'macie2:UpdateAllowList',
	UPDATE_AUTOMATED_DISCOVERY_CONFIGURATION = 'macie2:UpdateAutomatedDiscoveryConfiguration',
	UPDATE_CLASSIFICATION_JOB = 'macie2:UpdateClassificationJob',
	UPDATE_CLASSIFICATION_SCOPE = 'macie2:UpdateClassificationScope',
	UPDATE_FINDINGS_FILTER = 'macie2:UpdateFindingsFilter',
	UPDATE_MACIE_SESSION = 'macie2:UpdateMacieSession',
	UPDATE_MEMBER_SESSION = 'macie2:UpdateMemberSession',
	UPDATE_ORGANIZATION_CONFIGURATION = 'macie2:UpdateOrganizationConfiguration',
	UPDATE_RESOURCE_PROFILE = 'macie2:UpdateResourceProfile',
	UPDATE_RESOURCE_PROFILE_DETECTIONS = 'macie2:UpdateResourceProfileDetections',
	UPDATE_REVEAL_CONFIGURATION = 'macie2:UpdateRevealConfiguration',
	UPDATE_SENSITIVITY_INSPECTION_TEMPLATE = 'macie2:UpdateSensitivityInspectionTemplate',
}
export enum MIGRATION_HUB_ORCHESTRATOR {
	CREATE_WORKFLOW = 'migrationhub-orchestrator:CreateWorkflow',
	CREATE_WORKFLOW_STEP = 'migrationhub-orchestrator:CreateWorkflowStep',
	CREATE_WORKFLOW_STEP_GROUP = 'migrationhub-orchestrator:CreateWorkflowStepGroup',
	DELETE_WORKFLOW = 'migrationhub-orchestrator:DeleteWorkflow',
	DELETE_WORKFLOW_STEP = 'migrationhub-orchestrator:DeleteWorkflowStep',
	DELETE_WORKFLOW_STEP_GROUP = 'migrationhub-orchestrator:DeleteWorkflowStepGroup',
	GET_MESSAGE = 'migrationhub-orchestrator:GetMessage',
	GET_TEMPLATE = 'migrationhub-orchestrator:GetTemplate',
	GET_TEMPLATE_STEP = 'migrationhub-orchestrator:GetTemplateStep',
	GET_TEMPLATE_STEP_GROUP = 'migrationhub-orchestrator:GetTemplateStepGroup',
	GET_WORKFLOW = 'migrationhub-orchestrator:GetWorkflow',
	GET_WORKFLOW_STEP = 'migrationhub-orchestrator:GetWorkflowStep',
	GET_WORKFLOW_STEP_GROUP = 'migrationhub-orchestrator:GetWorkflowStepGroup',
	LIST_PLUGINS = 'migrationhub-orchestrator:ListPlugins',
	LIST_TAGS_FOR_RESOURCE = 'migrationhub-orchestrator:ListTagsForResource',
	LIST_TEMPLATE_STEP_GROUPS = 'migrationhub-orchestrator:ListTemplateStepGroups',
	LIST_TEMPLATE_STEPS = 'migrationhub-orchestrator:ListTemplateSteps',
	LIST_TEMPLATES = 'migrationhub-orchestrator:ListTemplates',
	LIST_WORKFLOW_STEP_GROUPS = 'migrationhub-orchestrator:ListWorkflowStepGroups',
	LIST_WORKFLOW_STEPS = 'migrationhub-orchestrator:ListWorkflowSteps',
	LIST_WORKFLOWS = 'migrationhub-orchestrator:ListWorkflows',
	REGISTER_PLUGIN = 'migrationhub-orchestrator:RegisterPlugin',
	RETRY_WORKFLOW_STEP = 'migrationhub-orchestrator:RetryWorkflowStep',
	SEND_MESSAGE = 'migrationhub-orchestrator:SendMessage',
	START_WORKFLOW = 'migrationhub-orchestrator:StartWorkflow',
	STOP_WORKFLOW = 'migrationhub-orchestrator:StopWorkflow',
	TAG_RESOURCE = 'migrationhub-orchestrator:TagResource',
	UNTAG_RESOURCE = 'migrationhub-orchestrator:UntagResource',
	UPDATE_WORKFLOW = 'migrationhub-orchestrator:UpdateWorkflow',
	UPDATE_WORKFLOW_STEP = 'migrationhub-orchestrator:UpdateWorkflowStep',
	UPDATE_WORKFLOW_STEP_GROUP = 'migrationhub-orchestrator:UpdateWorkflowStepGroup',
}
export enum MAINFRAME_MODERNIZATION_SERVICE {
	CANCEL_BATCH_JOB_EXECUTION = 'm2:CancelBatchJobExecution',
	CREATE_APPLICATION = 'm2:CreateApplication',
	CREATE_DATA_SET_IMPORT_TASK = 'm2:CreateDataSetImportTask',
	CREATE_DEPLOYMENT = 'm2:CreateDeployment',
	CREATE_ENVIRONMENT = 'm2:CreateEnvironment',
	DELETE_APPLICATION = 'm2:DeleteApplication',
	DELETE_APPLICATION_FROM_ENVIRONMENT = 'm2:DeleteApplicationFromEnvironment',
	DELETE_ENVIRONMENT = 'm2:DeleteEnvironment',
	GET_APPLICATION = 'm2:GetApplication',
	GET_APPLICATION_VERSION = 'm2:GetApplicationVersion',
	GET_BATCH_JOB_EXECUTION = 'm2:GetBatchJobExecution',
	GET_DATA_SET_DETAILS = 'm2:GetDataSetDetails',
	GET_DATA_SET_IMPORT_TASK = 'm2:GetDataSetImportTask',
	GET_DEPLOYMENT = 'm2:GetDeployment',
	GET_ENVIRONMENT = 'm2:GetEnvironment',
	LIST_APPLICATION_VERSIONS = 'm2:ListApplicationVersions',
	LIST_APPLICATIONS = 'm2:ListApplications',
	LIST_BATCH_JOB_DEFINITIONS = 'm2:ListBatchJobDefinitions',
	LIST_BATCH_JOB_EXECUTIONS = 'm2:ListBatchJobExecutions',
	LIST_DATA_SET_IMPORT_HISTORY = 'm2:ListDataSetImportHistory',
	LIST_DATA_SETS = 'm2:ListDataSets',
	LIST_DEPLOYMENTS = 'm2:ListDeployments',
	LIST_ENGINE_VERSIONS = 'm2:ListEngineVersions',
	LIST_ENVIRONMENTS = 'm2:ListEnvironments',
	LIST_TAGS_FOR_RESOURCE = 'm2:ListTagsForResource',
	START_APPLICATION = 'm2:StartApplication',
	START_BATCH_JOB = 'm2:StartBatchJob',
	STOP_APPLICATION = 'm2:StopApplication',
	TAG_RESOURCE = 'm2:TagResource',
	UNTAG_RESOURCE = 'm2:UntagResource',
	UPDATE_APPLICATION = 'm2:UpdateApplication',
	UPDATE_ENVIRONMENT = 'm2:UpdateEnvironment',
}
export enum HEALTH_APIS_AND_NOTIFICATIONS {
	DESCRIBE_AFFECTED_ACCOUNTS_FOR_ORGANIZATION = 'health:DescribeAffectedAccountsForOrganization',
	DESCRIBE_AFFECTED_ENTITIES = 'health:DescribeAffectedEntities',
	DESCRIBE_AFFECTED_ENTITIES_FOR_ORGANIZATION = 'health:DescribeAffectedEntitiesForOrganization',
	DESCRIBE_ENTITY_AGGREGATES = 'health:DescribeEntityAggregates',
	DESCRIBE_EVENT_AGGREGATES = 'health:DescribeEventAggregates',
	DESCRIBE_EVENT_DETAILS = 'health:DescribeEventDetails',
	DESCRIBE_EVENT_DETAILS_FOR_ORGANIZATION = 'health:DescribeEventDetailsForOrganization',
	DESCRIBE_EVENT_TYPES = 'health:DescribeEventTypes',
	DESCRIBE_EVENTS = 'health:DescribeEvents',
	DESCRIBE_EVENTS_FOR_ORGANIZATION = 'health:DescribeEventsForOrganization',
	DESCRIBE_HEALTH_SERVICE_STATUS_FOR_ORGANIZATION = 'health:DescribeHealthServiceStatusForOrganization',
	DISABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'health:DisableHealthServiceAccessForOrganization',
	ENABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'health:EnableHealthServiceAccessForOrganization',
}
export enum OUTPOSTS {
	CANCEL_ORDER = 'outposts:CancelOrder',
	CREATE_ORDER = 'outposts:CreateOrder',
	CREATE_OUTPOST = 'outposts:CreateOutpost',
	CREATE_PRIVATE_CONNECTIVITY_CONFIG = 'outposts:CreatePrivateConnectivityConfig',
	CREATE_SITE = 'outposts:CreateSite',
	DELETE_OUTPOST = 'outposts:DeleteOutpost',
	DELETE_SITE = 'outposts:DeleteSite',
	GET_CATALOG_ITEM = 'outposts:GetCatalogItem',
	GET_CONNECTION = 'outposts:GetConnection',
	GET_ORDER = 'outposts:GetOrder',
	GET_OUTPOST = 'outposts:GetOutpost',
	GET_OUTPOST_INSTANCE_TYPES = 'outposts:GetOutpostInstanceTypes',
	GET_PRIVATE_CONNECTIVITY_CONFIG = 'outposts:GetPrivateConnectivityConfig',
	GET_SITE = 'outposts:GetSite',
	GET_SITE_ADDRESS = 'outposts:GetSiteAddress',
	LIST_ASSETS = 'outposts:ListAssets',
	LIST_CATALOG_ITEMS = 'outposts:ListCatalogItems',
	LIST_ORDERS = 'outposts:ListOrders',
	LIST_OUTPOSTS = 'outposts:ListOutposts',
	LIST_SITES = 'outposts:ListSites',
	LIST_TAGS_FOR_RESOURCE = 'outposts:ListTagsForResource',
	START_CONNECTION = 'outposts:StartConnection',
	TAG_RESOURCE = 'outposts:TagResource',
	UNTAG_RESOURCE = 'outposts:UntagResource',
	UPDATE_OUTPOST = 'outposts:UpdateOutpost',
	UPDATE_SITE = 'outposts:UpdateSite',
	UPDATE_SITE_ADDRESS = 'outposts:UpdateSiteAddress',
	UPDATE_SITE_RACK_PHYSICAL_PROPERTIES = 'outposts:UpdateSiteRackPhysicalProperties',
}
export enum GAMELIFT {
	ACCEPT_MATCH = 'gamelift:AcceptMatch',
	CLAIM_GAME_SERVER = 'gamelift:ClaimGameServer',
	CREATE_ALIAS = 'gamelift:CreateAlias',
	CREATE_BUILD = 'gamelift:CreateBuild',
	CREATE_FLEET = 'gamelift:CreateFleet',
	CREATE_FLEET_LOCATIONS = 'gamelift:CreateFleetLocations',
	CREATE_GAME_SERVER_GROUP = 'gamelift:CreateGameServerGroup',
	CREATE_GAME_SESSION = 'gamelift:CreateGameSession',
	CREATE_GAME_SESSION_QUEUE = 'gamelift:CreateGameSessionQueue',
	CREATE_LOCATION = 'gamelift:CreateLocation',
	CREATE_MATCHMAKING_CONFIGURATION = 'gamelift:CreateMatchmakingConfiguration',
	CREATE_MATCHMAKING_RULE_SET = 'gamelift:CreateMatchmakingRuleSet',
	CREATE_PLAYER_SESSION = 'gamelift:CreatePlayerSession',
	CREATE_PLAYER_SESSIONS = 'gamelift:CreatePlayerSessions',
	CREATE_SCRIPT = 'gamelift:CreateScript',
	CREATE_VPC_PEERING_AUTHORIZATION = 'gamelift:CreateVpcPeeringAuthorization',
	CREATE_VPC_PEERING_CONNECTION = 'gamelift:CreateVpcPeeringConnection',
	DELETE_ALIAS = 'gamelift:DeleteAlias',
	DELETE_BUILD = 'gamelift:DeleteBuild',
	DELETE_FLEET = 'gamelift:DeleteFleet',
	DELETE_FLEET_LOCATIONS = 'gamelift:DeleteFleetLocations',
	DELETE_GAME_SERVER_GROUP = 'gamelift:DeleteGameServerGroup',
	DELETE_GAME_SESSION_QUEUE = 'gamelift:DeleteGameSessionQueue',
	DELETE_LOCATION = 'gamelift:DeleteLocation',
	DELETE_MATCHMAKING_CONFIGURATION = 'gamelift:DeleteMatchmakingConfiguration',
	DELETE_MATCHMAKING_RULE_SET = 'gamelift:DeleteMatchmakingRuleSet',
	DELETE_SCALING_POLICY = 'gamelift:DeleteScalingPolicy',
	DELETE_SCRIPT = 'gamelift:DeleteScript',
	DELETE_VPC_PEERING_AUTHORIZATION = 'gamelift:DeleteVpcPeeringAuthorization',
	DELETE_VPC_PEERING_CONNECTION = 'gamelift:DeleteVpcPeeringConnection',
	DEREGISTER_COMPUTE = 'gamelift:DeregisterCompute',
	DEREGISTER_GAME_SERVER = 'gamelift:DeregisterGameServer',
	DESCRIBE_ALIAS = 'gamelift:DescribeAlias',
	DESCRIBE_BUILD = 'gamelift:DescribeBuild',
	DESCRIBE_COMPUTE = 'gamelift:DescribeCompute',
	DESCRIBE_EC_2_INSTANCE_LIMITS = 'gamelift:DescribeEC2InstanceLimits',
	DESCRIBE_FLEET_ATTRIBUTES = 'gamelift:DescribeFleetAttributes',
	DESCRIBE_FLEET_CAPACITY = 'gamelift:DescribeFleetCapacity',
	DESCRIBE_FLEET_EVENTS = 'gamelift:DescribeFleetEvents',
	DESCRIBE_FLEET_LOCATION_ATTRIBUTES = 'gamelift:DescribeFleetLocationAttributes',
	DESCRIBE_FLEET_LOCATION_CAPACITY = 'gamelift:DescribeFleetLocationCapacity',
	DESCRIBE_FLEET_LOCATION_UTILIZATION = 'gamelift:DescribeFleetLocationUtilization',
	DESCRIBE_FLEET_PORT_SETTINGS = 'gamelift:DescribeFleetPortSettings',
	DESCRIBE_FLEET_UTILIZATION = 'gamelift:DescribeFleetUtilization',
	DESCRIBE_GAME_SERVER = 'gamelift:DescribeGameServer',
	DESCRIBE_GAME_SERVER_GROUP = 'gamelift:DescribeGameServerGroup',
	DESCRIBE_GAME_SERVER_INSTANCES = 'gamelift:DescribeGameServerInstances',
	DESCRIBE_GAME_SESSION_DETAILS = 'gamelift:DescribeGameSessionDetails',
	DESCRIBE_GAME_SESSION_PLACEMENT = 'gamelift:DescribeGameSessionPlacement',
	DESCRIBE_GAME_SESSION_QUEUES = 'gamelift:DescribeGameSessionQueues',
	DESCRIBE_GAME_SESSIONS = 'gamelift:DescribeGameSessions',
	DESCRIBE_INSTANCES = 'gamelift:DescribeInstances',
	DESCRIBE_MATCHMAKING = 'gamelift:DescribeMatchmaking',
	DESCRIBE_MATCHMAKING_CONFIGURATIONS = 'gamelift:DescribeMatchmakingConfigurations',
	DESCRIBE_MATCHMAKING_RULE_SETS = 'gamelift:DescribeMatchmakingRuleSets',
	DESCRIBE_PLAYER_SESSIONS = 'gamelift:DescribePlayerSessions',
	DESCRIBE_RUNTIME_CONFIGURATION = 'gamelift:DescribeRuntimeConfiguration',
	DESCRIBE_SCALING_POLICIES = 'gamelift:DescribeScalingPolicies',
	DESCRIBE_SCRIPT = 'gamelift:DescribeScript',
	DESCRIBE_VPC_PEERING_AUTHORIZATIONS = 'gamelift:DescribeVpcPeeringAuthorizations',
	DESCRIBE_VPC_PEERING_CONNECTIONS = 'gamelift:DescribeVpcPeeringConnections',
	GET_COMPUTE_ACCESS = 'gamelift:GetComputeAccess',
	GET_COMPUTE_AUTH_TOKEN = 'gamelift:GetComputeAuthToken',
	GET_GAME_SESSION_LOG_URL = 'gamelift:GetGameSessionLogUrl',
	GET_INSTANCE_ACCESS = 'gamelift:GetInstanceAccess',
	LIST_ALIASES = 'gamelift:ListAliases',
	LIST_BUILDS = 'gamelift:ListBuilds',
	LIST_COMPUTE = 'gamelift:ListCompute',
	LIST_FLEETS = 'gamelift:ListFleets',
	LIST_GAME_SERVER_GROUPS = 'gamelift:ListGameServerGroups',
	LIST_GAME_SERVERS = 'gamelift:ListGameServers',
	LIST_LOCATIONS = 'gamelift:ListLocations',
	LIST_SCRIPTS = 'gamelift:ListScripts',
	LIST_TAGS_FOR_RESOURCE = 'gamelift:ListTagsForResource',
	PUT_SCALING_POLICY = 'gamelift:PutScalingPolicy',
	REGISTER_COMPUTE = 'gamelift:RegisterCompute',
	REGISTER_GAME_SERVER = 'gamelift:RegisterGameServer',
	REQUEST_UPLOAD_CREDENTIALS = 'gamelift:RequestUploadCredentials',
	RESOLVE_ALIAS = 'gamelift:ResolveAlias',
	RESUME_GAME_SERVER_GROUP = 'gamelift:ResumeGameServerGroup',
	SEARCH_GAME_SESSIONS = 'gamelift:SearchGameSessions',
	START_FLEET_ACTIONS = 'gamelift:StartFleetActions',
	START_GAME_SESSION_PLACEMENT = 'gamelift:StartGameSessionPlacement',
	START_MATCH_BACKFILL = 'gamelift:StartMatchBackfill',
	START_MATCHMAKING = 'gamelift:StartMatchmaking',
	STOP_FLEET_ACTIONS = 'gamelift:StopFleetActions',
	STOP_GAME_SESSION_PLACEMENT = 'gamelift:StopGameSessionPlacement',
	STOP_MATCHMAKING = 'gamelift:StopMatchmaking',
	SUSPEND_GAME_SERVER_GROUP = 'gamelift:SuspendGameServerGroup',
	TAG_RESOURCE = 'gamelift:TagResource',
	UNTAG_RESOURCE = 'gamelift:UntagResource',
	UPDATE_ALIAS = 'gamelift:UpdateAlias',
	UPDATE_BUILD = 'gamelift:UpdateBuild',
	UPDATE_FLEET_ATTRIBUTES = 'gamelift:UpdateFleetAttributes',
	UPDATE_FLEET_CAPACITY = 'gamelift:UpdateFleetCapacity',
	UPDATE_FLEET_PORT_SETTINGS = 'gamelift:UpdateFleetPortSettings',
	UPDATE_GAME_SERVER = 'gamelift:UpdateGameServer',
	UPDATE_GAME_SERVER_GROUP = 'gamelift:UpdateGameServerGroup',
	UPDATE_GAME_SESSION = 'gamelift:UpdateGameSession',
	UPDATE_GAME_SESSION_QUEUE = 'gamelift:UpdateGameSessionQueue',
	UPDATE_MATCHMAKING_CONFIGURATION = 'gamelift:UpdateMatchmakingConfiguration',
	UPDATE_RUNTIME_CONFIGURATION = 'gamelift:UpdateRuntimeConfiguration',
	UPDATE_SCRIPT = 'gamelift:UpdateScript',
	VALIDATE_MATCHMAKING_RULE_SET = 'gamelift:ValidateMatchmakingRuleSet',
}
export enum IOT_FLEET_HUB_FOR_DEVICE_MANAGEMENT {
	CREATE_APPLICATION = 'iotfleethub:CreateApplication',
	DELETE_APPLICATION = 'iotfleethub:DeleteApplication',
	DESCRIBE_APPLICATION = 'iotfleethub:DescribeApplication',
	LIST_APPLICATIONS = 'iotfleethub:ListApplications',
	LIST_TAGS_FOR_RESOURCE = 'iotfleethub:ListTagsForResource',
	TAG_RESOURCE = 'iotfleethub:TagResource',
	UNTAG_RESOURCE = 'iotfleethub:UntagResource',
	UPDATE_APPLICATION = 'iotfleethub:UpdateApplication',
}
export enum ROUTE_53_RECOVERY_CONTROLS {
	CREATE_CLUSTER = 'route53-recovery-control-config:CreateCluster',
	CREATE_CONTROL_PANEL = 'route53-recovery-control-config:CreateControlPanel',
	CREATE_ROUTING_CONTROL = 'route53-recovery-control-config:CreateRoutingControl',
	CREATE_SAFETY_RULE = 'route53-recovery-control-config:CreateSafetyRule',
	DELETE_CLUSTER = 'route53-recovery-control-config:DeleteCluster',
	DELETE_CONTROL_PANEL = 'route53-recovery-control-config:DeleteControlPanel',
	DELETE_ROUTING_CONTROL = 'route53-recovery-control-config:DeleteRoutingControl',
	DELETE_SAFETY_RULE = 'route53-recovery-control-config:DeleteSafetyRule',
	DESCRIBE_CLUSTER = 'route53-recovery-control-config:DescribeCluster',
	DESCRIBE_CONTROL_PANEL = 'route53-recovery-control-config:DescribeControlPanel',
	DESCRIBE_ROUTING_CONTROL = 'route53-recovery-control-config:DescribeRoutingControl',
	DESCRIBE_ROUTING_CONTROL_BY_NAME = 'route53-recovery-control-config:DescribeRoutingControlByName',
	DESCRIBE_SAFETY_RULE = 'route53-recovery-control-config:DescribeSafetyRule',
	LIST_ASSOCIATED_ROUTE_53_HEALTH_CHECKS = 'route53-recovery-control-config:ListAssociatedRoute53HealthChecks',
	LIST_CLUSTERS = 'route53-recovery-control-config:ListClusters',
	LIST_CONTROL_PANELS = 'route53-recovery-control-config:ListControlPanels',
	LIST_ROUTING_CONTROLS = 'route53-recovery-control-config:ListRoutingControls',
	LIST_SAFETY_RULES = 'route53-recovery-control-config:ListSafetyRules',
	LIST_TAGS_FOR_RESOURCE = 'route53-recovery-control-config:ListTagsForResource',
	TAG_RESOURCE = 'route53-recovery-control-config:TagResource',
	UNTAG_RESOURCE = 'route53-recovery-control-config:UntagResource',
	UPDATE_CONTROL_PANEL = 'route53-recovery-control-config:UpdateControlPanel',
	UPDATE_ROUTING_CONTROL = 'route53-recovery-control-config:UpdateRoutingControl',
	UPDATE_SAFETY_RULE = 'route53-recovery-control-config:UpdateSafetyRule',
}
export enum OPSWORKS_CONFIGURATION_MANAGEMENT {
	ASSOCIATE_NODE = 'opsworks-cm:AssociateNode',
	CREATE_BACKUP = 'opsworks-cm:CreateBackup',
	CREATE_SERVER = 'opsworks-cm:CreateServer',
	DELETE_BACKUP = 'opsworks-cm:DeleteBackup',
	DELETE_SERVER = 'opsworks-cm:DeleteServer',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'opsworks-cm:DescribeAccountAttributes',
	DESCRIBE_BACKUPS = 'opsworks-cm:DescribeBackups',
	DESCRIBE_EVENTS = 'opsworks-cm:DescribeEvents',
	DESCRIBE_NODE_ASSOCIATION_STATUS = 'opsworks-cm:DescribeNodeAssociationStatus',
	DESCRIBE_SERVERS = 'opsworks-cm:DescribeServers',
	DISASSOCIATE_NODE = 'opsworks-cm:DisassociateNode',
	EXPORT_SERVER_ENGINE_ATTRIBUTE = 'opsworks-cm:ExportServerEngineAttribute',
	LIST_TAGS_FOR_RESOURCE = 'opsworks-cm:ListTagsForResource',
	RESTORE_SERVER = 'opsworks-cm:RestoreServer',
	START_MAINTENANCE = 'opsworks-cm:StartMaintenance',
	TAG_RESOURCE = 'opsworks-cm:TagResource',
	UNTAG_RESOURCE = 'opsworks-cm:UntagResource',
	UPDATE_SERVER = 'opsworks-cm:UpdateServer',
	UPDATE_SERVER_ENGINE_ATTRIBUTES = 'opsworks-cm:UpdateServerEngineAttributes',
}
export enum TIMESTREAM {
	CANCEL_QUERY = 'timestream:CancelQuery',
	CREATE_DATABASE = 'timestream:CreateDatabase',
	CREATE_SCHEDULED_QUERY = 'timestream:CreateScheduledQuery',
	CREATE_TABLE = 'timestream:CreateTable',
	DELETE_DATABASE = 'timestream:DeleteDatabase',
	DELETE_SCHEDULED_QUERY = 'timestream:DeleteScheduledQuery',
	DELETE_TABLE = 'timestream:DeleteTable',
	DESCRIBE_DATABASE = 'timestream:DescribeDatabase',
	DESCRIBE_ENDPOINTS = 'timestream:DescribeEndpoints',
	DESCRIBE_SCHEDULED_QUERY = 'timestream:DescribeScheduledQuery',
	DESCRIBE_TABLE = 'timestream:DescribeTable',
	EXECUTE_SCHEDULED_QUERY = 'timestream:ExecuteScheduledQuery',
	GET_AWS_BACKUP_STATUS = 'timestream:GetAwsBackupStatus',
	GET_AWS_RESTORE_STATUS = 'timestream:GetAwsRestoreStatus',
	LIST_DATABASES = 'timestream:ListDatabases',
	LIST_MEASURES = 'timestream:ListMeasures',
	LIST_SCHEDULED_QUERIES = 'timestream:ListScheduledQueries',
	LIST_TABLES = 'timestream:ListTables',
	LIST_TAGS_FOR_RESOURCE = 'timestream:ListTagsForResource',
	PREPARE_QUERY = 'timestream:PrepareQuery',
	SELECT = 'timestream:Select',
	SELECT_VALUES = 'timestream:SelectValues',
	START_AWS_BACKUP_JOB = 'timestream:StartAwsBackupJob',
	START_AWS_RESTORE_JOB = 'timestream:StartAwsRestoreJob',
	TAG_RESOURCE = 'timestream:TagResource',
	UNTAG_RESOURCE = 'timestream:UntagResource',
	UPDATE_DATABASE = 'timestream:UpdateDatabase',
	UPDATE_SCHEDULED_QUERY = 'timestream:UpdateScheduledQuery',
	UPDATE_TABLE = 'timestream:UpdateTable',
	WRITE_RECORDS = 'timestream:WriteRecords',
}
export enum IOT_ROBORUNNER {
	CREATE_ACTION = 'iotroborunner:CreateAction',
	CREATE_ACTION_TEMPLATE = 'iotroborunner:CreateActionTemplate',
	CREATE_ACTION_TEMPLATE_DEPENDENCY = 'iotroborunner:CreateActionTemplateDependency',
	CREATE_ACTIVITY = 'iotroborunner:CreateActivity',
	CREATE_ACTIVITY_DEPENDENCY = 'iotroborunner:CreateActivityDependency',
	CREATE_DESTINATION = 'iotroborunner:CreateDestination',
	CREATE_DESTINATION_RELATIONSHIP = 'iotroborunner:CreateDestinationRelationship',
	CREATE_SITE = 'iotroborunner:CreateSite',
	CREATE_TASK = 'iotroborunner:CreateTask',
	CREATE_TASK_DEPENDENCY = 'iotroborunner:CreateTaskDependency',
	CREATE_WORKER = 'iotroborunner:CreateWorker',
	CREATE_WORKER_FLEET = 'iotroborunner:CreateWorkerFleet',
	DELETE_ACTION = 'iotroborunner:DeleteAction',
	DELETE_ACTION_TEMPLATE = 'iotroborunner:DeleteActionTemplate',
	DELETE_ACTION_TEMPLATE_DEPENDENCY = 'iotroborunner:DeleteActionTemplateDependency',
	DELETE_ACTIVITY = 'iotroborunner:DeleteActivity',
	DELETE_ACTIVITY_DEPENDENCY = 'iotroborunner:DeleteActivityDependency',
	DELETE_DESTINATION = 'iotroborunner:DeleteDestination',
	DELETE_DESTINATION_RELATIONSHIP = 'iotroborunner:DeleteDestinationRelationship',
	DELETE_SITE = 'iotroborunner:DeleteSite',
	DELETE_TASK = 'iotroborunner:DeleteTask',
	DELETE_TASK_DEPENDENCY = 'iotroborunner:DeleteTaskDependency',
	DELETE_WORKER = 'iotroborunner:DeleteWorker',
	DELETE_WORKER_FLEET = 'iotroborunner:DeleteWorkerFleet',
	GET_ACTION = 'iotroborunner:GetAction',
	GET_ACTION_TEMPLATE = 'iotroborunner:GetActionTemplate',
	GET_ACTIVITY = 'iotroborunner:GetActivity',
	GET_DESTINATION = 'iotroborunner:GetDestination',
	GET_DESTINATION_RELATIONSHIP = 'iotroborunner:GetDestinationRelationship',
	GET_SITE = 'iotroborunner:GetSite',
	GET_TASK = 'iotroborunner:GetTask',
	GET_WORKER = 'iotroborunner:GetWorker',
	GET_WORKER_FLEET = 'iotroborunner:GetWorkerFleet',
	LIST_ACTION_TEMPLATES = 'iotroborunner:ListActionTemplates',
	LIST_ACTIONS = 'iotroborunner:ListActions',
	LIST_ACTIVITIES = 'iotroborunner:ListActivities',
	LIST_DESTINATION_RELATIONSHIPS = 'iotroborunner:ListDestinationRelationships',
	LIST_DESTINATIONS = 'iotroborunner:ListDestinations',
	LIST_SITES = 'iotroborunner:ListSites',
	LIST_TASKS = 'iotroborunner:ListTasks',
	LIST_WORKER_FLEETS = 'iotroborunner:ListWorkerFleets',
	LIST_WORKERS = 'iotroborunner:ListWorkers',
	UPDATE_ACTION_STATE = 'iotroborunner:UpdateActionState',
	UPDATE_ACTIVITY = 'iotroborunner:UpdateActivity',
	UPDATE_DESTINATION = 'iotroborunner:UpdateDestination',
	UPDATE_SITE = 'iotroborunner:UpdateSite',
	UPDATE_TASK = 'iotroborunner:UpdateTask',
	UPDATE_WORKER = 'iotroborunner:UpdateWorker',
	UPDATE_WORKER_FLEET = 'iotroborunner:UpdateWorkerFleet',
}
export enum EC2_INSTANCE_CONNECT {
	SEND_SSH_PUBLIC_KEY = 'ec2-instance-connect:SendSSHPublicKey',
	SEND_SERIAL_CONSOLE_SSH_PUBLIC_KEY = 'ec2-instance-connect:SendSerialConsoleSSHPublicKey',
}
export enum INTERACTIVE_VIDEO_SERVICE_CHAT {
	CREATE_CHAT_TOKEN = 'ivschat:CreateChatToken',
	CREATE_LOGGING_CONFIGURATION = 'ivschat:CreateLoggingConfiguration',
	CREATE_ROOM = 'ivschat:CreateRoom',
	DELETE_LOGGING_CONFIGURATION = 'ivschat:DeleteLoggingConfiguration',
	DELETE_MESSAGE = 'ivschat:DeleteMessage',
	DELETE_ROOM = 'ivschat:DeleteRoom',
	DISCONNECT_USER = 'ivschat:DisconnectUser',
	GET_LOGGING_CONFIGURATION = 'ivschat:GetLoggingConfiguration',
	GET_ROOM = 'ivschat:GetRoom',
	LIST_LOGGING_CONFIGURATIONS = 'ivschat:ListLoggingConfigurations',
	LIST_ROOMS = 'ivschat:ListRooms',
	LIST_TAGS_FOR_RESOURCE = 'ivschat:ListTagsForResource',
	SEND_EVENT = 'ivschat:SendEvent',
	TAG_RESOURCE = 'ivschat:TagResource',
	UNTAG_RESOURCE = 'ivschat:UntagResource',
	UPDATE_LOGGING_CONFIGURATION = 'ivschat:UpdateLoggingConfiguration',
	UPDATE_ROOM = 'ivschat:UpdateRoom',
}
export enum RDS_IAM_AUTHENTICATION {
	CONNECT = 'rds-db:connect',
}
export enum APPLICATION_DISCOVERY_SERVICE {
	ASSOCIATE_CONFIGURATION_ITEMS_TO_APPLICATION = 'discovery:AssociateConfigurationItemsToApplication',
	BATCH_DELETE_IMPORT_DATA = 'discovery:BatchDeleteImportData',
	CREATE_APPLICATION = 'discovery:CreateApplication',
	CREATE_TAGS = 'discovery:CreateTags',
	DELETE_APPLICATIONS = 'discovery:DeleteApplications',
	DELETE_TAGS = 'discovery:DeleteTags',
	DESCRIBE_AGENTS = 'discovery:DescribeAgents',
	DESCRIBE_CONFIGURATIONS = 'discovery:DescribeConfigurations',
	DESCRIBE_CONTINUOUS_EXPORTS = 'discovery:DescribeContinuousExports',
	DESCRIBE_EXPORT_CONFIGURATIONS = 'discovery:DescribeExportConfigurations',
	DESCRIBE_EXPORT_TASKS = 'discovery:DescribeExportTasks',
	DESCRIBE_IMPORT_TASKS = 'discovery:DescribeImportTasks',
	DESCRIBE_TAGS = 'discovery:DescribeTags',
	DISASSOCIATE_CONFIGURATION_ITEMS_FROM_APPLICATION = 'discovery:DisassociateConfigurationItemsFromApplication',
	EXPORT_CONFIGURATIONS = 'discovery:ExportConfigurations',
	GET_DISCOVERY_SUMMARY = 'discovery:GetDiscoverySummary',
	GET_NETWORK_CONNECTION_GRAPH = 'discovery:GetNetworkConnectionGraph',
	LIST_CONFIGURATIONS = 'discovery:ListConfigurations',
	LIST_SERVER_NEIGHBORS = 'discovery:ListServerNeighbors',
	START_CONTINUOUS_EXPORT = 'discovery:StartContinuousExport',
	START_DATA_COLLECTION_BY_AGENT_IDS = 'discovery:StartDataCollectionByAgentIds',
	START_EXPORT_TASK = 'discovery:StartExportTask',
	START_IMPORT_TASK = 'discovery:StartImportTask',
	STOP_CONTINUOUS_EXPORT = 'discovery:StopContinuousExport',
	STOP_DATA_COLLECTION_BY_AGENT_IDS = 'discovery:StopDataCollectionByAgentIds',
	UPDATE_APPLICATION = 'discovery:UpdateApplication',
}
export enum ELASTIC_BLOCK_STORE {
	COMPLETE_SNAPSHOT = 'ebs:CompleteSnapshot',
	GET_SNAPSHOT_BLOCK = 'ebs:GetSnapshotBlock',
	LIST_CHANGED_BLOCKS = 'ebs:ListChangedBlocks',
	LIST_SNAPSHOT_BLOCKS = 'ebs:ListSnapshotBlocks',
	PUT_SNAPSHOT_BLOCK = 'ebs:PutSnapshotBlock',
	START_SNAPSHOT = 'ebs:StartSnapshot',
}
export enum CODECOMMIT {
	ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORY = 'codecommit:AssociateApprovalRuleTemplateWithRepository',
	BATCH_ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORIES = 'codecommit:BatchAssociateApprovalRuleTemplateWithRepositories',
	BATCH_DESCRIBE_MERGE_CONFLICTS = 'codecommit:BatchDescribeMergeConflicts',
	BATCH_DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORIES = 'codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories',
	BATCH_GET_COMMITS = 'codecommit:BatchGetCommits',
	BATCH_GET_PULL_REQUESTS = 'codecommit:BatchGetPullRequests',
	BATCH_GET_REPOSITORIES = 'codecommit:BatchGetRepositories',
	CANCEL_UPLOAD_ARCHIVE = 'codecommit:CancelUploadArchive',
	CREATE_APPROVAL_RULE_TEMPLATE = 'codecommit:CreateApprovalRuleTemplate',
	CREATE_BRANCH = 'codecommit:CreateBranch',
	CREATE_COMMIT = 'codecommit:CreateCommit',
	CREATE_PULL_REQUEST = 'codecommit:CreatePullRequest',
	CREATE_PULL_REQUEST_APPROVAL_RULE = 'codecommit:CreatePullRequestApprovalRule',
	CREATE_REPOSITORY = 'codecommit:CreateRepository',
	CREATE_UNREFERENCED_MERGE_COMMIT = 'codecommit:CreateUnreferencedMergeCommit',
	DELETE_APPROVAL_RULE_TEMPLATE = 'codecommit:DeleteApprovalRuleTemplate',
	DELETE_BRANCH = 'codecommit:DeleteBranch',
	DELETE_COMMENT_CONTENT = 'codecommit:DeleteCommentContent',
	DELETE_FILE = 'codecommit:DeleteFile',
	DELETE_PULL_REQUEST_APPROVAL_RULE = 'codecommit:DeletePullRequestApprovalRule',
	DELETE_REPOSITORY = 'codecommit:DeleteRepository',
	DESCRIBE_MERGE_CONFLICTS = 'codecommit:DescribeMergeConflicts',
	DESCRIBE_PULL_REQUEST_EVENTS = 'codecommit:DescribePullRequestEvents',
	DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORY = 'codecommit:DisassociateApprovalRuleTemplateFromRepository',
	EVALUATE_PULL_REQUEST_APPROVAL_RULES = 'codecommit:EvaluatePullRequestApprovalRules',
	GET_APPROVAL_RULE_TEMPLATE = 'codecommit:GetApprovalRuleTemplate',
	GET_BLOB = 'codecommit:GetBlob',
	GET_BRANCH = 'codecommit:GetBranch',
	GET_COMMENT = 'codecommit:GetComment',
	GET_COMMENT_REACTIONS = 'codecommit:GetCommentReactions',
	GET_COMMENTS_FOR_COMPARED_COMMIT = 'codecommit:GetCommentsForComparedCommit',
	GET_COMMENTS_FOR_PULL_REQUEST = 'codecommit:GetCommentsForPullRequest',
	GET_COMMIT = 'codecommit:GetCommit',
	GET_COMMIT_HISTORY = 'codecommit:GetCommitHistory',
	GET_COMMITS_FROM_MERGE_BASE = 'codecommit:GetCommitsFromMergeBase',
	GET_DIFFERENCES = 'codecommit:GetDifferences',
	GET_FILE = 'codecommit:GetFile',
	GET_FOLDER = 'codecommit:GetFolder',
	GET_MERGE_COMMIT = 'codecommit:GetMergeCommit',
	GET_MERGE_CONFLICTS = 'codecommit:GetMergeConflicts',
	GET_MERGE_OPTIONS = 'codecommit:GetMergeOptions',
	GET_OBJECT_IDENTIFIER = 'codecommit:GetObjectIdentifier',
	GET_PULL_REQUEST = 'codecommit:GetPullRequest',
	GET_PULL_REQUEST_APPROVAL_STATES = 'codecommit:GetPullRequestApprovalStates',
	GET_PULL_REQUEST_OVERRIDE_STATE = 'codecommit:GetPullRequestOverrideState',
	GET_REFERENCES = 'codecommit:GetReferences',
	GET_REPOSITORY = 'codecommit:GetRepository',
	GET_REPOSITORY_TRIGGERS = 'codecommit:GetRepositoryTriggers',
	GET_TREE = 'codecommit:GetTree',
	GET_UPLOAD_ARCHIVE_STATUS = 'codecommit:GetUploadArchiveStatus',
	GIT_PULL = 'codecommit:GitPull',
	GIT_PUSH = 'codecommit:GitPush',
	LIST_APPROVAL_RULE_TEMPLATES = 'codecommit:ListApprovalRuleTemplates',
	LIST_ASSOCIATED_APPROVAL_RULE_TEMPLATES_FOR_REPOSITORY = 'codecommit:ListAssociatedApprovalRuleTemplatesForRepository',
	LIST_BRANCHES = 'codecommit:ListBranches',
	LIST_PULL_REQUESTS = 'codecommit:ListPullRequests',
	LIST_REPOSITORIES = 'codecommit:ListRepositories',
	LIST_REPOSITORIES_FOR_APPROVAL_RULE_TEMPLATE = 'codecommit:ListRepositoriesForApprovalRuleTemplate',
	LIST_TAGS_FOR_RESOURCE = 'codecommit:ListTagsForResource',
	MERGE_BRANCHES_BY_FAST_FORWARD = 'codecommit:MergeBranchesByFastForward',
	MERGE_BRANCHES_BY_SQUASH = 'codecommit:MergeBranchesBySquash',
	MERGE_BRANCHES_BY_THREE_WAY = 'codecommit:MergeBranchesByThreeWay',
	MERGE_PULL_REQUEST_BY_FAST_FORWARD = 'codecommit:MergePullRequestByFastForward',
	MERGE_PULL_REQUEST_BY_SQUASH = 'codecommit:MergePullRequestBySquash',
	MERGE_PULL_REQUEST_BY_THREE_WAY = 'codecommit:MergePullRequestByThreeWay',
	OVERRIDE_PULL_REQUEST_APPROVAL_RULES = 'codecommit:OverridePullRequestApprovalRules',
	POST_COMMENT_FOR_COMPARED_COMMIT = 'codecommit:PostCommentForComparedCommit',
	POST_COMMENT_FOR_PULL_REQUEST = 'codecommit:PostCommentForPullRequest',
	POST_COMMENT_REPLY = 'codecommit:PostCommentReply',
	PUT_COMMENT_REACTION = 'codecommit:PutCommentReaction',
	PUT_FILE = 'codecommit:PutFile',
	PUT_REPOSITORY_TRIGGERS = 'codecommit:PutRepositoryTriggers',
	TAG_RESOURCE = 'codecommit:TagResource',
	TEST_REPOSITORY_TRIGGERS = 'codecommit:TestRepositoryTriggers',
	UNTAG_RESOURCE = 'codecommit:UntagResource',
	UPDATE_APPROVAL_RULE_TEMPLATE_CONTENT = 'codecommit:UpdateApprovalRuleTemplateContent',
	UPDATE_APPROVAL_RULE_TEMPLATE_DESCRIPTION = 'codecommit:UpdateApprovalRuleTemplateDescription',
	UPDATE_APPROVAL_RULE_TEMPLATE_NAME = 'codecommit:UpdateApprovalRuleTemplateName',
	UPDATE_COMMENT = 'codecommit:UpdateComment',
	UPDATE_DEFAULT_BRANCH = 'codecommit:UpdateDefaultBranch',
	UPDATE_PULL_REQUEST_APPROVAL_RULE_CONTENT = 'codecommit:UpdatePullRequestApprovalRuleContent',
	UPDATE_PULL_REQUEST_APPROVAL_STATE = 'codecommit:UpdatePullRequestApprovalState',
	UPDATE_PULL_REQUEST_DESCRIPTION = 'codecommit:UpdatePullRequestDescription',
	UPDATE_PULL_REQUEST_STATUS = 'codecommit:UpdatePullRequestStatus',
	UPDATE_PULL_REQUEST_TITLE = 'codecommit:UpdatePullRequestTitle',
	UPDATE_REPOSITORY_DESCRIPTION = 'codecommit:UpdateRepositoryDescription',
	UPDATE_REPOSITORY_NAME = 'codecommit:UpdateRepositoryName',
	UPLOAD_ARCHIVE = 'codecommit:UploadArchive',
}
export enum CODEGURU_PROFILER {
	ADD_NOTIFICATION_CHANNELS = 'codeguru-profiler:AddNotificationChannels',
	BATCH_GET_FRAME_METRIC_DATA = 'codeguru-profiler:BatchGetFrameMetricData',
	CONFIGURE_AGENT = 'codeguru-profiler:ConfigureAgent',
	CREATE_PROFILING_GROUP = 'codeguru-profiler:CreateProfilingGroup',
	DELETE_PROFILING_GROUP = 'codeguru-profiler:DeleteProfilingGroup',
	DESCRIBE_PROFILING_GROUP = 'codeguru-profiler:DescribeProfilingGroup',
	GET_FINDINGS_REPORT_ACCOUNT_SUMMARY = 'codeguru-profiler:GetFindingsReportAccountSummary',
	GET_NOTIFICATION_CONFIGURATION = 'codeguru-profiler:GetNotificationConfiguration',
	GET_POLICY = 'codeguru-profiler:GetPolicy',
	GET_PROFILE = 'codeguru-profiler:GetProfile',
	GET_RECOMMENDATIONS = 'codeguru-profiler:GetRecommendations',
	LIST_FINDINGS_REPORTS = 'codeguru-profiler:ListFindingsReports',
	LIST_PROFILE_TIMES = 'codeguru-profiler:ListProfileTimes',
	LIST_PROFILING_GROUPS = 'codeguru-profiler:ListProfilingGroups',
	LIST_TAGS_FOR_RESOURCE = 'codeguru-profiler:ListTagsForResource',
	POST_AGENT_PROFILE = 'codeguru-profiler:PostAgentProfile',
	PUT_PERMISSION = 'codeguru-profiler:PutPermission',
	REMOVE_NOTIFICATION_CHANNEL = 'codeguru-profiler:RemoveNotificationChannel',
	REMOVE_PERMISSION = 'codeguru-profiler:RemovePermission',
	SUBMIT_FEEDBACK = 'codeguru-profiler:SubmitFeedback',
	TAG_RESOURCE = 'codeguru-profiler:TagResource',
	UNTAG_RESOURCE = 'codeguru-profiler:UntagResource',
	UPDATE_PROFILING_GROUP = 'codeguru-profiler:UpdateProfilingGroup',
}
export enum IOT_CORE_DEVICE_ADVISOR {
	CREATE_SUITE_DEFINITION = 'iotdeviceadvisor:CreateSuiteDefinition',
	DELETE_SUITE_DEFINITION = 'iotdeviceadvisor:DeleteSuiteDefinition',
	GET_ENDPOINT = 'iotdeviceadvisor:GetEndpoint',
	GET_SUITE_DEFINITION = 'iotdeviceadvisor:GetSuiteDefinition',
	GET_SUITE_RUN = 'iotdeviceadvisor:GetSuiteRun',
	GET_SUITE_RUN_REPORT = 'iotdeviceadvisor:GetSuiteRunReport',
	LIST_SUITE_DEFINITIONS = 'iotdeviceadvisor:ListSuiteDefinitions',
	LIST_SUITE_RUNS = 'iotdeviceadvisor:ListSuiteRuns',
	LIST_TAGS_FOR_RESOURCE = 'iotdeviceadvisor:ListTagsForResource',
	START_SUITE_RUN = 'iotdeviceadvisor:StartSuiteRun',
	STOP_SUITE_RUN = 'iotdeviceadvisor:StopSuiteRun',
	TAG_RESOURCE = 'iotdeviceadvisor:TagResource',
	UNTAG_RESOURCE = 'iotdeviceadvisor:UntagResource',
	UPDATE_SUITE_DEFINITION = 'iotdeviceadvisor:UpdateSuiteDefinition',
}
export enum MARKETPLACE_VENDOR_INSIGHTS {
	ACTIVATE_SECURITY_PROFILE = 'vendor-insights:ActivateSecurityProfile',
	ASSOCIATE_DATA_SOURCE = 'vendor-insights:AssociateDataSource',
	CREATE_DATA_SOURCE = 'vendor-insights:CreateDataSource',
	CREATE_SECURITY_PROFILE = 'vendor-insights:CreateSecurityProfile',
	DEACTIVATE_SECURITY_PROFILE = 'vendor-insights:DeactivateSecurityProfile',
	DELETE_DATA_SOURCE = 'vendor-insights:DeleteDataSource',
	DISASSOCIATE_DATA_SOURCE = 'vendor-insights:DisassociateDataSource',
	GET_DATA_SOURCE = 'vendor-insights:GetDataSource',
	GET_ENTITLED_SECURITY_PROFILE_SNAPSHOT = 'vendor-insights:GetEntitledSecurityProfileSnapshot',
	GET_PROFILE_ACCESS_TERMS = 'vendor-insights:GetProfileAccessTerms',
	GET_SECURITY_PROFILE = 'vendor-insights:GetSecurityProfile',
	GET_SECURITY_PROFILE_SNAPSHOT = 'vendor-insights:GetSecurityProfileSnapshot',
	LIST_DATA_SOURCES = 'vendor-insights:ListDataSources',
	LIST_ENTITLED_SECURITY_PROFILE_SNAPSHOTS = 'vendor-insights:ListEntitledSecurityProfileSnapshots',
	LIST_ENTITLED_SECURITY_PROFILES = 'vendor-insights:ListEntitledSecurityProfiles',
	LIST_SECURITY_PROFILE_SNAPSHOTS = 'vendor-insights:ListSecurityProfileSnapshots',
	LIST_SECURITY_PROFILES = 'vendor-insights:ListSecurityProfiles',
	LIST_TAGS_FOR_RESOURCE = 'vendor-insights:ListTagsForResource',
	TAG_RESOURCE = 'vendor-insights:TagResource',
	UNTAG_RESOURCE = 'vendor-insights:UntagResource',
	UPDATE_SECURITY_PROFILE = 'vendor-insights:UpdateSecurityProfile',
	UPDATE_SECURITY_PROFILE_SNAPSHOT_CREATION_CONFIGURATION = 'vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration',
	UPDATE_SECURITY_PROFILE_SNAPSHOT_RELEASE_CONFIGURATION = 'vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration',
}
export enum SNS {
	ADD_PERMISSION = 'sns:AddPermission',
	CHECK_IF_PHONE_NUMBER_IS_OPTED_OUT = 'sns:CheckIfPhoneNumberIsOptedOut',
	CONFIRM_SUBSCRIPTION = 'sns:ConfirmSubscription',
	CREATE_PLATFORM_APPLICATION = 'sns:CreatePlatformApplication',
	CREATE_PLATFORM_ENDPOINT = 'sns:CreatePlatformEndpoint',
	CREATE_SMS_SANDBOX_PHONE_NUMBER = 'sns:CreateSMSSandboxPhoneNumber',
	CREATE_TOPIC = 'sns:CreateTopic',
	DELETE_ENDPOINT = 'sns:DeleteEndpoint',
	DELETE_PLATFORM_APPLICATION = 'sns:DeletePlatformApplication',
	DELETE_SMS_SANDBOX_PHONE_NUMBER = 'sns:DeleteSMSSandboxPhoneNumber',
	DELETE_TOPIC = 'sns:DeleteTopic',
	GET_DATA_PROTECTION_POLICY = 'sns:GetDataProtectionPolicy',
	GET_ENDPOINT_ATTRIBUTES = 'sns:GetEndpointAttributes',
	GET_PLATFORM_APPLICATION_ATTRIBUTES = 'sns:GetPlatformApplicationAttributes',
	GET_SMS_ATTRIBUTES = 'sns:GetSMSAttributes',
	GET_SMS_SANDBOX_ACCOUNT_STATUS = 'sns:GetSMSSandboxAccountStatus',
	GET_SUBSCRIPTION_ATTRIBUTES = 'sns:GetSubscriptionAttributes',
	GET_TOPIC_ATTRIBUTES = 'sns:GetTopicAttributes',
	LIST_ENDPOINTS_BY_PLATFORM_APPLICATION = 'sns:ListEndpointsByPlatformApplication',
	LIST_ORIGINATION_NUMBERS = 'sns:ListOriginationNumbers',
	LIST_PHONE_NUMBERS_OPTED_OUT = 'sns:ListPhoneNumbersOptedOut',
	LIST_PLATFORM_APPLICATIONS = 'sns:ListPlatformApplications',
	LIST_SMS_SANDBOX_PHONE_NUMBERS = 'sns:ListSMSSandboxPhoneNumbers',
	LIST_SUBSCRIPTIONS = 'sns:ListSubscriptions',
	LIST_SUBSCRIPTIONS_BY_TOPIC = 'sns:ListSubscriptionsByTopic',
	LIST_TAGS_FOR_RESOURCE = 'sns:ListTagsForResource',
	LIST_TOPICS = 'sns:ListTopics',
	OPT_IN_PHONE_NUMBER = 'sns:OptInPhoneNumber',
	PUBLISH = 'sns:Publish',
	PUT_DATA_PROTECTION_POLICY = 'sns:PutDataProtectionPolicy',
	REMOVE_PERMISSION = 'sns:RemovePermission',
	SET_ENDPOINT_ATTRIBUTES = 'sns:SetEndpointAttributes',
	SET_PLATFORM_APPLICATION_ATTRIBUTES = 'sns:SetPlatformApplicationAttributes',
	SET_SMS_ATTRIBUTES = 'sns:SetSMSAttributes',
	SET_SUBSCRIPTION_ATTRIBUTES = 'sns:SetSubscriptionAttributes',
	SET_TOPIC_ATTRIBUTES = 'sns:SetTopicAttributes',
	SUBSCRIBE = 'sns:Subscribe',
	TAG_RESOURCE = 'sns:TagResource',
	UNSUBSCRIBE = 'sns:Unsubscribe',
	UNTAG_RESOURCE = 'sns:UntagResource',
	VERIFY_SMS_SANDBOX_PHONE_NUMBER = 'sns:VerifySMSSandboxPhoneNumber',
}
export enum COGNITO_USER_POOLS {
	ADD_CUSTOM_ATTRIBUTES = 'cognito-idp:AddCustomAttributes',
	ADMIN_ADD_USER_TO_GROUP = 'cognito-idp:AdminAddUserToGroup',
	ADMIN_CONFIRM_SIGN_UP = 'cognito-idp:AdminConfirmSignUp',
	ADMIN_CREATE_USER = 'cognito-idp:AdminCreateUser',
	ADMIN_DELETE_USER = 'cognito-idp:AdminDeleteUser',
	ADMIN_DELETE_USER_ATTRIBUTES = 'cognito-idp:AdminDeleteUserAttributes',
	ADMIN_DISABLE_PROVIDER_FOR_USER = 'cognito-idp:AdminDisableProviderForUser',
	ADMIN_DISABLE_USER = 'cognito-idp:AdminDisableUser',
	ADMIN_ENABLE_USER = 'cognito-idp:AdminEnableUser',
	ADMIN_FORGET_DEVICE = 'cognito-idp:AdminForgetDevice',
	ADMIN_GET_DEVICE = 'cognito-idp:AdminGetDevice',
	ADMIN_GET_USER = 'cognito-idp:AdminGetUser',
	ADMIN_INITIATE_AUTH = 'cognito-idp:AdminInitiateAuth',
	ADMIN_LINK_PROVIDER_FOR_USER = 'cognito-idp:AdminLinkProviderForUser',
	ADMIN_LIST_DEVICES = 'cognito-idp:AdminListDevices',
	ADMIN_LIST_GROUPS_FOR_USER = 'cognito-idp:AdminListGroupsForUser',
	ADMIN_LIST_USER_AUTH_EVENTS = 'cognito-idp:AdminListUserAuthEvents',
	ADMIN_REMOVE_USER_FROM_GROUP = 'cognito-idp:AdminRemoveUserFromGroup',
	ADMIN_RESET_USER_PASSWORD = 'cognito-idp:AdminResetUserPassword',
	ADMIN_RESPOND_TO_AUTH_CHALLENGE = 'cognito-idp:AdminRespondToAuthChallenge',
	ADMIN_SET_USER_MFA_PREFERENCE = 'cognito-idp:AdminSetUserMFAPreference',
	ADMIN_SET_USER_PASSWORD = 'cognito-idp:AdminSetUserPassword',
	ADMIN_SET_USER_SETTINGS = 'cognito-idp:AdminSetUserSettings',
	ADMIN_UPDATE_AUTH_EVENT_FEEDBACK = 'cognito-idp:AdminUpdateAuthEventFeedback',
	ADMIN_UPDATE_DEVICE_STATUS = 'cognito-idp:AdminUpdateDeviceStatus',
	ADMIN_UPDATE_USER_ATTRIBUTES = 'cognito-idp:AdminUpdateUserAttributes',
	ADMIN_USER_GLOBAL_SIGN_OUT = 'cognito-idp:AdminUserGlobalSignOut',
	ASSOCIATE_SOFTWARE_TOKEN = 'cognito-idp:AssociateSoftwareToken',
	ASSOCIATE_WEB_ACL = 'cognito-idp:AssociateWebACL',
	CHANGE_PASSWORD = 'cognito-idp:ChangePassword',
	CONFIRM_DEVICE = 'cognito-idp:ConfirmDevice',
	CONFIRM_FORGOT_PASSWORD = 'cognito-idp:ConfirmForgotPassword',
	CONFIRM_SIGN_UP = 'cognito-idp:ConfirmSignUp',
	CREATE_GROUP = 'cognito-idp:CreateGroup',
	CREATE_IDENTITY_PROVIDER = 'cognito-idp:CreateIdentityProvider',
	CREATE_RESOURCE_SERVER = 'cognito-idp:CreateResourceServer',
	CREATE_USER_IMPORT_JOB = 'cognito-idp:CreateUserImportJob',
	CREATE_USER_POOL = 'cognito-idp:CreateUserPool',
	CREATE_USER_POOL_CLIENT = 'cognito-idp:CreateUserPoolClient',
	CREATE_USER_POOL_DOMAIN = 'cognito-idp:CreateUserPoolDomain',
	DELETE_GROUP = 'cognito-idp:DeleteGroup',
	DELETE_IDENTITY_PROVIDER = 'cognito-idp:DeleteIdentityProvider',
	DELETE_RESOURCE_SERVER = 'cognito-idp:DeleteResourceServer',
	DELETE_USER = 'cognito-idp:DeleteUser',
	DELETE_USER_ATTRIBUTES = 'cognito-idp:DeleteUserAttributes',
	DELETE_USER_POOL = 'cognito-idp:DeleteUserPool',
	DELETE_USER_POOL_CLIENT = 'cognito-idp:DeleteUserPoolClient',
	DELETE_USER_POOL_DOMAIN = 'cognito-idp:DeleteUserPoolDomain',
	DESCRIBE_IDENTITY_PROVIDER = 'cognito-idp:DescribeIdentityProvider',
	DESCRIBE_RESOURCE_SERVER = 'cognito-idp:DescribeResourceServer',
	DESCRIBE_RISK_CONFIGURATION = 'cognito-idp:DescribeRiskConfiguration',
	DESCRIBE_USER_IMPORT_JOB = 'cognito-idp:DescribeUserImportJob',
	DESCRIBE_USER_POOL = 'cognito-idp:DescribeUserPool',
	DESCRIBE_USER_POOL_CLIENT = 'cognito-idp:DescribeUserPoolClient',
	DESCRIBE_USER_POOL_DOMAIN = 'cognito-idp:DescribeUserPoolDomain',
	DISASSOCIATE_WEB_ACL = 'cognito-idp:DisassociateWebACL',
	FORGET_DEVICE = 'cognito-idp:ForgetDevice',
	FORGOT_PASSWORD = 'cognito-idp:ForgotPassword',
	GET_CSV_HEADER = 'cognito-idp:GetCSVHeader',
	GET_DEVICE = 'cognito-idp:GetDevice',
	GET_GROUP = 'cognito-idp:GetGroup',
	GET_IDENTITY_PROVIDER_BY_IDENTIFIER = 'cognito-idp:GetIdentityProviderByIdentifier',
	GET_SIGNING_CERTIFICATE = 'cognito-idp:GetSigningCertificate',
	GET_UI_CUSTOMIZATION = 'cognito-idp:GetUICustomization',
	GET_USER = 'cognito-idp:GetUser',
	GET_USER_ATTRIBUTE_VERIFICATION_CODE = 'cognito-idp:GetUserAttributeVerificationCode',
	GET_USER_POOL_MFA_CONFIG = 'cognito-idp:GetUserPoolMfaConfig',
	GET_WEB_ACL_FOR_RESOURCE = 'cognito-idp:GetWebACLForResource',
	GLOBAL_SIGN_OUT = 'cognito-idp:GlobalSignOut',
	INITIATE_AUTH = 'cognito-idp:InitiateAuth',
	LIST_DEVICES = 'cognito-idp:ListDevices',
	LIST_GROUPS = 'cognito-idp:ListGroups',
	LIST_IDENTITY_PROVIDERS = 'cognito-idp:ListIdentityProviders',
	LIST_RESOURCE_SERVERS = 'cognito-idp:ListResourceServers',
	LIST_RESOURCES_FOR_WEB_ACL = 'cognito-idp:ListResourcesForWebACL',
	LIST_TAGS_FOR_RESOURCE = 'cognito-idp:ListTagsForResource',
	LIST_USER_IMPORT_JOBS = 'cognito-idp:ListUserImportJobs',
	LIST_USER_POOL_CLIENTS = 'cognito-idp:ListUserPoolClients',
	LIST_USER_POOLS = 'cognito-idp:ListUserPools',
	LIST_USERS = 'cognito-idp:ListUsers',
	LIST_USERS_IN_GROUP = 'cognito-idp:ListUsersInGroup',
	RESEND_CONFIRMATION_CODE = 'cognito-idp:ResendConfirmationCode',
	RESPOND_TO_AUTH_CHALLENGE = 'cognito-idp:RespondToAuthChallenge',
	REVOKE_TOKEN = 'cognito-idp:RevokeToken',
	SET_RISK_CONFIGURATION = 'cognito-idp:SetRiskConfiguration',
	SET_UI_CUSTOMIZATION = 'cognito-idp:SetUICustomization',
	SET_USER_MFA_PREFERENCE = 'cognito-idp:SetUserMFAPreference',
	SET_USER_POOL_MFA_CONFIG = 'cognito-idp:SetUserPoolMfaConfig',
	SET_USER_SETTINGS = 'cognito-idp:SetUserSettings',
	SIGN_UP = 'cognito-idp:SignUp',
	START_USER_IMPORT_JOB = 'cognito-idp:StartUserImportJob',
	STOP_USER_IMPORT_JOB = 'cognito-idp:StopUserImportJob',
	TAG_RESOURCE = 'cognito-idp:TagResource',
	UNTAG_RESOURCE = 'cognito-idp:UntagResource',
	UPDATE_AUTH_EVENT_FEEDBACK = 'cognito-idp:UpdateAuthEventFeedback',
	UPDATE_DEVICE_STATUS = 'cognito-idp:UpdateDeviceStatus',
	UPDATE_GROUP = 'cognito-idp:UpdateGroup',
	UPDATE_IDENTITY_PROVIDER = 'cognito-idp:UpdateIdentityProvider',
	UPDATE_RESOURCE_SERVER = 'cognito-idp:UpdateResourceServer',
	UPDATE_USER_ATTRIBUTES = 'cognito-idp:UpdateUserAttributes',
	UPDATE_USER_POOL = 'cognito-idp:UpdateUserPool',
	UPDATE_USER_POOL_CLIENT = 'cognito-idp:UpdateUserPoolClient',
	UPDATE_USER_POOL_DOMAIN = 'cognito-idp:UpdateUserPoolDomain',
	VERIFY_SOFTWARE_TOKEN = 'cognito-idp:VerifySoftwareToken',
	VERIFY_USER_ATTRIBUTE = 'cognito-idp:VerifyUserAttribute',
}
export enum TAG_EDITOR {
	LIST_RESOURCE_TYPES = 'resource-explorer:ListResourceTypes',
	LIST_RESOURCES = 'resource-explorer:ListResources',
	LIST_TAGS = 'resource-explorer:ListTags',
}
export enum ELASTIC_BEANSTALK {
	ABORT_ENVIRONMENT_UPDATE = 'elasticbeanstalk:AbortEnvironmentUpdate',
	ADD_TAGS = 'elasticbeanstalk:AddTags',
	APPLY_ENVIRONMENT_MANAGED_ACTION = 'elasticbeanstalk:ApplyEnvironmentManagedAction',
	ASSOCIATE_ENVIRONMENT_OPERATIONS_ROLE = 'elasticbeanstalk:AssociateEnvironmentOperationsRole',
	CHECK_DNS_AVAILABILITY = 'elasticbeanstalk:CheckDNSAvailability',
	COMPOSE_ENVIRONMENTS = 'elasticbeanstalk:ComposeEnvironments',
	CREATE_APPLICATION = 'elasticbeanstalk:CreateApplication',
	CREATE_APPLICATION_VERSION = 'elasticbeanstalk:CreateApplicationVersion',
	CREATE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:CreateConfigurationTemplate',
	CREATE_ENVIRONMENT = 'elasticbeanstalk:CreateEnvironment',
	CREATE_PLATFORM_VERSION = 'elasticbeanstalk:CreatePlatformVersion',
	CREATE_STORAGE_LOCATION = 'elasticbeanstalk:CreateStorageLocation',
	DELETE_APPLICATION = 'elasticbeanstalk:DeleteApplication',
	DELETE_APPLICATION_VERSION = 'elasticbeanstalk:DeleteApplicationVersion',
	DELETE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:DeleteConfigurationTemplate',
	DELETE_ENVIRONMENT_CONFIGURATION = 'elasticbeanstalk:DeleteEnvironmentConfiguration',
	DELETE_PLATFORM_VERSION = 'elasticbeanstalk:DeletePlatformVersion',
	DESCRIBE_ACCOUNT_ATTRIBUTES = 'elasticbeanstalk:DescribeAccountAttributes',
	DESCRIBE_APPLICATION_VERSIONS = 'elasticbeanstalk:DescribeApplicationVersions',
	DESCRIBE_APPLICATIONS = 'elasticbeanstalk:DescribeApplications',
	DESCRIBE_CONFIGURATION_OPTIONS = 'elasticbeanstalk:DescribeConfigurationOptions',
	DESCRIBE_CONFIGURATION_SETTINGS = 'elasticbeanstalk:DescribeConfigurationSettings',
	DESCRIBE_ENVIRONMENT_HEALTH = 'elasticbeanstalk:DescribeEnvironmentHealth',
	DESCRIBE_ENVIRONMENT_MANAGED_ACTION_HISTORY = 'elasticbeanstalk:DescribeEnvironmentManagedActionHistory',
	DESCRIBE_ENVIRONMENT_MANAGED_ACTIONS = 'elasticbeanstalk:DescribeEnvironmentManagedActions',
	DESCRIBE_ENVIRONMENT_RESOURCES = 'elasticbeanstalk:DescribeEnvironmentResources',
	DESCRIBE_ENVIRONMENTS = 'elasticbeanstalk:DescribeEnvironments',
	DESCRIBE_EVENTS = 'elasticbeanstalk:DescribeEvents',
	DESCRIBE_INSTANCES_HEALTH = 'elasticbeanstalk:DescribeInstancesHealth',
	DESCRIBE_PLATFORM_VERSION = 'elasticbeanstalk:DescribePlatformVersion',
	DISASSOCIATE_ENVIRONMENT_OPERATIONS_ROLE = 'elasticbeanstalk:DisassociateEnvironmentOperationsRole',
	LIST_AVAILABLE_SOLUTION_STACKS = 'elasticbeanstalk:ListAvailableSolutionStacks',
	LIST_PLATFORM_BRANCHES = 'elasticbeanstalk:ListPlatformBranches',
	LIST_PLATFORM_VERSIONS = 'elasticbeanstalk:ListPlatformVersions',
	LIST_TAGS_FOR_RESOURCE = 'elasticbeanstalk:ListTagsForResource',
	PUT_INSTANCE_STATISTICS = 'elasticbeanstalk:PutInstanceStatistics',
	REBUILD_ENVIRONMENT = 'elasticbeanstalk:RebuildEnvironment',
	REMOVE_TAGS = 'elasticbeanstalk:RemoveTags',
	REQUEST_ENVIRONMENT_INFO = 'elasticbeanstalk:RequestEnvironmentInfo',
	RESTART_APP_SERVER = 'elasticbeanstalk:RestartAppServer',
	RETRIEVE_ENVIRONMENT_INFO = 'elasticbeanstalk:RetrieveEnvironmentInfo',
	SWAP_ENVIRONMENT_CNAM_ES = 'elasticbeanstalk:SwapEnvironmentCNAMEs',
	TERMINATE_ENVIRONMENT = 'elasticbeanstalk:TerminateEnvironment',
	UPDATE_APPLICATION = 'elasticbeanstalk:UpdateApplication',
	UPDATE_APPLICATION_RESOURCE_LIFECYCLE = 'elasticbeanstalk:UpdateApplicationResourceLifecycle',
	UPDATE_APPLICATION_VERSION = 'elasticbeanstalk:UpdateApplicationVersion',
	UPDATE_CONFIGURATION_TEMPLATE = 'elasticbeanstalk:UpdateConfigurationTemplate',
	UPDATE_ENVIRONMENT = 'elasticbeanstalk:UpdateEnvironment',
	UPDATE_TAGS_FOR_RESOURCE = 'elasticbeanstalk:UpdateTagsForResource',
	VALIDATE_CONFIGURATION_SETTINGS = 'elasticbeanstalk:ValidateConfigurationSettings',
}
export enum CLOUDWATCH_APPLICATION_INSIGHTS {
	CREATE_APPLICATION = 'applicationinsights:CreateApplication',
	CREATE_COMPONENT = 'applicationinsights:CreateComponent',
	CREATE_LOG_PATTERN = 'applicationinsights:CreateLogPattern',
	DELETE_APPLICATION = 'applicationinsights:DeleteApplication',
	DELETE_COMPONENT = 'applicationinsights:DeleteComponent',
	DELETE_LOG_PATTERN = 'applicationinsights:DeleteLogPattern',
	DESCRIBE_APPLICATION = 'applicationinsights:DescribeApplication',
	DESCRIBE_COMPONENT = 'applicationinsights:DescribeComponent',
	DESCRIBE_COMPONENT_CONFIGURATION = 'applicationinsights:DescribeComponentConfiguration',
	DESCRIBE_COMPONENT_CONFIGURATION_RECOMMENDATION = 'applicationinsights:DescribeComponentConfigurationRecommendation',
	DESCRIBE_LOG_PATTERN = 'applicationinsights:DescribeLogPattern',
	DESCRIBE_OBSERVATION = 'applicationinsights:DescribeObservation',
	DESCRIBE_PROBLEM = 'applicationinsights:DescribeProblem',
	DESCRIBE_PROBLEM_OBSERVATIONS = 'applicationinsights:DescribeProblemObservations',
	LIST_APPLICATIONS = 'applicationinsights:ListApplications',
	LIST_COMPONENTS = 'applicationinsights:ListComponents',
	LIST_CONFIGURATION_HISTORY = 'applicationinsights:ListConfigurationHistory',
	LIST_LOG_PATTERN_SETS = 'applicationinsights:ListLogPatternSets',
	LIST_LOG_PATTERNS = 'applicationinsights:ListLogPatterns',
	LIST_PROBLEMS = 'applicationinsights:ListProblems',
	LIST_TAGS_FOR_RESOURCE = 'applicationinsights:ListTagsForResource',
	TAG_RESOURCE = 'applicationinsights:TagResource',
	UNTAG_RESOURCE = 'applicationinsights:UntagResource',
	UPDATE_APPLICATION = 'applicationinsights:UpdateApplication',
	UPDATE_COMPONENT = 'applicationinsights:UpdateComponent',
	UPDATE_COMPONENT_CONFIGURATION = 'applicationinsights:UpdateComponentConfiguration',
	UPDATE_LOG_PATTERN = 'applicationinsights:UpdateLogPattern',
}
export enum ELASTIC_LOAD_BALANCING_V2 {
	ADD_LISTENER_CERTIFICATES = 'elasticloadbalancing:AddListenerCertificates',
	ADD_TAGS = 'elasticloadbalancing:AddTags',
	CREATE_LISTENER = 'elasticloadbalancing:CreateListener',
	CREATE_LOAD_BALANCER = 'elasticloadbalancing:CreateLoadBalancer',
	CREATE_RULE = 'elasticloadbalancing:CreateRule',
	CREATE_TARGET_GROUP = 'elasticloadbalancing:CreateTargetGroup',
	DELETE_LISTENER = 'elasticloadbalancing:DeleteListener',
	DELETE_LOAD_BALANCER = 'elasticloadbalancing:DeleteLoadBalancer',
	DELETE_RULE = 'elasticloadbalancing:DeleteRule',
	DELETE_TARGET_GROUP = 'elasticloadbalancing:DeleteTargetGroup',
	DEREGISTER_TARGETS = 'elasticloadbalancing:DeregisterTargets',
	DESCRIBE_ACCOUNT_LIMITS = 'elasticloadbalancing:DescribeAccountLimits',
	DESCRIBE_LISTENER_CERTIFICATES = 'elasticloadbalancing:DescribeListenerCertificates',
	DESCRIBE_LISTENERS = 'elasticloadbalancing:DescribeListeners',
	DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:DescribeLoadBalancerAttributes',
	DESCRIBE_LOAD_BALANCERS = 'elasticloadbalancing:DescribeLoadBalancers',
	DESCRIBE_RULES = 'elasticloadbalancing:DescribeRules',
	DESCRIBE_SSL_POLICIES = 'elasticloadbalancing:DescribeSSLPolicies',
	DESCRIBE_TAGS = 'elasticloadbalancing:DescribeTags',
	DESCRIBE_TARGET_GROUP_ATTRIBUTES = 'elasticloadbalancing:DescribeTargetGroupAttributes',
	DESCRIBE_TARGET_GROUPS = 'elasticloadbalancing:DescribeTargetGroups',
	DESCRIBE_TARGET_HEALTH = 'elasticloadbalancing:DescribeTargetHealth',
	MODIFY_LISTENER = 'elasticloadbalancing:ModifyListener',
	MODIFY_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:ModifyLoadBalancerAttributes',
	MODIFY_RULE = 'elasticloadbalancing:ModifyRule',
	MODIFY_TARGET_GROUP = 'elasticloadbalancing:ModifyTargetGroup',
	MODIFY_TARGET_GROUP_ATTRIBUTES = 'elasticloadbalancing:ModifyTargetGroupAttributes',
	REGISTER_TARGETS = 'elasticloadbalancing:RegisterTargets',
	REMOVE_LISTENER_CERTIFICATES = 'elasticloadbalancing:RemoveListenerCertificates',
	REMOVE_TAGS = 'elasticloadbalancing:RemoveTags',
	SET_IP_ADDRESS_TYPE = 'elasticloadbalancing:SetIpAddressType',
	SET_RULE_PRIORITIES = 'elasticloadbalancing:SetRulePriorities',
	SET_SECURITY_GROUPS = 'elasticloadbalancing:SetSecurityGroups',
	SET_SUBNETS = 'elasticloadbalancing:SetSubnets',
	SET_WEB_ACL = 'elasticloadbalancing:SetWebAcl',
}
export enum ELASTIC_LOAD_BALANCING {
	ADD_TAGS = 'elasticloadbalancing:AddTags',
	APPLY_SECURITY_GROUPS_TO_LOAD_BALANCER = 'elasticloadbalancing:ApplySecurityGroupsToLoadBalancer',
	ATTACH_LOAD_BALANCER_TO_SUBNETS = 'elasticloadbalancing:AttachLoadBalancerToSubnets',
	CONFIGURE_HEALTH_CHECK = 'elasticloadbalancing:ConfigureHealthCheck',
	CREATE_APP_COOKIE_STICKINESS_POLICY = 'elasticloadbalancing:CreateAppCookieStickinessPolicy',
	CREATE_LB_COOKIE_STICKINESS_POLICY = 'elasticloadbalancing:CreateLBCookieStickinessPolicy',
	CREATE_LOAD_BALANCER = 'elasticloadbalancing:CreateLoadBalancer',
	CREATE_LOAD_BALANCER_LISTENERS = 'elasticloadbalancing:CreateLoadBalancerListeners',
	CREATE_LOAD_BALANCER_POLICY = 'elasticloadbalancing:CreateLoadBalancerPolicy',
	DELETE_LOAD_BALANCER = 'elasticloadbalancing:DeleteLoadBalancer',
	DELETE_LOAD_BALANCER_LISTENERS = 'elasticloadbalancing:DeleteLoadBalancerListeners',
	DELETE_LOAD_BALANCER_POLICY = 'elasticloadbalancing:DeleteLoadBalancerPolicy',
	DEREGISTER_INSTANCES_FROM_LOAD_BALANCER = 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer',
	DESCRIBE_INSTANCE_HEALTH = 'elasticloadbalancing:DescribeInstanceHealth',
	DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:DescribeLoadBalancerAttributes',
	DESCRIBE_LOAD_BALANCER_POLICIES = 'elasticloadbalancing:DescribeLoadBalancerPolicies',
	DESCRIBE_LOAD_BALANCER_POLICY_TYPES = 'elasticloadbalancing:DescribeLoadBalancerPolicyTypes',
	DESCRIBE_LOAD_BALANCERS = 'elasticloadbalancing:DescribeLoadBalancers',
	DESCRIBE_TAGS = 'elasticloadbalancing:DescribeTags',
	DETACH_LOAD_BALANCER_FROM_SUBNETS = 'elasticloadbalancing:DetachLoadBalancerFromSubnets',
	DISABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer',
	ENABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer',
	MODIFY_LOAD_BALANCER_ATTRIBUTES = 'elasticloadbalancing:ModifyLoadBalancerAttributes',
	REGISTER_INSTANCES_WITH_LOAD_BALANCER = 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
	REMOVE_TAGS = 'elasticloadbalancing:RemoveTags',
	SET_LOAD_BALANCER_LISTENER_SSL_CERTIFICATE = 'elasticloadbalancing:SetLoadBalancerListenerSSLCertificate',
	SET_LOAD_BALANCER_POLICIES_FOR_BACKEND_SERVER = 'elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer',
	SET_LOAD_BALANCER_POLICIES_OF_LISTENER = 'elasticloadbalancing:SetLoadBalancerPoliciesOfListener',
}
export enum AMAZONMEDIAIMPORT {
	CREATE_DATABASE_BINARY_SNAPSHOT = 'mediaimport:CreateDatabaseBinarySnapshot',
}
export enum LOOKOUT_FOR_EQUIPMENT {
	CREATE_DATASET = 'lookoutequipment:CreateDataset',
	CREATE_INFERENCE_SCHEDULER = 'lookoutequipment:CreateInferenceScheduler',
	CREATE_LABEL = 'lookoutequipment:CreateLabel',
	CREATE_LABEL_GROUP = 'lookoutequipment:CreateLabelGroup',
	CREATE_MODEL = 'lookoutequipment:CreateModel',
	DELETE_DATASET = 'lookoutequipment:DeleteDataset',
	DELETE_INFERENCE_SCHEDULER = 'lookoutequipment:DeleteInferenceScheduler',
	DELETE_LABEL = 'lookoutequipment:DeleteLabel',
	DELETE_LABEL_GROUP = 'lookoutequipment:DeleteLabelGroup',
	DELETE_MODEL = 'lookoutequipment:DeleteModel',
	DESCRIBE_DATA_INGESTION_JOB = 'lookoutequipment:DescribeDataIngestionJob',
	DESCRIBE_DATASET = 'lookoutequipment:DescribeDataset',
	DESCRIBE_INFERENCE_SCHEDULER = 'lookoutequipment:DescribeInferenceScheduler',
	DESCRIBE_LABEL_GROUP = 'lookoutequipment:DescribeLabelGroup',
	DESCRIBE_MODEL = 'lookoutequipment:DescribeModel',
	DESCRIBELABEL = 'lookoutequipment:Describelabel',
	LIST_DATA_INGESTION_JOBS = 'lookoutequipment:ListDataIngestionJobs',
	LIST_DATASETS = 'lookoutequipment:ListDatasets',
	LIST_INFERENCE_EVENTS = 'lookoutequipment:ListInferenceEvents',
	LIST_INFERENCE_EXECUTIONS = 'lookoutequipment:ListInferenceExecutions',
	LIST_INFERENCE_SCHEDULERS = 'lookoutequipment:ListInferenceSchedulers',
	LIST_LABEL_GROUPS = 'lookoutequipment:ListLabelGroups',
	LIST_LABELS = 'lookoutequipment:ListLabels',
	LIST_MODELS = 'lookoutequipment:ListModels',
	LIST_SENSOR_STATISTICS = 'lookoutequipment:ListSensorStatistics',
	LIST_TAGS_FOR_RESOURCE = 'lookoutequipment:ListTagsForResource',
	START_DATA_INGESTION_JOB = 'lookoutequipment:StartDataIngestionJob',
	START_INFERENCE_SCHEDULER = 'lookoutequipment:StartInferenceScheduler',
	STOP_INFERENCE_SCHEDULER = 'lookoutequipment:StopInferenceScheduler',
	TAG_RESOURCE = 'lookoutequipment:TagResource',
	UNTAG_RESOURCE = 'lookoutequipment:UntagResource',
	UPDATE_INFERENCE_SCHEDULER = 'lookoutequipment:UpdateInferenceScheduler',
	UPDATE_LABEL_GROUP = 'lookoutequipment:UpdateLabelGroup',
}
export enum LOOKOUT_FOR_METRICS {
	ACTIVATE_ANOMALY_DETECTOR = 'lookoutmetrics:ActivateAnomalyDetector',
	BACK_TEST_ANOMALY_DETECTOR = 'lookoutmetrics:BackTestAnomalyDetector',
	CREATE_ALERT = 'lookoutmetrics:CreateAlert',
	CREATE_ANOMALY_DETECTOR = 'lookoutmetrics:CreateAnomalyDetector',
	CREATE_METRIC_SET = 'lookoutmetrics:CreateMetricSet',
	DEACTIVATE_ANOMALY_DETECTOR = 'lookoutmetrics:DeactivateAnomalyDetector',
	DELETE_ALERT = 'lookoutmetrics:DeleteAlert',
	DELETE_ANOMALY_DETECTOR = 'lookoutmetrics:DeleteAnomalyDetector',
	DESCRIBE_ALERT = 'lookoutmetrics:DescribeAlert',
	DESCRIBE_ANOMALY_DETECTION_EXECUTIONS = 'lookoutmetrics:DescribeAnomalyDetectionExecutions',
	DESCRIBE_ANOMALY_DETECTOR = 'lookoutmetrics:DescribeAnomalyDetector',
	DESCRIBE_METRIC_SET = 'lookoutmetrics:DescribeMetricSet',
	DETECT_METRIC_SET_CONFIG = 'lookoutmetrics:DetectMetricSetConfig',
	GET_ANOMALY_GROUP = 'lookoutmetrics:GetAnomalyGroup',
	GET_DATA_QUALITY_METRICS = 'lookoutmetrics:GetDataQualityMetrics',
	GET_FEEDBACK = 'lookoutmetrics:GetFeedback',
	GET_SAMPLE_DATA = 'lookoutmetrics:GetSampleData',
	LIST_ALERTS = 'lookoutmetrics:ListAlerts',
	LIST_ANOMALY_DETECTORS = 'lookoutmetrics:ListAnomalyDetectors',
	LIST_ANOMALY_GROUP_RELATED_METRICS = 'lookoutmetrics:ListAnomalyGroupRelatedMetrics',
	LIST_ANOMALY_GROUP_SUMMARIES = 'lookoutmetrics:ListAnomalyGroupSummaries',
	LIST_ANOMALY_GROUP_TIME_SERIES = 'lookoutmetrics:ListAnomalyGroupTimeSeries',
	LIST_METRIC_SETS = 'lookoutmetrics:ListMetricSets',
	LIST_TAGS_FOR_RESOURCE = 'lookoutmetrics:ListTagsForResource',
	PUT_FEEDBACK = 'lookoutmetrics:PutFeedback',
	TAG_RESOURCE = 'lookoutmetrics:TagResource',
	UNTAG_RESOURCE = 'lookoutmetrics:UntagResource',
	UPDATE_ALERT = 'lookoutmetrics:UpdateAlert',
	UPDATE_ANOMALY_DETECTOR = 'lookoutmetrics:UpdateAnomalyDetector',
	UPDATE_METRIC_SET = 'lookoutmetrics:UpdateMetricSet',
}
export enum MARKETPLACE_COMMERCE_ANALYTICS_SERVICE {
	GENERATE_DATA_SET = 'marketplacecommerceanalytics:GenerateDataSet',
	START_SUPPORT_DATA_EXPORT = 'marketplacecommerceanalytics:StartSupportDataExport',
}
export enum TRANSLATE {
	CREATE_PARALLEL_DATA = 'translate:CreateParallelData',
	DELETE_PARALLEL_DATA = 'translate:DeleteParallelData',
	DELETE_TERMINOLOGY = 'translate:DeleteTerminology',
	DESCRIBE_TEXT_TRANSLATION_JOB = 'translate:DescribeTextTranslationJob',
	GET_PARALLEL_DATA = 'translate:GetParallelData',
	GET_TERMINOLOGY = 'translate:GetTerminology',
	IMPORT_TERMINOLOGY = 'translate:ImportTerminology',
	LIST_LANGUAGES = 'translate:ListLanguages',
	LIST_PARALLEL_DATA = 'translate:ListParallelData',
	LIST_TAGS_FOR_RESOURCE = 'translate:ListTagsForResource',
	LIST_TERMINOLOGIES = 'translate:ListTerminologies',
	LIST_TEXT_TRANSLATION_JOBS = 'translate:ListTextTranslationJobs',
	START_TEXT_TRANSLATION_JOB = 'translate:StartTextTranslationJob',
	STOP_TEXT_TRANSLATION_JOB = 'translate:StopTextTranslationJob',
	TAG_RESOURCE = 'translate:TagResource',
	TRANSLATE_TEXT = 'translate:TranslateText',
	UNTAG_RESOURCE = 'translate:UntagResource',
	UPDATE_PARALLEL_DATA = 'translate:UpdateParallelData',
}
export enum WAF_REGIONAL {
	ASSOCIATE_WEB_ACL = 'waf-regional:AssociateWebACL',
	CREATE_BYTE_MATCH_SET = 'waf-regional:CreateByteMatchSet',
	CREATE_GEO_MATCH_SET = 'waf-regional:CreateGeoMatchSet',
	CREATE_IP_SET = 'waf-regional:CreateIPSet',
	CREATE_RATE_BASED_RULE = 'waf-regional:CreateRateBasedRule',
	CREATE_REGEX_MATCH_SET = 'waf-regional:CreateRegexMatchSet',
	CREATE_REGEX_PATTERN_SET = 'waf-regional:CreateRegexPatternSet',
	CREATE_RULE = 'waf-regional:CreateRule',
	CREATE_RULE_GROUP = 'waf-regional:CreateRuleGroup',
	CREATE_SIZE_CONSTRAINT_SET = 'waf-regional:CreateSizeConstraintSet',
	CREATE_SQL_INJECTION_MATCH_SET = 'waf-regional:CreateSqlInjectionMatchSet',
	CREATE_WEB_ACL = 'waf-regional:CreateWebACL',
	CREATE_WEB_ACL_MIGRATION_STACK = 'waf-regional:CreateWebACLMigrationStack',
	CREATE_XSS_MATCH_SET = 'waf-regional:CreateXssMatchSet',
	DELETE_BYTE_MATCH_SET = 'waf-regional:DeleteByteMatchSet',
	DELETE_GEO_MATCH_SET = 'waf-regional:DeleteGeoMatchSet',
	DELETE_IP_SET = 'waf-regional:DeleteIPSet',
	DELETE_LOGGING_CONFIGURATION = 'waf-regional:DeleteLoggingConfiguration',
	DELETE_PERMISSION_POLICY = 'waf-regional:DeletePermissionPolicy',
	DELETE_RATE_BASED_RULE = 'waf-regional:DeleteRateBasedRule',
	DELETE_REGEX_MATCH_SET = 'waf-regional:DeleteRegexMatchSet',
	DELETE_REGEX_PATTERN_SET = 'waf-regional:DeleteRegexPatternSet',
	DELETE_RULE = 'waf-regional:DeleteRule',
	DELETE_RULE_GROUP = 'waf-regional:DeleteRuleGroup',
	DELETE_SIZE_CONSTRAINT_SET = 'waf-regional:DeleteSizeConstraintSet',
	DELETE_SQL_INJECTION_MATCH_SET = 'waf-regional:DeleteSqlInjectionMatchSet',
	DELETE_WEB_ACL = 'waf-regional:DeleteWebACL',
	DELETE_XSS_MATCH_SET = 'waf-regional:DeleteXssMatchSet',
	DISASSOCIATE_WEB_ACL = 'waf-regional:DisassociateWebACL',
	GET_BYTE_MATCH_SET = 'waf-regional:GetByteMatchSet',
	GET_CHANGE_TOKEN = 'waf-regional:GetChangeToken',
	GET_CHANGE_TOKEN_STATUS = 'waf-regional:GetChangeTokenStatus',
	GET_GEO_MATCH_SET = 'waf-regional:GetGeoMatchSet',
	GET_IP_SET = 'waf-regional:GetIPSet',
	GET_LOGGING_CONFIGURATION = 'waf-regional:GetLoggingConfiguration',
	GET_PERMISSION_POLICY = 'waf-regional:GetPermissionPolicy',
	GET_RATE_BASED_RULE = 'waf-regional:GetRateBasedRule',
	GET_RATE_BASED_RULE_MANAGED_KEYS = 'waf-regional:GetRateBasedRuleManagedKeys',
	GET_REGEX_MATCH_SET = 'waf-regional:GetRegexMatchSet',
	GET_REGEX_PATTERN_SET = 'waf-regional:GetRegexPatternSet',
	GET_RULE = 'waf-regional:GetRule',
	GET_RULE_GROUP = 'waf-regional:GetRuleGroup',
	GET_SAMPLED_REQUESTS = 'waf-regional:GetSampledRequests',
	GET_SIZE_CONSTRAINT_SET = 'waf-regional:GetSizeConstraintSet',
	GET_SQL_INJECTION_MATCH_SET = 'waf-regional:GetSqlInjectionMatchSet',
	GET_WEB_ACL = 'waf-regional:GetWebACL',
	GET_WEB_ACL_FOR_RESOURCE = 'waf-regional:GetWebACLForResource',
	GET_XSS_MATCH_SET = 'waf-regional:GetXssMatchSet',
	LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'waf-regional:ListActivatedRulesInRuleGroup',
	LIST_BYTE_MATCH_SETS = 'waf-regional:ListByteMatchSets',
	LIST_GEO_MATCH_SETS = 'waf-regional:ListGeoMatchSets',
	LIST_IP_SETS = 'waf-regional:ListIPSets',
	LIST_LOGGING_CONFIGURATIONS = 'waf-regional:ListLoggingConfigurations',
	LIST_RATE_BASED_RULES = 'waf-regional:ListRateBasedRules',
	LIST_REGEX_MATCH_SETS = 'waf-regional:ListRegexMatchSets',
	LIST_REGEX_PATTERN_SETS = 'waf-regional:ListRegexPatternSets',
	LIST_RESOURCES_FOR_WEB_ACL = 'waf-regional:ListResourcesForWebACL',
	LIST_RULE_GROUPS = 'waf-regional:ListRuleGroups',
	LIST_RULES = 'waf-regional:ListRules',
	LIST_SIZE_CONSTRAINT_SETS = 'waf-regional:ListSizeConstraintSets',
	LIST_SQL_INJECTION_MATCH_SETS = 'waf-regional:ListSqlInjectionMatchSets',
	LIST_SUBSCRIBED_RULE_GROUPS = 'waf-regional:ListSubscribedRuleGroups',
	LIST_TAGS_FOR_RESOURCE = 'waf-regional:ListTagsForResource',
	LIST_WEB_AC_LS = 'waf-regional:ListWebACLs',
	LIST_XSS_MATCH_SETS = 'waf-regional:ListXssMatchSets',
	PUT_LOGGING_CONFIGURATION = 'waf-regional:PutLoggingConfiguration',
	PUT_PERMISSION_POLICY = 'waf-regional:PutPermissionPolicy',
	TAG_RESOURCE = 'waf-regional:TagResource',
	UNTAG_RESOURCE = 'waf-regional:UntagResource',
	UPDATE_BYTE_MATCH_SET = 'waf-regional:UpdateByteMatchSet',
	UPDATE_GEO_MATCH_SET = 'waf-regional:UpdateGeoMatchSet',
	UPDATE_IP_SET = 'waf-regional:UpdateIPSet',
	UPDATE_RATE_BASED_RULE = 'waf-regional:UpdateRateBasedRule',
	UPDATE_REGEX_MATCH_SET = 'waf-regional:UpdateRegexMatchSet',
	UPDATE_REGEX_PATTERN_SET = 'waf-regional:UpdateRegexPatternSet',
	UPDATE_RULE = 'waf-regional:UpdateRule',
	UPDATE_RULE_GROUP = 'waf-regional:UpdateRuleGroup',
	UPDATE_SIZE_CONSTRAINT_SET = 'waf-regional:UpdateSizeConstraintSet',
	UPDATE_SQL_INJECTION_MATCH_SET = 'waf-regional:UpdateSqlInjectionMatchSet',
	UPDATE_WEB_ACL = 'waf-regional:UpdateWebACL',
	UPDATE_XSS_MATCH_SET = 'waf-regional:UpdateXssMatchSet',
}
export enum ELASTIC_CONTAINER_SERVICE {
	CREATE_CAPACITY_PROVIDER = 'ecs:CreateCapacityProvider',
	CREATE_CLUSTER = 'ecs:CreateCluster',
	CREATE_SERVICE = 'ecs:CreateService',
	CREATE_TASK_SET = 'ecs:CreateTaskSet',
	DELETE_ACCOUNT_SETTING = 'ecs:DeleteAccountSetting',
	DELETE_ATTRIBUTES = 'ecs:DeleteAttributes',
	DELETE_CAPACITY_PROVIDER = 'ecs:DeleteCapacityProvider',
	DELETE_CLUSTER = 'ecs:DeleteCluster',
	DELETE_SERVICE = 'ecs:DeleteService',
	DELETE_TASK_SET = 'ecs:DeleteTaskSet',
	DEREGISTER_CONTAINER_INSTANCE = 'ecs:DeregisterContainerInstance',
	DEREGISTER_TASK_DEFINITION = 'ecs:DeregisterTaskDefinition',
	DESCRIBE_CAPACITY_PROVIDERS = 'ecs:DescribeCapacityProviders',
	DESCRIBE_CLUSTERS = 'ecs:DescribeClusters',
	DESCRIBE_CONTAINER_INSTANCES = 'ecs:DescribeContainerInstances',
	DESCRIBE_SERVICES = 'ecs:DescribeServices',
	DESCRIBE_TASK_DEFINITION = 'ecs:DescribeTaskDefinition',
	DESCRIBE_TASK_SETS = 'ecs:DescribeTaskSets',
	DESCRIBE_TASKS = 'ecs:DescribeTasks',
	DISCOVER_POLL_ENDPOINT = 'ecs:DiscoverPollEndpoint',
	EXECUTE_COMMAND = 'ecs:ExecuteCommand',
	LIST_ACCOUNT_SETTINGS = 'ecs:ListAccountSettings',
	LIST_ATTRIBUTES = 'ecs:ListAttributes',
	LIST_CLUSTERS = 'ecs:ListClusters',
	LIST_CONTAINER_INSTANCES = 'ecs:ListContainerInstances',
	LIST_SERVICES = 'ecs:ListServices',
	LIST_SERVICES_BY_NAMESPACE = 'ecs:ListServicesByNamespace',
	LIST_TAGS_FOR_RESOURCE = 'ecs:ListTagsForResource',
	LIST_TASK_DEFINITION_FAMILIES = 'ecs:ListTaskDefinitionFamilies',
	LIST_TASK_DEFINITIONS = 'ecs:ListTaskDefinitions',
	LIST_TASKS = 'ecs:ListTasks',
	POLL = 'ecs:Poll',
	PUT_ACCOUNT_SETTING = 'ecs:PutAccountSetting',
	PUT_ACCOUNT_SETTING_DEFAULT = 'ecs:PutAccountSettingDefault',
	PUT_ATTRIBUTES = 'ecs:PutAttributes',
	PUT_CLUSTER_CAPACITY_PROVIDERS = 'ecs:PutClusterCapacityProviders',
	REGISTER_CONTAINER_INSTANCE = 'ecs:RegisterContainerInstance',
	REGISTER_TASK_DEFINITION = 'ecs:RegisterTaskDefinition',
	RUN_TASK = 'ecs:RunTask',
	START_TASK = 'ecs:StartTask',
	START_TELEMETRY_SESSION = 'ecs:StartTelemetrySession',
	STOP_TASK = 'ecs:StopTask',
	SUBMIT_ATTACHMENT_STATE_CHANGES = 'ecs:SubmitAttachmentStateChanges',
	SUBMIT_CONTAINER_STATE_CHANGE = 'ecs:SubmitContainerStateChange',
	SUBMIT_TASK_STATE_CHANGE = 'ecs:SubmitTaskStateChange',
	TAG_RESOURCE = 'ecs:TagResource',
	UNTAG_RESOURCE = 'ecs:UntagResource',
	UPDATE_CAPACITY_PROVIDER = 'ecs:UpdateCapacityProvider',
	UPDATE_CLUSTER = 'ecs:UpdateCluster',
	UPDATE_CLUSTER_SETTINGS = 'ecs:UpdateClusterSettings',
	UPDATE_CONTAINER_AGENT = 'ecs:UpdateContainerAgent',
	UPDATE_CONTAINER_INSTANCES_STATE = 'ecs:UpdateContainerInstancesState',
	UPDATE_SERVICE = 'ecs:UpdateService',
	UPDATE_SERVICE_PRIMARY_TASK_SET = 'ecs:UpdateServicePrimaryTaskSet',
	UPDATE_TASK_SET = 'ecs:UpdateTaskSet',
}
export enum ELASTIC_CONTAINER_REGISTRY {
	BATCH_CHECK_LAYER_AVAILABILITY = 'ecr:BatchCheckLayerAvailability',
	BATCH_DELETE_IMAGE = 'ecr:BatchDeleteImage',
	BATCH_GET_IMAGE = 'ecr:BatchGetImage',
	BATCH_GET_REPOSITORY_SCANNING_CONFIGURATION = 'ecr:BatchGetRepositoryScanningConfiguration',
	BATCH_IMPORT_UPSTREAM_IMAGE = 'ecr:BatchImportUpstreamImage',
	COMPLETE_LAYER_UPLOAD = 'ecr:CompleteLayerUpload',
	CREATE_PULL_THROUGH_CACHE_RULE = 'ecr:CreatePullThroughCacheRule',
	CREATE_REPOSITORY = 'ecr:CreateRepository',
	DELETE_LIFECYCLE_POLICY = 'ecr:DeleteLifecyclePolicy',
	DELETE_PULL_THROUGH_CACHE_RULE = 'ecr:DeletePullThroughCacheRule',
	DELETE_REGISTRY_POLICY = 'ecr:DeleteRegistryPolicy',
	DELETE_REPOSITORY = 'ecr:DeleteRepository',
	DELETE_REPOSITORY_POLICY = 'ecr:DeleteRepositoryPolicy',
	DESCRIBE_IMAGE_REPLICATION_STATUS = 'ecr:DescribeImageReplicationStatus',
	DESCRIBE_IMAGE_SCAN_FINDINGS = 'ecr:DescribeImageScanFindings',
	DESCRIBE_IMAGES = 'ecr:DescribeImages',
	DESCRIBE_PULL_THROUGH_CACHE_RULES = 'ecr:DescribePullThroughCacheRules',
	DESCRIBE_REGISTRY = 'ecr:DescribeRegistry',
	DESCRIBE_REPOSITORIES = 'ecr:DescribeRepositories',
	GET_AUTHORIZATION_TOKEN = 'ecr:GetAuthorizationToken',
	GET_DOWNLOAD_URL_FOR_LAYER = 'ecr:GetDownloadUrlForLayer',
	GET_LIFECYCLE_POLICY = 'ecr:GetLifecyclePolicy',
	GET_LIFECYCLE_POLICY_PREVIEW = 'ecr:GetLifecyclePolicyPreview',
	GET_REGISTRY_POLICY = 'ecr:GetRegistryPolicy',
	GET_REGISTRY_SCANNING_CONFIGURATION = 'ecr:GetRegistryScanningConfiguration',
	GET_REPOSITORY_POLICY = 'ecr:GetRepositoryPolicy',
	INITIATE_LAYER_UPLOAD = 'ecr:InitiateLayerUpload',
	LIST_IMAGES = 'ecr:ListImages',
	LIST_TAGS_FOR_RESOURCE = 'ecr:ListTagsForResource',
	PUT_IMAGE = 'ecr:PutImage',
	PUT_IMAGE_SCANNING_CONFIGURATION = 'ecr:PutImageScanningConfiguration',
	PUT_IMAGE_TAG_MUTABILITY = 'ecr:PutImageTagMutability',
	PUT_LIFECYCLE_POLICY = 'ecr:PutLifecyclePolicy',
	PUT_REGISTRY_POLICY = 'ecr:PutRegistryPolicy',
	PUT_REGISTRY_SCANNING_CONFIGURATION = 'ecr:PutRegistryScanningConfiguration',
	PUT_REPLICATION_CONFIGURATION = 'ecr:PutReplicationConfiguration',
	REPLICATE_IMAGE = 'ecr:ReplicateImage',
	SET_REPOSITORY_POLICY = 'ecr:SetRepositoryPolicy',
	START_IMAGE_SCAN = 'ecr:StartImageScan',
	START_LIFECYCLE_POLICY_PREVIEW = 'ecr:StartLifecyclePolicyPreview',
	TAG_RESOURCE = 'ecr:TagResource',
	UNTAG_RESOURCE = 'ecr:UntagResource',
	UPLOAD_LAYER_PART = 'ecr:UploadLayerPart',
}
export enum DYNAMODB_ACCELERATOR_DAX {
	BATCH_GET_ITEM = 'dax:BatchGetItem',
	BATCH_WRITE_ITEM = 'dax:BatchWriteItem',
	CONDITION_CHECK_ITEM = 'dax:ConditionCheckItem',
	CREATE_CLUSTER = 'dax:CreateCluster',
	CREATE_PARAMETER_GROUP = 'dax:CreateParameterGroup',
	CREATE_SUBNET_GROUP = 'dax:CreateSubnetGroup',
	DECREASE_REPLICATION_FACTOR = 'dax:DecreaseReplicationFactor',
	DELETE_CLUSTER = 'dax:DeleteCluster',
	DELETE_ITEM = 'dax:DeleteItem',
	DELETE_PARAMETER_GROUP = 'dax:DeleteParameterGroup',
	DELETE_SUBNET_GROUP = 'dax:DeleteSubnetGroup',
	DESCRIBE_CLUSTERS = 'dax:DescribeClusters',
	DESCRIBE_DEFAULT_PARAMETERS = 'dax:DescribeDefaultParameters',
	DESCRIBE_EVENTS = 'dax:DescribeEvents',
	DESCRIBE_PARAMETER_GROUPS = 'dax:DescribeParameterGroups',
	DESCRIBE_PARAMETERS = 'dax:DescribeParameters',
	DESCRIBE_SUBNET_GROUPS = 'dax:DescribeSubnetGroups',
	GET_ITEM = 'dax:GetItem',
	INCREASE_REPLICATION_FACTOR = 'dax:IncreaseReplicationFactor',
	LIST_TAGS = 'dax:ListTags',
	PUT_ITEM = 'dax:PutItem',
	QUERY = 'dax:Query',
	REBOOT_NODE = 'dax:RebootNode',
	SCAN = 'dax:Scan',
	TAG_RESOURCE = 'dax:TagResource',
	UNTAG_RESOURCE = 'dax:UntagResource',
	UPDATE_CLUSTER = 'dax:UpdateCluster',
	UPDATE_ITEM = 'dax:UpdateItem',
	UPDATE_PARAMETER_GROUP = 'dax:UpdateParameterGroup',
	UPDATE_SUBNET_GROUP = 'dax:UpdateSubnetGroup',
}
export enum RESOURCE_GROUP_TAGGING_API {
	DESCRIBE_REPORT_CREATION = 'tag:DescribeReportCreation',
	GET_COMPLIANCE_SUMMARY = 'tag:GetComplianceSummary',
	GET_RESOURCES = 'tag:GetResources',
	GET_TAG_KEYS = 'tag:GetTagKeys',
	GET_TAG_VALUES = 'tag:GetTagValues',
	START_REPORT_CREATION = 'tag:StartReportCreation',
	TAG_RESOURCES = 'tag:TagResources',
	UNTAG_RESOURCES = 'tag:UntagResources',
}
export enum CLOUDWATCH_LOGS {
	ASSOCIATE_KMS_KEY = 'logs:AssociateKmsKey',
	CANCEL_EXPORT_TASK = 'logs:CancelExportTask',
	CREATE_EXPORT_TASK = 'logs:CreateExportTask',
	CREATE_LOG_DELIVERY = 'logs:CreateLogDelivery',
	CREATE_LOG_GROUP = 'logs:CreateLogGroup',
	CREATE_LOG_STREAM = 'logs:CreateLogStream',
	DELETE_DATA_PROTECTION_POLICY = 'logs:DeleteDataProtectionPolicy',
	DELETE_DESTINATION = 'logs:DeleteDestination',
	DELETE_LOG_DELIVERY = 'logs:DeleteLogDelivery',
	DELETE_LOG_GROUP = 'logs:DeleteLogGroup',
	DELETE_LOG_STREAM = 'logs:DeleteLogStream',
	DELETE_METRIC_FILTER = 'logs:DeleteMetricFilter',
	DELETE_QUERY_DEFINITION = 'logs:DeleteQueryDefinition',
	DELETE_RESOURCE_POLICY = 'logs:DeleteResourcePolicy',
	DELETE_RETENTION_POLICY = 'logs:DeleteRetentionPolicy',
	DELETE_SUBSCRIPTION_FILTER = 'logs:DeleteSubscriptionFilter',
	DESCRIBE_DESTINATIONS = 'logs:DescribeDestinations',
	DESCRIBE_EXPORT_TASKS = 'logs:DescribeExportTasks',
	DESCRIBE_LOG_GROUPS = 'logs:DescribeLogGroups',
	DESCRIBE_LOG_STREAMS = 'logs:DescribeLogStreams',
	DESCRIBE_METRIC_FILTERS = 'logs:DescribeMetricFilters',
	DESCRIBE_QUERIES = 'logs:DescribeQueries',
	DESCRIBE_QUERY_DEFINITIONS = 'logs:DescribeQueryDefinitions',
	DESCRIBE_RESOURCE_POLICIES = 'logs:DescribeResourcePolicies',
	DESCRIBE_SUBSCRIPTION_FILTERS = 'logs:DescribeSubscriptionFilters',
	DISASSOCIATE_KMS_KEY = 'logs:DisassociateKmsKey',
	FILTER_LOG_EVENTS = 'logs:FilterLogEvents',
	GET_DATA_PROTECTION_POLICY = 'logs:GetDataProtectionPolicy',
	GET_LOG_DELIVERY = 'logs:GetLogDelivery',
	GET_LOG_EVENTS = 'logs:GetLogEvents',
	GET_LOG_GROUP_FIELDS = 'logs:GetLogGroupFields',
	GET_LOG_RECORD = 'logs:GetLogRecord',
	GET_QUERY_RESULTS = 'logs:GetQueryResults',
	LINK = 'logs:Link',
	LIST_LOG_DELIVERIES = 'logs:ListLogDeliveries',
	LIST_TAGS_FOR_RESOURCE = 'logs:ListTagsForResource',
	LIST_TAGS_LOG_GROUP = 'logs:ListTagsLogGroup',
	PUT_DATA_PROTECTION_POLICY = 'logs:PutDataProtectionPolicy',
	PUT_DESTINATION = 'logs:PutDestination',
	PUT_DESTINATION_POLICY = 'logs:PutDestinationPolicy',
	PUT_LOG_EVENTS = 'logs:PutLogEvents',
	PUT_METRIC_FILTER = 'logs:PutMetricFilter',
	PUT_QUERY_DEFINITION = 'logs:PutQueryDefinition',
	PUT_RESOURCE_POLICY = 'logs:PutResourcePolicy',
	PUT_RETENTION_POLICY = 'logs:PutRetentionPolicy',
	PUT_SUBSCRIPTION_FILTER = 'logs:PutSubscriptionFilter',
	START_QUERY = 'logs:StartQuery',
	STOP_QUERY = 'logs:StopQuery',
	TAG_LOG_GROUP = 'logs:TagLogGroup',
	TAG_RESOURCE = 'logs:TagResource',
	TEST_METRIC_FILTER = 'logs:TestMetricFilter',
	UNMASK = 'logs:Unmask',
	UNTAG_LOG_GROUP = 'logs:UntagLogGroup',
	UNTAG_RESOURCE = 'logs:UntagResource',
	UPDATE_LOG_DELIVERY = 'logs:UpdateLogDelivery',
}
export enum REDSHIFT_SERVERLESS {
	CONVERT_RECOVERY_POINT_TO_SNAPSHOT = 'redshift-serverless:ConvertRecoveryPointToSnapshot',
	CREATE_ENDPOINT_ACCESS = 'redshift-serverless:CreateEndpointAccess',
	CREATE_NAMESPACE = 'redshift-serverless:CreateNamespace',
	CREATE_SNAPSHOT = 'redshift-serverless:CreateSnapshot',
	CREATE_USAGE_LIMIT = 'redshift-serverless:CreateUsageLimit',
	CREATE_WORKGROUP = 'redshift-serverless:CreateWorkgroup',
	DELETE_ENDPOINT_ACCESS = 'redshift-serverless:DeleteEndpointAccess',
	DELETE_NAMESPACE = 'redshift-serverless:DeleteNamespace',
	DELETE_RESOURCE_POLICY = 'redshift-serverless:DeleteResourcePolicy',
	DELETE_SNAPSHOT = 'redshift-serverless:DeleteSnapshot',
	DELETE_USAGE_LIMIT = 'redshift-serverless:DeleteUsageLimit',
	DELETE_WORKGROUP = 'redshift-serverless:DeleteWorkgroup',
	GET_CREDENTIALS = 'redshift-serverless:GetCredentials',
	GET_ENDPOINT_ACCESS = 'redshift-serverless:GetEndpointAccess',
	GET_NAMESPACE = 'redshift-serverless:GetNamespace',
	GET_RECOVERY_POINT = 'redshift-serverless:GetRecoveryPoint',
	GET_RESOURCE_POLICY = 'redshift-serverless:GetResourcePolicy',
	GET_SNAPSHOT = 'redshift-serverless:GetSnapshot',
	GET_USAGE_LIMIT = 'redshift-serverless:GetUsageLimit',
	GET_WORKGROUP = 'redshift-serverless:GetWorkgroup',
	LIST_ENDPOINT_ACCESS = 'redshift-serverless:ListEndpointAccess',
	LIST_NAMESPACES = 'redshift-serverless:ListNamespaces',
	LIST_RECOVERY_POINTS = 'redshift-serverless:ListRecoveryPoints',
	LIST_SNAPSHOTS = 'redshift-serverless:ListSnapshots',
	LIST_TAGS_FOR_RESOURCE = 'redshift-serverless:ListTagsForResource',
	LIST_USAGE_LIMITS = 'redshift-serverless:ListUsageLimits',
	LIST_WORKGROUPS = 'redshift-serverless:ListWorkgroups',
	PUT_RESOURCE_POLICY = 'redshift-serverless:PutResourcePolicy',
	RESTORE_FROM_RECOVERY_POINT = 'redshift-serverless:RestoreFromRecoveryPoint',
	RESTORE_FROM_SNAPSHOT = 'redshift-serverless:RestoreFromSnapshot',
	TAG_RESOURCE = 'redshift-serverless:TagResource',
	UNTAG_RESOURCE = 'redshift-serverless:UntagResource',
	UPDATE_ENDPOINT_ACCESS = 'redshift-serverless:UpdateEndpointAccess',
	UPDATE_NAMESPACE = 'redshift-serverless:UpdateNamespace',
	UPDATE_SNAPSHOT = 'redshift-serverless:UpdateSnapshot',
	UPDATE_USAGE_LIMIT = 'redshift-serverless:UpdateUsageLimit',
	UPDATE_WORKGROUP = 'redshift-serverless:UpdateWorkgroup',
}
export enum BACKUP_GATEWAY {
	ASSOCIATE_GATEWAY_TO_SERVER = 'backup-gateway:AssociateGatewayToServer',
	BACKUP = 'backup-gateway:Backup',
	CREATE_GATEWAY = 'backup-gateway:CreateGateway',
	DELETE_GATEWAY = 'backup-gateway:DeleteGateway',
	DELETE_HYPERVISOR = 'backup-gateway:DeleteHypervisor',
	DISASSOCIATE_GATEWAY_FROM_SERVER = 'backup-gateway:DisassociateGatewayFromServer',
	GET_BANDWIDTH_RATE_LIMIT_SCHEDULE = 'backup-gateway:GetBandwidthRateLimitSchedule',
	GET_GATEWAY = 'backup-gateway:GetGateway',
	GET_HYPERVISOR = 'backup-gateway:GetHypervisor',
	GET_HYPERVISOR_PROPERTY_MAPPINGS = 'backup-gateway:GetHypervisorPropertyMappings',
	GET_VIRTUAL_MACHINE = 'backup-gateway:GetVirtualMachine',
	IMPORT_HYPERVISOR_CONFIGURATION = 'backup-gateway:ImportHypervisorConfiguration',
	LIST_GATEWAYS = 'backup-gateway:ListGateways',
	LIST_HYPERVISORS = 'backup-gateway:ListHypervisors',
	LIST_TAGS_FOR_RESOURCE = 'backup-gateway:ListTagsForResource',
	LIST_VIRTUAL_MACHINES = 'backup-gateway:ListVirtualMachines',
	PUT_BANDWIDTH_RATE_LIMIT_SCHEDULE = 'backup-gateway:PutBandwidthRateLimitSchedule',
	PUT_HYPERVISOR_PROPERTY_MAPPINGS = 'backup-gateway:PutHypervisorPropertyMappings',
	PUT_MAINTENANCE_START_TIME = 'backup-gateway:PutMaintenanceStartTime',
	RESTORE = 'backup-gateway:Restore',
	START_VIRTUAL_MACHINES_METADATA_SYNC = 'backup-gateway:StartVirtualMachinesMetadataSync',
	TAG_RESOURCE = 'backup-gateway:TagResource',
	TEST_HYPERVISOR_CONFIGURATION = 'backup-gateway:TestHypervisorConfiguration',
	UNTAG_RESOURCE = 'backup-gateway:UntagResource',
	UPDATE_GATEWAY_INFORMATION = 'backup-gateway:UpdateGatewayInformation',
	UPDATE_GATEWAY_SOFTWARE_NOW = 'backup-gateway:UpdateGatewaySoftwareNow',
	UPDATE_HYPERVISOR = 'backup-gateway:UpdateHypervisor',
}
export enum SERVICE_CATALOG {
	ACCEPT_PORTFOLIO_SHARE = 'servicecatalog:AcceptPortfolioShare',
	ASSOCIATE_ATTRIBUTE_GROUP = 'servicecatalog:AssociateAttributeGroup',
	ASSOCIATE_BUDGET_WITH_RESOURCE = 'servicecatalog:AssociateBudgetWithResource',
	ASSOCIATE_PRINCIPAL_WITH_PORTFOLIO = 'servicecatalog:AssociatePrincipalWithPortfolio',
	ASSOCIATE_PRODUCT_WITH_PORTFOLIO = 'servicecatalog:AssociateProductWithPortfolio',
	ASSOCIATE_RESOURCE = 'servicecatalog:AssociateResource',
	ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'servicecatalog:AssociateServiceActionWithProvisioningArtifact',
	ASSOCIATE_TAG_OPTION_WITH_RESOURCE = 'servicecatalog:AssociateTagOptionWithResource',
	BATCH_ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact',
	BATCH_DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact',
	COPY_PRODUCT = 'servicecatalog:CopyProduct',
	CREATE_APPLICATION = 'servicecatalog:CreateApplication',
	CREATE_ATTRIBUTE_GROUP = 'servicecatalog:CreateAttributeGroup',
	CREATE_CONSTRAINT = 'servicecatalog:CreateConstraint',
	CREATE_PORTFOLIO = 'servicecatalog:CreatePortfolio',
	CREATE_PORTFOLIO_SHARE = 'servicecatalog:CreatePortfolioShare',
	CREATE_PRODUCT = 'servicecatalog:CreateProduct',
	CREATE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:CreateProvisionedProductPlan',
	CREATE_PROVISIONING_ARTIFACT = 'servicecatalog:CreateProvisioningArtifact',
	CREATE_SERVICE_ACTION = 'servicecatalog:CreateServiceAction',
	CREATE_TAG_OPTION = 'servicecatalog:CreateTagOption',
	DELETE_APPLICATION = 'servicecatalog:DeleteApplication',
	DELETE_ATTRIBUTE_GROUP = 'servicecatalog:DeleteAttributeGroup',
	DELETE_CONSTRAINT = 'servicecatalog:DeleteConstraint',
	DELETE_PORTFOLIO = 'servicecatalog:DeletePortfolio',
	DELETE_PORTFOLIO_SHARE = 'servicecatalog:DeletePortfolioShare',
	DELETE_PRODUCT = 'servicecatalog:DeleteProduct',
	DELETE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:DeleteProvisionedProductPlan',
	DELETE_PROVISIONING_ARTIFACT = 'servicecatalog:DeleteProvisioningArtifact',
	DELETE_SERVICE_ACTION = 'servicecatalog:DeleteServiceAction',
	DELETE_TAG_OPTION = 'servicecatalog:DeleteTagOption',
	DESCRIBE_CONSTRAINT = 'servicecatalog:DescribeConstraint',
	DESCRIBE_COPY_PRODUCT_STATUS = 'servicecatalog:DescribeCopyProductStatus',
	DESCRIBE_PORTFOLIO = 'servicecatalog:DescribePortfolio',
	DESCRIBE_PORTFOLIO_SHARE_STATUS = 'servicecatalog:DescribePortfolioShareStatus',
	DESCRIBE_PORTFOLIO_SHARES = 'servicecatalog:DescribePortfolioShares',
	DESCRIBE_PRODUCT = 'servicecatalog:DescribeProduct',
	DESCRIBE_PRODUCT_AS_ADMIN = 'servicecatalog:DescribeProductAsAdmin',
	DESCRIBE_PRODUCT_VIEW = 'servicecatalog:DescribeProductView',
	DESCRIBE_PROVISIONED_PRODUCT = 'servicecatalog:DescribeProvisionedProduct',
	DESCRIBE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:DescribeProvisionedProductPlan',
	DESCRIBE_PROVISIONING_ARTIFACT = 'servicecatalog:DescribeProvisioningArtifact',
	DESCRIBE_PROVISIONING_PARAMETERS = 'servicecatalog:DescribeProvisioningParameters',
	DESCRIBE_RECORD = 'servicecatalog:DescribeRecord',
	DESCRIBE_SERVICE_ACTION = 'servicecatalog:DescribeServiceAction',
	DESCRIBE_SERVICE_ACTION_EXECUTION_PARAMETERS = 'servicecatalog:DescribeServiceActionExecutionParameters',
	DESCRIBE_TAG_OPTION = 'servicecatalog:DescribeTagOption',
	DISABLE_AWS_ORGANIZATIONS_ACCESS = 'servicecatalog:DisableAWSOrganizationsAccess',
	DISASSOCIATE_ATTRIBUTE_GROUP = 'servicecatalog:DisassociateAttributeGroup',
	DISASSOCIATE_BUDGET_FROM_RESOURCE = 'servicecatalog:DisassociateBudgetFromResource',
	DISASSOCIATE_PRINCIPAL_FROM_PORTFOLIO = 'servicecatalog:DisassociatePrincipalFromPortfolio',
	DISASSOCIATE_PRODUCT_FROM_PORTFOLIO = 'servicecatalog:DisassociateProductFromPortfolio',
	DISASSOCIATE_RESOURCE = 'servicecatalog:DisassociateResource',
	DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'servicecatalog:DisassociateServiceActionFromProvisioningArtifact',
	DISASSOCIATE_TAG_OPTION_FROM_RESOURCE = 'servicecatalog:DisassociateTagOptionFromResource',
	ENABLE_AWS_ORGANIZATIONS_ACCESS = 'servicecatalog:EnableAWSOrganizationsAccess',
	EXECUTE_PROVISIONED_PRODUCT_PLAN = 'servicecatalog:ExecuteProvisionedProductPlan',
	EXECUTE_PROVISIONED_PRODUCT_SERVICE_ACTION = 'servicecatalog:ExecuteProvisionedProductServiceAction',
	GET_AWS_ORGANIZATIONS_ACCESS_STATUS = 'servicecatalog:GetAWSOrganizationsAccessStatus',
	GET_APPLICATION = 'servicecatalog:GetApplication',
	GET_ASSOCIATED_RESOURCE = 'servicecatalog:GetAssociatedResource',
	GET_ATTRIBUTE_GROUP = 'servicecatalog:GetAttributeGroup',
	GET_CONFIGURATION = 'servicecatalog:GetConfiguration',
	GET_PROVISIONED_PRODUCT_OUTPUTS = 'servicecatalog:GetProvisionedProductOutputs',
	IMPORT_AS_PROVISIONED_PRODUCT = 'servicecatalog:ImportAsProvisionedProduct',
	LIST_ACCEPTED_PORTFOLIO_SHARES = 'servicecatalog:ListAcceptedPortfolioShares',
	LIST_APPLICATIONS = 'servicecatalog:ListApplications',
	LIST_ASSOCIATED_ATTRIBUTE_GROUPS = 'servicecatalog:ListAssociatedAttributeGroups',
	LIST_ASSOCIATED_RESOURCES = 'servicecatalog:ListAssociatedResources',
	LIST_ATTRIBUTE_GROUPS = 'servicecatalog:ListAttributeGroups',
	LIST_ATTRIBUTE_GROUPS_FOR_APPLICATION = 'servicecatalog:ListAttributeGroupsForApplication',
	LIST_BUDGETS_FOR_RESOURCE = 'servicecatalog:ListBudgetsForResource',
	LIST_CONSTRAINTS_FOR_PORTFOLIO = 'servicecatalog:ListConstraintsForPortfolio',
	LIST_LAUNCH_PATHS = 'servicecatalog:ListLaunchPaths',
	LIST_ORGANIZATION_PORTFOLIO_ACCESS = 'servicecatalog:ListOrganizationPortfolioAccess',
	LIST_PORTFOLIO_ACCESS = 'servicecatalog:ListPortfolioAccess',
	LIST_PORTFOLIOS = 'servicecatalog:ListPortfolios',
	LIST_PORTFOLIOS_FOR_PRODUCT = 'servicecatalog:ListPortfoliosForProduct',
	LIST_PRINCIPALS_FOR_PORTFOLIO = 'servicecatalog:ListPrincipalsForPortfolio',
	LIST_PROVISIONED_PRODUCT_PLANS = 'servicecatalog:ListProvisionedProductPlans',
	LIST_PROVISIONING_ARTIFACTS = 'servicecatalog:ListProvisioningArtifacts',
	LIST_PROVISIONING_ARTIFACTS_FOR_SERVICE_ACTION = 'servicecatalog:ListProvisioningArtifactsForServiceAction',
	LIST_RECORD_HISTORY = 'servicecatalog:ListRecordHistory',
	LIST_RESOURCES_FOR_TAG_OPTION = 'servicecatalog:ListResourcesForTagOption',
	LIST_SERVICE_ACTIONS = 'servicecatalog:ListServiceActions',
	LIST_SERVICE_ACTIONS_FOR_PROVISIONING_ARTIFACT = 'servicecatalog:ListServiceActionsForProvisioningArtifact',
	LIST_STACK_INSTANCES_FOR_PROVISIONED_PRODUCT = 'servicecatalog:ListStackInstancesForProvisionedProduct',
	LIST_TAG_OPTIONS = 'servicecatalog:ListTagOptions',
	LIST_TAGS_FOR_RESOURCE = 'servicecatalog:ListTagsForResource',
	PROVISION_PRODUCT = 'servicecatalog:ProvisionProduct',
	PUT_CONFIGURATION = 'servicecatalog:PutConfiguration',
	REJECT_PORTFOLIO_SHARE = 'servicecatalog:RejectPortfolioShare',
	SCAN_PROVISIONED_PRODUCTS = 'servicecatalog:ScanProvisionedProducts',
	SEARCH_PRODUCTS = 'servicecatalog:SearchProducts',
	SEARCH_PRODUCTS_AS_ADMIN = 'servicecatalog:SearchProductsAsAdmin',
	SEARCH_PROVISIONED_PRODUCTS = 'servicecatalog:SearchProvisionedProducts',
	SYNC_RESOURCE = 'servicecatalog:SyncResource',
	TAG_RESOURCE = 'servicecatalog:TagResource',
	TERMINATE_PROVISIONED_PRODUCT = 'servicecatalog:TerminateProvisionedProduct',
	UNTAG_RESOURCE = 'servicecatalog:UntagResource',
	UPDATE_APPLICATION = 'servicecatalog:UpdateApplication',
	UPDATE_ATTRIBUTE_GROUP = 'servicecatalog:UpdateAttributeGroup',
	UPDATE_CONSTRAINT = 'servicecatalog:UpdateConstraint',
	UPDATE_PORTFOLIO = 'servicecatalog:UpdatePortfolio',
	UPDATE_PORTFOLIO_SHARE = 'servicecatalog:UpdatePortfolioShare',
	UPDATE_PRODUCT = 'servicecatalog:UpdateProduct',
	UPDATE_PROVISIONED_PRODUCT = 'servicecatalog:UpdateProvisionedProduct',
	UPDATE_PROVISIONED_PRODUCT_PROPERTIES = 'servicecatalog:UpdateProvisionedProductProperties',
	UPDATE_PROVISIONING_ARTIFACT = 'servicecatalog:UpdateProvisioningArtifact',
	UPDATE_SERVICE_ACTION = 'servicecatalog:UpdateServiceAction',
	UPDATE_TAG_OPTION = 'servicecatalog:UpdateTagOption',
}
export enum ELASTIC_DISASTER_RECOVERY {
	ASSOCIATE_FAILBACK_CLIENT_TO_RECOVERY_INSTANCE_FOR_DRS = 'drs:AssociateFailbackClientToRecoveryInstanceForDrs',
	BATCH_CREATE_VOLUME_SNAPSHOT_GROUP_FOR_DRS = 'drs:BatchCreateVolumeSnapshotGroupForDrs',
	BATCH_DELETE_SNAPSHOT_REQUEST_FOR_DRS = 'drs:BatchDeleteSnapshotRequestForDrs',
	CREATE_CONVERTED_SNAPSHOT_FOR_DRS = 'drs:CreateConvertedSnapshotForDrs',
	CREATE_EXTENDED_SOURCE_SERVER = 'drs:CreateExtendedSourceServer',
	CREATE_RECOVERY_INSTANCE_FOR_DRS = 'drs:CreateRecoveryInstanceForDrs',
	CREATE_REPLICATION_CONFIGURATION_TEMPLATE = 'drs:CreateReplicationConfigurationTemplate',
	CREATE_SOURCE_SERVER_FOR_DRS = 'drs:CreateSourceServerForDrs',
	DELETE_JOB = 'drs:DeleteJob',
	DELETE_RECOVERY_INSTANCE = 'drs:DeleteRecoveryInstance',
	DELETE_REPLICATION_CONFIGURATION_TEMPLATE = 'drs:DeleteReplicationConfigurationTemplate',
	DELETE_SOURCE_SERVER = 'drs:DeleteSourceServer',
	DESCRIBE_JOB_LOG_ITEMS = 'drs:DescribeJobLogItems',
	DESCRIBE_JOBS = 'drs:DescribeJobs',
	DESCRIBE_RECOVERY_INSTANCES = 'drs:DescribeRecoveryInstances',
	DESCRIBE_RECOVERY_SNAPSHOTS = 'drs:DescribeRecoverySnapshots',
	DESCRIBE_REPLICATION_CONFIGURATION_TEMPLATES = 'drs:DescribeReplicationConfigurationTemplates',
	DESCRIBE_REPLICATION_SERVER_ASSOCIATIONS_FOR_DRS = 'drs:DescribeReplicationServerAssociationsForDrs',
	DESCRIBE_SNAPSHOT_REQUESTS_FOR_DRS = 'drs:DescribeSnapshotRequestsForDrs',
	DESCRIBE_SOURCE_SERVERS = 'drs:DescribeSourceServers',
	DISCONNECT_RECOVERY_INSTANCE = 'drs:DisconnectRecoveryInstance',
	DISCONNECT_SOURCE_SERVER = 'drs:DisconnectSourceServer',
	GET_AGENT_COMMAND_FOR_DRS = 'drs:GetAgentCommandForDrs',
	GET_AGENT_CONFIRMED_RESUME_INFO_FOR_DRS = 'drs:GetAgentConfirmedResumeInfoForDrs',
	GET_AGENT_INSTALLATION_ASSETS_FOR_DRS = 'drs:GetAgentInstallationAssetsForDrs',
	GET_AGENT_REPLICATION_INFO_FOR_DRS = 'drs:GetAgentReplicationInfoForDrs',
	GET_AGENT_RUNTIME_CONFIGURATION_FOR_DRS = 'drs:GetAgentRuntimeConfigurationForDrs',
	GET_AGENT_SNAPSHOT_CREDITS_FOR_DRS = 'drs:GetAgentSnapshotCreditsForDrs',
	GET_CHANNEL_COMMANDS_FOR_DRS = 'drs:GetChannelCommandsForDrs',
	GET_FAILBACK_COMMAND_FOR_DRS = 'drs:GetFailbackCommandForDrs',
	GET_FAILBACK_LAUNCH_REQUESTED_FOR_DRS = 'drs:GetFailbackLaunchRequestedForDrs',
	GET_FAILBACK_REPLICATION_CONFIGURATION = 'drs:GetFailbackReplicationConfiguration',
	GET_LAUNCH_CONFIGURATION = 'drs:GetLaunchConfiguration',
	GET_REPLICATION_CONFIGURATION = 'drs:GetReplicationConfiguration',
	GET_SUGGESTED_FAILBACK_CLIENT_DEVICE_MAPPING_FOR_DRS = 'drs:GetSuggestedFailbackClientDeviceMappingForDrs',
	INITIALIZE_SERVICE = 'drs:InitializeService',
	ISSUE_AGENT_CERTIFICATE_FOR_DRS = 'drs:IssueAgentCertificateForDrs',
	LIST_EXTENSIBLE_SOURCE_SERVERS = 'drs:ListExtensibleSourceServers',
	LIST_STAGING_ACCOUNTS = 'drs:ListStagingAccounts',
	LIST_TAGS_FOR_RESOURCE = 'drs:ListTagsForResource',
	NOTIFY_AGENT_AUTHENTICATION_FOR_DRS = 'drs:NotifyAgentAuthenticationForDrs',
	NOTIFY_AGENT_CONNECTED_FOR_DRS = 'drs:NotifyAgentConnectedForDrs',
	NOTIFY_AGENT_DISCONNECTED_FOR_DRS = 'drs:NotifyAgentDisconnectedForDrs',
	NOTIFY_AGENT_REPLICATION_PROGRESS_FOR_DRS = 'drs:NotifyAgentReplicationProgressForDrs',
	NOTIFY_CONSISTENCY_ATTAINED_FOR_DRS = 'drs:NotifyConsistencyAttainedForDrs',
	NOTIFY_REPLICATION_SERVER_AUTHENTICATION_FOR_DRS = 'drs:NotifyReplicationServerAuthenticationForDrs',
	NOTIFY_VOLUME_EVENT_FOR_DRS = 'drs:NotifyVolumeEventForDrs',
	RETRY_DATA_REPLICATION = 'drs:RetryDataReplication',
	REVERSE_REPLICATION = 'drs:ReverseReplication',
	SEND_AGENT_LOGS_FOR_DRS = 'drs:SendAgentLogsForDrs',
	SEND_AGENT_METRICS_FOR_DRS = 'drs:SendAgentMetricsForDrs',
	SEND_CHANNEL_COMMAND_RESULT_FOR_DRS = 'drs:SendChannelCommandResultForDrs',
	SEND_CLIENT_LOGS_FOR_DRS = 'drs:SendClientLogsForDrs',
	SEND_CLIENT_METRICS_FOR_DRS = 'drs:SendClientMetricsForDrs',
	SEND_VOLUME_STATS_FOR_DRS = 'drs:SendVolumeStatsForDrs',
	START_FAILBACK_LAUNCH = 'drs:StartFailbackLaunch',
	START_RECOVERY = 'drs:StartRecovery',
	START_REPLICATION = 'drs:StartReplication',
	STOP_FAILBACK = 'drs:StopFailback',
	STOP_REPLICATION = 'drs:StopReplication',
	TAG_RESOURCE = 'drs:TagResource',
	TERMINATE_RECOVERY_INSTANCES = 'drs:TerminateRecoveryInstances',
	UNTAG_RESOURCE = 'drs:UntagResource',
	UPDATE_AGENT_BACKLOG_FOR_DRS = 'drs:UpdateAgentBacklogForDrs',
	UPDATE_AGENT_CONVERSION_INFO_FOR_DRS = 'drs:UpdateAgentConversionInfoForDrs',
	UPDATE_AGENT_REPLICATION_INFO_FOR_DRS = 'drs:UpdateAgentReplicationInfoForDrs',
	UPDATE_AGENT_REPLICATION_PROCESS_STATE_FOR_DRS = 'drs:UpdateAgentReplicationProcessStateForDrs',
	UPDATE_AGENT_SOURCE_PROPERTIES_FOR_DRS = 'drs:UpdateAgentSourcePropertiesForDrs',
	UPDATE_FAILBACK_CLIENT_DEVICE_MAPPING_FOR_DRS = 'drs:UpdateFailbackClientDeviceMappingForDrs',
	UPDATE_FAILBACK_CLIENT_LAST_SEEN_FOR_DRS = 'drs:UpdateFailbackClientLastSeenForDrs',
	UPDATE_FAILBACK_REPLICATION_CONFIGURATION = 'drs:UpdateFailbackReplicationConfiguration',
	UPDATE_LAUNCH_CONFIGURATION = 'drs:UpdateLaunchConfiguration',
	UPDATE_REPLICATION_CERTIFICATE_FOR_DRS = 'drs:UpdateReplicationCertificateForDrs',
	UPDATE_REPLICATION_CONFIGURATION = 'drs:UpdateReplicationConfiguration',
	UPDATE_REPLICATION_CONFIGURATION_TEMPLATE = 'drs:UpdateReplicationConfigurationTemplate',
}
export enum MQ {
	CREATE_BROKER = 'mq:CreateBroker',
	CREATE_CONFIGURATION = 'mq:CreateConfiguration',
	CREATE_TAGS = 'mq:CreateTags',
	CREATE_USER = 'mq:CreateUser',
	DELETE_BROKER = 'mq:DeleteBroker',
	DELETE_TAGS = 'mq:DeleteTags',
	DELETE_USER = 'mq:DeleteUser',
	DESCRIBE_BROKER = 'mq:DescribeBroker',
	DESCRIBE_BROKER_ENGINE_TYPES = 'mq:DescribeBrokerEngineTypes',
	DESCRIBE_BROKER_INSTANCE_OPTIONS = 'mq:DescribeBrokerInstanceOptions',
	DESCRIBE_CONFIGURATION = 'mq:DescribeConfiguration',
	DESCRIBE_CONFIGURATION_REVISION = 'mq:DescribeConfigurationRevision',
	DESCRIBE_USER = 'mq:DescribeUser',
	LIST_BROKERS = 'mq:ListBrokers',
	LIST_CONFIGURATION_REVISIONS = 'mq:ListConfigurationRevisions',
	LIST_CONFIGURATIONS = 'mq:ListConfigurations',
	LIST_TAGS = 'mq:ListTags',
	LIST_USERS = 'mq:ListUsers',
	REBOOT_BROKER = 'mq:RebootBroker',
	UPDATE_BROKER = 'mq:UpdateBroker',
	UPDATE_CONFIGURATION = 'mq:UpdateConfiguration',
	UPDATE_USER = 'mq:UpdateUser',
}
export enum CONTROL_TOWER {
	CREATE_MANAGED_ACCOUNT = 'controltower:CreateManagedAccount',
	DEREGISTER_MANAGED_ACCOUNT = 'controltower:DeregisterManagedAccount',
	DEREGISTER_ORGANIZATIONAL_UNIT = 'controltower:DeregisterOrganizationalUnit',
	DESCRIBE_ACCOUNT_FACTORY_CONFIG = 'controltower:DescribeAccountFactoryConfig',
	DESCRIBE_CORE_SERVICE = 'controltower:DescribeCoreService',
	DESCRIBE_GUARDRAIL = 'controltower:DescribeGuardrail',
	DESCRIBE_GUARDRAIL_FOR_TARGET = 'controltower:DescribeGuardrailForTarget',
	DESCRIBE_MANAGED_ACCOUNT = 'controltower:DescribeManagedAccount',
	DESCRIBE_MANAGED_ORGANIZATIONAL_UNIT = 'controltower:DescribeManagedOrganizationalUnit',
	DESCRIBE_SINGLE_SIGN_ON = 'controltower:DescribeSingleSignOn',
	DISABLE_CONTROL = 'controltower:DisableControl',
	DISABLE_GUARDRAIL = 'controltower:DisableGuardrail',
	ENABLE_CONTROL = 'controltower:EnableControl',
	ENABLE_GUARDRAIL = 'controltower:EnableGuardrail',
	GET_AVAILABLE_UPDATES = 'controltower:GetAvailableUpdates',
	GET_CONTROL_OPERATION = 'controltower:GetControlOperation',
	GET_GUARDRAIL_COMPLIANCE_STATUS = 'controltower:GetGuardrailComplianceStatus',
	GET_HOME_REGION = 'controltower:GetHomeRegion',
	GET_LANDING_ZONE_STATUS = 'controltower:GetLandingZoneStatus',
	LIST_DIRECTORY_GROUPS = 'controltower:ListDirectoryGroups',
	LIST_ENABLED_CONTROLS = 'controltower:ListEnabledControls',
	LIST_ENABLED_GUARDRAILS = 'controltower:ListEnabledGuardrails',
	LIST_GUARDRAIL_VIOLATIONS = 'controltower:ListGuardrailViolations',
	LIST_GUARDRAILS = 'controltower:ListGuardrails',
	LIST_GUARDRAILS_FOR_TARGET = 'controltower:ListGuardrailsForTarget',
	LIST_MANAGED_ACCOUNTS = 'controltower:ListManagedAccounts',
	LIST_MANAGED_ACCOUNTS_FOR_GUARDRAIL = 'controltower:ListManagedAccountsForGuardrail',
	LIST_MANAGED_ACCOUNTS_FOR_PARENT = 'controltower:ListManagedAccountsForParent',
	LIST_MANAGED_ORGANIZATIONAL_UNITS = 'controltower:ListManagedOrganizationalUnits',
	LIST_MANAGED_ORGANIZATIONAL_UNITS_FOR_GUARDRAIL = 'controltower:ListManagedOrganizationalUnitsForGuardrail',
	MANAGE_ORGANIZATIONAL_UNIT = 'controltower:ManageOrganizationalUnit',
	SETUP_LANDING_ZONE = 'controltower:SetupLandingZone',
	UPDATE_ACCOUNT_FACTORY_CONFIG = 'controltower:UpdateAccountFactoryConfig',
}
export enum NIMBLE_STUDIO {
	ACCEPT_EULAS = 'nimble:AcceptEulas',
	CREATE_LAUNCH_PROFILE = 'nimble:CreateLaunchProfile',
	CREATE_STREAMING_IMAGE = 'nimble:CreateStreamingImage',
	CREATE_STREAMING_SESSION = 'nimble:CreateStreamingSession',
	CREATE_STREAMING_SESSION_STREAM = 'nimble:CreateStreamingSessionStream',
	CREATE_STUDIO = 'nimble:CreateStudio',
	CREATE_STUDIO_COMPONENT = 'nimble:CreateStudioComponent',
	DELETE_LAUNCH_PROFILE = 'nimble:DeleteLaunchProfile',
	DELETE_LAUNCH_PROFILE_MEMBER = 'nimble:DeleteLaunchProfileMember',
	DELETE_STREAMING_IMAGE = 'nimble:DeleteStreamingImage',
	DELETE_STREAMING_SESSION = 'nimble:DeleteStreamingSession',
	DELETE_STUDIO = 'nimble:DeleteStudio',
	DELETE_STUDIO_COMPONENT = 'nimble:DeleteStudioComponent',
	DELETE_STUDIO_MEMBER = 'nimble:DeleteStudioMember',
	GET_EULA = 'nimble:GetEula',
	GET_FEATURE_MAP = 'nimble:GetFeatureMap',
	GET_LAUNCH_PROFILE = 'nimble:GetLaunchProfile',
	GET_LAUNCH_PROFILE_DETAILS = 'nimble:GetLaunchProfileDetails',
	GET_LAUNCH_PROFILE_INITIALIZATION = 'nimble:GetLaunchProfileInitialization',
	GET_LAUNCH_PROFILE_MEMBER = 'nimble:GetLaunchProfileMember',
	GET_STREAMING_IMAGE = 'nimble:GetStreamingImage',
	GET_STREAMING_SESSION = 'nimble:GetStreamingSession',
	GET_STREAMING_SESSION_BACKUP = 'nimble:GetStreamingSessionBackup',
	GET_STREAMING_SESSION_STREAM = 'nimble:GetStreamingSessionStream',
	GET_STUDIO = 'nimble:GetStudio',
	GET_STUDIO_COMPONENT = 'nimble:GetStudioComponent',
	GET_STUDIO_MEMBER = 'nimble:GetStudioMember',
	LIST_EULA_ACCEPTANCES = 'nimble:ListEulaAcceptances',
	LIST_EULAS = 'nimble:ListEulas',
	LIST_LAUNCH_PROFILE_MEMBERS = 'nimble:ListLaunchProfileMembers',
	LIST_LAUNCH_PROFILES = 'nimble:ListLaunchProfiles',
	LIST_STREAMING_IMAGES = 'nimble:ListStreamingImages',
	LIST_STREAMING_SESSION_BACKUPS = 'nimble:ListStreamingSessionBackups',
	LIST_STREAMING_SESSIONS = 'nimble:ListStreamingSessions',
	LIST_STUDIO_COMPONENTS = 'nimble:ListStudioComponents',
	LIST_STUDIO_MEMBERS = 'nimble:ListStudioMembers',
	LIST_STUDIOS = 'nimble:ListStudios',
	LIST_TAGS_FOR_RESOURCE = 'nimble:ListTagsForResource',
	PUT_LAUNCH_PROFILE_MEMBERS = 'nimble:PutLaunchProfileMembers',
	PUT_STUDIO_LOG_EVENTS = 'nimble:PutStudioLogEvents',
	PUT_STUDIO_MEMBERS = 'nimble:PutStudioMembers',
	START_STREAMING_SESSION = 'nimble:StartStreamingSession',
	START_STUDIO_SSO_CONFIGURATION_REPAIR = 'nimble:StartStudioSSOConfigurationRepair',
	STOP_STREAMING_SESSION = 'nimble:StopStreamingSession',
	TAG_RESOURCE = 'nimble:TagResource',
	UNTAG_RESOURCE = 'nimble:UntagResource',
	UPDATE_LAUNCH_PROFILE = 'nimble:UpdateLaunchProfile',
	UPDATE_LAUNCH_PROFILE_MEMBER = 'nimble:UpdateLaunchProfileMember',
	UPDATE_STREAMING_IMAGE = 'nimble:UpdateStreamingImage',
	UPDATE_STUDIO = 'nimble:UpdateStudio',
	UPDATE_STUDIO_COMPONENT = 'nimble:UpdateStudioComponent',
}
export enum MANAGED_WORKFLOWS_FOR_APACHE_AIRFLOW {
	CREATE_CLI_TOKEN = 'airflow:CreateCliToken',
	CREATE_ENVIRONMENT = 'airflow:CreateEnvironment',
	CREATE_WEB_LOGIN_TOKEN = 'airflow:CreateWebLoginToken',
	DELETE_ENVIRONMENT = 'airflow:DeleteEnvironment',
	GET_ENVIRONMENT = 'airflow:GetEnvironment',
	LIST_ENVIRONMENTS = 'airflow:ListEnvironments',
	LIST_TAGS_FOR_RESOURCE = 'airflow:ListTagsForResource',
	PUBLISH_METRICS = 'airflow:PublishMetrics',
	TAG_RESOURCE = 'airflow:TagResource',
	UNTAG_RESOURCE = 'airflow:UntagResource',
	UPDATE_ENVIRONMENT = 'airflow:UpdateEnvironment',
}
export enum TAX_SETTINGS {
	GET_EXEMPTIONS = 'tax:GetExemptions',
	GET_TAX_INTERVIEW = 'tax:GetTaxInterview',
	GET_TAX_REGISTRATION = 'tax:GetTaxRegistration',
	PUT_TAX_INTERVIEW = 'tax:PutTaxInterview',
	PUT_TAX_REGISTRATION = 'tax:PutTaxRegistration',
	UPDATE_EXEMPTIONS = 'tax:UpdateExemptions',
}
export enum S3_OBJECT_LAMBDA {
	ABORT_MULTIPART_UPLOAD = 's3-object-lambda:AbortMultipartUpload',
	DELETE_OBJECT = 's3-object-lambda:DeleteObject',
	DELETE_OBJECT_TAGGING = 's3-object-lambda:DeleteObjectTagging',
	DELETE_OBJECT_VERSION = 's3-object-lambda:DeleteObjectVersion',
	DELETE_OBJECT_VERSION_TAGGING = 's3-object-lambda:DeleteObjectVersionTagging',
	GET_OBJECT = 's3-object-lambda:GetObject',
	GET_OBJECT_ACL = 's3-object-lambda:GetObjectAcl',
	GET_OBJECT_LEGAL_HOLD = 's3-object-lambda:GetObjectLegalHold',
	GET_OBJECT_RETENTION = 's3-object-lambda:GetObjectRetention',
	GET_OBJECT_TAGGING = 's3-object-lambda:GetObjectTagging',
	GET_OBJECT_VERSION = 's3-object-lambda:GetObjectVersion',
	GET_OBJECT_VERSION_ACL = 's3-object-lambda:GetObjectVersionAcl',
	GET_OBJECT_VERSION_TAGGING = 's3-object-lambda:GetObjectVersionTagging',
	LIST_BUCKET = 's3-object-lambda:ListBucket',
	LIST_BUCKET_MULTIPART_UPLOADS = 's3-object-lambda:ListBucketMultipartUploads',
	LIST_BUCKET_VERSIONS = 's3-object-lambda:ListBucketVersions',
	LIST_MULTIPART_UPLOAD_PARTS = 's3-object-lambda:ListMultipartUploadParts',
	PUT_OBJECT = 's3-object-lambda:PutObject',
	PUT_OBJECT_ACL = 's3-object-lambda:PutObjectAcl',
	PUT_OBJECT_LEGAL_HOLD = 's3-object-lambda:PutObjectLegalHold',
	PUT_OBJECT_RETENTION = 's3-object-lambda:PutObjectRetention',
	PUT_OBJECT_TAGGING = 's3-object-lambda:PutObjectTagging',
	PUT_OBJECT_VERSION_ACL = 's3-object-lambda:PutObjectVersionAcl',
	PUT_OBJECT_VERSION_TAGGING = 's3-object-lambda:PutObjectVersionTagging',
	RESTORE_OBJECT = 's3-object-lambda:RestoreObject',
	WRITE_GET_OBJECT_RESPONSE = 's3-object-lambda:WriteGetObjectResponse',
}
export enum SUSTAINABILITY {
	GET_CARBON_FOOTPRINT_SUMMARY = 'sustainability:GetCarbonFootprintSummary',
}
export enum PERSONALIZE {
	CREATE_BATCH_INFERENCE_JOB = 'personalize:CreateBatchInferenceJob',
	CREATE_BATCH_SEGMENT_JOB = 'personalize:CreateBatchSegmentJob',
	CREATE_CAMPAIGN = 'personalize:CreateCampaign',
	CREATE_DATASET = 'personalize:CreateDataset',
	CREATE_DATASET_EXPORT_JOB = 'personalize:CreateDatasetExportJob',
	CREATE_DATASET_GROUP = 'personalize:CreateDatasetGroup',
	CREATE_DATASET_IMPORT_JOB = 'personalize:CreateDatasetImportJob',
	CREATE_EVENT_TRACKER = 'personalize:CreateEventTracker',
	CREATE_FILTER = 'personalize:CreateFilter',
	CREATE_RECOMMENDER = 'personalize:CreateRecommender',
	CREATE_SCHEMA = 'personalize:CreateSchema',
	CREATE_SOLUTION = 'personalize:CreateSolution',
	CREATE_SOLUTION_VERSION = 'personalize:CreateSolutionVersion',
	DELETE_CAMPAIGN = 'personalize:DeleteCampaign',
	DELETE_DATASET = 'personalize:DeleteDataset',
	DELETE_DATASET_GROUP = 'personalize:DeleteDatasetGroup',
	DELETE_EVENT_TRACKER = 'personalize:DeleteEventTracker',
	DELETE_FILTER = 'personalize:DeleteFilter',
	DELETE_RECOMMENDER = 'personalize:DeleteRecommender',
	DELETE_SCHEMA = 'personalize:DeleteSchema',
	DELETE_SOLUTION = 'personalize:DeleteSolution',
	DESCRIBE_ALGORITHM = 'personalize:DescribeAlgorithm',
	DESCRIBE_BATCH_INFERENCE_JOB = 'personalize:DescribeBatchInferenceJob',
	DESCRIBE_BATCH_SEGMENT_JOB = 'personalize:DescribeBatchSegmentJob',
	DESCRIBE_CAMPAIGN = 'personalize:DescribeCampaign',
	DESCRIBE_DATASET = 'personalize:DescribeDataset',
	DESCRIBE_DATASET_EXPORT_JOB = 'personalize:DescribeDatasetExportJob',
	DESCRIBE_DATASET_GROUP = 'personalize:DescribeDatasetGroup',
	DESCRIBE_DATASET_IMPORT_JOB = 'personalize:DescribeDatasetImportJob',
	DESCRIBE_EVENT_TRACKER = 'personalize:DescribeEventTracker',
	DESCRIBE_FEATURE_TRANSFORMATION = 'personalize:DescribeFeatureTransformation',
	DESCRIBE_FILTER = 'personalize:DescribeFilter',
	DESCRIBE_RECIPE = 'personalize:DescribeRecipe',
	DESCRIBE_RECOMMENDER = 'personalize:DescribeRecommender',
	DESCRIBE_SCHEMA = 'personalize:DescribeSchema',
	DESCRIBE_SOLUTION = 'personalize:DescribeSolution',
	DESCRIBE_SOLUTION_VERSION = 'personalize:DescribeSolutionVersion',
	GET_PERSONALIZED_RANKING = 'personalize:GetPersonalizedRanking',
	GET_RECOMMENDATIONS = 'personalize:GetRecommendations',
	GET_SOLUTION_METRICS = 'personalize:GetSolutionMetrics',
	LIST_BATCH_INFERENCE_JOBS = 'personalize:ListBatchInferenceJobs',
	LIST_BATCH_SEGMENT_JOBS = 'personalize:ListBatchSegmentJobs',
	LIST_CAMPAIGNS = 'personalize:ListCampaigns',
	LIST_DATASET_EXPORT_JOBS = 'personalize:ListDatasetExportJobs',
	LIST_DATASET_GROUPS = 'personalize:ListDatasetGroups',
	LIST_DATASET_IMPORT_JOBS = 'personalize:ListDatasetImportJobs',
	LIST_DATASETS = 'personalize:ListDatasets',
	LIST_EVENT_TRACKERS = 'personalize:ListEventTrackers',
	LIST_FILTERS = 'personalize:ListFilters',
	LIST_RECIPES = 'personalize:ListRecipes',
	LIST_RECOMMENDERS = 'personalize:ListRecommenders',
	LIST_SCHEMAS = 'personalize:ListSchemas',
	LIST_SOLUTION_VERSIONS = 'personalize:ListSolutionVersions',
	LIST_SOLUTIONS = 'personalize:ListSolutions',
	LIST_TAGS_FOR_RESOURCE = 'personalize:ListTagsForResource',
	PUT_EVENTS = 'personalize:PutEvents',
	PUT_ITEMS = 'personalize:PutItems',
	PUT_USERS = 'personalize:PutUsers',
	START_RECOMMENDER = 'personalize:StartRecommender',
	STOP_RECOMMENDER = 'personalize:StopRecommender',
	STOP_SOLUTION_VERSION_CREATION = 'personalize:StopSolutionVersionCreation',
	TAG_RESOURCE = 'personalize:TagResource',
	UNTAG_RESOURCE = 'personalize:UntagResource',
	UPDATE_CAMPAIGN = 'personalize:UpdateCampaign',
	UPDATE_RECOMMENDER = 'personalize:UpdateRecommender',
}
export enum CLOUD9 {
	ACTIVATE_EC_2_REMOTE = 'cloud9:ActivateEC2Remote',
	CREATE_ENVIRONMENT_EC_2 = 'cloud9:CreateEnvironmentEC2',
	CREATE_ENVIRONMENT_MEMBERSHIP = 'cloud9:CreateEnvironmentMembership',
	CREATE_ENVIRONMENT_SSH = 'cloud9:CreateEnvironmentSSH',
	CREATE_ENVIRONMENT_TOKEN = 'cloud9:CreateEnvironmentToken',
	DELETE_ENVIRONMENT = 'cloud9:DeleteEnvironment',
	DELETE_ENVIRONMENT_MEMBERSHIP = 'cloud9:DeleteEnvironmentMembership',
	DESCRIBE_EC_2_REMOTE = 'cloud9:DescribeEC2Remote',
	DESCRIBE_ENVIRONMENT_MEMBERSHIPS = 'cloud9:DescribeEnvironmentMemberships',
	DESCRIBE_ENVIRONMENT_STATUS = 'cloud9:DescribeEnvironmentStatus',
	DESCRIBE_ENVIRONMENTS = 'cloud9:DescribeEnvironments',
	DESCRIBE_SSH_REMOTE = 'cloud9:DescribeSSHRemote',
	GET_ENVIRONMENT_CONFIG = 'cloud9:GetEnvironmentConfig',
	GET_ENVIRONMENT_SETTINGS = 'cloud9:GetEnvironmentSettings',
	GET_MEMBERSHIP_SETTINGS = 'cloud9:GetMembershipSettings',
	GET_USER_PUBLIC_KEY = 'cloud9:GetUserPublicKey',
	GET_USER_SETTINGS = 'cloud9:GetUserSettings',
	LIST_ENVIRONMENTS = 'cloud9:ListEnvironments',
	LIST_TAGS_FOR_RESOURCE = 'cloud9:ListTagsForResource',
	MODIFY_TEMPORARY_CREDENTIALS_ON_ENVIRONMENT_EC_2 = 'cloud9:ModifyTemporaryCredentialsOnEnvironmentEC2',
	TAG_RESOURCE = 'cloud9:TagResource',
	UNTAG_RESOURCE = 'cloud9:UntagResource',
	UPDATE_ENVIRONMENT = 'cloud9:UpdateEnvironment',
	UPDATE_ENVIRONMENT_MEMBERSHIP = 'cloud9:UpdateEnvironmentMembership',
	UPDATE_ENVIRONMENT_SETTINGS = 'cloud9:UpdateEnvironmentSettings',
	UPDATE_MEMBERSHIP_SETTINGS = 'cloud9:UpdateMembershipSettings',
	UPDATE_SSH_REMOTE = 'cloud9:UpdateSSHRemote',
	UPDATE_USER_SETTINGS = 'cloud9:UpdateUserSettings',
	VALIDATE_ENVIRONMENT_NAME = 'cloud9:ValidateEnvironmentName',
}
export enum ELEMENTAL_APPLIANCES_AND_SOFTWARE {
	COMPLETE_UPLOAD = 'elemental-appliances-software:CompleteUpload',
	CREATE_ORDER_V_1 = 'elemental-appliances-software:CreateOrderV1',
	CREATE_QUOTE = 'elemental-appliances-software:CreateQuote',
	GET_AVS_CORRECT_ADDRESS = 'elemental-appliances-software:GetAvsCorrectAddress',
	GET_BILLING_ADDRESSES = 'elemental-appliances-software:GetBillingAddresses',
	GET_DELIVERY_ADDRESSES_V_2 = 'elemental-appliances-software:GetDeliveryAddressesV2',
	GET_ORDER = 'elemental-appliances-software:GetOrder',
	GET_ORDERS_V_2 = 'elemental-appliances-software:GetOrdersV2',
	GET_QUOTE = 'elemental-appliances-software:GetQuote',
	GET_TAXES = 'elemental-appliances-software:GetTaxes',
	LIST_QUOTES = 'elemental-appliances-software:ListQuotes',
	LIST_TAGS_FOR_RESOURCE = 'elemental-appliances-software:ListTagsForResource',
	START_UPLOAD = 'elemental-appliances-software:StartUpload',
	SUBMIT_ORDER_V_1 = 'elemental-appliances-software:SubmitOrderV1',
	TAG_RESOURCE = 'elemental-appliances-software:TagResource',
	UNTAG_RESOURCE = 'elemental-appliances-software:UntagResource',
	UPDATE_QUOTE = 'elemental-appliances-software:UpdateQuote',
}
export enum DETECTIVE {
	ACCEPT_INVITATION = 'detective:AcceptInvitation',
	BATCH_GET_GRAPH_MEMBER_DATASOURCES = 'detective:BatchGetGraphMemberDatasources',
	BATCH_GET_MEMBERSHIP_DATASOURCES = 'detective:BatchGetMembershipDatasources',
	CREATE_GRAPH = 'detective:CreateGraph',
	CREATE_MEMBERS = 'detective:CreateMembers',
	DELETE_GRAPH = 'detective:DeleteGraph',
	DELETE_MEMBERS = 'detective:DeleteMembers',
	DESCRIBE_ORGANIZATION_CONFIGURATION = 'detective:DescribeOrganizationConfiguration',
	DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'detective:DisableOrganizationAdminAccount',
	DISASSOCIATE_MEMBERSHIP = 'detective:DisassociateMembership',
	ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'detective:EnableOrganizationAdminAccount',
	GET_FREE_TRIAL_ELIGIBILITY = 'detective:GetFreeTrialEligibility',
	GET_GRAPH_INGEST_STATE = 'detective:GetGraphIngestState',
	GET_MEMBERS = 'detective:GetMembers',
	GET_PRICING_INFORMATION = 'detective:GetPricingInformation',
	GET_USAGE_INFORMATION = 'detective:GetUsageInformation',
	LIST_DATASOURCE_PACKAGES = 'detective:ListDatasourcePackages',
	LIST_GRAPHS = 'detective:ListGraphs',
	LIST_HIGH_DEGREE_ENTITIES = 'detective:ListHighDegreeEntities',
	LIST_INVITATIONS = 'detective:ListInvitations',
	LIST_MEMBERS = 'detective:ListMembers',
	LIST_ORGANIZATION_ADMIN_ACCOUNT = 'detective:ListOrganizationAdminAccount',
	LIST_TAGS_FOR_RESOURCE = 'detective:ListTagsForResource',
	REJECT_INVITATION = 'detective:RejectInvitation',
	SEARCH_GRAPH = 'detective:SearchGraph',
	START_MONITORING_MEMBER = 'detective:StartMonitoringMember',
	TAG_RESOURCE = 'detective:TagResource',
	UNTAG_RESOURCE = 'detective:UntagResource',
	UPDATE_DATASOURCE_PACKAGES = 'detective:UpdateDatasourcePackages',
	UPDATE_ORGANIZATION_CONFIGURATION = 'detective:UpdateOrganizationConfiguration',
}
export enum TRANSFER_FAMILY {
	CREATE_ACCESS = 'transfer:CreateAccess',
	CREATE_AGREEMENT = 'transfer:CreateAgreement',
	CREATE_CONNECTOR = 'transfer:CreateConnector',
	CREATE_PROFILE = 'transfer:CreateProfile',
	CREATE_SERVER = 'transfer:CreateServer',
	CREATE_USER = 'transfer:CreateUser',
	CREATE_WORKFLOW = 'transfer:CreateWorkflow',
	DELETE_ACCESS = 'transfer:DeleteAccess',
	DELETE_AGREEMENT = 'transfer:DeleteAgreement',
	DELETE_CERTIFICATE = 'transfer:DeleteCertificate',
	DELETE_CONNECTOR = 'transfer:DeleteConnector',
	DELETE_HOST_KEY = 'transfer:DeleteHostKey',
	DELETE_PROFILE = 'transfer:DeleteProfile',
	DELETE_SERVER = 'transfer:DeleteServer',
	DELETE_SSH_PUBLIC_KEY = 'transfer:DeleteSshPublicKey',
	DELETE_USER = 'transfer:DeleteUser',
	DELETE_WORKFLOW = 'transfer:DeleteWorkflow',
	DESCRIBE_ACCESS = 'transfer:DescribeAccess',
	DESCRIBE_AGREEMENT = 'transfer:DescribeAgreement',
	DESCRIBE_CERTIFICATE = 'transfer:DescribeCertificate',
	DESCRIBE_CONNECTOR = 'transfer:DescribeConnector',
	DESCRIBE_EXECUTION = 'transfer:DescribeExecution',
	DESCRIBE_HOST_KEY = 'transfer:DescribeHostKey',
	DESCRIBE_PROFILE = 'transfer:DescribeProfile',
	DESCRIBE_SECURITY_POLICY = 'transfer:DescribeSecurityPolicy',
	DESCRIBE_SERVER = 'transfer:DescribeServer',
	DESCRIBE_USER = 'transfer:DescribeUser',
	DESCRIBE_WORKFLOW = 'transfer:DescribeWorkflow',
	IMPORT_CERTIFICATE = 'transfer:ImportCertificate',
	IMPORT_HOST_KEY = 'transfer:ImportHostKey',
	IMPORT_SSH_PUBLIC_KEY = 'transfer:ImportSshPublicKey',
	LIST_ACCESSES = 'transfer:ListAccesses',
	LIST_AGREEMENTS = 'transfer:ListAgreements',
	LIST_CERTIFICATES = 'transfer:ListCertificates',
	LIST_CONNECTORS = 'transfer:ListConnectors',
	LIST_EXECUTIONS = 'transfer:ListExecutions',
	LIST_HOST_KEYS = 'transfer:ListHostKeys',
	LIST_PROFILES = 'transfer:ListProfiles',
	LIST_SECURITY_POLICIES = 'transfer:ListSecurityPolicies',
	LIST_SERVERS = 'transfer:ListServers',
	LIST_TAGS_FOR_RESOURCE = 'transfer:ListTagsForResource',
	LIST_USERS = 'transfer:ListUsers',
	LIST_WORKFLOWS = 'transfer:ListWorkflows',
	SEND_WORKFLOW_STEP_STATE = 'transfer:SendWorkflowStepState',
	START_FILE_TRANSFER = 'transfer:StartFileTransfer',
	START_SERVER = 'transfer:StartServer',
	STOP_SERVER = 'transfer:StopServer',
	TAG_RESOURCE = 'transfer:TagResource',
	TEST_IDENTITY_PROVIDER = 'transfer:TestIdentityProvider',
	UNTAG_RESOURCE = 'transfer:UntagResource',
	UPDATE_ACCESS = 'transfer:UpdateAccess',
	UPDATE_AGREEMENT = 'transfer:UpdateAgreement',
	UPDATE_CERTIFICATE = 'transfer:UpdateCertificate',
	UPDATE_CONNECTOR = 'transfer:UpdateConnector',
	UPDATE_HOST_KEY = 'transfer:UpdateHostKey',
	UPDATE_PROFILE = 'transfer:UpdateProfile',
	UPDATE_SERVER = 'transfer:UpdateServer',
	UPDATE_USER = 'transfer:UpdateUser',
}
export enum PANORAMA {
	CREATE_APP = 'panorama:CreateApp',
	CREATE_APP_DEPLOYMENT = 'panorama:CreateAppDeployment',
	CREATE_APP_VERSION = 'panorama:CreateAppVersion',
	CREATE_APPLICATION_INSTANCE = 'panorama:CreateApplicationInstance',
	CREATE_DATA_SOURCE = 'panorama:CreateDataSource',
	CREATE_DEPLOYMENT_CONFIGURATION = 'panorama:CreateDeploymentConfiguration',
	CREATE_INPUTS = 'panorama:CreateInputs',
	CREATE_JOB_FOR_DEVICES = 'panorama:CreateJobForDevices',
	CREATE_MODEL = 'panorama:CreateModel',
	CREATE_NODE_FROM_TEMPLATE_JOB = 'panorama:CreateNodeFromTemplateJob',
	CREATE_PACKAGE = 'panorama:CreatePackage',
	CREATE_PACKAGE_IMPORT_JOB = 'panorama:CreatePackageImportJob',
	CREATE_STREAMS = 'panorama:CreateStreams',
	DELETE_APP = 'panorama:DeleteApp',
	DELETE_APP_VERSION = 'panorama:DeleteAppVersion',
	DELETE_DATA_SOURCE = 'panorama:DeleteDataSource',
	DELETE_DEVICE = 'panorama:DeleteDevice',
	DELETE_MODEL = 'panorama:DeleteModel',
	DELETE_PACKAGE = 'panorama:DeletePackage',
	DEREGISTER_PACKAGE_VERSION = 'panorama:DeregisterPackageVersion',
	DESCRIBE_APP = 'panorama:DescribeApp',
	DESCRIBE_APP_DEPLOYMENT = 'panorama:DescribeAppDeployment',
	DESCRIBE_APP_VERSION = 'panorama:DescribeAppVersion',
	DESCRIBE_APPLICATION_INSTANCE = 'panorama:DescribeApplicationInstance',
	DESCRIBE_APPLICATION_INSTANCE_DETAILS = 'panorama:DescribeApplicationInstanceDetails',
	DESCRIBE_DATA_SOURCE = 'panorama:DescribeDataSource',
	DESCRIBE_DEVICE = 'panorama:DescribeDevice',
	DESCRIBE_DEVICE_JOB = 'panorama:DescribeDeviceJob',
	DESCRIBE_MODEL = 'panorama:DescribeModel',
	DESCRIBE_NODE = 'panorama:DescribeNode',
	DESCRIBE_NODE_FROM_TEMPLATE_JOB = 'panorama:DescribeNodeFromTemplateJob',
	DESCRIBE_PACKAGE = 'panorama:DescribePackage',
	DESCRIBE_PACKAGE_IMPORT_JOB = 'panorama:DescribePackageImportJob',
	DESCRIBE_PACKAGE_VERSION = 'panorama:DescribePackageVersion',
	DESCRIBE_SOFTWARE = 'panorama:DescribeSoftware',
	GET_DEPLOYMENT_CONFIGURATION = 'panorama:GetDeploymentConfiguration',
	GET_INPUTS = 'panorama:GetInputs',
	GET_STREAMS = 'panorama:GetStreams',
	GET_WEB_SOCKET_URL = 'panorama:GetWebSocketURL',
	LIST_APP_DEPLOYMENT_OPERATIONS = 'panorama:ListAppDeploymentOperations',
	LIST_APP_VERSIONS = 'panorama:ListAppVersions',
	LIST_APPLICATION_INSTANCE_DEPENDENCIES = 'panorama:ListApplicationInstanceDependencies',
	LIST_APPLICATION_INSTANCE_NODE_INSTANCES = 'panorama:ListApplicationInstanceNodeInstances',
	LIST_APPLICATION_INSTANCES = 'panorama:ListApplicationInstances',
	LIST_APPS = 'panorama:ListApps',
	LIST_DATA_SOURCES = 'panorama:ListDataSources',
	LIST_DEPLOYMENT_CONFIGURATIONS = 'panorama:ListDeploymentConfigurations',
	LIST_DEVICES = 'panorama:ListDevices',
	LIST_DEVICES_JOBS = 'panorama:ListDevicesJobs',
	LIST_MODELS = 'panorama:ListModels',
	LIST_NODE_FROM_TEMPLATE_JOBS = 'panorama:ListNodeFromTemplateJobs',
	LIST_NODES = 'panorama:ListNodes',
	LIST_PACKAGE_IMPORT_JOBS = 'panorama:ListPackageImportJobs',
	LIST_PACKAGES = 'panorama:ListPackages',
	LIST_TAGS_FOR_RESOURCE = 'panorama:ListTagsForResource',
	PROVISION_DEVICE = 'panorama:ProvisionDevice',
	REGISTER_PACKAGE_VERSION = 'panorama:RegisterPackageVersion',
	REMOVE_APPLICATION_INSTANCE = 'panorama:RemoveApplicationInstance',
	TAG_RESOURCE = 'panorama:TagResource',
	UNTAG_RESOURCE = 'panorama:UntagResource',
	UPDATE_APP = 'panorama:UpdateApp',
	UPDATE_APP_CONFIGURATION = 'panorama:UpdateAppConfiguration',
	UPDATE_DATA_SOURCE = 'panorama:UpdateDataSource',
	UPDATE_DEVICE_METADATA = 'panorama:UpdateDeviceMetadata',
}
export enum IAM_ACCESS_ANALYZER {
	APPLY_ARCHIVE_RULE = 'access-analyzer:ApplyArchiveRule',
	CANCEL_POLICY_GENERATION = 'access-analyzer:CancelPolicyGeneration',
	CREATE_ACCESS_PREVIEW = 'access-analyzer:CreateAccessPreview',
	CREATE_ANALYZER = 'access-analyzer:CreateAnalyzer',
	CREATE_ARCHIVE_RULE = 'access-analyzer:CreateArchiveRule',
	DELETE_ANALYZER = 'access-analyzer:DeleteAnalyzer',
	DELETE_ARCHIVE_RULE = 'access-analyzer:DeleteArchiveRule',
	GET_ACCESS_PREVIEW = 'access-analyzer:GetAccessPreview',
	GET_ANALYZED_RESOURCE = 'access-analyzer:GetAnalyzedResource',
	GET_ANALYZER = 'access-analyzer:GetAnalyzer',
	GET_ARCHIVE_RULE = 'access-analyzer:GetArchiveRule',
	GET_FINDING = 'access-analyzer:GetFinding',
	GET_GENERATED_POLICY = 'access-analyzer:GetGeneratedPolicy',
	LIST_ACCESS_PREVIEW_FINDINGS = 'access-analyzer:ListAccessPreviewFindings',
	LIST_ACCESS_PREVIEWS = 'access-analyzer:ListAccessPreviews',
	LIST_ANALYZED_RESOURCES = 'access-analyzer:ListAnalyzedResources',
	LIST_ANALYZERS = 'access-analyzer:ListAnalyzers',
	LIST_ARCHIVE_RULES = 'access-analyzer:ListArchiveRules',
	LIST_FINDINGS = 'access-analyzer:ListFindings',
	LIST_POLICY_GENERATIONS = 'access-analyzer:ListPolicyGenerations',
	LIST_TAGS_FOR_RESOURCE = 'access-analyzer:ListTagsForResource',
	START_POLICY_GENERATION = 'access-analyzer:StartPolicyGeneration',
	START_RESOURCE_SCAN = 'access-analyzer:StartResourceScan',
	TAG_RESOURCE = 'access-analyzer:TagResource',
	UNTAG_RESOURCE = 'access-analyzer:UntagResource',
	UPDATE_ARCHIVE_RULE = 'access-analyzer:UpdateArchiveRule',
	UPDATE_FINDINGS = 'access-analyzer:UpdateFindings',
	VALIDATE_POLICY = 'access-analyzer:ValidatePolicy',
}
export enum OMICS {
	BATCH_DELETE_READ_SET = 'omics:BatchDeleteReadSet',
	CANCEL_ANNOTATION_IMPORT_JOB = 'omics:CancelAnnotationImportJob',
	CANCEL_RUN = 'omics:CancelRun',
	CANCEL_VARIANT_IMPORT_JOB = 'omics:CancelVariantImportJob',
	CREATE_ANNOTATION_STORE = 'omics:CreateAnnotationStore',
	CREATE_REFERENCE_STORE = 'omics:CreateReferenceStore',
	CREATE_RUN_GROUP = 'omics:CreateRunGroup',
	CREATE_SEQUENCE_STORE = 'omics:CreateSequenceStore',
	CREATE_VARIANT_STORE = 'omics:CreateVariantStore',
	CREATE_WORKFLOW = 'omics:CreateWorkflow',
	DELETE_ANNOTATION_STORE = 'omics:DeleteAnnotationStore',
	DELETE_REFERENCE = 'omics:DeleteReference',
	DELETE_REFERENCE_STORE = 'omics:DeleteReferenceStore',
	DELETE_RUN = 'omics:DeleteRun',
	DELETE_RUN_GROUP = 'omics:DeleteRunGroup',
	DELETE_SEQUENCE_STORE = 'omics:DeleteSequenceStore',
	DELETE_VARIANT_STORE = 'omics:DeleteVariantStore',
	DELETE_WORKFLOW = 'omics:DeleteWorkflow',
	GET_ANNOTATION_IMPORT_JOB = 'omics:GetAnnotationImportJob',
	GET_ANNOTATION_STORE = 'omics:GetAnnotationStore',
	GET_READ_SET = 'omics:GetReadSet',
	GET_READ_SET_ACTIVATION_JOB = 'omics:GetReadSetActivationJob',
	GET_READ_SET_EXPORT_JOB = 'omics:GetReadSetExportJob',
	GET_READ_SET_IMPORT_JOB = 'omics:GetReadSetImportJob',
	GET_READ_SET_METADATA = 'omics:GetReadSetMetadata',
	GET_REFERENCE = 'omics:GetReference',
	GET_REFERENCE_IMPORT_JOB = 'omics:GetReferenceImportJob',
	GET_REFERENCE_METADATA = 'omics:GetReferenceMetadata',
	GET_REFERENCE_STORE = 'omics:GetReferenceStore',
	GET_RUN = 'omics:GetRun',
	GET_RUN_GROUP = 'omics:GetRunGroup',
	GET_RUN_TASK = 'omics:GetRunTask',
	GET_SEQUENCE_STORE = 'omics:GetSequenceStore',
	GET_VARIANT_IMPORT_JOB = 'omics:GetVariantImportJob',
	GET_VARIANT_STORE = 'omics:GetVariantStore',
	GET_WORKFLOW = 'omics:GetWorkflow',
	LIST_ANNOTATION_IMPORT_JOBS = 'omics:ListAnnotationImportJobs',
	LIST_ANNOTATION_STORES = 'omics:ListAnnotationStores',
	LIST_READ_SET_ACTIVATION_JOBS = 'omics:ListReadSetActivationJobs',
	LIST_READ_SET_EXPORT_JOBS = 'omics:ListReadSetExportJobs',
	LIST_READ_SET_IMPORT_JOBS = 'omics:ListReadSetImportJobs',
	LIST_READ_SETS = 'omics:ListReadSets',
	LIST_REFERENCE_IMPORT_JOBS = 'omics:ListReferenceImportJobs',
	LIST_REFERENCE_STORES = 'omics:ListReferenceStores',
	LIST_REFERENCES = 'omics:ListReferences',
	LIST_RUN_GROUPS = 'omics:ListRunGroups',
	LIST_RUN_TASKS = 'omics:ListRunTasks',
	LIST_RUNS = 'omics:ListRuns',
	LIST_SEQUENCE_STORES = 'omics:ListSequenceStores',
	LIST_TAGS_FOR_RESOURCE = 'omics:ListTagsForResource',
	LIST_VARIANT_IMPORT_JOBS = 'omics:ListVariantImportJobs',
	LIST_VARIANT_STORES = 'omics:ListVariantStores',
	LIST_WORKFLOWS = 'omics:ListWorkflows',
	START_ANNOTATION_IMPORT_JOB = 'omics:StartAnnotationImportJob',
	START_READ_SET_ACTIVATION_JOB = 'omics:StartReadSetActivationJob',
	START_READ_SET_EXPORT_JOB = 'omics:StartReadSetExportJob',
	START_READ_SET_IMPORT_JOB = 'omics:StartReadSetImportJob',
	START_REFERENCE_IMPORT_JOB = 'omics:StartReferenceImportJob',
	START_RUN = 'omics:StartRun',
	START_VARIANT_IMPORT_JOB = 'omics:StartVariantImportJob',
	TAG_RESOURCE = 'omics:TagResource',
	UNTAG_RESOURCE = 'omics:UntagResource',
	UPDATE_ANNOTATION_STORE = 'omics:UpdateAnnotationStore',
	UPDATE_RUN_GROUP = 'omics:UpdateRunGroup',
	UPDATE_VARIANT_STORE = 'omics:UpdateVariantStore',
	UPDATE_WORKFLOW = 'omics:UpdateWorkflow',
}
export enum TEXTRACT {
	ANALYZE_DOCUMENT = 'textract:AnalyzeDocument',
	ANALYZE_EXPENSE = 'textract:AnalyzeExpense',
	ANALYZE_ID = 'textract:AnalyzeID',
	DETECT_DOCUMENT_TEXT = 'textract:DetectDocumentText',
	GET_DOCUMENT_ANALYSIS = 'textract:GetDocumentAnalysis',
	GET_DOCUMENT_TEXT_DETECTION = 'textract:GetDocumentTextDetection',
	GET_EXPENSE_ANALYSIS = 'textract:GetExpenseAnalysis',
	GET_LENDING_ANALYSIS = 'textract:GetLendingAnalysis',
	GET_LENDING_ANALYSIS_SUMMARY = 'textract:GetLendingAnalysisSummary',
	START_DOCUMENT_ANALYSIS = 'textract:StartDocumentAnalysis',
	START_DOCUMENT_TEXT_DETECTION = 'textract:StartDocumentTextDetection',
	START_EXPENSE_ANALYSIS = 'textract:StartExpenseAnalysis',
	START_LENDING_ANALYSIS = 'textract:StartLendingAnalysis',
}
export enum ACTIVATE {
	CREATE_FORM = 'activate:CreateForm',
	GET_ACCOUNT_CONTACT = 'activate:GetAccountContact',
	GET_CONTENT_INFO = 'activate:GetContentInfo',
	GET_COSTS = 'activate:GetCosts',
	GET_CREDITS = 'activate:GetCredits',
	GET_MEMBER_INFO = 'activate:GetMemberInfo',
	GET_PROGRAM = 'activate:GetProgram',
	PUT_MEMBER_INFO = 'activate:PutMemberInfo',
}
export enum APPINTEGRATIONS {
	CREATE_DATA_INTEGRATION = 'app-integrations:CreateDataIntegration',
	CREATE_DATA_INTEGRATION_ASSOCIATION = 'app-integrations:CreateDataIntegrationAssociation',
	CREATE_EVENT_INTEGRATION = 'app-integrations:CreateEventIntegration',
	CREATE_EVENT_INTEGRATION_ASSOCIATION = 'app-integrations:CreateEventIntegrationAssociation',
	DELETE_DATA_INTEGRATION = 'app-integrations:DeleteDataIntegration',
	DELETE_DATA_INTEGRATION_ASSOCIATION = 'app-integrations:DeleteDataIntegrationAssociation',
	DELETE_EVENT_INTEGRATION = 'app-integrations:DeleteEventIntegration',
	DELETE_EVENT_INTEGRATION_ASSOCIATION = 'app-integrations:DeleteEventIntegrationAssociation',
	GET_DATA_INTEGRATION = 'app-integrations:GetDataIntegration',
	GET_EVENT_INTEGRATION = 'app-integrations:GetEventIntegration',
	LIST_DATA_INTEGRATION_ASSOCIATIONS = 'app-integrations:ListDataIntegrationAssociations',
	LIST_DATA_INTEGRATIONS = 'app-integrations:ListDataIntegrations',
	LIST_EVENT_INTEGRATION_ASSOCIATIONS = 'app-integrations:ListEventIntegrationAssociations',
	LIST_EVENT_INTEGRATIONS = 'app-integrations:ListEventIntegrations',
	LIST_TAGS_FOR_RESOURCE = 'app-integrations:ListTagsForResource',
	TAG_RESOURCE = 'app-integrations:TagResource',
	UNTAG_RESOURCE = 'app-integrations:UntagResource',
	UPDATE_DATA_INTEGRATION = 'app-integrations:UpdateDataIntegration',
	UPDATE_EVENT_INTEGRATION = 'app-integrations:UpdateEventIntegration',
}
export enum APPLICATION_DISCOVERY_ARSENAL {
	REGISTER_ON_PREMISES_AGENT = 'arsenal:RegisterOnPremisesAgent',
}
export enum FINSPACE {
	CREATE_ENVIRONMENT = 'finspace:CreateEnvironment',
	CREATE_USER = 'finspace:CreateUser',
	DELETE_ENVIRONMENT = 'finspace:DeleteEnvironment',
	GET_ENVIRONMENT = 'finspace:GetEnvironment',
	GET_LOAD_SAMPLE_DATA_SET_GROUP_INTO_ENVIRONMENT_STATUS = 'finspace:GetLoadSampleDataSetGroupIntoEnvironmentStatus',
	GET_USER = 'finspace:GetUser',
	LIST_ENVIRONMENTS = 'finspace:ListEnvironments',
	LIST_TAGS_FOR_RESOURCE = 'finspace:ListTagsForResource',
	LIST_USERS = 'finspace:ListUsers',
	LOAD_SAMPLE_DATA_SET_GROUP_INTO_ENVIRONMENT = 'finspace:LoadSampleDataSetGroupIntoEnvironment',
	RESET_USER_PASSWORD = 'finspace:ResetUserPassword',
	TAG_RESOURCE = 'finspace:TagResource',
	UNTAG_RESOURCE = 'finspace:UntagResource',
	UPDATE_ENVIRONMENT = 'finspace:UpdateEnvironment',
	UPDATE_USER = 'finspace:UpdateUser',
}
export enum GROUNDTRUTH_LABELING {
	ASSOCIATE_PATCH_TO_MANIFEST_JOB = 'groundtruthlabeling:AssociatePatchToManifestJob',
	DESCRIBE_CONSOLE_JOB = 'groundtruthlabeling:DescribeConsoleJob',
	LIST_DATASET_OBJECTS = 'groundtruthlabeling:ListDatasetObjects',
	RUN_FILTER_OR_SAMPLE_DATASET_JOB = 'groundtruthlabeling:RunFilterOrSampleDatasetJob',
	RUN_GENERATE_MANIFEST_BY_CRAWLING_JOB = 'groundtruthlabeling:RunGenerateManifestByCrawlingJob',
}
export enum S3_ON_OUTPOSTS {
	ABORT_MULTIPART_UPLOAD = 's3-outposts:AbortMultipartUpload',
	CREATE_ACCESS_POINT = 's3-outposts:CreateAccessPoint',
	CREATE_BUCKET = 's3-outposts:CreateBucket',
	CREATE_ENDPOINT = 's3-outposts:CreateEndpoint',
	DELETE_ACCESS_POINT = 's3-outposts:DeleteAccessPoint',
	DELETE_ACCESS_POINT_POLICY = 's3-outposts:DeleteAccessPointPolicy',
	DELETE_BUCKET = 's3-outposts:DeleteBucket',
	DELETE_BUCKET_POLICY = 's3-outposts:DeleteBucketPolicy',
	DELETE_ENDPOINT = 's3-outposts:DeleteEndpoint',
	DELETE_OBJECT = 's3-outposts:DeleteObject',
	DELETE_OBJECT_TAGGING = 's3-outposts:DeleteObjectTagging',
	GET_ACCESS_POINT = 's3-outposts:GetAccessPoint',
	GET_ACCESS_POINT_POLICY = 's3-outposts:GetAccessPointPolicy',
	GET_BUCKET = 's3-outposts:GetBucket',
	GET_BUCKET_POLICY = 's3-outposts:GetBucketPolicy',
	GET_BUCKET_TAGGING = 's3-outposts:GetBucketTagging',
	GET_LIFECYCLE_CONFIGURATION = 's3-outposts:GetLifecycleConfiguration',
	GET_OBJECT = 's3-outposts:GetObject',
	GET_OBJECT_TAGGING = 's3-outposts:GetObjectTagging',
	LIST_ACCESS_POINTS = 's3-outposts:ListAccessPoints',
	LIST_BUCKET = 's3-outposts:ListBucket',
	LIST_BUCKET_MULTIPART_UPLOADS = 's3-outposts:ListBucketMultipartUploads',
	LIST_ENDPOINTS = 's3-outposts:ListEndpoints',
	LIST_MULTIPART_UPLOAD_PARTS = 's3-outposts:ListMultipartUploadParts',
	LIST_REGIONAL_BUCKETS = 's3-outposts:ListRegionalBuckets',
	LIST_SHARED_ENDPOINTS = 's3-outposts:ListSharedEndpoints',
	PUT_ACCESS_POINT_POLICY = 's3-outposts:PutAccessPointPolicy',
	PUT_BUCKET_POLICY = 's3-outposts:PutBucketPolicy',
	PUT_BUCKET_TAGGING = 's3-outposts:PutBucketTagging',
	PUT_LIFECYCLE_CONFIGURATION = 's3-outposts:PutLifecycleConfiguration',
	PUT_OBJECT = 's3-outposts:PutObject',
	PUT_OBJECT_ACL = 's3-outposts:PutObjectAcl',
	PUT_OBJECT_TAGGING = 's3-outposts:PutObjectTagging',
}
export enum ELEMENTAL_MEDIASTORE {
	CREATE_CONTAINER = 'mediastore:CreateContainer',
	DELETE_CONTAINER = 'mediastore:DeleteContainer',
	DELETE_CONTAINER_POLICY = 'mediastore:DeleteContainerPolicy',
	DELETE_CORS_POLICY = 'mediastore:DeleteCorsPolicy',
	DELETE_LIFECYCLE_POLICY = 'mediastore:DeleteLifecyclePolicy',
	DELETE_METRIC_POLICY = 'mediastore:DeleteMetricPolicy',
	DELETE_OBJECT = 'mediastore:DeleteObject',
	DESCRIBE_CONTAINER = 'mediastore:DescribeContainer',
	DESCRIBE_OBJECT = 'mediastore:DescribeObject',
	GET_CONTAINER_POLICY = 'mediastore:GetContainerPolicy',
	GET_CORS_POLICY = 'mediastore:GetCorsPolicy',
	GET_LIFECYCLE_POLICY = 'mediastore:GetLifecyclePolicy',
	GET_METRIC_POLICY = 'mediastore:GetMetricPolicy',
	GET_OBJECT = 'mediastore:GetObject',
	LIST_CONTAINERS = 'mediastore:ListContainers',
	LIST_ITEMS = 'mediastore:ListItems',
	LIST_TAGS_FOR_RESOURCE = 'mediastore:ListTagsForResource',
	PUT_CONTAINER_POLICY = 'mediastore:PutContainerPolicy',
	PUT_CORS_POLICY = 'mediastore:PutCorsPolicy',
	PUT_LIFECYCLE_POLICY = 'mediastore:PutLifecyclePolicy',
	PUT_METRIC_POLICY = 'mediastore:PutMetricPolicy',
	PUT_OBJECT = 'mediastore:PutObject',
	START_ACCESS_LOGGING = 'mediastore:StartAccessLogging',
	STOP_ACCESS_LOGGING = 'mediastore:StopAccessLogging',
	TAG_RESOURCE = 'mediastore:TagResource',
	UNTAG_RESOURCE = 'mediastore:UntagResource',
}
export enum BUGBUST {
	CREATE_EVENT = 'bugbust:CreateEvent',
	EVALUATE_PROFILING_GROUPS = 'bugbust:EvaluateProfilingGroups',
	GET_EVENT = 'bugbust:GetEvent',
	GET_JOIN_EVENT_STATUS = 'bugbust:GetJoinEventStatus',
	JOIN_EVENT = 'bugbust:JoinEvent',
	LIST_BUGS = 'bugbust:ListBugs',
	LIST_EVENT_PARTICIPANTS = 'bugbust:ListEventParticipants',
	LIST_EVENT_SCORES = 'bugbust:ListEventScores',
	LIST_EVENTS = 'bugbust:ListEvents',
	LIST_PROFILING_GROUPS = 'bugbust:ListProfilingGroups',
	LIST_PULL_REQUESTS = 'bugbust:ListPullRequests',
	LIST_TAGS_FOR_RESOURCE = 'bugbust:ListTagsForResource',
	TAG_RESOURCE = 'bugbust:TagResource',
	UNTAG_RESOURCE = 'bugbust:UntagResource',
	UPDATE_EVENT = 'bugbust:UpdateEvent',
	UPDATE_WORK_ITEM = 'bugbust:UpdateWorkItem',
	UPDATE_WORK_ITEM_ADMIN = 'bugbust:UpdateWorkItemAdmin',
}
export enum HEALTHLAKE {
	CREATE_FHIR_DATASTORE = 'healthlake:CreateFHIRDatastore',
	CREATE_RESOURCE = 'healthlake:CreateResource',
	DELETE_FHIR_DATASTORE = 'healthlake:DeleteFHIRDatastore',
	DELETE_RESOURCE = 'healthlake:DeleteResource',
	DESCRIBE_FHIR_DATASTORE = 'healthlake:DescribeFHIRDatastore',
	DESCRIBE_FHIR_EXPORT_JOB = 'healthlake:DescribeFHIRExportJob',
	DESCRIBE_FHIR_IMPORT_JOB = 'healthlake:DescribeFHIRImportJob',
	GET_CAPABILITIES = 'healthlake:GetCapabilities',
	LIST_FHIR_DATASTORES = 'healthlake:ListFHIRDatastores',
	LIST_FHIR_EXPORT_JOBS = 'healthlake:ListFHIRExportJobs',
	LIST_FHIR_IMPORT_JOBS = 'healthlake:ListFHIRImportJobs',
	LIST_TAGS_FOR_RESOURCE = 'healthlake:ListTagsForResource',
	READ_RESOURCE = 'healthlake:ReadResource',
	SEARCH_WITH_GET = 'healthlake:SearchWithGet',
	SEARCH_WITH_POST = 'healthlake:SearchWithPost',
	START_FHIR_EXPORT_JOB = 'healthlake:StartFHIRExportJob',
	START_FHIR_IMPORT_JOB = 'healthlake:StartFHIRImportJob',
	TAG_RESOURCE = 'healthlake:TagResource',
	UNTAG_RESOURCE = 'healthlake:UntagResource',
	UPDATE_RESOURCE = 'healthlake:UpdateResource',
}
export enum RESOURCE_EXPLORER {
	ASSOCIATE_DEFAULT_VIEW = 'resource-explorer-2:AssociateDefaultView',
	BATCH_GET_VIEW = 'resource-explorer-2:BatchGetView',
	CREATE_INDEX = 'resource-explorer-2:CreateIndex',
	CREATE_VIEW = 'resource-explorer-2:CreateView',
	DELETE_INDEX = 'resource-explorer-2:DeleteIndex',
	DELETE_VIEW = 'resource-explorer-2:DeleteView',
	DISASSOCIATE_DEFAULT_VIEW = 'resource-explorer-2:DisassociateDefaultView',
	GET_DEFAULT_VIEW = 'resource-explorer-2:GetDefaultView',
	GET_INDEX = 'resource-explorer-2:GetIndex',
	GET_VIEW = 'resource-explorer-2:GetView',
	LIST_INDEXES = 'resource-explorer-2:ListIndexes',
	LIST_SUPPORTED_RESOURCE_TYPES = 'resource-explorer-2:ListSupportedResourceTypes',
	LIST_TAGS_FOR_RESOURCE = 'resource-explorer-2:ListTagsForResource',
	LIST_VIEWS = 'resource-explorer-2:ListViews',
	SEARCH = 'resource-explorer-2:Search',
	TAG_RESOURCE = 'resource-explorer-2:TagResource',
	UNTAG_RESOURCE = 'resource-explorer-2:UntagResource',
	UPDATE_INDEX_TYPE = 'resource-explorer-2:UpdateIndexType',
	UPDATE_VIEW = 'resource-explorer-2:UpdateView',
}
export enum IOT_1CLICK {
	ASSOCIATE_DEVICE_WITH_PLACEMENT = 'iot1click:AssociateDeviceWithPlacement',
	CLAIM_DEVICES_BY_CLAIM_CODE = 'iot1click:ClaimDevicesByClaimCode',
	CREATE_PLACEMENT = 'iot1click:CreatePlacement',
	CREATE_PROJECT = 'iot1click:CreateProject',
	DELETE_PLACEMENT = 'iot1click:DeletePlacement',
	DELETE_PROJECT = 'iot1click:DeleteProject',
	DESCRIBE_DEVICE = 'iot1click:DescribeDevice',
	DESCRIBE_PLACEMENT = 'iot1click:DescribePlacement',
	DESCRIBE_PROJECT = 'iot1click:DescribeProject',
	DISASSOCIATE_DEVICE_FROM_PLACEMENT = 'iot1click:DisassociateDeviceFromPlacement',
	FINALIZE_DEVICE_CLAIM = 'iot1click:FinalizeDeviceClaim',
	GET_DEVICE_METHODS = 'iot1click:GetDeviceMethods',
	GET_DEVICES_IN_PLACEMENT = 'iot1click:GetDevicesInPlacement',
	INITIATE_DEVICE_CLAIM = 'iot1click:InitiateDeviceClaim',
	INVOKE_DEVICE_METHOD = 'iot1click:InvokeDeviceMethod',
	LIST_DEVICE_EVENTS = 'iot1click:ListDeviceEvents',
	LIST_DEVICES = 'iot1click:ListDevices',
	LIST_PLACEMENTS = 'iot1click:ListPlacements',
	LIST_PROJECTS = 'iot1click:ListProjects',
	LIST_TAGS_FOR_RESOURCE = 'iot1click:ListTagsForResource',
	TAG_RESOURCE = 'iot1click:TagResource',
	UNCLAIM_DEVICE = 'iot1click:UnclaimDevice',
	UNTAG_RESOURCE = 'iot1click:UntagResource',
	UPDATE_DEVICE_STATE = 'iot1click:UpdateDeviceState',
	UPDATE_PLACEMENT = 'iot1click:UpdatePlacement',
	UPDATE_PROJECT = 'iot1click:UpdateProject',
}
export enum MANAGED_STREAMING_FOR_KAFKA_CONNECT {
	CREATE_CONNECTOR = 'kafkaconnect:CreateConnector',
	CREATE_CUSTOM_PLUGIN = 'kafkaconnect:CreateCustomPlugin',
	CREATE_WORKER_CONFIGURATION = 'kafkaconnect:CreateWorkerConfiguration',
	DELETE_CONNECTOR = 'kafkaconnect:DeleteConnector',
	DELETE_CUSTOM_PLUGIN = 'kafkaconnect:DeleteCustomPlugin',
	DESCRIBE_CONNECTOR = 'kafkaconnect:DescribeConnector',
	DESCRIBE_CUSTOM_PLUGIN = 'kafkaconnect:DescribeCustomPlugin',
	DESCRIBE_WORKER_CONFIGURATION = 'kafkaconnect:DescribeWorkerConfiguration',
	LIST_CONNECTORS = 'kafkaconnect:ListConnectors',
	LIST_CUSTOM_PLUGINS = 'kafkaconnect:ListCustomPlugins',
	LIST_WORKER_CONFIGURATIONS = 'kafkaconnect:ListWorkerConfigurations',
	UPDATE_CONNECTOR = 'kafkaconnect:UpdateConnector',
}
export enum CODEPIPELINE {
	ACKNOWLEDGE_JOB = 'codepipeline:AcknowledgeJob',
	ACKNOWLEDGE_THIRD_PARTY_JOB = 'codepipeline:AcknowledgeThirdPartyJob',
	CREATE_CUSTOM_ACTION_TYPE = 'codepipeline:CreateCustomActionType',
	CREATE_PIPELINE = 'codepipeline:CreatePipeline',
	DELETE_CUSTOM_ACTION_TYPE = 'codepipeline:DeleteCustomActionType',
	DELETE_PIPELINE = 'codepipeline:DeletePipeline',
	DELETE_WEBHOOK = 'codepipeline:DeleteWebhook',
	DEREGISTER_WEBHOOK_WITH_THIRD_PARTY = 'codepipeline:DeregisterWebhookWithThirdParty',
	DISABLE_STAGE_TRANSITION = 'codepipeline:DisableStageTransition',
	ENABLE_STAGE_TRANSITION = 'codepipeline:EnableStageTransition',
	GET_ACTION_TYPE = 'codepipeline:GetActionType',
	GET_JOB_DETAILS = 'codepipeline:GetJobDetails',
	GET_PIPELINE = 'codepipeline:GetPipeline',
	GET_PIPELINE_EXECUTION = 'codepipeline:GetPipelineExecution',
	GET_PIPELINE_STATE = 'codepipeline:GetPipelineState',
	GET_THIRD_PARTY_JOB_DETAILS = 'codepipeline:GetThirdPartyJobDetails',
	LIST_ACTION_EXECUTIONS = 'codepipeline:ListActionExecutions',
	LIST_ACTION_TYPES = 'codepipeline:ListActionTypes',
	LIST_PIPELINE_EXECUTIONS = 'codepipeline:ListPipelineExecutions',
	LIST_PIPELINES = 'codepipeline:ListPipelines',
	LIST_TAGS_FOR_RESOURCE = 'codepipeline:ListTagsForResource',
	LIST_WEBHOOKS = 'codepipeline:ListWebhooks',
	POLL_FOR_JOBS = 'codepipeline:PollForJobs',
	POLL_FOR_THIRD_PARTY_JOBS = 'codepipeline:PollForThirdPartyJobs',
	PUT_ACTION_REVISION = 'codepipeline:PutActionRevision',
	PUT_APPROVAL_RESULT = 'codepipeline:PutApprovalResult',
	PUT_JOB_FAILURE_RESULT = 'codepipeline:PutJobFailureResult',
	PUT_JOB_SUCCESS_RESULT = 'codepipeline:PutJobSuccessResult',
	PUT_THIRD_PARTY_JOB_FAILURE_RESULT = 'codepipeline:PutThirdPartyJobFailureResult',
	PUT_THIRD_PARTY_JOB_SUCCESS_RESULT = 'codepipeline:PutThirdPartyJobSuccessResult',
	PUT_WEBHOOK = 'codepipeline:PutWebhook',
	REGISTER_WEBHOOK_WITH_THIRD_PARTY = 'codepipeline:RegisterWebhookWithThirdParty',
	RETRY_STAGE_EXECUTION = 'codepipeline:RetryStageExecution',
	START_PIPELINE_EXECUTION = 'codepipeline:StartPipelineExecution',
	STOP_PIPELINE_EXECUTION = 'codepipeline:StopPipelineExecution',
	TAG_RESOURCE = 'codepipeline:TagResource',
	UNTAG_RESOURCE = 'codepipeline:UntagResource',
	UPDATE_ACTION_TYPE = 'codepipeline:UpdateActionType',
	UPDATE_PIPELINE = 'codepipeline:UpdatePipeline',
}
export enum SECURITY_HUB {
	ACCEPT_ADMINISTRATOR_INVITATION = 'securityhub:AcceptAdministratorInvitation',
	ACCEPT_INVITATION = 'securityhub:AcceptInvitation',
	BATCH_DISABLE_STANDARDS = 'securityhub:BatchDisableStandards',
	BATCH_ENABLE_STANDARDS = 'securityhub:BatchEnableStandards',
	BATCH_GET_STANDARDS_CONTROL_ASSOCIATIONS = 'securityhub:BatchGetStandardsControlAssociations',
	BATCH_IMPORT_FINDINGS = 'securityhub:BatchImportFindings',
	BATCH_UPDATE_FINDINGS = 'securityhub:BatchUpdateFindings',
	BATCH_UPDATE_STANDARDS_CONTROL_ASSOCIATIONS = 'securityhub:BatchUpdateStandardsControlAssociations',
	CREATE_ACTION_TARGET = 'securityhub:CreateActionTarget',
	CREATE_FINDING_AGGREGATOR = 'securityhub:CreateFindingAggregator',
	CREATE_INSIGHT = 'securityhub:CreateInsight',
	CREATE_MEMBERS = 'securityhub:CreateMembers',
	DECLINE_INVITATIONS = 'securityhub:DeclineInvitations',
	DELETE_ACTION_TARGET = 'securityhub:DeleteActionTarget',
	DELETE_FINDING_AGGREGATOR = 'securityhub:DeleteFindingAggregator',
	DELETE_INSIGHT = 'securityhub:DeleteInsight',
	DELETE_INVITATIONS = 'securityhub:DeleteInvitations',
	DELETE_MEMBERS = 'securityhub:DeleteMembers',
	DESCRIBE_ACTION_TARGETS = 'securityhub:DescribeActionTargets',
	DESCRIBE_HUB = 'securityhub:DescribeHub',
	DESCRIBE_ORGANIZATION_CONFIGURATION = 'securityhub:DescribeOrganizationConfiguration',
	DESCRIBE_PRODUCTS = 'securityhub:DescribeProducts',
	DESCRIBE_STANDARDS = 'securityhub:DescribeStandards',
	DESCRIBE_STANDARDS_CONTROLS = 'securityhub:DescribeStandardsControls',
	DISABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'securityhub:DisableImportFindingsForProduct',
	DISABLE_ORGANIZATION_ADMIN_ACCOUNT = 'securityhub:DisableOrganizationAdminAccount',
	DISABLE_SECURITY_HUB = 'securityhub:DisableSecurityHub',
	DISASSOCIATE_FROM_ADMINISTRATOR_ACCOUNT = 'securityhub:DisassociateFromAdministratorAccount',
	DISASSOCIATE_FROM_MASTER_ACCOUNT = 'securityhub:DisassociateFromMasterAccount',
	DISASSOCIATE_MEMBERS = 'securityhub:DisassociateMembers',
	ENABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'securityhub:EnableImportFindingsForProduct',
	ENABLE_ORGANIZATION_ADMIN_ACCOUNT = 'securityhub:EnableOrganizationAdminAccount',
	ENABLE_SECURITY_HUB = 'securityhub:EnableSecurityHub',
	GET_ADHOC_INSIGHT_RESULTS = 'securityhub:GetAdhocInsightResults',
	GET_ADMINISTRATOR_ACCOUNT = 'securityhub:GetAdministratorAccount',
	GET_CONTROL_FINDING_SUMMARY = 'securityhub:GetControlFindingSummary',
	GET_ENABLED_STANDARDS = 'securityhub:GetEnabledStandards',
	GET_FINDING_AGGREGATOR = 'securityhub:GetFindingAggregator',
	GET_FINDINGS = 'securityhub:GetFindings',
	GET_FREE_TRIAL_END_DATE = 'securityhub:GetFreeTrialEndDate',
	GET_FREE_TRIAL_USAGE = 'securityhub:GetFreeTrialUsage',
	GET_INSIGHT_FINDING_TREND = 'securityhub:GetInsightFindingTrend',
	GET_INSIGHT_RESULTS = 'securityhub:GetInsightResults',
	GET_INSIGHTS = 'securityhub:GetInsights',
	GET_INVITATIONS_COUNT = 'securityhub:GetInvitationsCount',
	GET_MASTER_ACCOUNT = 'securityhub:GetMasterAccount',
	GET_MEMBERS = 'securityhub:GetMembers',
	GET_USAGE = 'securityhub:GetUsage',
	INVITE_MEMBERS = 'securityhub:InviteMembers',
	LIST_CONTROL_EVALUATION_SUMMARIES = 'securityhub:ListControlEvaluationSummaries',
	LIST_ENABLED_PRODUCTS_FOR_IMPORT = 'securityhub:ListEnabledProductsForImport',
	LIST_FINDING_AGGREGATORS = 'securityhub:ListFindingAggregators',
	LIST_INVITATIONS = 'securityhub:ListInvitations',
	LIST_MEMBERS = 'securityhub:ListMembers',
	LIST_ORGANIZATION_ADMIN_ACCOUNTS = 'securityhub:ListOrganizationAdminAccounts',
	LIST_SECURITY_CONTROL_DEFINITIONS = 'securityhub:ListSecurityControlDefinitions',
	LIST_TAGS_FOR_RESOURCE = 'securityhub:ListTagsForResource',
	SEND_FINDING_EVENTS = 'securityhub:SendFindingEvents',
	SEND_INSIGHT_EVENTS = 'securityhub:SendInsightEvents',
	TAG_RESOURCE = 'securityhub:TagResource',
	UNTAG_RESOURCE = 'securityhub:UntagResource',
	UPDATE_ACTION_TARGET = 'securityhub:UpdateActionTarget',
	UPDATE_FINDING_AGGREGATOR = 'securityhub:UpdateFindingAggregator',
	UPDATE_FINDINGS = 'securityhub:UpdateFindings',
	UPDATE_INSIGHT = 'securityhub:UpdateInsight',
	UPDATE_ORGANIZATION_CONFIGURATION = 'securityhub:UpdateOrganizationConfiguration',
	UPDATE_SECURITY_HUB_CONFIGURATION = 'securityhub:UpdateSecurityHubConfiguration',
	UPDATE_STANDARDS_CONTROL = 'securityhub:UpdateStandardsControl',
}
export enum EC2_IMAGE_BUILDER {
	CANCEL_IMAGE_CREATION = 'imagebuilder:CancelImageCreation',
	CREATE_COMPONENT = 'imagebuilder:CreateComponent',
	CREATE_CONTAINER_RECIPE = 'imagebuilder:CreateContainerRecipe',
	CREATE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:CreateDistributionConfiguration',
	CREATE_IMAGE = 'imagebuilder:CreateImage',
	CREATE_IMAGE_PIPELINE = 'imagebuilder:CreateImagePipeline',
	CREATE_IMAGE_RECIPE = 'imagebuilder:CreateImageRecipe',
	CREATE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:CreateInfrastructureConfiguration',
	DELETE_COMPONENT = 'imagebuilder:DeleteComponent',
	DELETE_CONTAINER_RECIPE = 'imagebuilder:DeleteContainerRecipe',
	DELETE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:DeleteDistributionConfiguration',
	DELETE_IMAGE = 'imagebuilder:DeleteImage',
	DELETE_IMAGE_PIPELINE = 'imagebuilder:DeleteImagePipeline',
	DELETE_IMAGE_RECIPE = 'imagebuilder:DeleteImageRecipe',
	DELETE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:DeleteInfrastructureConfiguration',
	GET_COMPONENT = 'imagebuilder:GetComponent',
	GET_COMPONENT_POLICY = 'imagebuilder:GetComponentPolicy',
	GET_CONTAINER_RECIPE = 'imagebuilder:GetContainerRecipe',
	GET_CONTAINER_RECIPE_POLICY = 'imagebuilder:GetContainerRecipePolicy',
	GET_DISTRIBUTION_CONFIGURATION = 'imagebuilder:GetDistributionConfiguration',
	GET_IMAGE = 'imagebuilder:GetImage',
	GET_IMAGE_PIPELINE = 'imagebuilder:GetImagePipeline',
	GET_IMAGE_POLICY = 'imagebuilder:GetImagePolicy',
	GET_IMAGE_RECIPE = 'imagebuilder:GetImageRecipe',
	GET_IMAGE_RECIPE_POLICY = 'imagebuilder:GetImageRecipePolicy',
	GET_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:GetInfrastructureConfiguration',
	IMPORT_COMPONENT = 'imagebuilder:ImportComponent',
	IMPORT_VM_IMAGE = 'imagebuilder:ImportVmImage',
	LIST_COMPONENT_BUILD_VERSIONS = 'imagebuilder:ListComponentBuildVersions',
	LIST_COMPONENTS = 'imagebuilder:ListComponents',
	LIST_CONTAINER_RECIPES = 'imagebuilder:ListContainerRecipes',
	LIST_DISTRIBUTION_CONFIGURATIONS = 'imagebuilder:ListDistributionConfigurations',
	LIST_IMAGE_BUILD_VERSIONS = 'imagebuilder:ListImageBuildVersions',
	LIST_IMAGE_PACKAGES = 'imagebuilder:ListImagePackages',
	LIST_IMAGE_PIPELINE_IMAGES = 'imagebuilder:ListImagePipelineImages',
	LIST_IMAGE_PIPELINES = 'imagebuilder:ListImagePipelines',
	LIST_IMAGE_RECIPES = 'imagebuilder:ListImageRecipes',
	LIST_IMAGES = 'imagebuilder:ListImages',
	LIST_INFRASTRUCTURE_CONFIGURATIONS = 'imagebuilder:ListInfrastructureConfigurations',
	LIST_TAGS_FOR_RESOURCE = 'imagebuilder:ListTagsForResource',
	PUT_COMPONENT_POLICY = 'imagebuilder:PutComponentPolicy',
	PUT_CONTAINER_RECIPE_POLICY = 'imagebuilder:PutContainerRecipePolicy',
	PUT_IMAGE_POLICY = 'imagebuilder:PutImagePolicy',
	PUT_IMAGE_RECIPE_POLICY = 'imagebuilder:PutImageRecipePolicy',
	START_IMAGE_PIPELINE_EXECUTION = 'imagebuilder:StartImagePipelineExecution',
	TAG_RESOURCE = 'imagebuilder:TagResource',
	UNTAG_RESOURCE = 'imagebuilder:UntagResource',
	UPDATE_DISTRIBUTION_CONFIGURATION = 'imagebuilder:UpdateDistributionConfiguration',
	UPDATE_IMAGE_PIPELINE = 'imagebuilder:UpdateImagePipeline',
	UPDATE_INFRASTRUCTURE_CONFIGURATION = 'imagebuilder:UpdateInfrastructureConfiguration',
}
export enum SQS {
	ADD_PERMISSION = 'sqs:AddPermission',
	CHANGE_MESSAGE_VISIBILITY = 'sqs:ChangeMessageVisibility',
	CREATE_QUEUE = 'sqs:CreateQueue',
	DELETE_MESSAGE = 'sqs:DeleteMessage',
	DELETE_QUEUE = 'sqs:DeleteQueue',
	GET_QUEUE_ATTRIBUTES = 'sqs:GetQueueAttributes',
	GET_QUEUE_URL = 'sqs:GetQueueUrl',
	LIST_DEAD_LETTER_SOURCE_QUEUES = 'sqs:ListDeadLetterSourceQueues',
	LIST_QUEUE_TAGS = 'sqs:ListQueueTags',
	LIST_QUEUES = 'sqs:ListQueues',
	PURGE_QUEUE = 'sqs:PurgeQueue',
	RECEIVE_MESSAGE = 'sqs:ReceiveMessage',
	REMOVE_PERMISSION = 'sqs:RemovePermission',
	SEND_MESSAGE = 'sqs:SendMessage',
	SET_QUEUE_ATTRIBUTES = 'sqs:SetQueueAttributes',
	TAG_QUEUE = 'sqs:TagQueue',
	UNTAG_QUEUE = 'sqs:UntagQueue',
}
export enum CLOUD_MAP {
	CREATE_HTTP_NAMESPACE = 'servicediscovery:CreateHttpNamespace',
	CREATE_PRIVATE_DNS_NAMESPACE = 'servicediscovery:CreatePrivateDnsNamespace',
	CREATE_PUBLIC_DNS_NAMESPACE = 'servicediscovery:CreatePublicDnsNamespace',
	CREATE_SERVICE = 'servicediscovery:CreateService',
	DELETE_NAMESPACE = 'servicediscovery:DeleteNamespace',
	DELETE_SERVICE = 'servicediscovery:DeleteService',
	DEREGISTER_INSTANCE = 'servicediscovery:DeregisterInstance',
	DISCOVER_INSTANCES = 'servicediscovery:DiscoverInstances',
	GET_INSTANCE = 'servicediscovery:GetInstance',
	GET_INSTANCES_HEALTH_STATUS = 'servicediscovery:GetInstancesHealthStatus',
	GET_NAMESPACE = 'servicediscovery:GetNamespace',
	GET_OPERATION = 'servicediscovery:GetOperation',
	GET_SERVICE = 'servicediscovery:GetService',
	LIST_INSTANCES = 'servicediscovery:ListInstances',
	LIST_NAMESPACES = 'servicediscovery:ListNamespaces',
	LIST_OPERATIONS = 'servicediscovery:ListOperations',
	LIST_SERVICES = 'servicediscovery:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'servicediscovery:ListTagsForResource',
	REGISTER_INSTANCE = 'servicediscovery:RegisterInstance',
	TAG_RESOURCE = 'servicediscovery:TagResource',
	UNTAG_RESOURCE = 'servicediscovery:UntagResource',
	UPDATE_HTTP_NAMESPACE = 'servicediscovery:UpdateHttpNamespace',
	UPDATE_INSTANCE_CUSTOM_HEALTH_STATUS = 'servicediscovery:UpdateInstanceCustomHealthStatus',
	UPDATE_PRIVATE_DNS_NAMESPACE = 'servicediscovery:UpdatePrivateDnsNamespace',
	UPDATE_PUBLIC_DNS_NAMESPACE = 'servicediscovery:UpdatePublicDnsNamespace',
	UPDATE_SERVICE = 'servicediscovery:UpdateService',
}
export enum TIROS {
	CREATE_QUERY = 'tiros:CreateQuery',
	EXTEND_QUERY = 'tiros:ExtendQuery',
	GET_QUERY_ANSWER = 'tiros:GetQueryAnswer',
	GET_QUERY_EXPLANATION = 'tiros:GetQueryExplanation',
	GET_QUERY_EXTENSION_ACCOUNTS = 'tiros:GetQueryExtensionAccounts',
}
export enum COMPUTE_OPTIMIZER {
	DELETE_RECOMMENDATION_PREFERENCES = 'compute-optimizer:DeleteRecommendationPreferences',
	DESCRIBE_RECOMMENDATION_EXPORT_JOBS = 'compute-optimizer:DescribeRecommendationExportJobs',
	EXPORT_AUTO_SCALING_GROUP_RECOMMENDATIONS = 'compute-optimizer:ExportAutoScalingGroupRecommendations',
	EXPORT_EBS_VOLUME_RECOMMENDATIONS = 'compute-optimizer:ExportEBSVolumeRecommendations',
	EXPORT_EC_2_INSTANCE_RECOMMENDATIONS = 'compute-optimizer:ExportEC2InstanceRecommendations',
	EXPORT_ECS_SERVICE_RECOMMENDATIONS = 'compute-optimizer:ExportECSServiceRecommendations',
	EXPORT_LAMBDA_FUNCTION_RECOMMENDATIONS = 'compute-optimizer:ExportLambdaFunctionRecommendations',
	GET_AUTO_SCALING_GROUP_RECOMMENDATIONS = 'compute-optimizer:GetAutoScalingGroupRecommendations',
	GET_EBS_VOLUME_RECOMMENDATIONS = 'compute-optimizer:GetEBSVolumeRecommendations',
	GET_EC_2_INSTANCE_RECOMMENDATIONS = 'compute-optimizer:GetEC2InstanceRecommendations',
	GET_EC_2_RECOMMENDATION_PROJECTED_METRICS = 'compute-optimizer:GetEC2RecommendationProjectedMetrics',
	GET_ECS_SERVICE_RECOMMENDATION_PROJECTED_METRICS = 'compute-optimizer:GetECSServiceRecommendationProjectedMetrics',
	GET_ECS_SERVICE_RECOMMENDATIONS = 'compute-optimizer:GetECSServiceRecommendations',
	GET_EFFECTIVE_RECOMMENDATION_PREFERENCES = 'compute-optimizer:GetEffectiveRecommendationPreferences',
	GET_ENROLLMENT_STATUS = 'compute-optimizer:GetEnrollmentStatus',
	GET_ENROLLMENT_STATUSES_FOR_ORGANIZATION = 'compute-optimizer:GetEnrollmentStatusesForOrganization',
	GET_LAMBDA_FUNCTION_RECOMMENDATIONS = 'compute-optimizer:GetLambdaFunctionRecommendations',
	GET_RECOMMENDATION_PREFERENCES = 'compute-optimizer:GetRecommendationPreferences',
	GET_RECOMMENDATION_SUMMARIES = 'compute-optimizer:GetRecommendationSummaries',
	PUT_RECOMMENDATION_PREFERENCES = 'compute-optimizer:PutRecommendationPreferences',
	UPDATE_ENROLLMENT_STATUS = 'compute-optimizer:UpdateEnrollmentStatus',
}
export enum S3_GLACIER {
	ABORT_MULTIPART_UPLOAD = 'glacier:AbortMultipartUpload',
	ABORT_VAULT_LOCK = 'glacier:AbortVaultLock',
	ADD_TAGS_TO_VAULT = 'glacier:AddTagsToVault',
	COMPLETE_MULTIPART_UPLOAD = 'glacier:CompleteMultipartUpload',
	COMPLETE_VAULT_LOCK = 'glacier:CompleteVaultLock',
	CREATE_VAULT = 'glacier:CreateVault',
	DELETE_ARCHIVE = 'glacier:DeleteArchive',
	DELETE_VAULT = 'glacier:DeleteVault',
	DELETE_VAULT_ACCESS_POLICY = 'glacier:DeleteVaultAccessPolicy',
	DELETE_VAULT_NOTIFICATIONS = 'glacier:DeleteVaultNotifications',
	DESCRIBE_JOB = 'glacier:DescribeJob',
	DESCRIBE_VAULT = 'glacier:DescribeVault',
	GET_DATA_RETRIEVAL_POLICY = 'glacier:GetDataRetrievalPolicy',
	GET_JOB_OUTPUT = 'glacier:GetJobOutput',
	GET_VAULT_ACCESS_POLICY = 'glacier:GetVaultAccessPolicy',
	GET_VAULT_LOCK = 'glacier:GetVaultLock',
	GET_VAULT_NOTIFICATIONS = 'glacier:GetVaultNotifications',
	INITIATE_JOB = 'glacier:InitiateJob',
	INITIATE_MULTIPART_UPLOAD = 'glacier:InitiateMultipartUpload',
	INITIATE_VAULT_LOCK = 'glacier:InitiateVaultLock',
	LIST_JOBS = 'glacier:ListJobs',
	LIST_MULTIPART_UPLOADS = 'glacier:ListMultipartUploads',
	LIST_PARTS = 'glacier:ListParts',
	LIST_PROVISIONED_CAPACITY = 'glacier:ListProvisionedCapacity',
	LIST_TAGS_FOR_VAULT = 'glacier:ListTagsForVault',
	LIST_VAULTS = 'glacier:ListVaults',
	PURCHASE_PROVISIONED_CAPACITY = 'glacier:PurchaseProvisionedCapacity',
	REMOVE_TAGS_FROM_VAULT = 'glacier:RemoveTagsFromVault',
	SET_DATA_RETRIEVAL_POLICY = 'glacier:SetDataRetrievalPolicy',
	SET_VAULT_ACCESS_POLICY = 'glacier:SetVaultAccessPolicy',
	SET_VAULT_NOTIFICATIONS = 'glacier:SetVaultNotifications',
	UPLOAD_ARCHIVE = 'glacier:UploadArchive',
	UPLOAD_MULTIPART_PART = 'glacier:UploadMultipartPart',
}
export enum REKOGNITION {
	COMPARE_FACES = 'rekognition:CompareFaces',
	COPY_PROJECT_VERSION = 'rekognition:CopyProjectVersion',
	CREATE_COLLECTION = 'rekognition:CreateCollection',
	CREATE_DATASET = 'rekognition:CreateDataset',
	CREATE_PROJECT = 'rekognition:CreateProject',
	CREATE_PROJECT_VERSION = 'rekognition:CreateProjectVersion',
	CREATE_STREAM_PROCESSOR = 'rekognition:CreateStreamProcessor',
	DELETE_COLLECTION = 'rekognition:DeleteCollection',
	DELETE_DATASET = 'rekognition:DeleteDataset',
	DELETE_FACES = 'rekognition:DeleteFaces',
	DELETE_PROJECT = 'rekognition:DeleteProject',
	DELETE_PROJECT_POLICY = 'rekognition:DeleteProjectPolicy',
	DELETE_PROJECT_VERSION = 'rekognition:DeleteProjectVersion',
	DELETE_STREAM_PROCESSOR = 'rekognition:DeleteStreamProcessor',
	DESCRIBE_COLLECTION = 'rekognition:DescribeCollection',
	DESCRIBE_DATASET = 'rekognition:DescribeDataset',
	DESCRIBE_PROJECT_VERSIONS = 'rekognition:DescribeProjectVersions',
	DESCRIBE_PROJECTS = 'rekognition:DescribeProjects',
	DESCRIBE_STREAM_PROCESSOR = 'rekognition:DescribeStreamProcessor',
	DETECT_CUSTOM_LABELS = 'rekognition:DetectCustomLabels',
	DETECT_FACES = 'rekognition:DetectFaces',
	DETECT_LABELS = 'rekognition:DetectLabels',
	DETECT_MODERATION_LABELS = 'rekognition:DetectModerationLabels',
	DETECT_PROTECTIVE_EQUIPMENT = 'rekognition:DetectProtectiveEquipment',
	DETECT_TEXT = 'rekognition:DetectText',
	DISTRIBUTE_DATASET_ENTRIES = 'rekognition:DistributeDatasetEntries',
	GET_CELEBRITY_INFO = 'rekognition:GetCelebrityInfo',
	GET_CELEBRITY_RECOGNITION = 'rekognition:GetCelebrityRecognition',
	GET_CONTENT_MODERATION = 'rekognition:GetContentModeration',
	GET_FACE_DETECTION = 'rekognition:GetFaceDetection',
	GET_FACE_SEARCH = 'rekognition:GetFaceSearch',
	GET_LABEL_DETECTION = 'rekognition:GetLabelDetection',
	GET_PERSON_TRACKING = 'rekognition:GetPersonTracking',
	GET_SEGMENT_DETECTION = 'rekognition:GetSegmentDetection',
	GET_TEXT_DETECTION = 'rekognition:GetTextDetection',
	INDEX_FACES = 'rekognition:IndexFaces',
	LIST_COLLECTIONS = 'rekognition:ListCollections',
	LIST_DATASET_ENTRIES = 'rekognition:ListDatasetEntries',
	LIST_DATASET_LABELS = 'rekognition:ListDatasetLabels',
	LIST_FACES = 'rekognition:ListFaces',
	LIST_PROJECT_POLICIES = 'rekognition:ListProjectPolicies',
	LIST_STREAM_PROCESSORS = 'rekognition:ListStreamProcessors',
	LIST_TAGS_FOR_RESOURCE = 'rekognition:ListTagsForResource',
	PUT_PROJECT_POLICY = 'rekognition:PutProjectPolicy',
	RECOGNIZE_CELEBRITIES = 'rekognition:RecognizeCelebrities',
	SEARCH_FACES = 'rekognition:SearchFaces',
	SEARCH_FACES_BY_IMAGE = 'rekognition:SearchFacesByImage',
	START_CELEBRITY_RECOGNITION = 'rekognition:StartCelebrityRecognition',
	START_CONTENT_MODERATION = 'rekognition:StartContentModeration',
	START_FACE_DETECTION = 'rekognition:StartFaceDetection',
	START_FACE_SEARCH = 'rekognition:StartFaceSearch',
	START_LABEL_DETECTION = 'rekognition:StartLabelDetection',
	START_PERSON_TRACKING = 'rekognition:StartPersonTracking',
	START_PROJECT_VERSION = 'rekognition:StartProjectVersion',
	START_SEGMENT_DETECTION = 'rekognition:StartSegmentDetection',
	START_STREAM_PROCESSOR = 'rekognition:StartStreamProcessor',
	START_TEXT_DETECTION = 'rekognition:StartTextDetection',
	STOP_PROJECT_VERSION = 'rekognition:StopProjectVersion',
	STOP_STREAM_PROCESSOR = 'rekognition:StopStreamProcessor',
	TAG_RESOURCE = 'rekognition:TagResource',
	UNTAG_RESOURCE = 'rekognition:UntagResource',
	UPDATE_DATASET_ENTRIES = 'rekognition:UpdateDatasetEntries',
	UPDATE_STREAM_PROCESSOR = 'rekognition:UpdateStreamProcessor',
}
export enum LICENSE_MANAGER_LINUX_SUBSCRIPTIONS_MANAGER {
	GET_SERVICE_SETTINGS = 'license-manager-linux-subscriptions:GetServiceSettings',
	LIST_LINUX_SUBSCRIPTION_INSTANCES = 'license-manager-linux-subscriptions:ListLinuxSubscriptionInstances',
	LIST_LINUX_SUBSCRIPTIONS = 'license-manager-linux-subscriptions:ListLinuxSubscriptions',
	UPDATE_SERVICE_SETTINGS = 'license-manager-linux-subscriptions:UpdateServiceSettings',
}
export enum LAUNCH_WIZARD {
	DELETE_APP = 'launchwizard:DeleteApp',
	DESCRIBE_PROVISIONED_APP = 'launchwizard:DescribeProvisionedApp',
	DESCRIBE_PROVISIONING_EVENTS = 'launchwizard:DescribeProvisioningEvents',
	GET_INFRASTRUCTURE_SUGGESTION = 'launchwizard:GetInfrastructureSuggestion',
	GET_IP_ADDRESS = 'launchwizard:GetIpAddress',
	GET_RESOURCE_COST_ESTIMATE = 'launchwizard:GetResourceCostEstimate',
	LIST_PROVISIONED_APPS = 'launchwizard:ListProvisionedApps',
	START_PROVISIONING = 'launchwizard:StartProvisioning',
}
export enum SYSTEMS_MANAGER_FOR_SAP {
	BACKUP_DATABASE = 'ssm-sap:BackupDatabase',
	DELETE_RESOURCE_PERMISSION = 'ssm-sap:DeleteResourcePermission',
	DEREGISTER_APPLICATION = 'ssm-sap:DeregisterApplication',
	GET_APPLICATION = 'ssm-sap:GetApplication',
	GET_COMPONENT = 'ssm-sap:GetComponent',
	GET_DATABASE = 'ssm-sap:GetDatabase',
	GET_OPERATION = 'ssm-sap:GetOperation',
	GET_RESOURCE_PERMISSION = 'ssm-sap:GetResourcePermission',
	LIST_APPLICATIONS = 'ssm-sap:ListApplications',
	LIST_COMPONENTS = 'ssm-sap:ListComponents',
	LIST_DATABASES = 'ssm-sap:ListDatabases',
	LIST_OPERATIONS = 'ssm-sap:ListOperations',
	LIST_TAGS_FOR_RESOURCE = 'ssm-sap:ListTagsForResource',
	PUT_RESOURCE_PERMISSION = 'ssm-sap:PutResourcePermission',
	REGISTER_APPLICATION = 'ssm-sap:RegisterApplication',
	RESTORE_DATABASE = 'ssm-sap:RestoreDatabase',
	TAG_RESOURCE = 'ssm-sap:TagResource',
	UNTAG_RESOURCE = 'ssm-sap:UntagResource',
	UPDATE_APPLICATION_SETTINGS = 'ssm-sap:UpdateApplicationSettings',
	UPDATE_HANA_BACKUP_SETTINGS = 'ssm-sap:UpdateHANABackupSettings',
}
export enum ELEMENTAL_MEDIACONVERT {
	ASSOCIATE_CERTIFICATE = 'mediaconvert:AssociateCertificate',
	CANCEL_JOB = 'mediaconvert:CancelJob',
	CREATE_JOB = 'mediaconvert:CreateJob',
	CREATE_JOB_TEMPLATE = 'mediaconvert:CreateJobTemplate',
	CREATE_PRESET = 'mediaconvert:CreatePreset',
	CREATE_QUEUE = 'mediaconvert:CreateQueue',
	DELETE_JOB_TEMPLATE = 'mediaconvert:DeleteJobTemplate',
	DELETE_POLICY = 'mediaconvert:DeletePolicy',
	DELETE_PRESET = 'mediaconvert:DeletePreset',
	DELETE_QUEUE = 'mediaconvert:DeleteQueue',
	DESCRIBE_ENDPOINTS = 'mediaconvert:DescribeEndpoints',
	DISASSOCIATE_CERTIFICATE = 'mediaconvert:DisassociateCertificate',
	GET_JOB = 'mediaconvert:GetJob',
	GET_JOB_TEMPLATE = 'mediaconvert:GetJobTemplate',
	GET_POLICY = 'mediaconvert:GetPolicy',
	GET_PRESET = 'mediaconvert:GetPreset',
	GET_QUEUE = 'mediaconvert:GetQueue',
	LIST_JOB_TEMPLATES = 'mediaconvert:ListJobTemplates',
	LIST_JOBS = 'mediaconvert:ListJobs',
	LIST_PRESETS = 'mediaconvert:ListPresets',
	LIST_QUEUES = 'mediaconvert:ListQueues',
	LIST_TAGS_FOR_RESOURCE = 'mediaconvert:ListTagsForResource',
	PUT_POLICY = 'mediaconvert:PutPolicy',
	TAG_RESOURCE = 'mediaconvert:TagResource',
	UNTAG_RESOURCE = 'mediaconvert:UntagResource',
	UPDATE_JOB_TEMPLATE = 'mediaconvert:UpdateJobTemplate',
	UPDATE_PRESET = 'mediaconvert:UpdatePreset',
	UPDATE_QUEUE = 'mediaconvert:UpdateQueue',
}
export enum SERVICE_QUOTAS {
	ASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'servicequotas:AssociateServiceQuotaTemplate',
	DELETE_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'servicequotas:DeleteServiceQuotaIncreaseRequestFromTemplate',
	DISASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'servicequotas:DisassociateServiceQuotaTemplate',
	GET_AWS_DEFAULT_SERVICE_QUOTA = 'servicequotas:GetAWSDefaultServiceQuota',
	GET_ASSOCIATION_FOR_SERVICE_QUOTA_TEMPLATE = 'servicequotas:GetAssociationForServiceQuotaTemplate',
	GET_REQUESTED_SERVICE_QUOTA_CHANGE = 'servicequotas:GetRequestedServiceQuotaChange',
	GET_SERVICE_QUOTA = 'servicequotas:GetServiceQuota',
	GET_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'servicequotas:GetServiceQuotaIncreaseRequestFromTemplate',
	LIST_AWS_DEFAULT_SERVICE_QUOTAS = 'servicequotas:ListAWSDefaultServiceQuotas',
	LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY = 'servicequotas:ListRequestedServiceQuotaChangeHistory',
	LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY_BY_QUOTA = 'servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota',
	LIST_SERVICE_QUOTA_INCREASE_REQUESTS_IN_TEMPLATE = 'servicequotas:ListServiceQuotaIncreaseRequestsInTemplate',
	LIST_SERVICE_QUOTAS = 'servicequotas:ListServiceQuotas',
	LIST_SERVICES = 'servicequotas:ListServices',
	LIST_TAGS_FOR_RESOURCE = 'servicequotas:ListTagsForResource',
	PUT_SERVICE_QUOTA_INCREASE_REQUEST_INTO_TEMPLATE = 'servicequotas:PutServiceQuotaIncreaseRequestIntoTemplate',
	REQUEST_SERVICE_QUOTA_INCREASE = 'servicequotas:RequestServiceQuotaIncrease',
	TAG_RESOURCE = 'servicequotas:TagResource',
	UNTAG_RESOURCE = 'servicequotas:UntagResource',
}
export enum INSPECTOR {
	ADD_ATTRIBUTES_TO_FINDINGS = 'inspector:AddAttributesToFindings',
	CREATE_ASSESSMENT_TARGET = 'inspector:CreateAssessmentTarget',
	CREATE_ASSESSMENT_TEMPLATE = 'inspector:CreateAssessmentTemplate',
	CREATE_EXCLUSIONS_PREVIEW = 'inspector:CreateExclusionsPreview',
	CREATE_RESOURCE_GROUP = 'inspector:CreateResourceGroup',
	DELETE_ASSESSMENT_RUN = 'inspector:DeleteAssessmentRun',
	DELETE_ASSESSMENT_TARGET = 'inspector:DeleteAssessmentTarget',
	DELETE_ASSESSMENT_TEMPLATE = 'inspector:DeleteAssessmentTemplate',
	DESCRIBE_ASSESSMENT_RUNS = 'inspector:DescribeAssessmentRuns',
	DESCRIBE_ASSESSMENT_TARGETS = 'inspector:DescribeAssessmentTargets',
	DESCRIBE_ASSESSMENT_TEMPLATES = 'inspector:DescribeAssessmentTemplates',
	DESCRIBE_CROSS_ACCOUNT_ACCESS_ROLE = 'inspector:DescribeCrossAccountAccessRole',
	DESCRIBE_EXCLUSIONS = 'inspector:DescribeExclusions',
	DESCRIBE_FINDINGS = 'inspector:DescribeFindings',
	DESCRIBE_RESOURCE_GROUPS = 'inspector:DescribeResourceGroups',
	DESCRIBE_RULES_PACKAGES = 'inspector:DescribeRulesPackages',
	GET_ASSESSMENT_REPORT = 'inspector:GetAssessmentReport',
	GET_EXCLUSIONS_PREVIEW = 'inspector:GetExclusionsPreview',
	GET_TELEMETRY_METADATA = 'inspector:GetTelemetryMetadata',
	LIST_ASSESSMENT_RUN_AGENTS = 'inspector:ListAssessmentRunAgents',
	LIST_ASSESSMENT_RUNS = 'inspector:ListAssessmentRuns',
	LIST_ASSESSMENT_TARGETS = 'inspector:ListAssessmentTargets',
	LIST_ASSESSMENT_TEMPLATES = 'inspector:ListAssessmentTemplates',
	LIST_EVENT_SUBSCRIPTIONS = 'inspector:ListEventSubscriptions',
	LIST_EXCLUSIONS = 'inspector:ListExclusions',
	LIST_FINDINGS = 'inspector:ListFindings',
	LIST_RULES_PACKAGES = 'inspector:ListRulesPackages',
	LIST_TAGS_FOR_RESOURCE = 'inspector:ListTagsForResource',
	PREVIEW_AGENTS = 'inspector:PreviewAgents',
	REGISTER_CROSS_ACCOUNT_ACCESS_ROLE = 'inspector:RegisterCrossAccountAccessRole',
	REMOVE_ATTRIBUTES_FROM_FINDINGS = 'inspector:RemoveAttributesFromFindings',
	SET_TAGS_FOR_RESOURCE = 'inspector:SetTagsForResource',
	START_ASSESSMENT_RUN = 'inspector:StartAssessmentRun',
	STOP_ASSESSMENT_RUN = 'inspector:StopAssessmentRun',
	SUBSCRIBE_TO_EVENT = 'inspector:SubscribeToEvent',
	UNSUBSCRIBE_FROM_EVENT = 'inspector:UnsubscribeFromEvent',
	UPDATE_ASSESSMENT_TARGET = 'inspector:UpdateAssessmentTarget',
}
export enum ROBOMAKER {
	BATCH_DELETE_WORLDS = 'robomaker:BatchDeleteWorlds',
	BATCH_DESCRIBE_SIMULATION_JOB = 'robomaker:BatchDescribeSimulationJob',
	CANCEL_DEPLOYMENT_JOB = 'robomaker:CancelDeploymentJob',
	CANCEL_SIMULATION_JOB = 'robomaker:CancelSimulationJob',
	CANCEL_SIMULATION_JOB_BATCH = 'robomaker:CancelSimulationJobBatch',
	CANCEL_WORLD_EXPORT_JOB = 'robomaker:CancelWorldExportJob',
	CANCEL_WORLD_GENERATION_JOB = 'robomaker:CancelWorldGenerationJob',
	CREATE_DEPLOYMENT_JOB = 'robomaker:CreateDeploymentJob',
	CREATE_FLEET = 'robomaker:CreateFleet',
	CREATE_ROBOT = 'robomaker:CreateRobot',
	CREATE_ROBOT_APPLICATION = 'robomaker:CreateRobotApplication',
	CREATE_ROBOT_APPLICATION_VERSION = 'robomaker:CreateRobotApplicationVersion',
	CREATE_SIMULATION_APPLICATION = 'robomaker:CreateSimulationApplication',
	CREATE_SIMULATION_APPLICATION_VERSION = 'robomaker:CreateSimulationApplicationVersion',
	CREATE_SIMULATION_JOB = 'robomaker:CreateSimulationJob',
	CREATE_WORLD_EXPORT_JOB = 'robomaker:CreateWorldExportJob',
	CREATE_WORLD_GENERATION_JOB = 'robomaker:CreateWorldGenerationJob',
	CREATE_WORLD_TEMPLATE = 'robomaker:CreateWorldTemplate',
	DELETE_FLEET = 'robomaker:DeleteFleet',
	DELETE_ROBOT = 'robomaker:DeleteRobot',
	DELETE_ROBOT_APPLICATION = 'robomaker:DeleteRobotApplication',
	DELETE_SIMULATION_APPLICATION = 'robomaker:DeleteSimulationApplication',
	DELETE_WORLD_TEMPLATE = 'robomaker:DeleteWorldTemplate',
	DEREGISTER_ROBOT = 'robomaker:DeregisterRobot',
	DESCRIBE_DEPLOYMENT_JOB = 'robomaker:DescribeDeploymentJob',
	DESCRIBE_FLEET = 'robomaker:DescribeFleet',
	DESCRIBE_ROBOT = 'robomaker:DescribeRobot',
	DESCRIBE_ROBOT_APPLICATION = 'robomaker:DescribeRobotApplication',
	DESCRIBE_SIMULATION_APPLICATION = 'robomaker:DescribeSimulationApplication',
	DESCRIBE_SIMULATION_JOB = 'robomaker:DescribeSimulationJob',
	DESCRIBE_SIMULATION_JOB_BATCH = 'robomaker:DescribeSimulationJobBatch',
	DESCRIBE_WORLD = 'robomaker:DescribeWorld',
	DESCRIBE_WORLD_EXPORT_JOB = 'robomaker:DescribeWorldExportJob',
	DESCRIBE_WORLD_GENERATION_JOB = 'robomaker:DescribeWorldGenerationJob',
	DESCRIBE_WORLD_TEMPLATE = 'robomaker:DescribeWorldTemplate',
	GET_WORLD_TEMPLATE_BODY = 'robomaker:GetWorldTemplateBody',
	LIST_DEPLOYMENT_JOBS = 'robomaker:ListDeploymentJobs',
	LIST_FLEETS = 'robomaker:ListFleets',
	LIST_ROBOT_APPLICATIONS = 'robomaker:ListRobotApplications',
	LIST_ROBOTS = 'robomaker:ListRobots',
	LIST_SIMULATION_APPLICATIONS = 'robomaker:ListSimulationApplications',
	LIST_SIMULATION_JOB_BATCHES = 'robomaker:ListSimulationJobBatches',
	LIST_SIMULATION_JOBS = 'robomaker:ListSimulationJobs',
	LIST_SUPPORTED_AVAILABILITY_ZONES = 'robomaker:ListSupportedAvailabilityZones',
	LIST_TAGS_FOR_RESOURCE = 'robomaker:ListTagsForResource',
	LIST_WORLD_EXPORT_JOBS = 'robomaker:ListWorldExportJobs',
	LIST_WORLD_GENERATION_JOBS = 'robomaker:ListWorldGenerationJobs',
	LIST_WORLD_TEMPLATES = 'robomaker:ListWorldTemplates',
	LIST_WORLDS = 'robomaker:ListWorlds',
	REGISTER_ROBOT = 'robomaker:RegisterRobot',
	RESTART_SIMULATION_JOB = 'robomaker:RestartSimulationJob',
	START_SIMULATION_JOB_BATCH = 'robomaker:StartSimulationJobBatch',
	SYNC_DEPLOYMENT_JOB = 'robomaker:SyncDeploymentJob',
	TAG_RESOURCE = 'robomaker:TagResource',
	UNTAG_RESOURCE = 'robomaker:UntagResource',
	UPDATE_ROBOT_APPLICATION = 'robomaker:UpdateRobotApplication',
	UPDATE_ROBOT_DEPLOYMENT = 'robomaker:UpdateRobotDeployment',
	UPDATE_SIMULATION_APPLICATION = 'robomaker:UpdateSimulationApplication',
	UPDATE_WORLD_TEMPLATE = 'robomaker:UpdateWorldTemplate',
}
export enum QLDB {
	CANCEL_JOURNAL_KINESIS_STREAM = 'qldb:CancelJournalKinesisStream',
	CREATE_LEDGER = 'qldb:CreateLedger',
	DELETE_LEDGER = 'qldb:DeleteLedger',
	DESCRIBE_JOURNAL_KINESIS_STREAM = 'qldb:DescribeJournalKinesisStream',
	DESCRIBE_JOURNAL_S_3_EXPORT = 'qldb:DescribeJournalS3Export',
	DESCRIBE_LEDGER = 'qldb:DescribeLedger',
	EXECUTE_STATEMENT = 'qldb:ExecuteStatement',
	EXPORT_JOURNAL_TO_S_3 = 'qldb:ExportJournalToS3',
	GET_BLOCK = 'qldb:GetBlock',
	GET_DIGEST = 'qldb:GetDigest',
	GET_REVISION = 'qldb:GetRevision',
	INSERT_SAMPLE_DATA = 'qldb:InsertSampleData',
	LIST_JOURNAL_KINESIS_STREAMS_FOR_LEDGER = 'qldb:ListJournalKinesisStreamsForLedger',
	LIST_JOURNAL_S_3_EXPORTS = 'qldb:ListJournalS3Exports',
	LIST_JOURNAL_S_3_EXPORTS_FOR_LEDGER = 'qldb:ListJournalS3ExportsForLedger',
	LIST_LEDGERS = 'qldb:ListLedgers',
	LIST_TAGS_FOR_RESOURCE = 'qldb:ListTagsForResource',
	PARTI_QL_CREATE_INDEX = 'qldb:PartiQLCreateIndex',
	PARTI_QL_CREATE_TABLE = 'qldb:PartiQLCreateTable',
	PARTI_QL_DELETE = 'qldb:PartiQLDelete',
	PARTI_QL_DROP_INDEX = 'qldb:PartiQLDropIndex',
	PARTI_QL_DROP_TABLE = 'qldb:PartiQLDropTable',
	PARTI_QL_HISTORY_FUNCTION = 'qldb:PartiQLHistoryFunction',
	PARTI_QL_INSERT = 'qldb:PartiQLInsert',
	PARTI_QL_REDACT = 'qldb:PartiQLRedact',
	PARTI_QL_SELECT = 'qldb:PartiQLSelect',
	PARTI_QL_UNDROP_TABLE = 'qldb:PartiQLUndropTable',
	PARTI_QL_UPDATE = 'qldb:PartiQLUpdate',
	SEND_COMMAND = 'qldb:SendCommand',
	SHOW_CATALOG = 'qldb:ShowCatalog',
	STREAM_JOURNAL_TO_KINESIS = 'qldb:StreamJournalToKinesis',
	TAG_RESOURCE = 'qldb:TagResource',
	UNTAG_RESOURCE = 'qldb:UntagResource',
	UPDATE_LEDGER = 'qldb:UpdateLedger',
	UPDATE_LEDGER_PERMISSIONS_MODE = 'qldb:UpdateLedgerPermissionsMode',
}
export enum CODESTAR {
	ASSOCIATE_TEAM_MEMBER = 'codestar:AssociateTeamMember',
	CREATE_PROJECT = 'codestar:CreateProject',
	CREATE_USER_PROFILE = 'codestar:CreateUserProfile',
	DELETE_EXTENDED_ACCESS = 'codestar:DeleteExtendedAccess',
	DELETE_PROJECT = 'codestar:DeleteProject',
	DELETE_USER_PROFILE = 'codestar:DeleteUserProfile',
	DESCRIBE_PROJECT = 'codestar:DescribeProject',
	DESCRIBE_USER_PROFILE = 'codestar:DescribeUserProfile',
	DISASSOCIATE_TEAM_MEMBER = 'codestar:DisassociateTeamMember',
	GET_EXTENDED_ACCESS = 'codestar:GetExtendedAccess',
	LIST_PROJECTS = 'codestar:ListProjects',
	LIST_RESOURCES = 'codestar:ListResources',
	LIST_TAGS_FOR_PROJECT = 'codestar:ListTagsForProject',
	LIST_TEAM_MEMBERS = 'codestar:ListTeamMembers',
	LIST_USER_PROFILES = 'codestar:ListUserProfiles',
	PUT_EXTENDED_ACCESS = 'codestar:PutExtendedAccess',
	TAG_PROJECT = 'codestar:TagProject',
	UNTAG_PROJECT = 'codestar:UntagProject',
	UPDATE_PROJECT = 'codestar:UpdateProject',
	UPDATE_TEAM_MEMBER = 'codestar:UpdateTeamMember',
	UPDATE_USER_PROFILE = 'codestar:UpdateUserProfile',
	VERIFY_SERVICE_ROLE = 'codestar:VerifyServiceRole',
}
export enum CODEARTIFACT {
	ASSOCIATE_EXTERNAL_CONNECTION = 'codeartifact:AssociateExternalConnection',
	ASSOCIATE_WITH_DOWNSTREAM_REPOSITORY = 'codeartifact:AssociateWithDownstreamRepository',
	COPY_PACKAGE_VERSIONS = 'codeartifact:CopyPackageVersions',
	CREATE_DOMAIN = 'codeartifact:CreateDomain',
	CREATE_REPOSITORY = 'codeartifact:CreateRepository',
	DELETE_DOMAIN = 'codeartifact:DeleteDomain',
	DELETE_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:DeleteDomainPermissionsPolicy',
	DELETE_PACKAGE_VERSIONS = 'codeartifact:DeletePackageVersions',
	DELETE_REPOSITORY = 'codeartifact:DeleteRepository',
	DELETE_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:DeleteRepositoryPermissionsPolicy',
	DESCRIBE_DOMAIN = 'codeartifact:DescribeDomain',
	DESCRIBE_PACKAGE = 'codeartifact:DescribePackage',
	DESCRIBE_PACKAGE_VERSION = 'codeartifact:DescribePackageVersion',
	DESCRIBE_REPOSITORY = 'codeartifact:DescribeRepository',
	DISASSOCIATE_EXTERNAL_CONNECTION = 'codeartifact:DisassociateExternalConnection',
	DISPOSE_PACKAGE_VERSIONS = 'codeartifact:DisposePackageVersions',
	GET_AUTHORIZATION_TOKEN = 'codeartifact:GetAuthorizationToken',
	GET_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:GetDomainPermissionsPolicy',
	GET_PACKAGE_VERSION_ASSET = 'codeartifact:GetPackageVersionAsset',
	GET_PACKAGE_VERSION_README = 'codeartifact:GetPackageVersionReadme',
	GET_REPOSITORY_ENDPOINT = 'codeartifact:GetRepositoryEndpoint',
	GET_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:GetRepositoryPermissionsPolicy',
	LIST_DOMAINS = 'codeartifact:ListDomains',
	LIST_PACKAGE_VERSION_ASSETS = 'codeartifact:ListPackageVersionAssets',
	LIST_PACKAGE_VERSION_DEPENDENCIES = 'codeartifact:ListPackageVersionDependencies',
	LIST_PACKAGE_VERSIONS = 'codeartifact:ListPackageVersions',
	LIST_PACKAGES = 'codeartifact:ListPackages',
	LIST_REPOSITORIES = 'codeartifact:ListRepositories',
	LIST_REPOSITORIES_IN_DOMAIN = 'codeartifact:ListRepositoriesInDomain',
	LIST_TAGS_FOR_RESOURCE = 'codeartifact:ListTagsForResource',
	PUBLISH_PACKAGE_VERSION = 'codeartifact:PublishPackageVersion',
	PUT_DOMAIN_PERMISSIONS_POLICY = 'codeartifact:PutDomainPermissionsPolicy',
	PUT_PACKAGE_METADATA = 'codeartifact:PutPackageMetadata',
	PUT_PACKAGE_ORIGIN_CONFIGURATION = 'codeartifact:PutPackageOriginConfiguration',
	PUT_REPOSITORY_PERMISSIONS_POLICY = 'codeartifact:PutRepositoryPermissionsPolicy',
	READ_FROM_REPOSITORY = 'codeartifact:ReadFromRepository',
	TAG_RESOURCE = 'codeartifact:TagResource',
	UNTAG_RESOURCE = 'codeartifact:UntagResource',
	UPDATE_PACKAGE_VERSIONS_STATUS = 'codeartifact:UpdatePackageVersionsStatus',
	UPDATE_REPOSITORY = 'codeartifact:UpdateRepository',
}
export enum DIRECT_CONNECT {
	ACCEPT_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:AcceptDirectConnectGatewayAssociationProposal',
	ALLOCATE_CONNECTION_ON_INTERCONNECT = 'directconnect:AllocateConnectionOnInterconnect',
	ALLOCATE_HOSTED_CONNECTION = 'directconnect:AllocateHostedConnection',
	ALLOCATE_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:AllocatePrivateVirtualInterface',
	ALLOCATE_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:AllocatePublicVirtualInterface',
	ALLOCATE_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:AllocateTransitVirtualInterface',
	ASSOCIATE_CONNECTION_WITH_LAG = 'directconnect:AssociateConnectionWithLag',
	ASSOCIATE_HOSTED_CONNECTION = 'directconnect:AssociateHostedConnection',
	ASSOCIATE_MAC_SEC_KEY = 'directconnect:AssociateMacSecKey',
	ASSOCIATE_VIRTUAL_INTERFACE = 'directconnect:AssociateVirtualInterface',
	CONFIRM_CONNECTION = 'directconnect:ConfirmConnection',
	CONFIRM_CUSTOMER_AGREEMENT = 'directconnect:ConfirmCustomerAgreement',
	CONFIRM_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:ConfirmPrivateVirtualInterface',
	CONFIRM_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:ConfirmPublicVirtualInterface',
	CONFIRM_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:ConfirmTransitVirtualInterface',
	CREATE_BGP_PEER = 'directconnect:CreateBGPPeer',
	CREATE_CONNECTION = 'directconnect:CreateConnection',
	CREATE_DIRECT_CONNECT_GATEWAY = 'directconnect:CreateDirectConnectGateway',
	CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:CreateDirectConnectGatewayAssociation',
	CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:CreateDirectConnectGatewayAssociationProposal',
	CREATE_INTERCONNECT = 'directconnect:CreateInterconnect',
	CREATE_LAG = 'directconnect:CreateLag',
	CREATE_PRIVATE_VIRTUAL_INTERFACE = 'directconnect:CreatePrivateVirtualInterface',
	CREATE_PUBLIC_VIRTUAL_INTERFACE = 'directconnect:CreatePublicVirtualInterface',
	CREATE_TRANSIT_VIRTUAL_INTERFACE = 'directconnect:CreateTransitVirtualInterface',
	DELETE_BGP_PEER = 'directconnect:DeleteBGPPeer',
	DELETE_CONNECTION = 'directconnect:DeleteConnection',
	DELETE_DIRECT_CONNECT_GATEWAY = 'directconnect:DeleteDirectConnectGateway',
	DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:DeleteDirectConnectGatewayAssociation',
	DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'directconnect:DeleteDirectConnectGatewayAssociationProposal',
	DELETE_INTERCONNECT = 'directconnect:DeleteInterconnect',
	DELETE_LAG = 'directconnect:DeleteLag',
	DELETE_VIRTUAL_INTERFACE = 'directconnect:DeleteVirtualInterface',
	DESCRIBE_CONNECTION_LOA = 'directconnect:DescribeConnectionLoa',
	DESCRIBE_CONNECTIONS = 'directconnect:DescribeConnections',
	DESCRIBE_CONNECTIONS_ON_INTERCONNECT = 'directconnect:DescribeConnectionsOnInterconnect',
	DESCRIBE_CUSTOMER_METADATA = 'directconnect:DescribeCustomerMetadata',
	DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSALS = 'directconnect:DescribeDirectConnectGatewayAssociationProposals',
	DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATIONS = 'directconnect:DescribeDirectConnectGatewayAssociations',
	DESCRIBE_DIRECT_CONNECT_GATEWAY_ATTACHMENTS = 'directconnect:DescribeDirectConnectGatewayAttachments',
	DESCRIBE_DIRECT_CONNECT_GATEWAYS = 'directconnect:DescribeDirectConnectGateways',
	DESCRIBE_HOSTED_CONNECTIONS = 'directconnect:DescribeHostedConnections',
	DESCRIBE_INTERCONNECT_LOA = 'directconnect:DescribeInterconnectLoa',
	DESCRIBE_INTERCONNECTS = 'directconnect:DescribeInterconnects',
	DESCRIBE_LAGS = 'directconnect:DescribeLags',
	DESCRIBE_LOA = 'directconnect:DescribeLoa',
	DESCRIBE_LOCATIONS = 'directconnect:DescribeLocations',
	DESCRIBE_ROUTER_CONFIGURATION = 'directconnect:DescribeRouterConfiguration',
	DESCRIBE_TAGS = 'directconnect:DescribeTags',
	DESCRIBE_VIRTUAL_GATEWAYS = 'directconnect:DescribeVirtualGateways',
	DESCRIBE_VIRTUAL_INTERFACES = 'directconnect:DescribeVirtualInterfaces',
	DISASSOCIATE_CONNECTION_FROM_LAG = 'directconnect:DisassociateConnectionFromLag',
	DISASSOCIATE_MAC_SEC_KEY = 'directconnect:DisassociateMacSecKey',
	LIST_VIRTUAL_INTERFACE_TEST_HISTORY = 'directconnect:ListVirtualInterfaceTestHistory',
	START_BGP_FAILOVER_TEST = 'directconnect:StartBgpFailoverTest',
	STOP_BGP_FAILOVER_TEST = 'directconnect:StopBgpFailoverTest',
	TAG_RESOURCE = 'directconnect:TagResource',
	UNTAG_RESOURCE = 'directconnect:UntagResource',
	UPDATE_CONNECTION = 'directconnect:UpdateConnection',
	UPDATE_DIRECT_CONNECT_GATEWAY = 'directconnect:UpdateDirectConnectGateway',
	UPDATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'directconnect:UpdateDirectConnectGatewayAssociation',
	UPDATE_LAG = 'directconnect:UpdateLag',
	UPDATE_VIRTUAL_INTERFACE_ATTRIBUTES = 'directconnect:UpdateVirtualInterfaceAttributes',
}
export enum NEPTUNE {
	CANCEL_LOADER_JOB = 'neptune-db:CancelLoaderJob',
	CANCEL_ML_DATA_PROCESSING_JOB = 'neptune-db:CancelMLDataProcessingJob',
	CANCEL_ML_MODEL_TRAINING_JOB = 'neptune-db:CancelMLModelTrainingJob',
	CANCEL_ML_MODEL_TRANSFORM_JOB = 'neptune-db:CancelMLModelTransformJob',
	CANCEL_QUERY = 'neptune-db:CancelQuery',
	CREATE_ML_ENDPOINT = 'neptune-db:CreateMLEndpoint',
	DELETE_DATA_VIA_QUERY = 'neptune-db:DeleteDataViaQuery',
	DELETE_ML_ENDPOINT = 'neptune-db:DeleteMLEndpoint',
	DELETE_STATISTICS = 'neptune-db:DeleteStatistics',
	GET_ENGINE_STATUS = 'neptune-db:GetEngineStatus',
	GET_LOADER_JOB_STATUS = 'neptune-db:GetLoaderJobStatus',
	GET_ML_DATA_PROCESSING_JOB_STATUS = 'neptune-db:GetMLDataProcessingJobStatus',
	GET_ML_ENDPOINT_STATUS = 'neptune-db:GetMLEndpointStatus',
	GET_ML_MODEL_TRAINING_JOB_STATUS = 'neptune-db:GetMLModelTrainingJobStatus',
	GET_ML_MODEL_TRANSFORM_JOB_STATUS = 'neptune-db:GetMLModelTransformJobStatus',
	GET_QUERY_STATUS = 'neptune-db:GetQueryStatus',
	GET_STATISTICS_STATUS = 'neptune-db:GetStatisticsStatus',
	GET_STREAM_RECORDS = 'neptune-db:GetStreamRecords',
	LIST_LOADER_JOBS = 'neptune-db:ListLoaderJobs',
	LIST_ML_DATA_PROCESSING_JOBS = 'neptune-db:ListMLDataProcessingJobs',
	LIST_ML_ENDPOINTS = 'neptune-db:ListMLEndpoints',
	LIST_ML_MODEL_TRAINING_JOBS = 'neptune-db:ListMLModelTrainingJobs',
	LIST_ML_MODEL_TRANSFORM_JOBS = 'neptune-db:ListMLModelTransformJobs',
	MANAGE_STATISTICS = 'neptune-db:ManageStatistics',
	READ_DATA_VIA_QUERY = 'neptune-db:ReadDataViaQuery',
	RESET_DATABASE = 'neptune-db:ResetDatabase',
	START_LOADER_JOB = 'neptune-db:StartLoaderJob',
	START_ML_DATA_PROCESSING_JOB = 'neptune-db:StartMLDataProcessingJob',
	START_ML_MODEL_TRAINING_JOB = 'neptune-db:StartMLModelTrainingJob',
	START_ML_MODEL_TRANSFORM_JOB = 'neptune-db:StartMLModelTransformJob',
	WRITE_DATA_VIA_QUERY = 'neptune-db:WriteDataViaQuery',
	CONNECT = 'neptune-db:connect',
}
export enum DATASYNC {
	CANCEL_TASK_EXECUTION = 'datasync:CancelTaskExecution',
	CREATE_AGENT = 'datasync:CreateAgent',
	CREATE_LOCATION_EFS = 'datasync:CreateLocationEfs',
	CREATE_LOCATION_FSX_LUSTRE = 'datasync:CreateLocationFsxLustre',
	CREATE_LOCATION_FSX_ONTAP = 'datasync:CreateLocationFsxOntap',
	CREATE_LOCATION_FSX_OPEN_ZFS = 'datasync:CreateLocationFsxOpenZfs',
	CREATE_LOCATION_FSX_WINDOWS = 'datasync:CreateLocationFsxWindows',
	CREATE_LOCATION_HDFS = 'datasync:CreateLocationHdfs',
	CREATE_LOCATION_NFS = 'datasync:CreateLocationNfs',
	CREATE_LOCATION_OBJECT_STORAGE = 'datasync:CreateLocationObjectStorage',
	CREATE_LOCATION_S_3 = 'datasync:CreateLocationS3',
	CREATE_LOCATION_SMB = 'datasync:CreateLocationSmb',
	CREATE_TASK = 'datasync:CreateTask',
	DELETE_AGENT = 'datasync:DeleteAgent',
	DELETE_LOCATION = 'datasync:DeleteLocation',
	DELETE_TASK = 'datasync:DeleteTask',
	DESCRIBE_AGENT = 'datasync:DescribeAgent',
	DESCRIBE_LOCATION_EFS = 'datasync:DescribeLocationEfs',
	DESCRIBE_LOCATION_FSX_LUSTRE = 'datasync:DescribeLocationFsxLustre',
	DESCRIBE_LOCATION_FSX_ONTAP = 'datasync:DescribeLocationFsxOntap',
	DESCRIBE_LOCATION_FSX_OPEN_ZFS = 'datasync:DescribeLocationFsxOpenZfs',
	DESCRIBE_LOCATION_FSX_WINDOWS = 'datasync:DescribeLocationFsxWindows',
	DESCRIBE_LOCATION_HDFS = 'datasync:DescribeLocationHdfs',
	DESCRIBE_LOCATION_NFS = 'datasync:DescribeLocationNfs',
	DESCRIBE_LOCATION_OBJECT_STORAGE = 'datasync:DescribeLocationObjectStorage',
	DESCRIBE_LOCATION_S_3 = 'datasync:DescribeLocationS3',
	DESCRIBE_LOCATION_SMB = 'datasync:DescribeLocationSmb',
	DESCRIBE_TASK = 'datasync:DescribeTask',
	DESCRIBE_TASK_EXECUTION = 'datasync:DescribeTaskExecution',
	LIST_AGENTS = 'datasync:ListAgents',
	LIST_LOCATIONS = 'datasync:ListLocations',
	LIST_TAGS_FOR_RESOURCE = 'datasync:ListTagsForResource',
	LIST_TASK_EXECUTIONS = 'datasync:ListTaskExecutions',
	LIST_TASKS = 'datasync:ListTasks',
	START_TASK_EXECUTION = 'datasync:StartTaskExecution',
	TAG_RESOURCE = 'datasync:TagResource',
	UNTAG_RESOURCE = 'datasync:UntagResource',
	UPDATE_AGENT = 'datasync:UpdateAgent',
	UPDATE_LOCATION_HDFS = 'datasync:UpdateLocationHdfs',
	UPDATE_LOCATION_NFS = 'datasync:UpdateLocationNfs',
	UPDATE_LOCATION_OBJECT_STORAGE = 'datasync:UpdateLocationObjectStorage',
	UPDATE_LOCATION_SMB = 'datasync:UpdateLocationSmb',
	UPDATE_TASK = 'datasync:UpdateTask',
	UPDATE_TASK_EXECUTION = 'datasync:UpdateTaskExecution',
}
export enum LICENSE_MANAGER_USER_SUBSCRIPTIONS {
	ASSOCIATE_USER = 'license-manager-user-subscriptions:AssociateUser',
	DEREGISTER_IDENTITY_PROVIDER = 'license-manager-user-subscriptions:DeregisterIdentityProvider',
	DISASSOCIATE_USER = 'license-manager-user-subscriptions:DisassociateUser',
	LIST_IDENTITY_PROVIDERS = 'license-manager-user-subscriptions:ListIdentityProviders',
	LIST_INSTANCES = 'license-manager-user-subscriptions:ListInstances',
	LIST_PRODUCT_SUBSCRIPTIONS = 'license-manager-user-subscriptions:ListProductSubscriptions',
	LIST_USER_ASSOCIATIONS = 'license-manager-user-subscriptions:ListUserAssociations',
	REGISTER_IDENTITY_PROVIDER = 'license-manager-user-subscriptions:RegisterIdentityProvider',
	START_PRODUCT_SUBSCRIPTION = 'license-manager-user-subscriptions:StartProductSubscription',
	STOP_PRODUCT_SUBSCRIPTION = 'license-manager-user-subscriptions:StopProductSubscription',
	UPDATE_IDENTITY_PROVIDER_SETTINGS = 'license-manager-user-subscriptions:UpdateIdentityProviderSettings',
}
export enum ORGANIZATIONS {
	ACCEPT_HANDSHAKE = 'organizations:AcceptHandshake',
	ATTACH_POLICY = 'organizations:AttachPolicy',
	CANCEL_HANDSHAKE = 'organizations:CancelHandshake',
	CLOSE_ACCOUNT = 'organizations:CloseAccount',
	CREATE_ACCOUNT = 'organizations:CreateAccount',
	CREATE_GOV_CLOUD_ACCOUNT = 'organizations:CreateGovCloudAccount',
	CREATE_ORGANIZATION = 'organizations:CreateOrganization',
	CREATE_ORGANIZATIONAL_UNIT = 'organizations:CreateOrganizationalUnit',
	CREATE_POLICY = 'organizations:CreatePolicy',
	DECLINE_HANDSHAKE = 'organizations:DeclineHandshake',
	DELETE_ORGANIZATION = 'organizations:DeleteOrganization',
	DELETE_ORGANIZATIONAL_UNIT = 'organizations:DeleteOrganizationalUnit',
	DELETE_POLICY = 'organizations:DeletePolicy',
	DEREGISTER_DELEGATED_ADMINISTRATOR = 'organizations:DeregisterDelegatedAdministrator',
	DESCRIBE_ACCOUNT = 'organizations:DescribeAccount',
	DESCRIBE_CREATE_ACCOUNT_STATUS = 'organizations:DescribeCreateAccountStatus',
	DESCRIBE_EFFECTIVE_POLICY = 'organizations:DescribeEffectivePolicy',
	DESCRIBE_HANDSHAKE = 'organizations:DescribeHandshake',
	DESCRIBE_ORGANIZATION = 'organizations:DescribeOrganization',
	DESCRIBE_ORGANIZATIONAL_UNIT = 'organizations:DescribeOrganizationalUnit',
	DESCRIBE_POLICY = 'organizations:DescribePolicy',
	DETACH_POLICY = 'organizations:DetachPolicy',
	DISABLE_AWS_SERVICE_ACCESS = 'organizations:DisableAWSServiceAccess',
	DISABLE_POLICY_TYPE = 'organizations:DisablePolicyType',
	ENABLE_AWS_SERVICE_ACCESS = 'organizations:EnableAWSServiceAccess',
	ENABLE_ALL_FEATURES = 'organizations:EnableAllFeatures',
	ENABLE_POLICY_TYPE = 'organizations:EnablePolicyType',
	INVITE_ACCOUNT_TO_ORGANIZATION = 'organizations:InviteAccountToOrganization',
	LEAVE_ORGANIZATION = 'organizations:LeaveOrganization',
	LIST_AWS_SERVICE_ACCESS_FOR_ORGANIZATION = 'organizations:ListAWSServiceAccessForOrganization',
	LIST_ACCOUNTS = 'organizations:ListAccounts',
	LIST_ACCOUNTS_FOR_PARENT = 'organizations:ListAccountsForParent',
	LIST_CHILDREN = 'organizations:ListChildren',
	LIST_CREATE_ACCOUNT_STATUS = 'organizations:ListCreateAccountStatus',
	LIST_DELEGATED_ADMINISTRATORS = 'organizations:ListDelegatedAdministrators',
	LIST_DELEGATED_SERVICES_FOR_ACCOUNT = 'organizations:ListDelegatedServicesForAccount',
	LIST_HANDSHAKES_FOR_ACCOUNT = 'organizations:ListHandshakesForAccount',
	LIST_HANDSHAKES_FOR_ORGANIZATION = 'organizations:ListHandshakesForOrganization',
	LIST_ORGANIZATIONAL_UNITS_FOR_PARENT = 'organizations:ListOrganizationalUnitsForParent',
	LIST_PARENTS = 'organizations:ListParents',
	LIST_POLICIES = 'organizations:ListPolicies',
	LIST_POLICIES_FOR_TARGET = 'organizations:ListPoliciesForTarget',
	LIST_ROOTS = 'organizations:ListRoots',
	LIST_TAGS_FOR_RESOURCE = 'organizations:ListTagsForResource',
	LIST_TARGETS_FOR_POLICY = 'organizations:ListTargetsForPolicy',
	MOVE_ACCOUNT = 'organizations:MoveAccount',
	REGISTER_DELEGATED_ADMINISTRATOR = 'organizations:RegisterDelegatedAdministrator',
	REMOVE_ACCOUNT_FROM_ORGANIZATION = 'organizations:RemoveAccountFromOrganization',
	TAG_RESOURCE = 'organizations:TagResource',
	UNTAG_RESOURCE = 'organizations:UntagResource',
	UPDATE_ORGANIZATIONAL_UNIT = 'organizations:UpdateOrganizationalUnit',
	UPDATE_POLICY = 'organizations:UpdatePolicy',
}
export enum PERFORMANCE_INSIGHTS {
	DESCRIBE_DIMENSION_KEYS = 'pi:DescribeDimensionKeys',
	GET_DIMENSION_KEY_DETAILS = 'pi:GetDimensionKeyDetails',
	GET_RESOURCE_METADATA = 'pi:GetResourceMetadata',
	GET_RESOURCE_METRICS = 'pi:GetResourceMetrics',
	LIST_AVAILABLE_RESOURCE_DIMENSIONS = 'pi:ListAvailableResourceDimensions',
	LIST_AVAILABLE_RESOURCE_METRICS = 'pi:ListAvailableResourceMetrics',
}
export enum KINESIS_ANALYTICS_V2 {
	ADD_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'kinesisanalytics:AddApplicationCloudWatchLoggingOption',
	ADD_APPLICATION_INPUT = 'kinesisanalytics:AddApplicationInput',
	ADD_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'kinesisanalytics:AddApplicationInputProcessingConfiguration',
	ADD_APPLICATION_OUTPUT = 'kinesisanalytics:AddApplicationOutput',
	ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:AddApplicationReferenceDataSource',
	ADD_APPLICATION_VPC_CONFIGURATION = 'kinesisanalytics:AddApplicationVpcConfiguration',
	CREATE_APPLICATION = 'kinesisanalytics:CreateApplication',
	CREATE_APPLICATION_PRESIGNED_URL = 'kinesisanalytics:CreateApplicationPresignedUrl',
	CREATE_APPLICATION_SNAPSHOT = 'kinesisanalytics:CreateApplicationSnapshot',
	DELETE_APPLICATION = 'kinesisanalytics:DeleteApplication',
	DELETE_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'kinesisanalytics:DeleteApplicationCloudWatchLoggingOption',
	DELETE_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'kinesisanalytics:DeleteApplicationInputProcessingConfiguration',
	DELETE_APPLICATION_OUTPUT = 'kinesisanalytics:DeleteApplicationOutput',
	DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:DeleteApplicationReferenceDataSource',
	DELETE_APPLICATION_SNAPSHOT = 'kinesisanalytics:DeleteApplicationSnapshot',
	DELETE_APPLICATION_VPC_CONFIGURATION = 'kinesisanalytics:DeleteApplicationVpcConfiguration',
	DESCRIBE_APPLICATION = 'kinesisanalytics:DescribeApplication',
	DESCRIBE_APPLICATION_SNAPSHOT = 'kinesisanalytics:DescribeApplicationSnapshot',
	DESCRIBE_APPLICATION_VERSION = 'kinesisanalytics:DescribeApplicationVersion',
	DISCOVER_INPUT_SCHEMA = 'kinesisanalytics:DiscoverInputSchema',
	LIST_APPLICATION_SNAPSHOTS = 'kinesisanalytics:ListApplicationSnapshots',
	LIST_APPLICATION_VERSIONS = 'kinesisanalytics:ListApplicationVersions',
	LIST_APPLICATIONS = 'kinesisanalytics:ListApplications',
	LIST_TAGS_FOR_RESOURCE = 'kinesisanalytics:ListTagsForResource',
	ROLLBACK_APPLICATION = 'kinesisanalytics:RollbackApplication',
	START_APPLICATION = 'kinesisanalytics:StartApplication',
	STOP_APPLICATION = 'kinesisanalytics:StopApplication',
	TAG_RESOURCE = 'kinesisanalytics:TagResource',
	UNTAG_RESOURCE = 'kinesisanalytics:UntagResource',
	UPDATE_APPLICATION = 'kinesisanalytics:UpdateApplication',
	UPDATE_APPLICATION_MAINTENANCE_CONFIGURATION = 'kinesisanalytics:UpdateApplicationMaintenanceConfiguration',
}
export enum KINESIS_ANALYTICS {
	ADD_APPLICATION_INPUT = 'kinesisanalytics:AddApplicationInput',
	ADD_APPLICATION_OUTPUT = 'kinesisanalytics:AddApplicationOutput',
	ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:AddApplicationReferenceDataSource',
	CREATE_APPLICATION = 'kinesisanalytics:CreateApplication',
	DELETE_APPLICATION = 'kinesisanalytics:DeleteApplication',
	DELETE_APPLICATION_OUTPUT = 'kinesisanalytics:DeleteApplicationOutput',
	DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'kinesisanalytics:DeleteApplicationReferenceDataSource',
	DESCRIBE_APPLICATION = 'kinesisanalytics:DescribeApplication',
	DISCOVER_INPUT_SCHEMA = 'kinesisanalytics:DiscoverInputSchema',
	GET_APPLICATION_STATE = 'kinesisanalytics:GetApplicationState',
	LIST_APPLICATIONS = 'kinesisanalytics:ListApplications',
	LIST_TAGS_FOR_RESOURCE = 'kinesisanalytics:ListTagsForResource',
	START_APPLICATION = 'kinesisanalytics:StartApplication',
	STOP_APPLICATION = 'kinesisanalytics:StopApplication',
	TAG_RESOURCE = 'kinesisanalytics:TagResource',
	UNTAG_RESOURCE = 'kinesisanalytics:UntagResource',
	UPDATE_APPLICATION = 'kinesisanalytics:UpdateApplication',
}
export enum ACCOUNT_MANAGEMENT {
	DELETE_ALTERNATE_CONTACT = 'account:DeleteAlternateContact',
	DISABLE_REGION = 'account:DisableRegion',
	ENABLE_REGION = 'account:EnableRegion',
	GET_ALTERNATE_CONTACT = 'account:GetAlternateContact',
	GET_CONTACT_INFORMATION = 'account:GetContactInformation',
	LIST_REGIONS = 'account:ListRegions',
	PUT_ALTERNATE_CONTACT = 'account:PutAlternateContact',
	PUT_CONTACT_INFORMATION = 'account:PutContactInformation',
}
