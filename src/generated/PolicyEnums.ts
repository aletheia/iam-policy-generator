export enum Comprehend {
  BATCH_DETECT_DOMINANT_LANGUAGE = 'BatchDetectDominantLanguage',
  BATCH_DETECT_ENTITIES = 'BatchDetectEntities',
  BATCH_DETECT_KEY_PHRASES = 'BatchDetectKeyPhrases',
  BATCH_DETECT_SENTIMENT = 'BatchDetectSentiment',
  BATCH_DETECT_SYNTAX = 'BatchDetectSyntax',
  CLASSIFY_DOCUMENT = 'ClassifyDocument',
  CREATE_DOCUMENT_CLASSIFIER = 'CreateDocumentClassifier',
  CREATE_ENDPOINT = 'CreateEndpoint',
  CREATE_ENTITY_RECOGNIZER = 'CreateEntityRecognizer',
  DELETE_DOCUMENT_CLASSIFIER = 'DeleteDocumentClassifier',
  DELETE_ENDPOINT = 'DeleteEndpoint',
  DELETE_ENTITY_RECOGNIZER = 'DeleteEntityRecognizer',
  DESCRIBE_DOCUMENT_CLASSIFICATION_JOB = 'DescribeDocumentClassificationJob',
  DESCRIBE_DOCUMENT_CLASSIFIER = 'DescribeDocumentClassifier',
  DESCRIBE_DOMINANT_LANGUAGE_DETECTION_JOB = 'DescribeDominantLanguageDetectionJob',
  DESCRIBE_ENDPOINT = 'DescribeEndpoint',
  DESCRIBE_ENTITIES_DETECTION_JOB = 'DescribeEntitiesDetectionJob',
  DESCRIBE_ENTITY_RECOGNIZER = 'DescribeEntityRecognizer',
  DESCRIBE_KEY_PHRASES_DETECTION_JOB = 'DescribeKeyPhrasesDetectionJob',
  DESCRIBE_SENTIMENT_DETECTION_JOB = 'DescribeSentimentDetectionJob',
  DESCRIBE_TOPICS_DETECTION_JOB = 'DescribeTopicsDetectionJob',
  DETECT_DOMINANT_LANGUAGE = 'DetectDominantLanguage',
  DETECT_ENTITIES = 'DetectEntities',
  DETECT_KEY_PHRASES = 'DetectKeyPhrases',
  DETECT_SENTIMENT = 'DetectSentiment',
  DETECT_SYNTAX = 'DetectSyntax',
  LIST_DOCUMENT_CLASSIFICATION_JOBS = 'ListDocumentClassificationJobs',
  LIST_DOCUMENT_CLASSIFIERS = 'ListDocumentClassifiers',
  LIST_DOMINANT_LANGUAGE_DETECTION_JOBS = 'ListDominantLanguageDetectionJobs',
  LIST_ENDPOINTS = 'ListEndpoints',
  LIST_ENTITIES_DETECTION_JOBS = 'ListEntitiesDetectionJobs',
  LIST_ENTITY_RECOGNIZERS = 'ListEntityRecognizers',
  LIST_KEY_PHRASES_DETECTION_JOBS = 'ListKeyPhrasesDetectionJobs',
  LIST_SENTIMENT_DETECTION_JOBS = 'ListSentimentDetectionJobs',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TOPICS_DETECTION_JOBS = 'ListTopicsDetectionJobs',
  START_DOCUMENT_CLASSIFICATION_JOB = 'StartDocumentClassificationJob',
  START_DOMINANT_LANGUAGE_DETECTION_JOB = 'StartDominantLanguageDetectionJob',
  START_ENTITIES_DETECTION_JOB = 'StartEntitiesDetectionJob',
  START_KEY_PHRASES_DETECTION_JOB = 'StartKeyPhrasesDetectionJob',
  START_SENTIMENT_DETECTION_JOB = 'StartSentimentDetectionJob',
  START_TOPICS_DETECTION_JOB = 'StartTopicsDetectionJob',
  STOP_DOMINANT_LANGUAGE_DETECTION_JOB = 'StopDominantLanguageDetectionJob',
  STOP_ENTITIES_DETECTION_JOB = 'StopEntitiesDetectionJob',
  STOP_KEY_PHRASES_DETECTION_JOB = 'StopKeyPhrasesDetectionJob',
  STOP_SENTIMENT_DETECTION_JOB = 'StopSentimentDetectionJob',
  STOP_TRAINING_DOCUMENT_CLASSIFIER = 'StopTrainingDocumentClassifier',
  STOP_TRAINING_ENTITY_RECOGNIZER = 'StopTrainingEntityRecognizer',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ENDPOINT = 'UpdateEndpoint',
}

export enum Elasticfilesystem {
  BACKUP = 'Backup',
  CLIENT_MOUNT = 'ClientMount',
  CLIENT_ROOT_ACCESS = 'ClientRootAccess',
  CLIENT_WRITE = 'ClientWrite',
  CREATE_ACCESS_POINT = 'CreateAccessPoint',
  CREATE_FILE_SYSTEM = 'CreateFileSystem',
  CREATE_MOUNT_TARGET = 'CreateMountTarget',
  CREATE_TAGS = 'CreateTags',
  DELETE_ACCESS_POINT = 'DeleteAccessPoint',
  DELETE_FILE_SYSTEM = 'DeleteFileSystem',
  DELETE_FILE_SYSTEM_POLICY = 'DeleteFileSystemPolicy',
  DELETE_MOUNT_TARGET = 'DeleteMountTarget',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_ACCESS_POINTS = 'DescribeAccessPoints',
  DESCRIBE_FILE_SYSTEM_POLICY = 'DescribeFileSystemPolicy',
  DESCRIBE_FILE_SYSTEMS = 'DescribeFileSystems',
  DESCRIBE_LIFECYCLE_CONFIGURATION = 'DescribeLifecycleConfiguration',
  DESCRIBE_MOUNT_TARGET_SECURITY_GROUPS = 'DescribeMountTargetSecurityGroups',
  DESCRIBE_MOUNT_TARGETS = 'DescribeMountTargets',
  DESCRIBE_TAGS = 'DescribeTags',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_MOUNT_TARGET_SECURITY_GROUPS = 'ModifyMountTargetSecurityGroups',
  PUT_FILE_SYSTEM_POLICY = 'PutFileSystemPolicy',
  PUT_LIFECYCLE_CONFIGURATION = 'PutLifecycleConfiguration',
  RESTORE = 'Restore',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_FILE_SYSTEM = 'UpdateFileSystem',
}

export enum Glue {
  BATCH_CREATE_PARTITION = 'BatchCreatePartition',
  BATCH_DELETE_CONNECTION = 'BatchDeleteConnection',
  BATCH_DELETE_PARTITION = 'BatchDeletePartition',
  BATCH_DELETE_TABLE = 'BatchDeleteTable',
  BATCH_DELETE_TABLE_VERSION = 'BatchDeleteTableVersion',
  BATCH_GET_CRAWLERS = 'BatchGetCrawlers',
  BATCH_GET_DEV_ENDPOINTS = 'BatchGetDevEndpoints',
  BATCH_GET_JOBS = 'BatchGetJobs',
  BATCH_GET_PARTITION = 'BatchGetPartition',
  BATCH_GET_TRIGGERS = 'BatchGetTriggers',
  BATCH_GET_WORKFLOWS = 'BatchGetWorkflows',
  BATCH_STOP_JOB_RUN = 'BatchStopJobRun',
  CANCEL_ML_TASK_RUN = 'CancelMLTaskRun',
  CREATE_CLASSIFIER = 'CreateClassifier',
  CREATE_CONNECTION = 'CreateConnection',
  CREATE_CRAWLER = 'CreateCrawler',
  CREATE_DATABASE = 'CreateDatabase',
  CREATE_DEV_ENDPOINT = 'CreateDevEndpoint',
  CREATE_JOB = 'CreateJob',
  CREATE_ML_TRANSFORM = 'CreateMLTransform',
  CREATE_PARTITION = 'CreatePartition',
  CREATE_SCRIPT = 'CreateScript',
  CREATE_SECURITY_CONFIGURATION = 'CreateSecurityConfiguration',
  CREATE_TABLE = 'CreateTable',
  CREATE_TRIGGER = 'CreateTrigger',
  CREATE_USER_DEFINED_FUNCTION = 'CreateUserDefinedFunction',
  CREATE_WORKFLOW = 'CreateWorkflow',
  DELETE_CLASSIFIER = 'DeleteClassifier',
  DELETE_CONNECTION = 'DeleteConnection',
  DELETE_CRAWLER = 'DeleteCrawler',
  DELETE_DATABASE = 'DeleteDatabase',
  DELETE_DEV_ENDPOINT = 'DeleteDevEndpoint',
  DELETE_JOB = 'DeleteJob',
  DELETE_ML_TRANSFORM = 'DeleteMLTransform',
  DELETE_PARTITION = 'DeletePartition',
  DELETE_RESOURCE_POLICY = 'DeleteResourcePolicy',
  DELETE_SECURITY_CONFIGURATION = 'DeleteSecurityConfiguration',
  DELETE_TABLE = 'DeleteTable',
  DELETE_TABLE_VERSION = 'DeleteTableVersion',
  DELETE_TRIGGER = 'DeleteTrigger',
  DELETE_USER_DEFINED_FUNCTION = 'DeleteUserDefinedFunction',
  DELETE_WORKFLOW = 'DeleteWorkflow',
  GET_CATALOG_IMPORT_STATUS = 'GetCatalogImportStatus',
  GET_CLASSIFIER = 'GetClassifier',
  GET_CLASSIFIERS = 'GetClassifiers',
  GET_CONNECTION = 'GetConnection',
  GET_CONNECTIONS = 'GetConnections',
  GET_CRAWLER = 'GetCrawler',
  GET_CRAWLER_METRICS = 'GetCrawlerMetrics',
  GET_CRAWLERS = 'GetCrawlers',
  GET_DATA_CATALOG_ENCRYPTION_SETTINGS = 'GetDataCatalogEncryptionSettings',
  GET_DATABASE = 'GetDatabase',
  GET_DATABASES = 'GetDatabases',
  GET_DATAFLOW_GRAPH = 'GetDataflowGraph',
  GET_DEV_ENDPOINT = 'GetDevEndpoint',
  GET_DEV_ENDPOINTS = 'GetDevEndpoints',
  GET_JOB = 'GetJob',
  GET_JOB_BOOKMARK = 'GetJobBookmark',
  GET_JOB_RUN = 'GetJobRun',
  GET_JOB_RUNS = 'GetJobRuns',
  GET_JOBS = 'GetJobs',
  GET_ML_TASK_RUN = 'GetMLTaskRun',
  GET_ML_TASK_RUNS = 'GetMLTaskRuns',
  GET_ML_TRANSFORM = 'GetMLTransform',
  GET_ML_TRANSFORMS = 'GetMLTransforms',
  GET_MAPPING = 'GetMapping',
  GET_PARTITION = 'GetPartition',
  GET_PARTITIONS = 'GetPartitions',
  GET_PLAN = 'GetPlan',
  GET_RESOURCE_POLICY = 'GetResourcePolicy',
  GET_SECURITY_CONFIGURATION = 'GetSecurityConfiguration',
  GET_SECURITY_CONFIGURATIONS = 'GetSecurityConfigurations',
  GET_TABLE = 'GetTable',
  GET_TABLE_VERSION = 'GetTableVersion',
  GET_TABLE_VERSIONS = 'GetTableVersions',
  GET_TABLES = 'GetTables',
  GET_TAGS = 'GetTags',
  GET_TRIGGER = 'GetTrigger',
  GET_TRIGGERS = 'GetTriggers',
  GET_USER_DEFINED_FUNCTION = 'GetUserDefinedFunction',
  GET_USER_DEFINED_FUNCTIONS = 'GetUserDefinedFunctions',
  GET_WORKFLOW = 'GetWorkflow',
  GET_WORKFLOW_RUN = 'GetWorkflowRun',
  GET_WORKFLOW_RUN_PROPERTIES = 'GetWorkflowRunProperties',
  GET_WORKFLOW_RUNS = 'GetWorkflowRuns',
  IMPORT_CATALOG_TO_GLUE = 'ImportCatalogToGlue',
  LIST_CRAWLERS = 'ListCrawlers',
  LIST_DEV_ENDPOINTS = 'ListDevEndpoints',
  LIST_JOBS = 'ListJobs',
  LIST_ML_TRANSFORMS = 'ListMLTransforms',
  LIST_TRIGGERS = 'ListTriggers',
  LIST_WORKFLOWS = 'ListWorkflows',
  PUT_DATA_CATALOG_ENCRYPTION_SETTINGS = 'PutDataCatalogEncryptionSettings',
  PUT_RESOURCE_POLICY = 'PutResourcePolicy',
  PUT_WORKFLOW_RUN_PROPERTIES = 'PutWorkflowRunProperties',
  RESET_JOB_BOOKMARK = 'ResetJobBookmark',
  SEARCH_TABLES = 'SearchTables',
  START_CRAWLER = 'StartCrawler',
  START_CRAWLER_SCHEDULE = 'StartCrawlerSchedule',
  START_EXPORT_LABELS_TASK_RUN = 'StartExportLabelsTaskRun',
  START_IMPORT_LABELS_TASK_RUN = 'StartImportLabelsTaskRun',
  START_JOB_RUN = 'StartJobRun',
  START_ML_EVALUATION_TASK_RUN = 'StartMLEvaluationTaskRun',
  START_ML_LABELING_SET_GENERATION_TASK_RUN = 'StartMLLabelingSetGenerationTaskRun',
  START_TRIGGER = 'StartTrigger',
  START_WORKFLOW_RUN = 'StartWorkflowRun',
  STOP_CRAWLER = 'StopCrawler',
  STOP_CRAWLER_SCHEDULE = 'StopCrawlerSchedule',
  STOP_TRIGGER = 'StopTrigger',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CLASSIFIER = 'UpdateClassifier',
  UPDATE_CONNECTION = 'UpdateConnection',
  UPDATE_CRAWLER = 'UpdateCrawler',
  UPDATE_CRAWLER_SCHEDULE = 'UpdateCrawlerSchedule',
  UPDATE_DATABASE = 'UpdateDatabase',
  UPDATE_DEV_ENDPOINT = 'UpdateDevEndpoint',
  UPDATE_JOB = 'UpdateJob',
  UPDATE_ML_TRANSFORM = 'UpdateMLTransform',
  UPDATE_PARTITION = 'UpdatePartition',
  UPDATE_TABLE = 'UpdateTable',
  UPDATE_TRIGGER = 'UpdateTrigger',
  UPDATE_USER_DEFINED_FUNCTION = 'UpdateUserDefinedFunction',
  UPDATE_WORKFLOW = 'UpdateWorkflow',
  USE_ML_TRANSFORMS = 'UseMLTransforms',
}

export enum Iotthingsgraph {
  ASSOCIATE_ENTITY_TO_THING = 'AssociateEntityToThing',
  CREATE_FLOW_TEMPLATE = 'CreateFlowTemplate',
  CREATE_SYSTEM_INSTANCE = 'CreateSystemInstance',
  CREATE_SYSTEM_TEMPLATE = 'CreateSystemTemplate',
  DELETE_FLOW_TEMPLATE = 'DeleteFlowTemplate',
  DELETE_NAMESPACE = 'DeleteNamespace',
  DELETE_SYSTEM_INSTANCE = 'DeleteSystemInstance',
  DELETE_SYSTEM_TEMPLATE = 'DeleteSystemTemplate',
  DEPLOY_SYSTEM_INSTANCE = 'DeploySystemInstance',
  DEPRECATE_FLOW_TEMPLATE = 'DeprecateFlowTemplate',
  DEPRECATE_SYSTEM_TEMPLATE = 'DeprecateSystemTemplate',
  DESCRIBE_NAMESPACE = 'DescribeNamespace',
  DISSOCIATE_ENTITY_FROM_THING = 'DissociateEntityFromThing',
  GET_ENTITIES = 'GetEntities',
  GET_FLOW_TEMPLATE = 'GetFlowTemplate',
  GET_FLOW_TEMPLATE_REVISIONS = 'GetFlowTemplateRevisions',
  GET_NAMESPACE_DELETION_STATUS = 'GetNamespaceDeletionStatus',
  GET_SYSTEM_INSTANCE = 'GetSystemInstance',
  GET_SYSTEM_TEMPLATE = 'GetSystemTemplate',
  GET_SYSTEM_TEMPLATE_REVISIONS = 'GetSystemTemplateRevisions',
  GET_UPLOAD_STATUS = 'GetUploadStatus',
  LIST_FLOW_EXECUTION_MESSAGES = 'ListFlowExecutionMessages',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  SEARCH_ENTITIES = 'SearchEntities',
  SEARCH_FLOW_EXECUTIONS = 'SearchFlowExecutions',
  SEARCH_FLOW_TEMPLATES = 'SearchFlowTemplates',
  SEARCH_SYSTEM_INSTANCES = 'SearchSystemInstances',
  SEARCH_SYSTEM_TEMPLATES = 'SearchSystemTemplates',
  SEARCH_THINGS = 'SearchThings',
  TAG_RESOURCE = 'TagResource',
  UNDEPLOY_SYSTEM_INSTANCE = 'UndeploySystemInstance',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_FLOW_TEMPLATE = 'UpdateFlowTemplate',
  UPDATE_SYSTEM_TEMPLATE = 'UpdateSystemTemplate',
  UPLOAD_ENTITY_DEFINITIONS = 'UploadEntityDefinitions',
}

export enum Savingsplans {
  CREATE_SAVINGS_PLAN = 'CreateSavingsPlan',
  DESCRIBE_SAVINGS_PLAN_RATES = 'DescribeSavingsPlanRates',
  DESCRIBE_SAVINGS_PLANS = 'DescribeSavingsPlans',
  DESCRIBE_SAVINGS_PLANS_OFFERING_RATES = 'DescribeSavingsPlansOfferingRates',
  DESCRIBE_SAVINGS_PLANS_OFFERINGS = 'DescribeSavingsPlansOfferings',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Systemsmanager {
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  CANCEL_COMMAND = 'CancelCommand',
  CANCEL_MAINTENANCE_WINDOW_EXECUTION = 'CancelMaintenanceWindowExecution',
  CREATE_ACTIVATION = 'CreateActivation',
  CREATE_ASSOCIATION = 'CreateAssociation',
  CREATE_ASSOCIATION_BATCH = 'CreateAssociationBatch',
  CREATE_DOCUMENT = 'CreateDocument',
  CREATE_MAINTENANCE_WINDOW = 'CreateMaintenanceWindow',
  CREATE_OPS_ITEM = 'CreateOpsItem',
  CREATE_PATCH_BASELINE = 'CreatePatchBaseline',
  CREATE_RESOURCE_DATA_SYNC = 'CreateResourceDataSync',
  DELETE_ACTIVATION = 'DeleteActivation',
  DELETE_ASSOCIATION = 'DeleteAssociation',
  DELETE_DOCUMENT = 'DeleteDocument',
  DELETE_INVENTORY = 'DeleteInventory',
  DELETE_MAINTENANCE_WINDOW = 'DeleteMaintenanceWindow',
  DELETE_PARAMETER = 'DeleteParameter',
  DELETE_PARAMETERS = 'DeleteParameters',
  DELETE_PATCH_BASELINE = 'DeletePatchBaseline',
  DELETE_RESOURCE_DATA_SYNC = 'DeleteResourceDataSync',
  DEREGISTER_MANAGED_INSTANCE = 'DeregisterManagedInstance',
  DEREGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'DeregisterPatchBaselineForPatchGroup',
  DEREGISTER_TARGET_FROM_MAINTENANCE_WINDOW = 'DeregisterTargetFromMaintenanceWindow',
  DEREGISTER_TASK_FROM_MAINTENANCE_WINDOW = 'DeregisterTaskFromMaintenanceWindow',
  DESCRIBE_ACTIVATIONS = 'DescribeActivations',
  DESCRIBE_ASSOCIATION = 'DescribeAssociation',
  DESCRIBE_ASSOCIATION_EXECUTION_TARGETS = 'DescribeAssociationExecutionTargets',
  DESCRIBE_ASSOCIATION_EXECUTIONS = 'DescribeAssociationExecutions',
  DESCRIBE_AUTOMATION_EXECUTIONS = 'DescribeAutomationExecutions',
  DESCRIBE_AUTOMATION_STEP_EXECUTIONS = 'DescribeAutomationStepExecutions',
  DESCRIBE_AVAILABLE_PATCHES = 'DescribeAvailablePatches',
  DESCRIBE_DOCUMENT = 'DescribeDocument',
  DESCRIBE_DOCUMENT_PARAMETERS = 'DescribeDocumentParameters',
  DESCRIBE_DOCUMENT_PERMISSION = 'DescribeDocumentPermission',
  DESCRIBE_EFFECTIVE_INSTANCE_ASSOCIATIONS = 'DescribeEffectiveInstanceAssociations',
  DESCRIBE_EFFECTIVE_PATCHES_FOR_PATCH_BASELINE = 'DescribeEffectivePatchesForPatchBaseline',
  DESCRIBE_INSTANCE_ASSOCIATIONS_STATUS = 'DescribeInstanceAssociationsStatus',
  DESCRIBE_INSTANCE_INFORMATION = 'DescribeInstanceInformation',
  DESCRIBE_INSTANCE_PATCH_STATES = 'DescribeInstancePatchStates',
  DESCRIBE_INSTANCE_PATCH_STATES_FOR_PATCH_GROUP = 'DescribeInstancePatchStatesForPatchGroup',
  DESCRIBE_INSTANCE_PATCHES = 'DescribeInstancePatches',
  DESCRIBE_INSTANCE_PROPERTIES = 'DescribeInstanceProperties',
  DESCRIBE_INVENTORY_DELETIONS = 'DescribeInventoryDeletions',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATIONS = 'DescribeMaintenanceWindowExecutionTaskInvocations',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTION_TASKS = 'DescribeMaintenanceWindowExecutionTasks',
  DESCRIBE_MAINTENANCE_WINDOW_EXECUTIONS = 'DescribeMaintenanceWindowExecutions',
  DESCRIBE_MAINTENANCE_WINDOW_SCHEDULE = 'DescribeMaintenanceWindowSchedule',
  DESCRIBE_MAINTENANCE_WINDOW_TARGETS = 'DescribeMaintenanceWindowTargets',
  DESCRIBE_MAINTENANCE_WINDOW_TASKS = 'DescribeMaintenanceWindowTasks',
  DESCRIBE_MAINTENANCE_WINDOWS = 'DescribeMaintenanceWindows',
  DESCRIBE_MAINTENANCE_WINDOWS_FOR_TARGET = 'DescribeMaintenanceWindowsForTarget',
  DESCRIBE_OPS_ITEMS = 'DescribeOpsItems',
  DESCRIBE_PARAMETERS = 'DescribeParameters',
  DESCRIBE_PATCH_BASELINES = 'DescribePatchBaselines',
  DESCRIBE_PATCH_GROUP_STATE = 'DescribePatchGroupState',
  DESCRIBE_PATCH_GROUPS = 'DescribePatchGroups',
  DESCRIBE_PATCH_PROPERTIES = 'DescribePatchProperties',
  DESCRIBE_SESSIONS = 'DescribeSessions',
  GET_AUTOMATION_EXECUTION = 'GetAutomationExecution',
  GET_COMMAND_INVOCATION = 'GetCommandInvocation',
  GET_CONNECTION_STATUS = 'GetConnectionStatus',
  GET_DEFAULT_PATCH_BASELINE = 'GetDefaultPatchBaseline',
  GET_DEPLOYABLE_PATCH_SNAPSHOT_FOR_INSTANCE = 'GetDeployablePatchSnapshotForInstance',
  GET_DOCUMENT = 'GetDocument',
  GET_INVENTORY = 'GetInventory',
  GET_INVENTORY_SCHEMA = 'GetInventorySchema',
  GET_MAINTENANCE_WINDOW = 'GetMaintenanceWindow',
  GET_MAINTENANCE_WINDOW_EXECUTION = 'GetMaintenanceWindowExecution',
  GET_MAINTENANCE_WINDOW_EXECUTION_TASK = 'GetMaintenanceWindowExecutionTask',
  GET_MAINTENANCE_WINDOW_EXECUTION_TASK_INVOCATION = 'GetMaintenanceWindowExecutionTaskInvocation',
  GET_MAINTENANCE_WINDOW_TASK = 'GetMaintenanceWindowTask',
  GET_MANIFEST = 'GetManifest',
  GET_OPS_ITEM = 'GetOpsItem',
  GET_OPS_SUMMARY = 'GetOpsSummary',
  GET_PARAMETER = 'GetParameter',
  GET_PARAMETER_HISTORY = 'GetParameterHistory',
  GET_PARAMETERS = 'GetParameters',
  GET_PARAMETERS_BY_PATH = 'GetParametersByPath',
  GET_PATCH_BASELINE = 'GetPatchBaseline',
  GET_PATCH_BASELINE_FOR_PATCH_GROUP = 'GetPatchBaselineForPatchGroup',
  GET_SERVICE_SETTING = 'GetServiceSetting',
  LABEL_PARAMETER_VERSION = 'LabelParameterVersion',
  LIST_ASSOCIATION_VERSIONS = 'ListAssociationVersions',
  LIST_ASSOCIATIONS = 'ListAssociations',
  LIST_COMMAND_INVOCATIONS = 'ListCommandInvocations',
  LIST_COMMANDS = 'ListCommands',
  LIST_COMPLIANCE_ITEMS = 'ListComplianceItems',
  LIST_COMPLIANCE_SUMMARIES = 'ListComplianceSummaries',
  LIST_DOCUMENT_VERSIONS = 'ListDocumentVersions',
  LIST_DOCUMENTS = 'ListDocuments',
  LIST_INSTANCE_ASSOCIATIONS = 'ListInstanceAssociations',
  LIST_INVENTORY_ENTRIES = 'ListInventoryEntries',
  LIST_RESOURCE_COMPLIANCE_SUMMARIES = 'ListResourceComplianceSummaries',
  LIST_RESOURCE_DATA_SYNC = 'ListResourceDataSync',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_DOCUMENT_PERMISSION = 'ModifyDocumentPermission',
  PUT_COMPLIANCE_ITEMS = 'PutComplianceItems',
  PUT_CONFIGURE_PACKAGE_RESULT = 'PutConfigurePackageResult',
  PUT_INVENTORY = 'PutInventory',
  PUT_PARAMETER = 'PutParameter',
  REGISTER_DEFAULT_PATCH_BASELINE = 'RegisterDefaultPatchBaseline',
  REGISTER_PATCH_BASELINE_FOR_PATCH_GROUP = 'RegisterPatchBaselineForPatchGroup',
  REGISTER_TARGET_WITH_MAINTENANCE_WINDOW = 'RegisterTargetWithMaintenanceWindow',
  REGISTER_TASK_WITH_MAINTENANCE_WINDOW = 'RegisterTaskWithMaintenanceWindow',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESET_SERVICE_SETTING = 'ResetServiceSetting',
  RESUME_SESSION = 'ResumeSession',
  SEND_AUTOMATION_SIGNAL = 'SendAutomationSignal',
  SEND_COMMAND = 'SendCommand',
  START_ASSOCIATIONS_ONCE = 'StartAssociationsOnce',
  START_AUTOMATION_EXECUTION = 'StartAutomationExecution',
  START_SESSION = 'StartSession',
  STOP_AUTOMATION_EXECUTION = 'StopAutomationExecution',
  TERMINATE_SESSION = 'TerminateSession',
  UPDATE_ASSOCIATION = 'UpdateAssociation',
  UPDATE_ASSOCIATION_STATUS = 'UpdateAssociationStatus',
  UPDATE_DOCUMENT = 'UpdateDocument',
  UPDATE_DOCUMENT_DEFAULT_VERSION = 'UpdateDocumentDefaultVersion',
  UPDATE_INSTANCE_ASSOCIATION_STATUS = 'UpdateInstanceAssociationStatus',
  UPDATE_INSTANCE_INFORMATION = 'UpdateInstanceInformation',
  UPDATE_MAINTENANCE_WINDOW = 'UpdateMaintenanceWindow',
  UPDATE_MAINTENANCE_WINDOW_TARGET = 'UpdateMaintenanceWindowTarget',
  UPDATE_MAINTENANCE_WINDOW_TASK = 'UpdateMaintenanceWindowTask',
  UPDATE_MANAGED_INSTANCE_ROLE = 'UpdateManagedInstanceRole',
  UPDATE_OPS_ITEM = 'UpdateOpsItem',
  UPDATE_PATCH_BASELINE = 'UpdatePatchBaseline',
  UPDATE_RESOURCE_DATA_SYNC = 'UpdateResourceDataSync',
  UPDATE_SERVICE_SETTING = 'UpdateServiceSetting',
}

export enum Sso {
  ASSOCIATE_DIRECTORY = 'AssociateDirectory',
  ASSOCIATE_PROFILE = 'AssociateProfile',
  CREATE_APPLICATION_INSTANCE = 'CreateApplicationInstance',
  CREATE_APPLICATION_INSTANCE_CERTIFICATE = 'CreateApplicationInstanceCertificate',
  CREATE_MANAGED_APPLICATION_INSTANCE = 'CreateManagedApplicationInstance',
  CREATE_PERMISSION_SET = 'CreatePermissionSet',
  CREATE_PROFILE = 'CreateProfile',
  CREATE_TRUST = 'CreateTrust',
  DELETE_APPLICATION_INSTANCE = 'DeleteApplicationInstance',
  DELETE_APPLICATION_INSTANCE_CERTIFICATE = 'DeleteApplicationInstanceCertificate',
  DELETE_MANAGED_APPLICATION_INSTANCE = 'DeleteManagedApplicationInstance',
  DELETE_PERMISSION_SET = 'DeletePermissionSet',
  DELETE_PERMISSIONS_POLICY = 'DeletePermissionsPolicy',
  DELETE_PROFILE = 'DeleteProfile',
  DESCRIBE_PERMISSIONS_POLICIES = 'DescribePermissionsPolicies',
  DESCRIBE_REGISTERED_REGIONS = 'DescribeRegisteredRegions',
  DISASSOCIATE_DIRECTORY = 'DisassociateDirectory',
  DISASSOCIATE_PROFILE = 'DisassociateProfile',
  GET_APPLICATION_INSTANCE = 'GetApplicationInstance',
  GET_APPLICATION_TEMPLATE = 'GetApplicationTemplate',
  GET_MANAGED_APPLICATION_INSTANCE = 'GetManagedApplicationInstance',
  GET_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'GetMfaDeviceManagementForDirectory',
  GET_PERMISSION_SET = 'GetPermissionSet',
  GET_PERMISSIONS_POLICY = 'GetPermissionsPolicy',
  GET_PROFILE = 'GetProfile',
  GET_SSO_STATUS = 'GetSSOStatus',
  GET_SHARED_SSO_CONFIGURATION = 'GetSharedSsoConfiguration',
  GET_SSO_CONFIGURATION = 'GetSsoConfiguration',
  GET_TRUST = 'GetTrust',
  IMPORT_APPLICATION_INSTANCE_SERVICE_PROVIDER_METADATA = 'ImportApplicationInstanceServiceProviderMetadata',
  LIST_APPLICATION_INSTANCE_CERTIFICATES = 'ListApplicationInstanceCertificates',
  LIST_APPLICATION_INSTANCES = 'ListApplicationInstances',
  LIST_APPLICATION_TEMPLATES = 'ListApplicationTemplates',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_DIRECTORY_ASSOCIATIONS = 'ListDirectoryAssociations',
  LIST_PERMISSION_SETS = 'ListPermissionSets',
  LIST_PROFILE_ASSOCIATIONS = 'ListProfileAssociations',
  LIST_PROFILES = 'ListProfiles',
  PUT_MFA_DEVICE_MANAGEMENT_FOR_DIRECTORY = 'PutMfaDeviceManagementForDirectory',
  PUT_PERMISSIONS_POLICY = 'PutPermissionsPolicy',
  START_SSO = 'StartSSO',
  UPDATE_APPLICATION_INSTANCE_ACTIVE_CERTIFICATE = 'UpdateApplicationInstanceActiveCertificate',
  UPDATE_APPLICATION_INSTANCE_DISPLAY_DATA = 'UpdateApplicationInstanceDisplayData',
  UPDATE_APPLICATION_INSTANCE_RESPONSE_CONFIGURATION = 'UpdateApplicationInstanceResponseConfiguration',
  UPDATE_APPLICATION_INSTANCE_RESPONSE_SCHEMA_CONFIGURATION = 'UpdateApplicationInstanceResponseSchemaConfiguration',
  UPDATE_APPLICATION_INSTANCE_SECURITY_CONFIGURATION = 'UpdateApplicationInstanceSecurityConfiguration',
  UPDATE_APPLICATION_INSTANCE_SERVICE_PROVIDER_CONFIGURATION = 'UpdateApplicationInstanceServiceProviderConfiguration',
  UPDATE_APPLICATION_INSTANCE_STATUS = 'UpdateApplicationInstanceStatus',
  UPDATE_DIRECTORY_ASSOCIATION = 'UpdateDirectoryAssociation',
  UPDATE_MANAGED_APPLICATION_INSTANCE_STATUS = 'UpdateManagedApplicationInstanceStatus',
  UPDATE_PERMISSION_SET = 'UpdatePermissionSet',
  UPDATE_PROFILE = 'UpdateProfile',
  UPDATE_SSO_CONFIGURATION = 'UpdateSSOConfiguration',
  UPDATE_TRUST = 'UpdateTrust',
}

export enum Iot {
  ACCEPT_CERTIFICATE_TRANSFER = 'AcceptCertificateTransfer',
  ADD_THING_TO_BILLING_GROUP = 'AddThingToBillingGroup',
  ADD_THING_TO_THING_GROUP = 'AddThingToThingGroup',
  ASSOCIATE_TARGETS_WITH_JOB = 'AssociateTargetsWithJob',
  ATTACH_POLICY = 'AttachPolicy',
  ATTACH_PRINCIPAL_POLICY = 'AttachPrincipalPolicy',
  ATTACH_SECURITY_PROFILE = 'AttachSecurityProfile',
  ATTACH_THING_PRINCIPAL = 'AttachThingPrincipal',
  CANCEL_AUDIT_TASK = 'CancelAuditTask',
  CANCEL_CERTIFICATE_TRANSFER = 'CancelCertificateTransfer',
  CANCEL_JOB = 'CancelJob',
  CANCEL_JOB_EXECUTION = 'CancelJobExecution',
  CLEAR_DEFAULT_AUTHORIZER = 'ClearDefaultAuthorizer',
  CLOSE_TUNNEL = 'CloseTunnel',
  CONNECT = 'Connect',
  CREATE_AUTHORIZER = 'CreateAuthorizer',
  CREATE_BILLING_GROUP = 'CreateBillingGroup',
  CREATE_CERTIFICATE_FROM_CSR = 'CreateCertificateFromCsr',
  CREATE_DYNAMIC_THING_GROUP = 'CreateDynamicThingGroup',
  CREATE_JOB = 'CreateJob',
  CREATE_KEYS_AND_CERTIFICATE = 'CreateKeysAndCertificate',
  CREATE_OTA_UPDATE = 'CreateOTAUpdate',
  CREATE_POLICY = 'CreatePolicy',
  CREATE_POLICY_VERSION = 'CreatePolicyVersion',
  CREATE_PROVISIONING_CLAIM = 'CreateProvisioningClaim',
  CREATE_PROVISIONING_TEMPLATE = 'CreateProvisioningTemplate',
  CREATE_PROVISIONING_TEMPLATE_VERSION = 'CreateProvisioningTemplateVersion',
  CREATE_ROLE_ALIAS = 'CreateRoleAlias',
  CREATE_SCHEDULED_AUDIT = 'CreateScheduledAudit',
  CREATE_SECURITY_PROFILE = 'CreateSecurityProfile',
  CREATE_STREAM = 'CreateStream',
  CREATE_THING = 'CreateThing',
  CREATE_THING_GROUP = 'CreateThingGroup',
  CREATE_THING_TYPE = 'CreateThingType',
  CREATE_TOPIC_RULE = 'CreateTopicRule',
  DELETE_ACCOUNT_AUDIT_CONFIGURATION = 'DeleteAccountAuditConfiguration',
  DELETE_AUTHORIZER = 'DeleteAuthorizer',
  DELETE_BILLING_GROUP = 'DeleteBillingGroup',
  DELETE_CA_CERTIFICATE = 'DeleteCACertificate',
  DELETE_CERTIFICATE = 'DeleteCertificate',
  DELETE_DYNAMIC_THING_GROUP = 'DeleteDynamicThingGroup',
  DELETE_JOB = 'DeleteJob',
  DELETE_JOB_EXECUTION = 'DeleteJobExecution',
  DELETE_OTA_UPDATE = 'DeleteOTAUpdate',
  DELETE_POLICY = 'DeletePolicy',
  DELETE_POLICY_VERSION = 'DeletePolicyVersion',
  DELETE_PROVISIONING_TEMPLATE = 'DeleteProvisioningTemplate',
  DELETE_PROVISIONING_TEMPLATE_VERSION = 'DeleteProvisioningTemplateVersion',
  DELETE_REGISTRATION_CODE = 'DeleteRegistrationCode',
  DELETE_ROLE_ALIAS = 'DeleteRoleAlias',
  DELETE_SCHEDULED_AUDIT = 'DeleteScheduledAudit',
  DELETE_SECURITY_PROFILE = 'DeleteSecurityProfile',
  DELETE_STREAM = 'DeleteStream',
  DELETE_THING = 'DeleteThing',
  DELETE_THING_GROUP = 'DeleteThingGroup',
  DELETE_THING_SHADOW = 'DeleteThingShadow',
  DELETE_THING_TYPE = 'DeleteThingType',
  DELETE_TOPIC_RULE = 'DeleteTopicRule',
  DELETE_V_2_LOGGING_LEVEL = 'DeleteV2LoggingLevel',
  DEPRECATE_THING_TYPE = 'DeprecateThingType',
  DESCRIBE_ACCOUNT_AUDIT_CONFIGURATION = 'DescribeAccountAuditConfiguration',
  DESCRIBE_AUDIT_TASK = 'DescribeAuditTask',
  DESCRIBE_AUTHORIZER = 'DescribeAuthorizer',
  DESCRIBE_BILLING_GROUP = 'DescribeBillingGroup',
  DESCRIBE_CA_CERTIFICATE = 'DescribeCACertificate',
  DESCRIBE_CERTIFICATE = 'DescribeCertificate',
  DESCRIBE_DEFAULT_AUTHORIZER = 'DescribeDefaultAuthorizer',
  DESCRIBE_ENDPOINT = 'DescribeEndpoint',
  DESCRIBE_EVENT_CONFIGURATIONS = 'DescribeEventConfigurations',
  DESCRIBE_INDEX = 'DescribeIndex',
  DESCRIBE_JOB = 'DescribeJob',
  DESCRIBE_JOB_EXECUTION = 'DescribeJobExecution',
  DESCRIBE_PROVISIONING_TEMPLATE = 'DescribeProvisioningTemplate',
  DESCRIBE_PROVISIONING_TEMPLATE_VERSION = 'DescribeProvisioningTemplateVersion',
  DESCRIBE_ROLE_ALIAS = 'DescribeRoleAlias',
  DESCRIBE_SCHEDULED_AUDIT = 'DescribeScheduledAudit',
  DESCRIBE_SECURITY_PROFILE = 'DescribeSecurityProfile',
  DESCRIBE_STREAM = 'DescribeStream',
  DESCRIBE_THING = 'DescribeThing',
  DESCRIBE_THING_GROUP = 'DescribeThingGroup',
  DESCRIBE_THING_REGISTRATION_TASK = 'DescribeThingRegistrationTask',
  DESCRIBE_THING_TYPE = 'DescribeThingType',
  DESCRIBE_TUNNEL = 'DescribeTunnel',
  DETACH_POLICY = 'DetachPolicy',
  DETACH_PRINCIPAL_POLICY = 'DetachPrincipalPolicy',
  DETACH_SECURITY_PROFILE = 'DetachSecurityProfile',
  DETACH_THING_PRINCIPAL = 'DetachThingPrincipal',
  DISABLE_TOPIC_RULE = 'DisableTopicRule',
  ENABLE_TOPIC_RULE = 'EnableTopicRule',
  GET_CARDINALITY = 'GetCardinality',
  GET_EFFECTIVE_POLICIES = 'GetEffectivePolicies',
  GET_INDEXING_CONFIGURATION = 'GetIndexingConfiguration',
  GET_JOB_DOCUMENT = 'GetJobDocument',
  GET_LOGGING_OPTIONS = 'GetLoggingOptions',
  GET_OTA_UPDATE = 'GetOTAUpdate',
  GET_PENDING_JOB_EXECUTIONS = 'GetPendingJobExecutions',
  GET_PERCENTILES = 'GetPercentiles',
  GET_POLICY = 'GetPolicy',
  GET_POLICY_VERSION = 'GetPolicyVersion',
  GET_REGISTRATION_CODE = 'GetRegistrationCode',
  GET_STATISTICS = 'GetStatistics',
  GET_THING_SHADOW = 'GetThingShadow',
  GET_TOPIC_RULE = 'GetTopicRule',
  GET_V_2_LOGGING_OPTIONS = 'GetV2LoggingOptions',
  LIST_ACTIVE_VIOLATIONS = 'ListActiveViolations',
  LIST_ATTACHED_POLICIES = 'ListAttachedPolicies',
  LIST_AUDIT_FINDINGS = 'ListAuditFindings',
  LIST_AUDIT_TASKS = 'ListAuditTasks',
  LIST_AUTHORIZERS = 'ListAuthorizers',
  LIST_BILLING_GROUPS = 'ListBillingGroups',
  LIST_CA_CERTIFICATES = 'ListCACertificates',
  LIST_CERTIFICATES = 'ListCertificates',
  LIST_CERTIFICATES_BY_CA = 'ListCertificatesByCA',
  LIST_INDICES = 'ListIndices',
  LIST_JOB_EXECUTIONS_FOR_JOB = 'ListJobExecutionsForJob',
  LIST_JOB_EXECUTIONS_FOR_THING = 'ListJobExecutionsForThing',
  LIST_JOBS = 'ListJobs',
  LIST_OTA_UPDATES = 'ListOTAUpdates',
  LIST_OUTGOING_CERTIFICATES = 'ListOutgoingCertificates',
  LIST_POLICIES = 'ListPolicies',
  LIST_POLICY_PRINCIPALS = 'ListPolicyPrincipals',
  LIST_POLICY_VERSIONS = 'ListPolicyVersions',
  LIST_PRINCIPAL_POLICIES = 'ListPrincipalPolicies',
  LIST_PRINCIPAL_THINGS = 'ListPrincipalThings',
  LIST_PROVISIONING_TEMPLATE_VERSIONS = 'ListProvisioningTemplateVersions',
  LIST_PROVISIONING_TEMPLATES = 'ListProvisioningTemplates',
  LIST_ROLE_ALIASES = 'ListRoleAliases',
  LIST_SCHEDULED_AUDITS = 'ListScheduledAudits',
  LIST_SECURITY_PROFILES = 'ListSecurityProfiles',
  LIST_SECURITY_PROFILES_FOR_TARGET = 'ListSecurityProfilesForTarget',
  LIST_STREAMS = 'ListStreams',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TARGETS_FOR_POLICY = 'ListTargetsForPolicy',
  LIST_TARGETS_FOR_SECURITY_PROFILE = 'ListTargetsForSecurityProfile',
  LIST_THING_GROUPS = 'ListThingGroups',
  LIST_THING_GROUPS_FOR_THING = 'ListThingGroupsForThing',
  LIST_THING_PRINCIPALS = 'ListThingPrincipals',
  LIST_THING_REGISTRATION_TASK_REPORTS = 'ListThingRegistrationTaskReports',
  LIST_THING_REGISTRATION_TASKS = 'ListThingRegistrationTasks',
  LIST_THING_TYPES = 'ListThingTypes',
  LIST_THINGS = 'ListThings',
  LIST_THINGS_IN_BILLING_GROUP = 'ListThingsInBillingGroup',
  LIST_THINGS_IN_THING_GROUP = 'ListThingsInThingGroup',
  LIST_TOPIC_RULES = 'ListTopicRules',
  LIST_TUNNELS = 'ListTunnels',
  LIST_V_2_LOGGING_LEVELS = 'ListV2LoggingLevels',
  LIST_VIOLATION_EVENTS = 'ListViolationEvents',
  OPEN_TUNNEL = 'OpenTunnel',
  PUBLISH = 'Publish',
  RECEIVE = 'Receive',
  REGISTER_CA_CERTIFICATE = 'RegisterCACertificate',
  REGISTER_CERTIFICATE = 'RegisterCertificate',
  REGISTER_CERTIFICATE_WITHOUT_CA = 'RegisterCertificateWithoutCA',
  REGISTER_THING = 'RegisterThing',
  REJECT_CERTIFICATE_TRANSFER = 'RejectCertificateTransfer',
  REMOVE_THING_FROM_BILLING_GROUP = 'RemoveThingFromBillingGroup',
  REMOVE_THING_FROM_THING_GROUP = 'RemoveThingFromThingGroup',
  REPLACE_TOPIC_RULE = 'ReplaceTopicRule',
  SEARCH_INDEX = 'SearchIndex',
  SET_DEFAULT_AUTHORIZER = 'SetDefaultAuthorizer',
  SET_DEFAULT_POLICY_VERSION = 'SetDefaultPolicyVersion',
  SET_LOGGING_OPTIONS = 'SetLoggingOptions',
  SET_V_2_LOGGING_LEVEL = 'SetV2LoggingLevel',
  SET_V_2_LOGGING_OPTIONS = 'SetV2LoggingOptions',
  START_NEXT_PENDING_JOB_EXECUTION = 'StartNextPendingJobExecution',
  START_ON_DEMAND_AUDIT_TASK = 'StartOnDemandAuditTask',
  START_THING_REGISTRATION_TASK = 'StartThingRegistrationTask',
  STOP_THING_REGISTRATION_TASK = 'StopThingRegistrationTask',
  SUBSCRIBE = 'Subscribe',
  TAG_RESOURCE = 'TagResource',
  TEST_AUTHORIZATION = 'TestAuthorization',
  TEST_INVOKE_AUTHORIZER = 'TestInvokeAuthorizer',
  TRANSFER_CERTIFICATE = 'TransferCertificate',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ACCOUNT_AUDIT_CONFIGURATION = 'UpdateAccountAuditConfiguration',
  UPDATE_AUTHORIZER = 'UpdateAuthorizer',
  UPDATE_BILLING_GROUP = 'UpdateBillingGroup',
  UPDATE_CA_CERTIFICATE = 'UpdateCACertificate',
  UPDATE_CERTIFICATE = 'UpdateCertificate',
  UPDATE_DYNAMIC_THING_GROUP = 'UpdateDynamicThingGroup',
  UPDATE_EVENT_CONFIGURATIONS = 'UpdateEventConfigurations',
  UPDATE_INDEXING_CONFIGURATION = 'UpdateIndexingConfiguration',
  UPDATE_JOB = 'UpdateJob',
  UPDATE_JOB_EXECUTION = 'UpdateJobExecution',
  UPDATE_PROVISIONING_TEMPLATE = 'UpdateProvisioningTemplate',
  UPDATE_ROLE_ALIAS = 'UpdateRoleAlias',
  UPDATE_SCHEDULED_AUDIT = 'UpdateScheduledAudit',
  UPDATE_SECURITY_PROFILE = 'UpdateSecurityProfile',
  UPDATE_STREAM = 'UpdateStream',
  UPDATE_THING = 'UpdateThing',
  UPDATE_THING_GROUP = 'UpdateThingGroup',
  UPDATE_THING_GROUPS_FOR_THING = 'UpdateThingGroupsForThing',
  UPDATE_THING_SHADOW = 'UpdateThingShadow',
  VALIDATE_SECURITY_PROFILE_BEHAVIORS = 'ValidateSecurityProfileBehaviors',
}

export enum Migrationhub {
  ASSOCIATE_CREATED_ARTIFACT = 'AssociateCreatedArtifact',
  ASSOCIATE_DISCOVERED_RESOURCE = 'AssociateDiscoveredResource',
  CREATE_HOME_REGION_CONTROL = 'CreateHomeRegionControl',
  CREATE_PROGRESS_UPDATE_STREAM = 'CreateProgressUpdateStream',
  DELETE_PROGRESS_UPDATE_STREAM = 'DeleteProgressUpdateStream',
  DESCRIBE_APPLICATION_STATE = 'DescribeApplicationState',
  DESCRIBE_HOME_REGION_CONTROLS = 'DescribeHomeRegionControls',
  DESCRIBE_MIGRATION_TASK = 'DescribeMigrationTask',
  DISASSOCIATE_CREATED_ARTIFACT = 'DisassociateCreatedArtifact',
  DISASSOCIATE_DISCOVERED_RESOURCE = 'DisassociateDiscoveredResource',
  GET_HOME_REGION = 'GetHomeRegion',
  IMPORT_MIGRATION_TASK = 'ImportMigrationTask',
  LIST_CREATED_ARTIFACTS = 'ListCreatedArtifacts',
  LIST_DISCOVERED_RESOURCES = 'ListDiscoveredResources',
  LIST_MIGRATION_TASKS = 'ListMigrationTasks',
  LIST_PROGRESS_UPDATE_STREAMS = 'ListProgressUpdateStreams',
  NOTIFY_APPLICATION_STATE = 'NotifyApplicationState',
  NOTIFY_MIGRATION_TASK_STATE = 'NotifyMigrationTaskState',
  PUT_RESOURCE_ATTRIBUTES = 'PutResourceAttributes',
}

export enum Lambda {
  ADD_LAYER_VERSION_PERMISSION = 'AddLayerVersionPermission',
  ADD_PERMISSION = 'AddPermission',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_EVENT_SOURCE_MAPPING = 'CreateEventSourceMapping',
  CREATE_FUNCTION = 'CreateFunction',
  DELETE_ALIAS = 'DeleteAlias',
  DELETE_EVENT_SOURCE_MAPPING = 'DeleteEventSourceMapping',
  DELETE_FUNCTION = 'DeleteFunction',
  DELETE_FUNCTION_CONCURRENCY = 'DeleteFunctionConcurrency',
  DELETE_FUNCTION_EVENT_INVOKE_CONFIG = 'DeleteFunctionEventInvokeConfig',
  DELETE_LAYER_VERSION = 'DeleteLayerVersion',
  DELETE_PROVISIONED_CONCURRENCY_CONFIG = 'DeleteProvisionedConcurrencyConfig',
  DISABLE_REPLICATION = 'DisableReplication',
  ENABLE_REPLICATION = 'EnableReplication',
  GET_ACCOUNT_SETTINGS = 'GetAccountSettings',
  GET_ALIAS = 'GetAlias',
  GET_EVENT_SOURCE_MAPPING = 'GetEventSourceMapping',
  GET_FUNCTION = 'GetFunction',
  GET_FUNCTION_CONCURRENCY = 'GetFunctionConcurrency',
  GET_FUNCTION_CONFIGURATION = 'GetFunctionConfiguration',
  GET_FUNCTION_EVENT_INVOKE_CONFIG = 'GetFunctionEventInvokeConfig',
  GET_LAYER_VERSION = 'GetLayerVersion',
  GET_LAYER_VERSION_BY_ARN = 'GetLayerVersionByArn',
  GET_LAYER_VERSION_POLICY = 'GetLayerVersionPolicy',
  GET_POLICY = 'GetPolicy',
  GET_PROVISIONED_CONCURRENCY_CONFIG = 'GetProvisionedConcurrencyConfig',
  INVOKE_ASYNC = 'InvokeAsync',
  INVOKE_FUNCTION = 'InvokeFunction',
  LIST_ALIASES = 'ListAliases',
  LIST_EVENT_SOURCE_MAPPINGS = 'ListEventSourceMappings',
  LIST_FUNCTION_EVENT_INVOKE_CONFIGS = 'ListFunctionEventInvokeConfigs',
  LIST_FUNCTIONS = 'ListFunctions',
  LIST_LAYER_VERSIONS = 'ListLayerVersions',
  LIST_LAYERS = 'ListLayers',
  LIST_PROVISIONED_CONCURRENCY_CONFIGS = 'ListProvisionedConcurrencyConfigs',
  LIST_TAGS = 'ListTags',
  LIST_VERSIONS_BY_FUNCTION = 'ListVersionsByFunction',
  PUBLISH_LAYER_VERSION = 'PublishLayerVersion',
  PUBLISH_VERSION = 'PublishVersion',
  PUT_FUNCTION_CONCURRENCY = 'PutFunctionConcurrency',
  PUT_FUNCTION_EVENT_INVOKE_CONFIG = 'PutFunctionEventInvokeConfig',
  PUT_PROVISIONED_CONCURRENCY_CONFIG = 'PutProvisionedConcurrencyConfig',
  REMOVE_LAYER_VERSION_PERMISSION = 'RemoveLayerVersionPermission',
  REMOVE_PERMISSION = 'RemovePermission',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ALIAS = 'UpdateAlias',
  UPDATE_EVENT_SOURCE_MAPPING = 'UpdateEventSourceMapping',
  UPDATE_FUNCTION_CODE = 'UpdateFunctionCode',
  UPDATE_FUNCTION_CONFIGURATION = 'UpdateFunctionConfiguration',
  UPDATE_FUNCTION_EVENT_INVOKE_CONFIG = 'UpdateFunctionEventInvokeConfig',
}

export enum Dataexchange {
  CANCEL_JOB = 'CancelJob',
  CREATE_ASSET = 'CreateAsset',
  CREATE_DATA_SET = 'CreateDataSet',
  CREATE_JOB = 'CreateJob',
  CREATE_REVISION = 'CreateRevision',
  DELETE_ASSET = 'DeleteAsset',
  DELETE_DATA_SET = 'DeleteDataSet',
  DELETE_REVISION = 'DeleteRevision',
  GET_ASSET = 'GetAsset',
  GET_DATA_SET = 'GetDataSet',
  GET_JOB = 'GetJob',
  GET_REVISION = 'GetRevision',
  LIST_DATA_SET_REVISIONS = 'ListDataSetRevisions',
  LIST_DATA_SETS = 'ListDataSets',
  LIST_JOBS = 'ListJobs',
  LIST_REVISION_ASSETS = 'ListRevisionAssets',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_JOB = 'StartJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ASSET = 'UpdateAsset',
  UPDATE_DATA_SET = 'UpdateDataSet',
  UPDATE_REVISION = 'UpdateRevision',
}

export enum Machinelearning {
  ADD_TAGS = 'AddTags',
  CREATE_BATCH_PREDICTION = 'CreateBatchPrediction',
  CREATE_DATA_SOURCE_FROM_RDS = 'CreateDataSourceFromRDS',
  CREATE_DATA_SOURCE_FROM_REDSHIFT = 'CreateDataSourceFromRedshift',
  CREATE_DATA_SOURCE_FROM_S_3 = 'CreateDataSourceFromS3',
  CREATE_EVALUATION = 'CreateEvaluation',
  CREATE_ML_MODEL = 'CreateMLModel',
  CREATE_REALTIME_ENDPOINT = 'CreateRealtimeEndpoint',
  DELETE_BATCH_PREDICTION = 'DeleteBatchPrediction',
  DELETE_DATA_SOURCE = 'DeleteDataSource',
  DELETE_EVALUATION = 'DeleteEvaluation',
  DELETE_ML_MODEL = 'DeleteMLModel',
  DELETE_REALTIME_ENDPOINT = 'DeleteRealtimeEndpoint',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_BATCH_PREDICTIONS = 'DescribeBatchPredictions',
  DESCRIBE_DATA_SOURCES = 'DescribeDataSources',
  DESCRIBE_EVALUATIONS = 'DescribeEvaluations',
  DESCRIBE_ML_MODELS = 'DescribeMLModels',
  DESCRIBE_TAGS = 'DescribeTags',
  GET_BATCH_PREDICTION = 'GetBatchPrediction',
  GET_DATA_SOURCE = 'GetDataSource',
  GET_EVALUATION = 'GetEvaluation',
  GET_ML_MODEL = 'GetMLModel',
  PREDICT = 'Predict',
  UPDATE_BATCH_PREDICTION = 'UpdateBatchPrediction',
  UPDATE_DATA_SOURCE = 'UpdateDataSource',
  UPDATE_EVALUATION = 'UpdateEvaluation',
  UPDATE_ML_MODEL = 'UpdateMLModel',
}

export enum Guardduty {
  ACCEPT_INVITATION = 'AcceptInvitation',
  ARCHIVE_FINDINGS = 'ArchiveFindings',
  CREATE_DETECTOR = 'CreateDetector',
  CREATE_FILTER = 'CreateFilter',
  CREATE_IP_SET = 'CreateIPSet',
  CREATE_MEMBERS = 'CreateMembers',
  CREATE_PUBLISHING_DESTINATION = 'CreatePublishingDestination',
  CREATE_SAMPLE_FINDINGS = 'CreateSampleFindings',
  CREATE_THREAT_INTEL_SET = 'CreateThreatIntelSet',
  DECLINE_INVITATIONS = 'DeclineInvitations',
  DELETE_DETECTOR = 'DeleteDetector',
  DELETE_FILTER = 'DeleteFilter',
  DELETE_IP_SET = 'DeleteIPSet',
  DELETE_INVITATIONS = 'DeleteInvitations',
  DELETE_MEMBERS = 'DeleteMembers',
  DELETE_PUBLISHING_DESTINATION = 'DeletePublishingDestination',
  DELETE_THREAT_INTEL_SET = 'DeleteThreatIntelSet',
  DESCRIBE_PUBLISHING_DESTINATION = 'DescribePublishingDestination',
  DISASSOCIATE_FROM_MASTER_ACCOUNT = 'DisassociateFromMasterAccount',
  DISASSOCIATE_MEMBERS = 'DisassociateMembers',
  GET_DETECTOR = 'GetDetector',
  GET_FILTER = 'GetFilter',
  GET_FINDINGS = 'GetFindings',
  GET_FINDINGS_STATISTICS = 'GetFindingsStatistics',
  GET_IP_SET = 'GetIPSet',
  GET_INVITATIONS_COUNT = 'GetInvitationsCount',
  GET_MASTER_ACCOUNT = 'GetMasterAccount',
  GET_MEMBERS = 'GetMembers',
  GET_THREAT_INTEL_SET = 'GetThreatIntelSet',
  INVITE_MEMBERS = 'InviteMembers',
  LIST_DETECTORS = 'ListDetectors',
  LIST_FILTERS = 'ListFilters',
  LIST_FINDINGS = 'ListFindings',
  LIST_INVITATIONS = 'ListInvitations',
  LIST_MEMBERS = 'ListMembers',
  LIST_PUBLISHING_DESTINATIONS = 'ListPublishingDestinations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_THREAT_INTEL_SETS = 'ListThreatIntelSets',
  START_MONITORING_MEMBERS = 'StartMonitoringMembers',
  STOP_MONITORING_MEMBERS = 'StopMonitoringMembers',
  TAG_RESOURCE = 'TagResource',
  UNARCHIVE_FINDINGS = 'UnarchiveFindings',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DETECTOR = 'UpdateDetector',
  UPDATE_FILTER = 'UpdateFilter',
  UPDATE_FINDINGS_FEEDBACK = 'UpdateFindingsFeedback',
  UPDATE_IP_SET = 'UpdateIPSet',
  UPDATE_PUBLISHING_DESTINATION = 'UpdatePublishingDestination',
  UPDATE_THREAT_INTEL_SET = 'UpdateThreatIntelSet',
}

export enum Eventbridge {
  ACTIVATE_EVENT_SOURCE = 'ActivateEventSource',
  CREATE_EVENT_BUS = 'CreateEventBus',
  CREATE_PARTNER_EVENT_SOURCE = 'CreatePartnerEventSource',
  DEACTIVATE_EVENT_SOURCE = 'DeactivateEventSource',
  DELETE_EVENT_BUS = 'DeleteEventBus',
  DELETE_PARTNER_EVENT_SOURCE = 'DeletePartnerEventSource',
  DELETE_RULE = 'DeleteRule',
  DESCRIBE_EVENT_BUS = 'DescribeEventBus',
  DESCRIBE_EVENT_SOURCE = 'DescribeEventSource',
  DESCRIBE_PARTNER_EVENT_SOURCE = 'DescribePartnerEventSource',
  DESCRIBE_RULE = 'DescribeRule',
  DISABLE_RULE = 'DisableRule',
  ENABLE_RULE = 'EnableRule',
  LIST_EVENT_BUSES = 'ListEventBuses',
  LIST_EVENT_SOURCES = 'ListEventSources',
  LIST_PARTNER_EVENT_SOURCE_ACCOUNTS = 'ListPartnerEventSourceAccounts',
  LIST_PARTNER_EVENT_SOURCES = 'ListPartnerEventSources',
  LIST_RULE_NAMES_BY_TARGET = 'ListRuleNamesByTarget',
  LIST_RULES = 'ListRules',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TARGETS_BY_RULE = 'ListTargetsByRule',
  PUT_EVENTS = 'PutEvents',
  PUT_PARTNER_EVENTS = 'PutPartnerEvents',
  PUT_PERMISSION = 'PutPermission',
  PUT_RULE = 'PutRule',
  PUT_TARGETS = 'PutTargets',
  REMOVE_PERMISSION = 'RemovePermission',
  REMOVE_TARGETS = 'RemoveTargets',
  TAG_RESOURCE = 'TagResource',
  TEST_EVENT_PATTERN = 'TestEventPattern',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Lex {
  CREATE_BOT_VERSION = 'CreateBotVersion',
  CREATE_INTENT_VERSION = 'CreateIntentVersion',
  CREATE_SLOT_TYPE_VERSION = 'CreateSlotTypeVersion',
  DELETE_BOT = 'DeleteBot',
  DELETE_BOT_ALIAS = 'DeleteBotAlias',
  DELETE_BOT_CHANNEL_ASSOCIATION = 'DeleteBotChannelAssociation',
  DELETE_BOT_VERSION = 'DeleteBotVersion',
  DELETE_INTENT = 'DeleteIntent',
  DELETE_INTENT_VERSION = 'DeleteIntentVersion',
  DELETE_SESSION = 'DeleteSession',
  DELETE_SLOT_TYPE = 'DeleteSlotType',
  DELETE_SLOT_TYPE_VERSION = 'DeleteSlotTypeVersion',
  DELETE_UTTERANCES = 'DeleteUtterances',
  GET_BOT = 'GetBot',
  GET_BOT_ALIAS = 'GetBotAlias',
  GET_BOT_ALIASES = 'GetBotAliases',
  GET_BOT_CHANNEL_ASSOCIATION = 'GetBotChannelAssociation',
  GET_BOT_CHANNEL_ASSOCIATIONS = 'GetBotChannelAssociations',
  GET_BOT_VERSIONS = 'GetBotVersions',
  GET_BOTS = 'GetBots',
  GET_BUILTIN_INTENT = 'GetBuiltinIntent',
  GET_BUILTIN_INTENTS = 'GetBuiltinIntents',
  GET_BUILTIN_SLOT_TYPES = 'GetBuiltinSlotTypes',
  GET_EXPORT = 'GetExport',
  GET_IMPORT = 'GetImport',
  GET_INTENT = 'GetIntent',
  GET_INTENT_VERSIONS = 'GetIntentVersions',
  GET_INTENTS = 'GetIntents',
  GET_SESSION = 'GetSession',
  GET_SLOT_TYPE = 'GetSlotType',
  GET_SLOT_TYPE_VERSIONS = 'GetSlotTypeVersions',
  GET_SLOT_TYPES = 'GetSlotTypes',
  GET_UTTERANCES_VIEW = 'GetUtterancesView',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  POST_CONTENT = 'PostContent',
  POST_TEXT = 'PostText',
  PUT_BOT = 'PutBot',
  PUT_BOT_ALIAS = 'PutBotAlias',
  PUT_INTENT = 'PutIntent',
  PUT_SESSION = 'PutSession',
  PUT_SLOT_TYPE = 'PutSlotType',
  START_IMPORT = 'StartImport',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Resourceaccessmanager {
  ACCEPT_RESOURCE_SHARE_INVITATION = 'AcceptResourceShareInvitation',
  ASSOCIATE_RESOURCE_SHARE = 'AssociateResourceShare',
  ASSOCIATE_RESOURCE_SHARE_PERMISSION = 'AssociateResourceSharePermission',
  CREATE_RESOURCE_SHARE = 'CreateResourceShare',
  DELETE_RESOURCE_SHARE = 'DeleteResourceShare',
  DISASSOCIATE_RESOURCE_SHARE = 'DisassociateResourceShare',
  DISASSOCIATE_RESOURCE_SHARE_PERMISSION = 'DisassociateResourceSharePermission',
  ENABLE_SHARING_WITH_AWS_ORGANIZATION = 'EnableSharingWithAwsOrganization',
  GET_PERMISSION = 'GetPermission',
  GET_RESOURCE_POLICIES = 'GetResourcePolicies',
  GET_RESOURCE_SHARE_ASSOCIATIONS = 'GetResourceShareAssociations',
  GET_RESOURCE_SHARE_INVITATIONS = 'GetResourceShareInvitations',
  GET_RESOURCE_SHARES = 'GetResourceShares',
  LIST_PENDING_INVITATION_RESOURCES = 'ListPendingInvitationResources',
  LIST_PERMISSIONS = 'ListPermissions',
  LIST_PRINCIPALS = 'ListPrincipals',
  LIST_RESOURCE_SHARE_PERMISSIONS = 'ListResourceSharePermissions',
  LIST_RESOURCES = 'ListResources',
  REJECT_RESOURCE_SHARE_INVITATION = 'RejectResourceShareInvitation',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_RESOURCE_SHARE = 'UpdateResourceShare',
}

export enum Elementalmediaconnect {
  ADD_FLOW_OUTPUTS = 'AddFlowOutputs',
  CREATE_FLOW = 'CreateFlow',
  DELETE_FLOW = 'DeleteFlow',
  DESCRIBE_FLOW = 'DescribeFlow',
  GRANT_FLOW_ENTITLEMENTS = 'GrantFlowEntitlements',
  LIST_ENTITLEMENTS = 'ListEntitlements',
  LIST_FLOWS = 'ListFlows',
  REMOVE_FLOW_OUTPUT = 'RemoveFlowOutput',
  REVOKE_FLOW_ENTITLEMENT = 'RevokeFlowEntitlement',
  START_FLOW = 'StartFlow',
  STOP_FLOW = 'StopFlow',
  UPDATE_FLOW_ENTITLEMENT = 'UpdateFlowEntitlement',
  UPDATE_FLOW_OUTPUT = 'UpdateFlowOutput',
  UPDATE_FLOW_SOURCE = 'UpdateFlowSource',
}

export enum S3 {
  ABORT_MULTIPART_UPLOAD = 'AbortMultipartUpload',
  BYPASS_GOVERNANCE_RETENTION = 'BypassGovernanceRetention',
  CREATE_ACCESS_POINT = 'CreateAccessPoint',
  CREATE_BUCKET = 'CreateBucket',
  CREATE_JOB = 'CreateJob',
  DELETE_ACCESS_POINT = 'DeleteAccessPoint',
  DELETE_ACCESS_POINT_POLICY = 'DeleteAccessPointPolicy',
  DELETE_BUCKET = 'DeleteBucket',
  DELETE_BUCKET_POLICY = 'DeleteBucketPolicy',
  DELETE_BUCKET_WEBSITE = 'DeleteBucketWebsite',
  DELETE_OBJECT = 'DeleteObject',
  DELETE_OBJECT_TAGGING = 'DeleteObjectTagging',
  DELETE_OBJECT_VERSION = 'DeleteObjectVersion',
  DELETE_OBJECT_VERSION_TAGGING = 'DeleteObjectVersionTagging',
  DESCRIBE_JOB = 'DescribeJob',
  GET_ACCELERATE_CONFIGURATION = 'GetAccelerateConfiguration',
  GET_ACCESS_POINT = 'GetAccessPoint',
  GET_ACCESS_POINT_POLICY = 'GetAccessPointPolicy',
  GET_ACCESS_POINT_POLICY_STATUS = 'GetAccessPointPolicyStatus',
  GET_ACCOUNT_PUBLIC_ACCESS_BLOCK = 'GetAccountPublicAccessBlock',
  GET_ANALYTICS_CONFIGURATION = 'GetAnalyticsConfiguration',
  GET_BUCKET_ACL = 'GetBucketAcl',
  GET_BUCKET_CORS = 'GetBucketCORS',
  GET_BUCKET_LOCATION = 'GetBucketLocation',
  GET_BUCKET_LOGGING = 'GetBucketLogging',
  GET_BUCKET_NOTIFICATION = 'GetBucketNotification',
  GET_BUCKET_OBJECT_LOCK_CONFIGURATION = 'GetBucketObjectLockConfiguration',
  GET_BUCKET_POLICY = 'GetBucketPolicy',
  GET_BUCKET_POLICY_STATUS = 'GetBucketPolicyStatus',
  GET_BUCKET_PUBLIC_ACCESS_BLOCK = 'GetBucketPublicAccessBlock',
  GET_BUCKET_REQUEST_PAYMENT = 'GetBucketRequestPayment',
  GET_BUCKET_TAGGING = 'GetBucketTagging',
  GET_BUCKET_VERSIONING = 'GetBucketVersioning',
  GET_BUCKET_WEBSITE = 'GetBucketWebsite',
  GET_ENCRYPTION_CONFIGURATION = 'GetEncryptionConfiguration',
  GET_INVENTORY_CONFIGURATION = 'GetInventoryConfiguration',
  GET_LIFECYCLE_CONFIGURATION = 'GetLifecycleConfiguration',
  GET_METRICS_CONFIGURATION = 'GetMetricsConfiguration',
  GET_OBJECT = 'GetObject',
  GET_OBJECT_ACL = 'GetObjectAcl',
  GET_OBJECT_LEGAL_HOLD = 'GetObjectLegalHold',
  GET_OBJECT_RETENTION = 'GetObjectRetention',
  GET_OBJECT_TAGGING = 'GetObjectTagging',
  GET_OBJECT_TORRENT = 'GetObjectTorrent',
  GET_OBJECT_VERSION = 'GetObjectVersion',
  GET_OBJECT_VERSION_ACL = 'GetObjectVersionAcl',
  GET_OBJECT_VERSION_FOR_REPLICATION = 'GetObjectVersionForReplication',
  GET_OBJECT_VERSION_TAGGING = 'GetObjectVersionTagging',
  GET_OBJECT_VERSION_TORRENT = 'GetObjectVersionTorrent',
  GET_REPLICATION_CONFIGURATION = 'GetReplicationConfiguration',
  HEAD_BUCKET = 'HeadBucket',
  LIST_ACCESS_POINTS = 'ListAccessPoints',
  LIST_ALL_MY_BUCKETS = 'ListAllMyBuckets',
  LIST_BUCKET = 'ListBucket',
  LIST_BUCKET_MULTIPART_UPLOADS = 'ListBucketMultipartUploads',
  LIST_BUCKET_VERSIONS = 'ListBucketVersions',
  LIST_JOBS = 'ListJobs',
  LIST_MULTIPART_UPLOAD_PARTS = 'ListMultipartUploadParts',
  OBJECT_OWNER_OVERRIDE_TO_BUCKET_OWNER = 'ObjectOwnerOverrideToBucketOwner',
  PUT_ACCELERATE_CONFIGURATION = 'PutAccelerateConfiguration',
  PUT_ACCESS_POINT_POLICY = 'PutAccessPointPolicy',
  PUT_ACCOUNT_PUBLIC_ACCESS_BLOCK = 'PutAccountPublicAccessBlock',
  PUT_ANALYTICS_CONFIGURATION = 'PutAnalyticsConfiguration',
  PUT_BUCKET_ACL = 'PutBucketAcl',
  PUT_BUCKET_CORS = 'PutBucketCORS',
  PUT_BUCKET_LOGGING = 'PutBucketLogging',
  PUT_BUCKET_NOTIFICATION = 'PutBucketNotification',
  PUT_BUCKET_OBJECT_LOCK_CONFIGURATION = 'PutBucketObjectLockConfiguration',
  PUT_BUCKET_POLICY = 'PutBucketPolicy',
  PUT_BUCKET_PUBLIC_ACCESS_BLOCK = 'PutBucketPublicAccessBlock',
  PUT_BUCKET_REQUEST_PAYMENT = 'PutBucketRequestPayment',
  PUT_BUCKET_TAGGING = 'PutBucketTagging',
  PUT_BUCKET_VERSIONING = 'PutBucketVersioning',
  PUT_BUCKET_WEBSITE = 'PutBucketWebsite',
  PUT_ENCRYPTION_CONFIGURATION = 'PutEncryptionConfiguration',
  PUT_INVENTORY_CONFIGURATION = 'PutInventoryConfiguration',
  PUT_LIFECYCLE_CONFIGURATION = 'PutLifecycleConfiguration',
  PUT_METRICS_CONFIGURATION = 'PutMetricsConfiguration',
  PUT_OBJECT = 'PutObject',
  PUT_OBJECT_ACL = 'PutObjectAcl',
  PUT_OBJECT_LEGAL_HOLD = 'PutObjectLegalHold',
  PUT_OBJECT_RETENTION = 'PutObjectRetention',
  PUT_OBJECT_TAGGING = 'PutObjectTagging',
  PUT_OBJECT_VERSION_ACL = 'PutObjectVersionAcl',
  PUT_OBJECT_VERSION_TAGGING = 'PutObjectVersionTagging',
  PUT_REPLICATION_CONFIGURATION = 'PutReplicationConfiguration',
  REPLICATE_DELETE = 'ReplicateDelete',
  REPLICATE_OBJECT = 'ReplicateObject',
  REPLICATE_TAGS = 'ReplicateTags',
  RESTORE_OBJECT = 'RestoreObject',
  UPDATE_JOB_PRIORITY = 'UpdateJobPriority',
  UPDATE_JOB_STATUS = 'UpdateJobStatus',
}

export enum Sagemaker {
  ADD_TAGS = 'AddTags',
  ASSOCIATE_TRIAL_COMPONENT = 'AssociateTrialComponent',
  BATCH_GET_METRICS = 'BatchGetMetrics',
  BATCH_PUT_METRICS = 'BatchPutMetrics',
  CREATE_ALGORITHM = 'CreateAlgorithm',
  CREATE_APP = 'CreateApp',
  CREATE_AUTO_ML_JOB = 'CreateAutoMLJob',
  CREATE_CODE_REPOSITORY = 'CreateCodeRepository',
  CREATE_COMPILATION_JOB = 'CreateCompilationJob',
  CREATE_DOMAIN = 'CreateDomain',
  CREATE_ENDPOINT = 'CreateEndpoint',
  CREATE_ENDPOINT_CONFIG = 'CreateEndpointConfig',
  CREATE_EXPERIMENT = 'CreateExperiment',
  CREATE_FLOW_DEFINITION = 'CreateFlowDefinition',
  CREATE_HUMAN_TASK_UI = 'CreateHumanTaskUi',
  CREATE_HYPER_PARAMETER_TUNING_JOB = 'CreateHyperParameterTuningJob',
  CREATE_LABELING_JOB = 'CreateLabelingJob',
  CREATE_MODEL = 'CreateModel',
  CREATE_MODEL_PACKAGE = 'CreateModelPackage',
  CREATE_MONITORING_SCHEDULE = 'CreateMonitoringSchedule',
  CREATE_NOTEBOOK_INSTANCE = 'CreateNotebookInstance',
  CREATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'CreateNotebookInstanceLifecycleConfig',
  CREATE_PRESIGNED_DOMAIN_URL = 'CreatePresignedDomainUrl',
  CREATE_PRESIGNED_NOTEBOOK_INSTANCE_URL = 'CreatePresignedNotebookInstanceUrl',
  CREATE_PROCESSING_JOB = 'CreateProcessingJob',
  CREATE_TRAINING_JOB = 'CreateTrainingJob',
  CREATE_TRANSFORM_JOB = 'CreateTransformJob',
  CREATE_TRIAL = 'CreateTrial',
  CREATE_TRIAL_COMPONENT = 'CreateTrialComponent',
  CREATE_USER_PROFILE = 'CreateUserProfile',
  CREATE_WORKTEAM = 'CreateWorkteam',
  DELETE_ALGORITHM = 'DeleteAlgorithm',
  DELETE_APP = 'DeleteApp',
  DELETE_CODE_REPOSITORY = 'DeleteCodeRepository',
  DELETE_DOMAIN = 'DeleteDomain',
  DELETE_ENDPOINT = 'DeleteEndpoint',
  DELETE_ENDPOINT_CONFIG = 'DeleteEndpointConfig',
  DELETE_EXPERIMENT = 'DeleteExperiment',
  DELETE_FLOW_DEFINITION = 'DeleteFlowDefinition',
  DELETE_HUMAN_LOOP = 'DeleteHumanLoop',
  DELETE_MODEL = 'DeleteModel',
  DELETE_MODEL_PACKAGE = 'DeleteModelPackage',
  DELETE_MONITORING_SCHEDULE = 'DeleteMonitoringSchedule',
  DELETE_NOTEBOOK_INSTANCE = 'DeleteNotebookInstance',
  DELETE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'DeleteNotebookInstanceLifecycleConfig',
  DELETE_TAGS = 'DeleteTags',
  DELETE_TRIAL = 'DeleteTrial',
  DELETE_TRIAL_COMPONENT = 'DeleteTrialComponent',
  DELETE_USER_PROFILE = 'DeleteUserProfile',
  DELETE_WORKTEAM = 'DeleteWorkteam',
  DESCRIBE_ALGORITHM = 'DescribeAlgorithm',
  DESCRIBE_APP = 'DescribeApp',
  DESCRIBE_AUTO_ML_JOB = 'DescribeAutoMLJob',
  DESCRIBE_CODE_REPOSITORY = 'DescribeCodeRepository',
  DESCRIBE_COMPILATION_JOB = 'DescribeCompilationJob',
  DESCRIBE_DOMAIN = 'DescribeDomain',
  DESCRIBE_ENDPOINT = 'DescribeEndpoint',
  DESCRIBE_ENDPOINT_CONFIG = 'DescribeEndpointConfig',
  DESCRIBE_EXPERIMENT = 'DescribeExperiment',
  DESCRIBE_FLOW_DEFINITION = 'DescribeFlowDefinition',
  DESCRIBE_HUMAN_LOOP = 'DescribeHumanLoop',
  DESCRIBE_HUMAN_TASK_UI = 'DescribeHumanTaskUi',
  DESCRIBE_HYPER_PARAMETER_TUNING_JOB = 'DescribeHyperParameterTuningJob',
  DESCRIBE_LABELING_JOB = 'DescribeLabelingJob',
  DESCRIBE_MODEL = 'DescribeModel',
  DESCRIBE_MODEL_PACKAGE = 'DescribeModelPackage',
  DESCRIBE_MONITORING_SCHEDULE = 'DescribeMonitoringSchedule',
  DESCRIBE_NOTEBOOK_INSTANCE = 'DescribeNotebookInstance',
  DESCRIBE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'DescribeNotebookInstanceLifecycleConfig',
  DESCRIBE_PROCESSING_JOB = 'DescribeProcessingJob',
  DESCRIBE_SUBSCRIBED_WORKTEAM = 'DescribeSubscribedWorkteam',
  DESCRIBE_TRAINING_JOB = 'DescribeTrainingJob',
  DESCRIBE_TRANSFORM_JOB = 'DescribeTransformJob',
  DESCRIBE_TRIAL = 'DescribeTrial',
  DESCRIBE_TRIAL_COMPONENT = 'DescribeTrialComponent',
  DESCRIBE_USER_PROFILE = 'DescribeUserProfile',
  DESCRIBE_WORKFORCE = 'DescribeWorkforce',
  DESCRIBE_WORKTEAM = 'DescribeWorkteam',
  DISASSOCIATE_TRIAL_COMPONENT = 'DisassociateTrialComponent',
  GET_SEARCH_SUGGESTIONS = 'GetSearchSuggestions',
  INVOKE_ENDPOINT = 'InvokeEndpoint',
  LIST_ALGORITHMS = 'ListAlgorithms',
  LIST_APPS = 'ListApps',
  LIST_AUTO_ML_JOBS = 'ListAutoMLJobs',
  LIST_CANDIDATES_FOR_AUTO_ML_JOB = 'ListCandidatesForAutoMLJob',
  LIST_CODE_REPOSITORIES = 'ListCodeRepositories',
  LIST_COMPILATION_JOBS = 'ListCompilationJobs',
  LIST_DOMAINS = 'ListDomains',
  LIST_ENDPOINT_CONFIGS = 'ListEndpointConfigs',
  LIST_ENDPOINTS = 'ListEndpoints',
  LIST_EXPERIMENTS = 'ListExperiments',
  LIST_FLOW_DEFINITIONS = 'ListFlowDefinitions',
  LIST_HUMAN_LOOPS = 'ListHumanLoops',
  LIST_HUMAN_TASK_UIS = 'ListHumanTaskUis',
  LIST_HYPER_PARAMETER_TUNING_JOBS = 'ListHyperParameterTuningJobs',
  LIST_LABELING_JOBS = 'ListLabelingJobs',
  LIST_LABELING_JOBS_FOR_WORKTEAM = 'ListLabelingJobsForWorkteam',
  LIST_MODEL_PACKAGES = 'ListModelPackages',
  LIST_MODELS = 'ListModels',
  LIST_MONITORING_EXECUTIONS = 'ListMonitoringExecutions',
  LIST_MONITORING_SCHEDULES = 'ListMonitoringSchedules',
  LIST_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIGS = 'ListNotebookInstanceLifecycleConfigs',
  LIST_NOTEBOOK_INSTANCES = 'ListNotebookInstances',
  LIST_PROCESSING_JOBS = 'ListProcessingJobs',
  LIST_SUBSCRIBED_WORKTEAMS = 'ListSubscribedWorkteams',
  LIST_TAGS = 'ListTags',
  LIST_TRAINING_JOBS = 'ListTrainingJobs',
  LIST_TRAINING_JOBS_FOR_HYPER_PARAMETER_TUNING_JOB = 'ListTrainingJobsForHyperParameterTuningJob',
  LIST_TRANSFORM_JOBS = 'ListTransformJobs',
  LIST_TRIAL_COMPONENTS = 'ListTrialComponents',
  LIST_TRIALS = 'ListTrials',
  LIST_USER_PROFILES = 'ListUserProfiles',
  LIST_WORKTEAMS = 'ListWorkteams',
  RENDER_UI_TEMPLATE = 'RenderUiTemplate',
  SEARCH = 'Search',
  START_HUMAN_LOOP = 'StartHumanLoop',
  START_MONITORING_SCHEDULE = 'StartMonitoringSchedule',
  START_NOTEBOOK_INSTANCE = 'StartNotebookInstance',
  STOP_AUTO_ML_JOB = 'StopAutoMLJob',
  STOP_COMPILATION_JOB = 'StopCompilationJob',
  STOP_HUMAN_LOOP = 'StopHumanLoop',
  STOP_HYPER_PARAMETER_TUNING_JOB = 'StopHyperParameterTuningJob',
  STOP_LABELING_JOB = 'StopLabelingJob',
  STOP_MONITORING_SCHEDULE = 'StopMonitoringSchedule',
  STOP_NOTEBOOK_INSTANCE = 'StopNotebookInstance',
  STOP_PROCESSING_JOB = 'StopProcessingJob',
  STOP_TRAINING_JOB = 'StopTrainingJob',
  STOP_TRANSFORM_JOB = 'StopTransformJob',
  UPDATE_CODE_REPOSITORY = 'UpdateCodeRepository',
  UPDATE_DOMAIN = 'UpdateDomain',
  UPDATE_ENDPOINT = 'UpdateEndpoint',
  UPDATE_ENDPOINT_WEIGHTS_AND_CAPACITIES = 'UpdateEndpointWeightsAndCapacities',
  UPDATE_EXPERIMENT = 'UpdateExperiment',
  UPDATE_MONITORING_SCHEDULE = 'UpdateMonitoringSchedule',
  UPDATE_NOTEBOOK_INSTANCE = 'UpdateNotebookInstance',
  UPDATE_NOTEBOOK_INSTANCE_LIFECYCLE_CONFIG = 'UpdateNotebookInstanceLifecycleConfig',
  UPDATE_TRIAL = 'UpdateTrial',
  UPDATE_TRIAL_COMPONENT = 'UpdateTrialComponent',
  UPDATE_USER_PROFILE = 'UpdateUserProfile',
  UPDATE_WORKFORCE = 'UpdateWorkforce',
  UPDATE_WORKTEAM = 'UpdateWorkteam',
}

export enum Lakeformation {
  BATCH_GRANT_PERMISSIONS = 'BatchGrantPermissions',
  BATCH_REVOKE_PERMISSIONS = 'BatchRevokePermissions',
  DEREGISTER_RESOURCE = 'DeregisterResource',
  DESCRIBE_RESOURCE = 'DescribeResource',
  GET_DATA_ACCESS = 'GetDataAccess',
  GET_DATA_LAKE_SETTINGS = 'GetDataLakeSettings',
  GET_EFFECTIVE_PERMISSIONS_FOR_PATH = 'GetEffectivePermissionsForPath',
  GRANT_PERMISSIONS = 'GrantPermissions',
  LIST_PERMISSIONS = 'ListPermissions',
  LIST_RESOURCES = 'ListResources',
  PUT_DATA_LAKE_SETTINGS = 'PutDataLakeSettings',
  REGISTER_RESOURCE = 'RegisterResource',
  REVOKE_PERMISSIONS = 'RevokePermissions',
  UPDATE_RESOURCE = 'UpdateResource',
}

export enum Mobilehub {
  CREATE_PROJECT = 'CreateProject',
  CREATE_SERVICE_ROLE = 'CreateServiceRole',
  DELETE_PROJECT = 'DeleteProject',
  DELETE_PROJECT_SNAPSHOT = 'DeleteProjectSnapshot',
  DEPLOY_TO_STAGE = 'DeployToStage',
  DESCRIBE_BUNDLE = 'DescribeBundle',
  EXPORT_BUNDLE = 'ExportBundle',
  EXPORT_PROJECT = 'ExportProject',
  GENERATE_PROJECT_PARAMETERS = 'GenerateProjectParameters',
  GET_PROJECT = 'GetProject',
  GET_PROJECT_SNAPSHOT = 'GetProjectSnapshot',
  IMPORT_PROJECT = 'ImportProject',
  INSTALL_BUNDLE = 'InstallBundle',
  LIST_AVAILABLE_CONNECTORS = 'ListAvailableConnectors',
  LIST_AVAILABLE_FEATURES = 'ListAvailableFeatures',
  LIST_AVAILABLE_REGIONS = 'ListAvailableRegions',
  LIST_BUNDLES = 'ListBundles',
  LIST_PROJECT_SNAPSHOTS = 'ListProjectSnapshots',
  LIST_PROJECTS = 'ListProjects',
  SYNCHRONIZE_PROJECT = 'SynchronizeProject',
  UPDATE_PROJECT = 'UpdateProject',
  VALIDATE_PROJECT = 'ValidateProject',
  VERIFY_SERVICE_ROLE = 'VerifyServiceRole',
}

export enum Globalaccelerator {
  ADVERTISE_BYOIP_CIDR = 'AdvertiseByoipCidr',
  CREATE_ACCELERATOR = 'CreateAccelerator',
  CREATE_ENDPOINT_GROUP = 'CreateEndpointGroup',
  CREATE_LISTENER = 'CreateListener',
  DELETE_ACCELERATOR = 'DeleteAccelerator',
  DELETE_ENDPOINT_GROUP = 'DeleteEndpointGroup',
  DELETE_LISTENER = 'DeleteListener',
  DEPROVISION_BYOIP_CIDR = 'DeprovisionByoipCidr',
  DESCRIBE_ACCELERATOR = 'DescribeAccelerator',
  DESCRIBE_ACCELERATOR_ATTRIBUTES = 'DescribeAcceleratorAttributes',
  DESCRIBE_ENDPOINT_GROUP = 'DescribeEndpointGroup',
  DESCRIBE_LISTENER = 'DescribeListener',
  LIST_ACCELERATORS = 'ListAccelerators',
  LIST_BYOIP_CIDRS = 'ListByoipCidrs',
  LIST_ENDPOINT_GROUPS = 'ListEndpointGroups',
  LIST_LISTENERS = 'ListListeners',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PROVISION_BYOIP_CIDR = 'ProvisionByoipCidr',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ACCELERATOR = 'UpdateAccelerator',
  UPDATE_ACCELERATOR_ATTRIBUTES = 'UpdateAcceleratorAttributes',
  UPDATE_ENDPOINT_GROUP = 'UpdateEndpointGroup',
  UPDATE_LISTENER = 'UpdateListener',
  WITHDRAW_BYOIP_CIDR = 'WithdrawByoipCidr',
}

export enum Serverlessapplicationrepository {
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_APPLICATION_VERSION = 'CreateApplicationVersion',
  CREATE_CLOUD_FORMATION_CHANGE_SET = 'CreateCloudFormationChangeSet',
  CREATE_CLOUD_FORMATION_TEMPLATE = 'CreateCloudFormationTemplate',
  DELETE_APPLICATION = 'DeleteApplication',
  GET_APPLICATION = 'GetApplication',
  GET_APPLICATION_POLICY = 'GetApplicationPolicy',
  GET_CLOUD_FORMATION_TEMPLATE = 'GetCloudFormationTemplate',
  LIST_APPLICATION_DEPENDENCIES = 'ListApplicationDependencies',
  LIST_APPLICATION_VERSIONS = 'ListApplicationVersions',
  LIST_APPLICATIONS = 'ListApplications',
  PUT_APPLICATION_POLICY = 'PutApplicationPolicy',
  SEARCH_APPLICATIONS = 'SearchApplications',
  UNSHARE_APPLICATION = 'UnshareApplication',
  UPDATE_APPLICATION = 'UpdateApplication',
}

export enum Forecast {
  CREATE_DATASET = 'CreateDataset',
  CREATE_DATASET_GROUP = 'CreateDatasetGroup',
  CREATE_DATASET_IMPORT_JOB = 'CreateDatasetImportJob',
  CREATE_FORECAST = 'CreateForecast',
  CREATE_FORECAST_EXPORT_JOB = 'CreateForecastExportJob',
  CREATE_PREDICTOR = 'CreatePredictor',
  DELETE_DATASET = 'DeleteDataset',
  DELETE_DATASET_GROUP = 'DeleteDatasetGroup',
  DELETE_DATASET_IMPORT_JOB = 'DeleteDatasetImportJob',
  DELETE_FORECAST = 'DeleteForecast',
  DELETE_FORECAST_EXPORT_JOB = 'DeleteForecastExportJob',
  DELETE_PREDICTOR = 'DeletePredictor',
  DESCRIBE_DATASET = 'DescribeDataset',
  DESCRIBE_DATASET_GROUP = 'DescribeDatasetGroup',
  DESCRIBE_DATASET_IMPORT_JOB = 'DescribeDatasetImportJob',
  DESCRIBE_FORECAST = 'DescribeForecast',
  DESCRIBE_FORECAST_EXPORT_JOB = 'DescribeForecastExportJob',
  DESCRIBE_PREDICTOR = 'DescribePredictor',
  GET_ACCURACY_METRICS = 'GetAccuracyMetrics',
  LIST_DATASET_GROUPS = 'ListDatasetGroups',
  LIST_DATASET_IMPORT_JOBS = 'ListDatasetImportJobs',
  LIST_DATASETS = 'ListDatasets',
  LIST_FORECAST_EXPORT_JOBS = 'ListForecastExportJobs',
  LIST_FORECASTS = 'ListForecasts',
  LIST_PREDICTORS = 'ListPredictors',
  QUERY_FORECAST = 'QueryForecast',
  UPDATE_DATASET_GROUP = 'UpdateDatasetGroup',
}

export enum Clouddirectory {
  ADD_FACET_TO_OBJECT = 'AddFacetToObject',
  APPLY_SCHEMA = 'ApplySchema',
  ATTACH_OBJECT = 'AttachObject',
  ATTACH_POLICY = 'AttachPolicy',
  ATTACH_TO_INDEX = 'AttachToIndex',
  ATTACH_TYPED_LINK = 'AttachTypedLink',
  BATCH_READ = 'BatchRead',
  BATCH_WRITE = 'BatchWrite',
  CREATE_DIRECTORY = 'CreateDirectory',
  CREATE_FACET = 'CreateFacet',
  CREATE_INDEX = 'CreateIndex',
  CREATE_OBJECT = 'CreateObject',
  CREATE_SCHEMA = 'CreateSchema',
  CREATE_TYPED_LINK_FACET = 'CreateTypedLinkFacet',
  DELETE_DIRECTORY = 'DeleteDirectory',
  DELETE_FACET = 'DeleteFacet',
  DELETE_OBJECT = 'DeleteObject',
  DELETE_SCHEMA = 'DeleteSchema',
  DELETE_TYPED_LINK_FACET = 'DeleteTypedLinkFacet',
  DETACH_FROM_INDEX = 'DetachFromIndex',
  DETACH_OBJECT = 'DetachObject',
  DETACH_POLICY = 'DetachPolicy',
  DETACH_TYPED_LINK = 'DetachTypedLink',
  DISABLE_DIRECTORY = 'DisableDirectory',
  ENABLE_DIRECTORY = 'EnableDirectory',
  GET_DIRECTORY = 'GetDirectory',
  GET_FACET = 'GetFacet',
  GET_LINK_ATTRIBUTES = 'GetLinkAttributes',
  GET_OBJECT_ATTRIBUTES = 'GetObjectAttributes',
  GET_OBJECT_INFORMATION = 'GetObjectInformation',
  GET_SCHEMA_AS_JSON = 'GetSchemaAsJson',
  GET_TYPED_LINK_FACET_INFORMATION = 'GetTypedLinkFacetInformation',
  LIST_APPLIED_SCHEMA_ARNS = 'ListAppliedSchemaArns',
  LIST_ATTACHED_INDICES = 'ListAttachedIndices',
  LIST_DEVELOPMENT_SCHEMA_ARNS = 'ListDevelopmentSchemaArns',
  LIST_DIRECTORIES = 'ListDirectories',
  LIST_FACET_ATTRIBUTES = 'ListFacetAttributes',
  LIST_FACET_NAMES = 'ListFacetNames',
  LIST_INCOMING_TYPED_LINKS = 'ListIncomingTypedLinks',
  LIST_INDEX = 'ListIndex',
  LIST_OBJECT_ATTRIBUTES = 'ListObjectAttributes',
  LIST_OBJECT_CHILDREN = 'ListObjectChildren',
  LIST_OBJECT_PARENT_PATHS = 'ListObjectParentPaths',
  LIST_OBJECT_PARENTS = 'ListObjectParents',
  LIST_OBJECT_POLICIES = 'ListObjectPolicies',
  LIST_OUTGOING_TYPED_LINKS = 'ListOutgoingTypedLinks',
  LIST_POLICY_ATTACHMENTS = 'ListPolicyAttachments',
  LIST_PUBLISHED_SCHEMA_ARNS = 'ListPublishedSchemaArns',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TYPED_LINK_FACET_ATTRIBUTES = 'ListTypedLinkFacetAttributes',
  LIST_TYPED_LINK_FACET_NAMES = 'ListTypedLinkFacetNames',
  LOOKUP_POLICY = 'LookupPolicy',
  PUBLISH_SCHEMA = 'PublishSchema',
  PUT_SCHEMA_FROM_JSON = 'PutSchemaFromJson',
  REMOVE_FACET_FROM_OBJECT = 'RemoveFacetFromObject',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_FACET = 'UpdateFacet',
  UPDATE_LINK_ATTRIBUTES = 'UpdateLinkAttributes',
  UPDATE_OBJECT_ATTRIBUTES = 'UpdateObjectAttributes',
  UPDATE_SCHEMA = 'UpdateSchema',
  UPDATE_TYPED_LINK_FACET = 'UpdateTypedLinkFacet',
}

export enum Elementalmediatailor {
  DELETE_PLAYBACK_CONFIGURATION = 'DeletePlaybackConfiguration',
  GET_PLAYBACK_CONFIGURATION = 'GetPlaybackConfiguration',
  LIST_PLAYBACK_CONFIGURATIONS = 'ListPlaybackConfigurations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_PLAYBACK_CONFIGURATION = 'PutPlaybackConfiguration',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Route53 {
  ASSOCIATE_VPC_WITH_HOSTED_ZONE = 'AssociateVPCWithHostedZone',
  CHANGE_RESOURCE_RECORD_SETS = 'ChangeResourceRecordSets',
  CHANGE_TAGS_FOR_RESOURCE = 'ChangeTagsForResource',
  CREATE_HEALTH_CHECK = 'CreateHealthCheck',
  CREATE_HOSTED_ZONE = 'CreateHostedZone',
  CREATE_QUERY_LOGGING_CONFIG = 'CreateQueryLoggingConfig',
  CREATE_REUSABLE_DELEGATION_SET = 'CreateReusableDelegationSet',
  CREATE_TRAFFIC_POLICY = 'CreateTrafficPolicy',
  CREATE_TRAFFIC_POLICY_INSTANCE = 'CreateTrafficPolicyInstance',
  CREATE_TRAFFIC_POLICY_VERSION = 'CreateTrafficPolicyVersion',
  CREATE_VPC_ASSOCIATION_AUTHORIZATION = 'CreateVPCAssociationAuthorization',
  DELETE_HEALTH_CHECK = 'DeleteHealthCheck',
  DELETE_HOSTED_ZONE = 'DeleteHostedZone',
  DELETE_QUERY_LOGGING_CONFIG = 'DeleteQueryLoggingConfig',
  DELETE_REUSABLE_DELEGATION_SET = 'DeleteReusableDelegationSet',
  DELETE_TRAFFIC_POLICY = 'DeleteTrafficPolicy',
  DELETE_TRAFFIC_POLICY_INSTANCE = 'DeleteTrafficPolicyInstance',
  DELETE_VPC_ASSOCIATION_AUTHORIZATION = 'DeleteVPCAssociationAuthorization',
  DISASSOCIATE_VPC_FROM_HOSTED_ZONE = 'DisassociateVPCFromHostedZone',
  GET_ACCOUNT_LIMIT = 'GetAccountLimit',
  GET_CHANGE = 'GetChange',
  GET_CHECKER_IP_RANGES = 'GetCheckerIpRanges',
  GET_GEO_LOCATION = 'GetGeoLocation',
  GET_HEALTH_CHECK = 'GetHealthCheck',
  GET_HEALTH_CHECK_COUNT = 'GetHealthCheckCount',
  GET_HEALTH_CHECK_LAST_FAILURE_REASON = 'GetHealthCheckLastFailureReason',
  GET_HEALTH_CHECK_STATUS = 'GetHealthCheckStatus',
  GET_HOSTED_ZONE = 'GetHostedZone',
  GET_HOSTED_ZONE_COUNT = 'GetHostedZoneCount',
  GET_HOSTED_ZONE_LIMIT = 'GetHostedZoneLimit',
  GET_QUERY_LOGGING_CONFIG = 'GetQueryLoggingConfig',
  GET_REUSABLE_DELEGATION_SET = 'GetReusableDelegationSet',
  GET_REUSABLE_DELEGATION_SET_LIMIT = 'GetReusableDelegationSetLimit',
  GET_TRAFFIC_POLICY = 'GetTrafficPolicy',
  GET_TRAFFIC_POLICY_INSTANCE = 'GetTrafficPolicyInstance',
  GET_TRAFFIC_POLICY_INSTANCE_COUNT = 'GetTrafficPolicyInstanceCount',
  LIST_GEO_LOCATIONS = 'ListGeoLocations',
  LIST_HEALTH_CHECKS = 'ListHealthChecks',
  LIST_HOSTED_ZONES = 'ListHostedZones',
  LIST_HOSTED_ZONES_BY_NAME = 'ListHostedZonesByName',
  LIST_QUERY_LOGGING_CONFIGS = 'ListQueryLoggingConfigs',
  LIST_RESOURCE_RECORD_SETS = 'ListResourceRecordSets',
  LIST_REUSABLE_DELEGATION_SETS = 'ListReusableDelegationSets',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TAGS_FOR_RESOURCES = 'ListTagsForResources',
  LIST_TRAFFIC_POLICIES = 'ListTrafficPolicies',
  LIST_TRAFFIC_POLICY_INSTANCES = 'ListTrafficPolicyInstances',
  LIST_TRAFFIC_POLICY_INSTANCES_BY_HOSTED_ZONE = 'ListTrafficPolicyInstancesByHostedZone',
  LIST_TRAFFIC_POLICY_INSTANCES_BY_POLICY = 'ListTrafficPolicyInstancesByPolicy',
  LIST_TRAFFIC_POLICY_VERSIONS = 'ListTrafficPolicyVersions',
  LIST_VPC_ASSOCIATION_AUTHORIZATIONS = 'ListVPCAssociationAuthorizations',
  TEST_DNS_ANSWER = 'TestDNSAnswer',
  UPDATE_HEALTH_CHECK = 'UpdateHealthCheck',
  UPDATE_HOSTED_ZONE_COMMENT = 'UpdateHostedZoneComment',
  UPDATE_TRAFFIC_POLICY_COMMENT = 'UpdateTrafficPolicyComment',
  UPDATE_TRAFFIC_POLICY_INSTANCE = 'UpdateTrafficPolicyInstance',
}

export enum Simpledb {
  BATCH_DELETE_ATTRIBUTES = 'BatchDeleteAttributes',
  BATCH_PUT_ATTRIBUTES = 'BatchPutAttributes',
  CREATE_DOMAIN = 'CreateDomain',
  DELETE_ATTRIBUTES = 'DeleteAttributes',
  DELETE_DOMAIN = 'DeleteDomain',
  DOMAIN_METADATA = 'DomainMetadata',
  GET_ATTRIBUTES = 'GetAttributes',
  LIST_DOMAINS = 'ListDomains',
  PUT_ATTRIBUTES = 'PutAttributes',
  SELECT = 'Select',
}

export enum Securitytokenservice {
  ASSUME_ROLE = 'AssumeRole',
  ASSUME_ROLE_WITH_SAML = 'AssumeRoleWithSAML',
  ASSUME_ROLE_WITH_WEB_IDENTITY = 'AssumeRoleWithWebIdentity',
  DECODE_AUTHORIZATION_MESSAGE = 'DecodeAuthorizationMessage',
  GET_ACCESS_KEY_INFO = 'GetAccessKeyInfo',
  GET_CALLER_IDENTITY = 'GetCallerIdentity',
  GET_FEDERATION_TOKEN = 'GetFederationToken',
  GET_SESSION_TOKEN = 'GetSessionToken',
  TAG_SESSION = 'TagSession',
}

export enum Elementalmediapackage {
  CREATE_CHANNEL = 'CreateChannel',
  CREATE_ORIGIN_ENDPOINT = 'CreateOriginEndpoint',
  DELETE_CHANNEL = 'DeleteChannel',
  DELETE_ORIGIN_ENDPOINT = 'DeleteOriginEndpoint',
  DESCRIBE_CHANNEL = 'DescribeChannel',
  DESCRIBE_ORIGIN_ENDPOINT = 'DescribeOriginEndpoint',
  LIST_CHANNELS = 'ListChannels',
  LIST_ORIGIN_ENDPOINTS = 'ListOriginEndpoints',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  ROTATE_INGEST_ENDPOINT_CREDENTIALS = 'RotateIngestEndpointCredentials',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CHANNEL = 'UpdateChannel',
  UPDATE_ORIGIN_ENDPOINT = 'UpdateOriginEndpoint',
}

export enum Managedapachecassandraservice {
  ALTER = 'Alter',
  CREATE = 'Create',
  DROP = 'Drop',
  MODIFY = 'Modify',
  SELECT = 'Select',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Athena {
  BATCH_GET_NAMED_QUERY = 'BatchGetNamedQuery',
  BATCH_GET_QUERY_EXECUTION = 'BatchGetQueryExecution',
  CANCEL_QUERY_EXECUTION = 'CancelQueryExecution',
  CREATE_NAMED_QUERY = 'CreateNamedQuery',
  CREATE_WORK_GROUP = 'CreateWorkGroup',
  DELETE_NAMED_QUERY = 'DeleteNamedQuery',
  DELETE_WORK_GROUP = 'DeleteWorkGroup',
  GET_CATALOGS = 'GetCatalogs',
  GET_EXECUTION_ENGINE = 'GetExecutionEngine',
  GET_EXECUTION_ENGINES = 'GetExecutionEngines',
  GET_NAMED_QUERY = 'GetNamedQuery',
  GET_NAMESPACE = 'GetNamespace',
  GET_NAMESPACES = 'GetNamespaces',
  GET_QUERY_EXECUTION = 'GetQueryExecution',
  GET_QUERY_EXECUTIONS = 'GetQueryExecutions',
  GET_QUERY_RESULTS = 'GetQueryResults',
  GET_QUERY_RESULTS_STREAM = 'GetQueryResultsStream',
  GET_TABLE = 'GetTable',
  GET_TABLES = 'GetTables',
  GET_WORK_GROUP = 'GetWorkGroup',
  LIST_NAMED_QUERIES = 'ListNamedQueries',
  LIST_QUERY_EXECUTIONS = 'ListQueryExecutions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WORK_GROUPS = 'ListWorkGroups',
  RUN_QUERY = 'RunQuery',
  START_QUERY_EXECUTION = 'StartQueryExecution',
  STOP_QUERY_EXECUTION = 'StopQueryExecution',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_WORK_GROUP = 'UpdateWorkGroup',
}

export enum Marketplacemeteringservice {
  BATCH_METER_USAGE = 'BatchMeterUsage',
  METER_USAGE = 'MeterUsage',
  REGISTER_USAGE = 'RegisterUsage',
  RESOLVE_CUSTOMER = 'ResolveCustomer',
}

export enum Marketplaceprocurementsystemsintegration {
  DESCRIBE_PROCUREMENT_SYSTEM_CONFIGURATION = 'DescribeProcurementSystemConfiguration',
  PUT_PROCUREMENT_SYSTEM_CONFIGURATION = 'PutProcurementSystemConfiguration',
}

export enum Marketplacecatalog {
  CANCEL_CHANGE_SET = 'CancelChangeSet',
  COMPLETE_TASK = 'CompleteTask',
  DESCRIBE_CHANGE_SET = 'DescribeChangeSet',
  DESCRIBE_ENTITY = 'DescribeEntity',
  DESCRIBE_TASK = 'DescribeTask',
  LIST_CHANGE_SETS = 'ListChangeSets',
  LIST_ENTITIES = 'ListEntities',
  LIST_TASKS = 'ListTasks',
  START_CHANGE_SET = 'StartChangeSet',
  UPDATE_TASK = 'UpdateTask',
}

export enum Marketplaceimagebuildingservice {
  DESCRIBE_BUILDS = 'DescribeBuilds',
  LIST_BUILDS = 'ListBuilds',
  START_BUILD = 'StartBuild',
}

export enum Marketplaceentitlementservice {
  GET_ENTITLEMENTS = 'GetEntitlements',
}

export enum Marketplace {
  ACCEPT_AGREEMENT_APPROVAL_REQUEST = 'AcceptAgreementApprovalRequest',
  CANCEL_AGREEMENT_REQUEST = 'CancelAgreementRequest',
  GET_AGREEMENT_APPROVAL_REQUEST = 'GetAgreementApprovalRequest',
  GET_AGREEMENT_REQUEST = 'GetAgreementRequest',
  LIST_AGREEMENT_APPROVAL_REQUESTS = 'ListAgreementApprovalRequests',
  LIST_AGREEMENT_REQUESTS = 'ListAgreementRequests',
  REJECT_AGREEMENT_APPROVAL_REQUEST = 'RejectAgreementApprovalRequest',
  SUBSCRIBE = 'Subscribe',
  UNSUBSCRIBE = 'Unsubscribe',
  UPDATE_AGREEMENT_APPROVAL_REQUEST = 'UpdateAgreementApprovalRequest',
  VIEW_SUBSCRIPTIONS = 'ViewSubscriptions',
}

export enum Privatemarketplace {
  ASSOCIATE_PRODUCTS_WITH_PRIVATE_MARKETPLACE = 'AssociateProductsWithPrivateMarketplace',
  CREATE_PRIVATE_MARKETPLACE = 'CreatePrivateMarketplace',
  CREATE_PRIVATE_MARKETPLACE_PROFILE = 'CreatePrivateMarketplaceProfile',
  CREATE_PRIVATE_MARKETPLACE_REQUESTS = 'CreatePrivateMarketplaceRequests',
  DESCRIBE_PRIVATE_MARKETPLACE_PRODUCTS = 'DescribePrivateMarketplaceProducts',
  DESCRIBE_PRIVATE_MARKETPLACE_PROFILE = 'DescribePrivateMarketplaceProfile',
  DESCRIBE_PRIVATE_MARKETPLACE_REQUESTS = 'DescribePrivateMarketplaceRequests',
  DESCRIBE_PRIVATE_MARKETPLACE_SETTINGS = 'DescribePrivateMarketplaceSettings',
  DESCRIBE_PRIVATE_MARKETPLACE_STATUS = 'DescribePrivateMarketplaceStatus',
  DISASSOCIATE_PRODUCTS_FROM_PRIVATE_MARKETPLACE = 'DisassociateProductsFromPrivateMarketplace',
  LIST_PRIVATE_MARKETPLACE_PRODUCTS = 'ListPrivateMarketplaceProducts',
  LIST_PRIVATE_MARKETPLACE_REQUESTS = 'ListPrivateMarketplaceRequests',
  START_PRIVATE_MARKETPLACE = 'StartPrivateMarketplace',
  STOP_PRIVATE_MARKETPLACE = 'StopPrivateMarketplace',
  UPDATE_PRIVATE_MARKETPLACE_PROFILE = 'UpdatePrivateMarketplaceProfile',
  UPDATE_PRIVATE_MARKETPLACE_SETTINGS = 'UpdatePrivateMarketplaceSettings',
}

export enum Pinpoint {
  CREATE_APP = 'CreateApp',
  CREATE_CAMPAIGN = 'CreateCampaign',
  CREATE_EMAIL_TEMPLATE = 'CreateEmailTemplate',
  CREATE_EXPORT_JOB = 'CreateExportJob',
  CREATE_IMPORT_JOB = 'CreateImportJob',
  CREATE_JOURNEY = 'CreateJourney',
  CREATE_PUSH_TEMPLATE = 'CreatePushTemplate',
  CREATE_RECOMMENDER_CONFIGURATION = 'CreateRecommenderConfiguration',
  CREATE_SEGMENT = 'CreateSegment',
  CREATE_SMS_TEMPLATE = 'CreateSmsTemplate',
  CREATE_VOICE_TEMPLATE = 'CreateVoiceTemplate',
  DELETE_ADM_CHANNEL = 'DeleteAdmChannel',
  DELETE_APNS_CHANNEL = 'DeleteApnsChannel',
  DELETE_APNS_SANDBOX_CHANNEL = 'DeleteApnsSandboxChannel',
  DELETE_APNS_VOIP_CHANNEL = 'DeleteApnsVoipChannel',
  DELETE_APNS_VOIP_SANDBOX_CHANNEL = 'DeleteApnsVoipSandboxChannel',
  DELETE_APP = 'DeleteApp',
  DELETE_BAIDU_CHANNEL = 'DeleteBaiduChannel',
  DELETE_CAMPAIGN = 'DeleteCampaign',
  DELETE_EMAIL_CHANNEL = 'DeleteEmailChannel',
  DELETE_EMAIL_TEMPLATE = 'DeleteEmailTemplate',
  DELETE_ENDPOINT = 'DeleteEndpoint',
  DELETE_EVENT_STREAM = 'DeleteEventStream',
  DELETE_GCM_CHANNEL = 'DeleteGcmChannel',
  DELETE_JOURNEY = 'DeleteJourney',
  DELETE_PUSH_TEMPLATE = 'DeletePushTemplate',
  DELETE_RECOMMENDER_CONFIGURATION = 'DeleteRecommenderConfiguration',
  DELETE_SEGMENT = 'DeleteSegment',
  DELETE_SMS_CHANNEL = 'DeleteSmsChannel',
  DELETE_SMS_TEMPLATE = 'DeleteSmsTemplate',
  DELETE_USER_ENDPOINTS = 'DeleteUserEndpoints',
  DELETE_VOICE_CHANNEL = 'DeleteVoiceChannel',
  DELETE_VOICE_TEMPLATE = 'DeleteVoiceTemplate',
  GET_ADM_CHANNEL = 'GetAdmChannel',
  GET_APNS_CHANNEL = 'GetApnsChannel',
  GET_APNS_SANDBOX_CHANNEL = 'GetApnsSandboxChannel',
  GET_APNS_VOIP_CHANNEL = 'GetApnsVoipChannel',
  GET_APNS_VOIP_SANDBOX_CHANNEL = 'GetApnsVoipSandboxChannel',
  GET_APP = 'GetApp',
  GET_APPLICATION_SETTINGS = 'GetApplicationSettings',
  GET_APPS = 'GetApps',
  GET_BAIDU_CHANNEL = 'GetBaiduChannel',
  GET_CAMPAIGN = 'GetCampaign',
  GET_CAMPAIGN_ACTIVITIES = 'GetCampaignActivities',
  GET_CAMPAIGN_VERSION = 'GetCampaignVersion',
  GET_CAMPAIGN_VERSIONS = 'GetCampaignVersions',
  GET_CAMPAIGNS = 'GetCampaigns',
  GET_CHANNELS = 'GetChannels',
  GET_EMAIL_CHANNEL = 'GetEmailChannel',
  GET_EMAIL_TEMPLATE = 'GetEmailTemplate',
  GET_ENDPOINT = 'GetEndpoint',
  GET_EVENT_STREAM = 'GetEventStream',
  GET_EXPORT_JOB = 'GetExportJob',
  GET_EXPORT_JOBS = 'GetExportJobs',
  GET_GCM_CHANNEL = 'GetGcmChannel',
  GET_IMPORT_JOB = 'GetImportJob',
  GET_IMPORT_JOBS = 'GetImportJobs',
  GET_JOURNEY = 'GetJourney',
  GET_PUSH_TEMPLATE = 'GetPushTemplate',
  GET_RECOMMENDER_CONFIGURATION = 'GetRecommenderConfiguration',
  GET_RECOMMENDER_CONFIGURATIONS = 'GetRecommenderConfigurations',
  GET_SEGMENT = 'GetSegment',
  GET_SEGMENT_EXPORT_JOBS = 'GetSegmentExportJobs',
  GET_SEGMENT_IMPORT_JOBS = 'GetSegmentImportJobs',
  GET_SEGMENT_VERSION = 'GetSegmentVersion',
  GET_SEGMENT_VERSIONS = 'GetSegmentVersions',
  GET_SEGMENTS = 'GetSegments',
  GET_SMS_CHANNEL = 'GetSmsChannel',
  GET_SMS_TEMPLATE = 'GetSmsTemplate',
  GET_USER_ENDPOINTS = 'GetUserEndpoints',
  GET_VOICE_CHANNEL = 'GetVoiceChannel',
  GET_VOICE_TEMPLATE = 'GetVoiceTemplate',
  LIST_JOURNEYS = 'ListJourneys',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TEMPLATE_VERSIONS = 'ListTemplateVersions',
  LIST_TEMPLATES = 'ListTemplates',
  PHONE_NUMBER_VALIDATE = 'PhoneNumberValidate',
  PUT_EVENT_STREAM = 'PutEventStream',
  PUT_EVENTS = 'PutEvents',
  REMOVE_ATTRIBUTES = 'RemoveAttributes',
  SEND_MESSAGES = 'SendMessages',
  SEND_USERS_MESSAGES = 'SendUsersMessages',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ADM_CHANNEL = 'UpdateAdmChannel',
  UPDATE_APNS_CHANNEL = 'UpdateApnsChannel',
  UPDATE_APNS_SANDBOX_CHANNEL = 'UpdateApnsSandboxChannel',
  UPDATE_APNS_VOIP_CHANNEL = 'UpdateApnsVoipChannel',
  UPDATE_APNS_VOIP_SANDBOX_CHANNEL = 'UpdateApnsVoipSandboxChannel',
  UPDATE_APPLICATION_SETTINGS = 'UpdateApplicationSettings',
  UPDATE_BAIDU_CHANNEL = 'UpdateBaiduChannel',
  UPDATE_CAMPAIGN = 'UpdateCampaign',
  UPDATE_EMAIL_CHANNEL = 'UpdateEmailChannel',
  UPDATE_EMAIL_TEMPLATE = 'UpdateEmailTemplate',
  UPDATE_ENDPOINT = 'UpdateEndpoint',
  UPDATE_ENDPOINTS_BATCH = 'UpdateEndpointsBatch',
  UPDATE_GCM_CHANNEL = 'UpdateGcmChannel',
  UPDATE_JOURNEY = 'UpdateJourney',
  UPDATE_JOURNEY_STATE = 'UpdateJourneyState',
  UPDATE_PUSH_TEMPLATE = 'UpdatePushTemplate',
  UPDATE_RECOMMENDER_CONFIGURATION = 'UpdateRecommenderConfiguration',
  UPDATE_SEGMENT = 'UpdateSegment',
  UPDATE_SMS_CHANNEL = 'UpdateSmsChannel',
  UPDATE_SMS_TEMPLATE = 'UpdateSmsTemplate',
  UPDATE_TEMPLATE_ACTIVE_VERSION = 'UpdateTemplateActiveVersion',
  UPDATE_VOICE_CHANNEL = 'UpdateVoiceChannel',
  UPDATE_VOICE_TEMPLATE = 'UpdateVoiceTemplate',
}

export enum Sumerian {
  LOGIN = 'Login',
  VIEW_RELEASE = 'ViewRelease',
}

export enum Autoscaling {
  CREATE_SCALING_PLAN = 'CreateScalingPlan',
  DELETE_SCALING_PLAN = 'DeleteScalingPlan',
  DESCRIBE_SCALING_PLAN_RESOURCES = 'DescribeScalingPlanResources',
  DESCRIBE_SCALING_PLANS = 'DescribeScalingPlans',
  GET_SCALING_PLAN_RESOURCE_FORECAST_DATA = 'GetScalingPlanResourceForecastData',
  UPDATE_SCALING_PLAN = 'UpdateScalingPlan',
}

export enum Costandusagereport {
  DELETE_REPORT_DEFINITION = 'DeleteReportDefinition',
  DESCRIBE_REPORT_DEFINITIONS = 'DescribeReportDefinitions',
  MODIFY_REPORT_DEFINITION = 'ModifyReportDefinition',
  PUT_REPORT_DEFINITION = 'PutReportDefinition',
}

export enum Route53domains {
  CHECK_DOMAIN_AVAILABILITY = 'CheckDomainAvailability',
  DELETE_TAGS_FOR_DOMAIN = 'DeleteTagsForDomain',
  DISABLE_DOMAIN_AUTO_RENEW = 'DisableDomainAutoRenew',
  DISABLE_DOMAIN_TRANSFER_LOCK = 'DisableDomainTransferLock',
  ENABLE_DOMAIN_AUTO_RENEW = 'EnableDomainAutoRenew',
  ENABLE_DOMAIN_TRANSFER_LOCK = 'EnableDomainTransferLock',
  GET_CONTACT_REACHABILITY_STATUS = 'GetContactReachabilityStatus',
  GET_DOMAIN_DETAIL = 'GetDomainDetail',
  GET_DOMAIN_SUGGESTIONS = 'GetDomainSuggestions',
  GET_OPERATION_DETAIL = 'GetOperationDetail',
  LIST_DOMAINS = 'ListDomains',
  LIST_OPERATIONS = 'ListOperations',
  LIST_TAGS_FOR_DOMAIN = 'ListTagsForDomain',
  REGISTER_DOMAIN = 'RegisterDomain',
  RENEW_DOMAIN = 'RenewDomain',
  RESEND_CONTACT_REACHABILITY_EMAIL = 'ResendContactReachabilityEmail',
  RETRIEVE_DOMAIN_AUTH_CODE = 'RetrieveDomainAuthCode',
  TRANSFER_DOMAIN = 'TransferDomain',
  UPDATE_DOMAIN_CONTACT = 'UpdateDomainContact',
  UPDATE_DOMAIN_CONTACT_PRIVACY = 'UpdateDomainContactPrivacy',
  UPDATE_DOMAIN_NAMESERVERS = 'UpdateDomainNameservers',
  UPDATE_TAGS_FOR_DOMAIN = 'UpdateTagsForDomain',
  VIEW_BILLING = 'ViewBilling',
}

export enum Opsworks {
  ASSIGN_INSTANCE = 'AssignInstance',
  ASSIGN_VOLUME = 'AssignVolume',
  ASSOCIATE_ELASTIC_IP = 'AssociateElasticIp',
  ATTACH_ELASTIC_LOAD_BALANCER = 'AttachElasticLoadBalancer',
  CLONE_STACK = 'CloneStack',
  CREATE_APP = 'CreateApp',
  CREATE_DEPLOYMENT = 'CreateDeployment',
  CREATE_INSTANCE = 'CreateInstance',
  CREATE_LAYER = 'CreateLayer',
  CREATE_STACK = 'CreateStack',
  CREATE_USER_PROFILE = 'CreateUserProfile',
  DELETE_APP = 'DeleteApp',
  DELETE_INSTANCE = 'DeleteInstance',
  DELETE_LAYER = 'DeleteLayer',
  DELETE_STACK = 'DeleteStack',
  DELETE_USER_PROFILE = 'DeleteUserProfile',
  DEREGISTER_ECS_CLUSTER = 'DeregisterEcsCluster',
  DEREGISTER_ELASTIC_IP = 'DeregisterElasticIp',
  DEREGISTER_INSTANCE = 'DeregisterInstance',
  DEREGISTER_RDS_DB_INSTANCE = 'DeregisterRdsDbInstance',
  DEREGISTER_VOLUME = 'DeregisterVolume',
  DESCRIBE_AGENT_VERSIONS = 'DescribeAgentVersions',
  DESCRIBE_APPS = 'DescribeApps',
  DESCRIBE_COMMANDS = 'DescribeCommands',
  DESCRIBE_DEPLOYMENTS = 'DescribeDeployments',
  DESCRIBE_ECS_CLUSTERS = 'DescribeEcsClusters',
  DESCRIBE_ELASTIC_IPS = 'DescribeElasticIps',
  DESCRIBE_ELASTIC_LOAD_BALANCERS = 'DescribeElasticLoadBalancers',
  DESCRIBE_INSTANCES = 'DescribeInstances',
  DESCRIBE_LAYERS = 'DescribeLayers',
  DESCRIBE_LOAD_BASED_AUTO_SCALING = 'DescribeLoadBasedAutoScaling',
  DESCRIBE_MY_USER_PROFILE = 'DescribeMyUserProfile',
  DESCRIBE_PERMISSIONS = 'DescribePermissions',
  DESCRIBE_RAID_ARRAYS = 'DescribeRaidArrays',
  DESCRIBE_RDS_DB_INSTANCES = 'DescribeRdsDbInstances',
  DESCRIBE_SERVICE_ERRORS = 'DescribeServiceErrors',
  DESCRIBE_STACK_PROVISIONING_PARAMETERS = 'DescribeStackProvisioningParameters',
  DESCRIBE_STACK_SUMMARY = 'DescribeStackSummary',
  DESCRIBE_STACKS = 'DescribeStacks',
  DESCRIBE_TIME_BASED_AUTO_SCALING = 'DescribeTimeBasedAutoScaling',
  DESCRIBE_USER_PROFILES = 'DescribeUserProfiles',
  DESCRIBE_VOLUMES = 'DescribeVolumes',
  DETACH_ELASTIC_LOAD_BALANCER = 'DetachElasticLoadBalancer',
  DISASSOCIATE_ELASTIC_IP = 'DisassociateElasticIp',
  GET_HOSTNAME_SUGGESTION = 'GetHostnameSuggestion',
  GRANT_ACCESS = 'GrantAccess',
  LIST_TAGS = 'ListTags',
  REBOOT_INSTANCE = 'RebootInstance',
  REGISTER_ECS_CLUSTER = 'RegisterEcsCluster',
  REGISTER_ELASTIC_IP = 'RegisterElasticIp',
  REGISTER_INSTANCE = 'RegisterInstance',
  REGISTER_RDS_DB_INSTANCE = 'RegisterRdsDbInstance',
  REGISTER_VOLUME = 'RegisterVolume',
  SET_LOAD_BASED_AUTO_SCALING = 'SetLoadBasedAutoScaling',
  SET_PERMISSION = 'SetPermission',
  SET_TIME_BASED_AUTO_SCALING = 'SetTimeBasedAutoScaling',
  START_INSTANCE = 'StartInstance',
  START_STACK = 'StartStack',
  STOP_INSTANCE = 'StopInstance',
  STOP_STACK = 'StopStack',
  TAG_RESOURCE = 'TagResource',
  UNASSIGN_INSTANCE = 'UnassignInstance',
  UNASSIGN_VOLUME = 'UnassignVolume',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APP = 'UpdateApp',
  UPDATE_ELASTIC_IP = 'UpdateElasticIp',
  UPDATE_INSTANCE = 'UpdateInstance',
  UPDATE_LAYER = 'UpdateLayer',
  UPDATE_MY_USER_PROFILE = 'UpdateMyUserProfile',
  UPDATE_RDS_DB_INSTANCE = 'UpdateRdsDbInstance',
  UPDATE_STACK = 'UpdateStack',
  UPDATE_USER_PROFILE = 'UpdateUserProfile',
  UPDATE_VOLUME = 'UpdateVolume',
}

export enum Freertos {
  CREATE_SOFTWARE_CONFIGURATION = 'CreateSoftwareConfiguration',
  DELETE_SOFTWARE_CONFIGURATION = 'DeleteSoftwareConfiguration',
  DESCRIBE_HARDWARE_PLATFORM = 'DescribeHardwarePlatform',
  DESCRIBE_SOFTWARE_CONFIGURATION = 'DescribeSoftwareConfiguration',
  GET_SOFTWARE_URL = 'GetSoftwareURL',
  GET_SOFTWARE_URL_FOR_CONFIGURATION = 'GetSoftwareURLForConfiguration',
  LIST_FREE_RTOS_VERSIONS = 'ListFreeRTOSVersions',
  LIST_HARDWARE_PLATFORMS = 'ListHardwarePlatforms',
  LIST_HARDWARE_VENDORS = 'ListHardwareVendors',
  LIST_SOFTWARE_CONFIGURATIONS = 'ListSoftwareConfigurations',
  UPDATE_SOFTWARE_CONFIGURATION = 'UpdateSoftwareConfiguration',
}

export enum Codedeploy {
  ADD_TAGS_TO_ON_PREMISES_INSTANCES = 'AddTagsToOnPremisesInstances',
  BATCH_GET_APPLICATION_REVISIONS = 'BatchGetApplicationRevisions',
  BATCH_GET_APPLICATIONS = 'BatchGetApplications',
  BATCH_GET_DEPLOYMENT_GROUPS = 'BatchGetDeploymentGroups',
  BATCH_GET_DEPLOYMENT_INSTANCES = 'BatchGetDeploymentInstances',
  BATCH_GET_DEPLOYMENT_TARGETS = 'BatchGetDeploymentTargets',
  BATCH_GET_DEPLOYMENTS = 'BatchGetDeployments',
  BATCH_GET_ON_PREMISES_INSTANCES = 'BatchGetOnPremisesInstances',
  CONTINUE_DEPLOYMENT = 'ContinueDeployment',
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_DEPLOYMENT = 'CreateDeployment',
  CREATE_DEPLOYMENT_CONFIG = 'CreateDeploymentConfig',
  CREATE_DEPLOYMENT_GROUP = 'CreateDeploymentGroup',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_DEPLOYMENT_CONFIG = 'DeleteDeploymentConfig',
  DELETE_DEPLOYMENT_GROUP = 'DeleteDeploymentGroup',
  DELETE_GIT_HUB_ACCOUNT_TOKEN = 'DeleteGitHubAccountToken',
  DEREGISTER_ON_PREMISES_INSTANCE = 'DeregisterOnPremisesInstance',
  GET_APPLICATION = 'GetApplication',
  GET_APPLICATION_REVISION = 'GetApplicationRevision',
  GET_DEPLOYMENT = 'GetDeployment',
  GET_DEPLOYMENT_CONFIG = 'GetDeploymentConfig',
  GET_DEPLOYMENT_GROUP = 'GetDeploymentGroup',
  GET_DEPLOYMENT_INSTANCE = 'GetDeploymentInstance',
  GET_DEPLOYMENT_TARGET = 'GetDeploymentTarget',
  GET_ON_PREMISES_INSTANCE = 'GetOnPremisesInstance',
  LIST_APPLICATION_REVISIONS = 'ListApplicationRevisions',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_DEPLOYMENT_CONFIGS = 'ListDeploymentConfigs',
  LIST_DEPLOYMENT_GROUPS = 'ListDeploymentGroups',
  LIST_DEPLOYMENT_INSTANCES = 'ListDeploymentInstances',
  LIST_DEPLOYMENT_TARGETS = 'ListDeploymentTargets',
  LIST_DEPLOYMENTS = 'ListDeployments',
  LIST_GIT_HUB_ACCOUNT_TOKEN_NAMES = 'ListGitHubAccountTokenNames',
  LIST_ON_PREMISES_INSTANCES = 'ListOnPremisesInstances',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_LIFECYCLE_EVENT_HOOK_EXECUTION_STATUS = 'PutLifecycleEventHookExecutionStatus',
  REGISTER_APPLICATION_REVISION = 'RegisterApplicationRevision',
  REGISTER_ON_PREMISES_INSTANCE = 'RegisterOnPremisesInstance',
  REMOVE_TAGS_FROM_ON_PREMISES_INSTANCES = 'RemoveTagsFromOnPremisesInstances',
  SKIP_WAIT_TIME_FOR_INSTANCE_TERMINATION = 'SkipWaitTimeForInstanceTermination',
  STOP_DEPLOYMENT = 'StopDeployment',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APPLICATION = 'UpdateApplication',
  UPDATE_DEPLOYMENT_GROUP = 'UpdateDeploymentGroup',
}

export enum Identityandaccessmanagement {
  ADD_CLIENT_ID_TO_OPEN_ID_CONNECT_PROVIDER = 'AddClientIDToOpenIDConnectProvider',
  ADD_ROLE_TO_INSTANCE_PROFILE = 'AddRoleToInstanceProfile',
  ADD_USER_TO_GROUP = 'AddUserToGroup',
  ATTACH_GROUP_POLICY = 'AttachGroupPolicy',
  ATTACH_ROLE_POLICY = 'AttachRolePolicy',
  ATTACH_USER_POLICY = 'AttachUserPolicy',
  CHANGE_PASSWORD = 'ChangePassword',
  CREATE_ACCESS_KEY = 'CreateAccessKey',
  CREATE_ACCOUNT_ALIAS = 'CreateAccountAlias',
  CREATE_GROUP = 'CreateGroup',
  CREATE_INSTANCE_PROFILE = 'CreateInstanceProfile',
  CREATE_LOGIN_PROFILE = 'CreateLoginProfile',
  CREATE_OPEN_ID_CONNECT_PROVIDER = 'CreateOpenIDConnectProvider',
  CREATE_POLICY = 'CreatePolicy',
  CREATE_POLICY_VERSION = 'CreatePolicyVersion',
  CREATE_ROLE = 'CreateRole',
  CREATE_SAML_PROVIDER = 'CreateSAMLProvider',
  CREATE_SERVICE_LINKED_ROLE = 'CreateServiceLinkedRole',
  CREATE_SERVICE_SPECIFIC_CREDENTIAL = 'CreateServiceSpecificCredential',
  CREATE_USER = 'CreateUser',
  CREATE_VIRTUAL_MFA_DEVICE = 'CreateVirtualMFADevice',
  DEACTIVATE_MFA_DEVICE = 'DeactivateMFADevice',
  DELETE_ACCESS_KEY = 'DeleteAccessKey',
  DELETE_ACCOUNT_ALIAS = 'DeleteAccountAlias',
  DELETE_ACCOUNT_PASSWORD_POLICY = 'DeleteAccountPasswordPolicy',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_GROUP_POLICY = 'DeleteGroupPolicy',
  DELETE_INSTANCE_PROFILE = 'DeleteInstanceProfile',
  DELETE_LOGIN_PROFILE = 'DeleteLoginProfile',
  DELETE_OPEN_ID_CONNECT_PROVIDER = 'DeleteOpenIDConnectProvider',
  DELETE_POLICY = 'DeletePolicy',
  DELETE_POLICY_VERSION = 'DeletePolicyVersion',
  DELETE_ROLE = 'DeleteRole',
  DELETE_ROLE_PERMISSIONS_BOUNDARY = 'DeleteRolePermissionsBoundary',
  DELETE_ROLE_POLICY = 'DeleteRolePolicy',
  DELETE_SAML_PROVIDER = 'DeleteSAMLProvider',
  DELETE_SSH_PUBLIC_KEY = 'DeleteSSHPublicKey',
  DELETE_SERVER_CERTIFICATE = 'DeleteServerCertificate',
  DELETE_SERVICE_LINKED_ROLE = 'DeleteServiceLinkedRole',
  DELETE_SERVICE_SPECIFIC_CREDENTIAL = 'DeleteServiceSpecificCredential',
  DELETE_SIGNING_CERTIFICATE = 'DeleteSigningCertificate',
  DELETE_USER = 'DeleteUser',
  DELETE_USER_PERMISSIONS_BOUNDARY = 'DeleteUserPermissionsBoundary',
  DELETE_USER_POLICY = 'DeleteUserPolicy',
  DELETE_VIRTUAL_MFA_DEVICE = 'DeleteVirtualMFADevice',
  DETACH_GROUP_POLICY = 'DetachGroupPolicy',
  DETACH_ROLE_POLICY = 'DetachRolePolicy',
  DETACH_USER_POLICY = 'DetachUserPolicy',
  ENABLE_MFA_DEVICE = 'EnableMFADevice',
  GENERATE_CREDENTIAL_REPORT = 'GenerateCredentialReport',
  GENERATE_ORGANIZATIONS_ACCESS_REPORT = 'GenerateOrganizationsAccessReport',
  GENERATE_SERVICE_LAST_ACCESSED_DETAILS = 'GenerateServiceLastAccessedDetails',
  GET_ACCESS_KEY_LAST_USED = 'GetAccessKeyLastUsed',
  GET_ACCOUNT_AUTHORIZATION_DETAILS = 'GetAccountAuthorizationDetails',
  GET_ACCOUNT_PASSWORD_POLICY = 'GetAccountPasswordPolicy',
  GET_ACCOUNT_SUMMARY = 'GetAccountSummary',
  GET_CONTEXT_KEYS_FOR_CUSTOM_POLICY = 'GetContextKeysForCustomPolicy',
  GET_CONTEXT_KEYS_FOR_PRINCIPAL_POLICY = 'GetContextKeysForPrincipalPolicy',
  GET_CREDENTIAL_REPORT = 'GetCredentialReport',
  GET_GROUP = 'GetGroup',
  GET_GROUP_POLICY = 'GetGroupPolicy',
  GET_INSTANCE_PROFILE = 'GetInstanceProfile',
  GET_LOGIN_PROFILE = 'GetLoginProfile',
  GET_OPEN_ID_CONNECT_PROVIDER = 'GetOpenIDConnectProvider',
  GET_ORGANIZATIONS_ACCESS_REPORT = 'GetOrganizationsAccessReport',
  GET_POLICY = 'GetPolicy',
  GET_POLICY_VERSION = 'GetPolicyVersion',
  GET_ROLE = 'GetRole',
  GET_ROLE_POLICY = 'GetRolePolicy',
  GET_SAML_PROVIDER = 'GetSAMLProvider',
  GET_SSH_PUBLIC_KEY = 'GetSSHPublicKey',
  GET_SERVER_CERTIFICATE = 'GetServerCertificate',
  GET_SERVICE_LAST_ACCESSED_DETAILS = 'GetServiceLastAccessedDetails',
  GET_SERVICE_LAST_ACCESSED_DETAILS_WITH_ENTITIES = 'GetServiceLastAccessedDetailsWithEntities',
  GET_SERVICE_LINKED_ROLE_DELETION_STATUS = 'GetServiceLinkedRoleDeletionStatus',
  GET_USER = 'GetUser',
  GET_USER_POLICY = 'GetUserPolicy',
  LIST_ACCESS_KEYS = 'ListAccessKeys',
  LIST_ACCOUNT_ALIASES = 'ListAccountAliases',
  LIST_ATTACHED_GROUP_POLICIES = 'ListAttachedGroupPolicies',
  LIST_ATTACHED_ROLE_POLICIES = 'ListAttachedRolePolicies',
  LIST_ATTACHED_USER_POLICIES = 'ListAttachedUserPolicies',
  LIST_ENTITIES_FOR_POLICY = 'ListEntitiesForPolicy',
  LIST_GROUP_POLICIES = 'ListGroupPolicies',
  LIST_GROUPS = 'ListGroups',
  LIST_GROUPS_FOR_USER = 'ListGroupsForUser',
  LIST_INSTANCE_PROFILES = 'ListInstanceProfiles',
  LIST_INSTANCE_PROFILES_FOR_ROLE = 'ListInstanceProfilesForRole',
  LIST_MFA_DEVICES = 'ListMFADevices',
  LIST_OPEN_ID_CONNECT_PROVIDERS = 'ListOpenIDConnectProviders',
  LIST_POLICIES = 'ListPolicies',
  LIST_POLICIES_GRANTING_SERVICE_ACCESS = 'ListPoliciesGrantingServiceAccess',
  LIST_POLICY_VERSIONS = 'ListPolicyVersions',
  LIST_ROLE_POLICIES = 'ListRolePolicies',
  LIST_ROLE_TAGS = 'ListRoleTags',
  LIST_ROLES = 'ListRoles',
  LIST_SAML_PROVIDERS = 'ListSAMLProviders',
  LIST_SSH_PUBLIC_KEYS = 'ListSSHPublicKeys',
  LIST_SERVER_CERTIFICATES = 'ListServerCertificates',
  LIST_SERVICE_SPECIFIC_CREDENTIALS = 'ListServiceSpecificCredentials',
  LIST_SIGNING_CERTIFICATES = 'ListSigningCertificates',
  LIST_USER_POLICIES = 'ListUserPolicies',
  LIST_USER_TAGS = 'ListUserTags',
  LIST_USERS = 'ListUsers',
  LIST_VIRTUAL_MFA_DEVICES = 'ListVirtualMFADevices',
  PASS_ROLE = 'PassRole',
  PUT_GROUP_POLICY = 'PutGroupPolicy',
  PUT_ROLE_PERMISSIONS_BOUNDARY = 'PutRolePermissionsBoundary',
  PUT_ROLE_POLICY = 'PutRolePolicy',
  PUT_USER_PERMISSIONS_BOUNDARY = 'PutUserPermissionsBoundary',
  PUT_USER_POLICY = 'PutUserPolicy',
  REMOVE_CLIENT_ID_FROM_OPEN_ID_CONNECT_PROVIDER = 'RemoveClientIDFromOpenIDConnectProvider',
  REMOVE_ROLE_FROM_INSTANCE_PROFILE = 'RemoveRoleFromInstanceProfile',
  REMOVE_USER_FROM_GROUP = 'RemoveUserFromGroup',
  RESET_SERVICE_SPECIFIC_CREDENTIAL = 'ResetServiceSpecificCredential',
  RESYNC_MFA_DEVICE = 'ResyncMFADevice',
  SET_DEFAULT_POLICY_VERSION = 'SetDefaultPolicyVersion',
  SET_SECURITY_TOKEN_SERVICE_PREFERENCES = 'SetSecurityTokenServicePreferences',
  SIMULATE_CUSTOM_POLICY = 'SimulateCustomPolicy',
  SIMULATE_PRINCIPAL_POLICY = 'SimulatePrincipalPolicy',
  TAG_ROLE = 'TagRole',
  TAG_USER = 'TagUser',
  UNTAG_ROLE = 'UntagRole',
  UNTAG_USER = 'UntagUser',
  UPDATE_ACCESS_KEY = 'UpdateAccessKey',
  UPDATE_ACCOUNT_PASSWORD_POLICY = 'UpdateAccountPasswordPolicy',
  UPDATE_ASSUME_ROLE_POLICY = 'UpdateAssumeRolePolicy',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_LOGIN_PROFILE = 'UpdateLoginProfile',
  UPDATE_OPEN_ID_CONNECT_PROVIDER_THUMBPRINT = 'UpdateOpenIDConnectProviderThumbprint',
  UPDATE_ROLE = 'UpdateRole',
  UPDATE_ROLE_DESCRIPTION = 'UpdateRoleDescription',
  UPDATE_SAML_PROVIDER = 'UpdateSAMLProvider',
  UPDATE_SSH_PUBLIC_KEY = 'UpdateSSHPublicKey',
  UPDATE_SERVER_CERTIFICATE = 'UpdateServerCertificate',
  UPDATE_SERVICE_SPECIFIC_CREDENTIAL = 'UpdateServiceSpecificCredential',
  UPDATE_SIGNING_CERTIFICATE = 'UpdateSigningCertificate',
  UPDATE_USER = 'UpdateUser',
  UPLOAD_SSH_PUBLIC_KEY = 'UploadSSHPublicKey',
  UPLOAD_SERVER_CERTIFICATE = 'UploadServerCertificate',
  UPLOAD_SIGNING_CERTIFICATE = 'UploadSigningCertificate',
}

export enum Route53resolver {
  ASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'AssociateResolverEndpointIpAddress',
  ASSOCIATE_RESOLVER_RULE = 'AssociateResolverRule',
  CREATE_RESOLVER_ENDPOINT = 'CreateResolverEndpoint',
  CREATE_RESOLVER_RULE = 'CreateResolverRule',
  DELETE_RESOLVER_ENDPOINT = 'DeleteResolverEndpoint',
  DELETE_RESOLVER_RULE = 'DeleteResolverRule',
  DISASSOCIATE_RESOLVER_ENDPOINT_IP_ADDRESS = 'DisassociateResolverEndpointIpAddress',
  DISASSOCIATE_RESOLVER_RULE = 'DisassociateResolverRule',
  GET_RESOLVER_ENDPOINT = 'GetResolverEndpoint',
  GET_RESOLVER_RULE = 'GetResolverRule',
  GET_RESOLVER_RULE_ASSOCIATION = 'GetResolverRuleAssociation',
  GET_RESOLVER_RULE_POLICY = 'GetResolverRulePolicy',
  LIST_RESOLVER_ENDPOINT_IP_ADDRESSES = 'ListResolverEndpointIpAddresses',
  LIST_RESOLVER_ENDPOINTS = 'ListResolverEndpoints',
  LIST_RESOLVER_RULE_ASSOCIATIONS = 'ListResolverRuleAssociations',
  LIST_RESOLVER_RULES = 'ListResolverRules',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_RESOLVER_RULE_POLICY = 'PutResolverRulePolicy',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_RESOLVER_ENDPOINT = 'UpdateResolverEndpoint',
  UPDATE_RESOLVER_RULE = 'UpdateResolverRule',
}

export enum Workmail {
  ADD_MEMBERS_TO_GROUP = 'AddMembersToGroup',
  ASSOCIATE_DELEGATE_TO_RESOURCE = 'AssociateDelegateToResource',
  ASSOCIATE_MEMBER_TO_GROUP = 'AssociateMemberToGroup',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_GROUP = 'CreateGroup',
  CREATE_INBOUND_MAIL_FLOW_RULE = 'CreateInboundMailFlowRule',
  CREATE_MAIL_DOMAIN = 'CreateMailDomain',
  CREATE_MAIL_USER = 'CreateMailUser',
  CREATE_ORGANIZATION = 'CreateOrganization',
  CREATE_OUTBOUND_MAIL_FLOW_RULE = 'CreateOutboundMailFlowRule',
  CREATE_RESOURCE = 'CreateResource',
  CREATE_SMTP_GATEWAY = 'CreateSmtpGateway',
  CREATE_USER = 'CreateUser',
  DELETE_ACCESS_CONTROL_RULE = 'DeleteAccessControlRule',
  DELETE_ALIAS = 'DeleteAlias',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_INBOUND_MAIL_FLOW_RULE = 'DeleteInboundMailFlowRule',
  DELETE_MAIL_DOMAIN = 'DeleteMailDomain',
  DELETE_MAILBOX_PERMISSIONS = 'DeleteMailboxPermissions',
  DELETE_MOBILE_DEVICE = 'DeleteMobileDevice',
  DELETE_ORGANIZATION = 'DeleteOrganization',
  DELETE_OUTBOUND_MAIL_FLOW_RULE = 'DeleteOutboundMailFlowRule',
  DELETE_RESOURCE = 'DeleteResource',
  DELETE_SMTP_GATEWAY = 'DeleteSmtpGateway',
  DELETE_USER = 'DeleteUser',
  DEREGISTER_FROM_WORK_MAIL = 'DeregisterFromWorkMail',
  DESCRIBE_DIRECTORIES = 'DescribeDirectories',
  DESCRIBE_GROUP = 'DescribeGroup',
  DESCRIBE_INBOUND_MAIL_FLOW_RULE = 'DescribeInboundMailFlowRule',
  DESCRIBE_KMS_KEYS = 'DescribeKmsKeys',
  DESCRIBE_MAIL_DOMAINS = 'DescribeMailDomains',
  DESCRIBE_MAIL_GROUPS = 'DescribeMailGroups',
  DESCRIBE_MAIL_USERS = 'DescribeMailUsers',
  DESCRIBE_ORGANIZATION = 'DescribeOrganization',
  DESCRIBE_ORGANIZATIONS = 'DescribeOrganizations',
  DESCRIBE_OUTBOUND_MAIL_FLOW_RULE = 'DescribeOutboundMailFlowRule',
  DESCRIBE_RESOURCE = 'DescribeResource',
  DESCRIBE_SMTP_GATEWAY = 'DescribeSmtpGateway',
  DESCRIBE_USER = 'DescribeUser',
  DISABLE_MAIL_GROUPS = 'DisableMailGroups',
  DISABLE_MAIL_USERS = 'DisableMailUsers',
  DISASSOCIATE_DELEGATE_FROM_RESOURCE = 'DisassociateDelegateFromResource',
  DISASSOCIATE_MEMBER_FROM_GROUP = 'DisassociateMemberFromGroup',
  ENABLE_MAIL_DOMAIN = 'EnableMailDomain',
  ENABLE_MAIL_GROUPS = 'EnableMailGroups',
  ENABLE_MAIL_USERS = 'EnableMailUsers',
  GET_ACCESS_CONTROL_EFFECT = 'GetAccessControlEffect',
  GET_JOURNALING_RULES = 'GetJournalingRules',
  GET_MAIL_DOMAIN_DETAILS = 'GetMailDomainDetails',
  GET_MAIL_GROUP_DETAILS = 'GetMailGroupDetails',
  GET_MAIL_USER_DETAILS = 'GetMailUserDetails',
  GET_MAILBOX_DETAILS = 'GetMailboxDetails',
  GET_MOBILE_DEVICE_DETAILS = 'GetMobileDeviceDetails',
  GET_MOBILE_DEVICES_FOR_USER = 'GetMobileDevicesForUser',
  GET_MOBILE_POLICY_DETAILS = 'GetMobilePolicyDetails',
  LIST_ACCESS_CONTROL_RULES = 'ListAccessControlRules',
  LIST_ALIASES = 'ListAliases',
  LIST_GROUP_MEMBERS = 'ListGroupMembers',
  LIST_GROUPS = 'ListGroups',
  LIST_INBOUND_MAIL_FLOW_RULES = 'ListInboundMailFlowRules',
  LIST_MAILBOX_PERMISSIONS = 'ListMailboxPermissions',
  LIST_MEMBERS_IN_MAIL_GROUP = 'ListMembersInMailGroup',
  LIST_ORGANIZATIONS = 'ListOrganizations',
  LIST_OUTBOUND_MAIL_FLOW_RULES = 'ListOutboundMailFlowRules',
  LIST_RESOURCE_DELEGATES = 'ListResourceDelegates',
  LIST_RESOURCES = 'ListResources',
  LIST_SMTP_GATEWAYS = 'ListSmtpGateways',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USERS = 'ListUsers',
  PUT_ACCESS_CONTROL_RULE = 'PutAccessControlRule',
  PUT_MAILBOX_PERMISSIONS = 'PutMailboxPermissions',
  REGISTER_TO_WORK_MAIL = 'RegisterToWorkMail',
  REMOVE_MEMBERS_FROM_GROUP = 'RemoveMembersFromGroup',
  RESET_PASSWORD = 'ResetPassword',
  RESET_USER_PASSWORD = 'ResetUserPassword',
  SEARCH_MEMBERS = 'SearchMembers',
  SET_ADMIN = 'SetAdmin',
  SET_DEFAULT_MAIL_DOMAIN = 'SetDefaultMailDomain',
  SET_JOURNALING_RULES = 'SetJournalingRules',
  SET_MAIL_GROUP_DETAILS = 'SetMailGroupDetails',
  SET_MAIL_USER_DETAILS = 'SetMailUserDetails',
  SET_MOBILE_POLICY_DETAILS = 'SetMobilePolicyDetails',
  TAG_RESOURCE = 'TagResource',
  TEST_INBOUND_MAIL_FLOW_RULES = 'TestInboundMailFlowRules',
  TEST_OUTBOUND_MAIL_FLOW_RULES = 'TestOutboundMailFlowRules',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_INBOUND_MAIL_FLOW_RULE = 'UpdateInboundMailFlowRule',
  UPDATE_MAILBOX_QUOTA = 'UpdateMailboxQuota',
  UPDATE_OUTBOUND_MAIL_FLOW_RULE = 'UpdateOutboundMailFlowRule',
  UPDATE_PRIMARY_EMAIL_ADDRESS = 'UpdatePrimaryEmailAddress',
  UPDATE_RESOURCE = 'UpdateResource',
  UPDATE_SMTP_GATEWAY = 'UpdateSmtpGateway',
  WIPE_MOBILE_DEVICE = 'WipeMobileDevice',
}

export enum Codebuild {
  BATCH_DELETE_BUILDS = 'BatchDeleteBuilds',
  BATCH_GET_BUILDS = 'BatchGetBuilds',
  BATCH_GET_PROJECTS = 'BatchGetProjects',
  BATCH_GET_REPORT_GROUPS = 'BatchGetReportGroups',
  BATCH_GET_REPORTS = 'BatchGetReports',
  BATCH_PUT_TEST_CASES = 'BatchPutTestCases',
  CREATE_PROJECT = 'CreateProject',
  CREATE_REPORT = 'CreateReport',
  CREATE_REPORT_GROUP = 'CreateReportGroup',
  CREATE_WEBHOOK = 'CreateWebhook',
  DELETE_O_AUTH_TOKEN = 'DeleteOAuthToken',
  DELETE_PROJECT = 'DeleteProject',
  DELETE_REPORT = 'DeleteReport',
  DELETE_REPORT_GROUP = 'DeleteReportGroup',
  DELETE_RESOURCE_POLICY = 'DeleteResourcePolicy',
  DELETE_SOURCE_CREDENTIALS = 'DeleteSourceCredentials',
  DELETE_WEBHOOK = 'DeleteWebhook',
  DESCRIBE_TEST_CASES = 'DescribeTestCases',
  GET_RESOURCE_POLICY = 'GetResourcePolicy',
  IMPORT_SOURCE_CREDENTIALS = 'ImportSourceCredentials',
  INVALIDATE_PROJECT_CACHE = 'InvalidateProjectCache',
  LIST_BUILDS = 'ListBuilds',
  LIST_BUILDS_FOR_PROJECT = 'ListBuildsForProject',
  LIST_CONNECTED_O_AUTH_ACCOUNTS = 'ListConnectedOAuthAccounts',
  LIST_CURATED_ENVIRONMENT_IMAGES = 'ListCuratedEnvironmentImages',
  LIST_PROJECTS = 'ListProjects',
  LIST_REPORT_GROUPS = 'ListReportGroups',
  LIST_REPORTS = 'ListReports',
  LIST_REPORTS_FOR_REPORT_GROUP = 'ListReportsForReportGroup',
  LIST_REPOSITORIES = 'ListRepositories',
  LIST_SHARED_PROJECTS = 'ListSharedProjects',
  LIST_SHARED_REPORT_GROUPS = 'ListSharedReportGroups',
  LIST_SOURCE_CREDENTIALS = 'ListSourceCredentials',
  PERSIST_O_AUTH_TOKEN = 'PersistOAuthToken',
  PUT_RESOURCE_POLICY = 'PutResourcePolicy',
  START_BUILD = 'StartBuild',
  STOP_BUILD = 'StopBuild',
  UPDATE_PROJECT = 'UpdateProject',
  UPDATE_REPORT = 'UpdateReport',
  UPDATE_REPORT_GROUP = 'UpdateReportGroup',
  UPDATE_WEBHOOK = 'UpdateWebhook',
}

export enum Iotanalytics {
  BATCH_PUT_MESSAGE = 'BatchPutMessage',
  CANCEL_PIPELINE_REPROCESSING = 'CancelPipelineReprocessing',
  CREATE_CHANNEL = 'CreateChannel',
  CREATE_DATASET = 'CreateDataset',
  CREATE_DATASET_CONTENT = 'CreateDatasetContent',
  CREATE_DATASTORE = 'CreateDatastore',
  CREATE_PIPELINE = 'CreatePipeline',
  DELETE_CHANNEL = 'DeleteChannel',
  DELETE_DATASET = 'DeleteDataset',
  DELETE_DATASET_CONTENT = 'DeleteDatasetContent',
  DELETE_DATASTORE = 'DeleteDatastore',
  DELETE_PIPELINE = 'DeletePipeline',
  DESCRIBE_CHANNEL = 'DescribeChannel',
  DESCRIBE_DATASET = 'DescribeDataset',
  DESCRIBE_DATASTORE = 'DescribeDatastore',
  DESCRIBE_LOGGING_OPTIONS = 'DescribeLoggingOptions',
  DESCRIBE_PIPELINE = 'DescribePipeline',
  GET_DATASET_CONTENT = 'GetDatasetContent',
  LIST_CHANNELS = 'ListChannels',
  LIST_DATASETS = 'ListDatasets',
  LIST_DATASTORES = 'ListDatastores',
  LIST_PIPELINES = 'ListPipelines',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'PutLoggingOptions',
  RUN_PIPELINE_ACTIVITY = 'RunPipelineActivity',
  SAMPLE_CHANNEL_DATA = 'SampleChannelData',
  START_PIPELINE_REPROCESSING = 'StartPipelineReprocessing',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CHANNEL = 'UpdateChannel',
  UPDATE_DATASET = 'UpdateDataset',
  UPDATE_DATASTORE = 'UpdateDatastore',
  UPDATE_PIPELINE = 'UpdatePipeline',
}

export enum Connect {
  CREATE_INSTANCE = 'CreateInstance',
  CREATE_USER = 'CreateUser',
  DELETE_USER = 'DeleteUser',
  DESCRIBE_INSTANCE = 'DescribeInstance',
  DESCRIBE_USER = 'DescribeUser',
  DESCRIBE_USER_HIERARCHY_GROUP = 'DescribeUserHierarchyGroup',
  DESCRIBE_USER_HIERARCHY_STRUCTURE = 'DescribeUserHierarchyStructure',
  DESTROY_INSTANCE = 'DestroyInstance',
  GET_CONTACT_ATTRIBUTES = 'GetContactAttributes',
  GET_CURRENT_METRIC_DATA = 'GetCurrentMetricData',
  GET_FEDERATION_TOKEN = 'GetFederationToken',
  GET_FEDERATION_TOKENS = 'GetFederationTokens',
  GET_METRIC_DATA = 'GetMetricData',
  LIST_CONTACT_FLOWS = 'ListContactFlows',
  LIST_HOURS_OF_OPERATIONS = 'ListHoursOfOperations',
  LIST_INSTANCES = 'ListInstances',
  LIST_PHONE_NUMBERS = 'ListPhoneNumbers',
  LIST_QUEUES = 'ListQueues',
  LIST_ROUTING_PROFILES = 'ListRoutingProfiles',
  LIST_SECURITY_PROFILES = 'ListSecurityProfiles',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USER_HIERARCHY_GROUPS = 'ListUserHierarchyGroups',
  LIST_USERS = 'ListUsers',
  MODIFY_INSTANCE = 'ModifyInstance',
  START_CHAT_CONTACT = 'StartChatContact',
  START_OUTBOUND_VOICE_CONTACT = 'StartOutboundVoiceContact',
  STOP_CONTACT = 'StopContact',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONTACT_ATTRIBUTES = 'UpdateContactAttributes',
  UPDATE_USER_HIERARCHY = 'UpdateUserHierarchy',
  UPDATE_USER_IDENTITY_INFO = 'UpdateUserIdentityInfo',
  UPDATE_USER_PHONE_CONFIG = 'UpdateUserPhoneConfig',
  UPDATE_USER_ROUTING_PROFILE = 'UpdateUserRoutingProfile',
  UPDATE_USER_SECURITY_PROFILES = 'UpdateUserSecurityProfiles',
}

export enum Pinpointemailservice {
  CREATE_CONFIGURATION_SET = 'CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'CreateConfigurationSetEventDestination',
  CREATE_DEDICATED_IP_POOL = 'CreateDedicatedIpPool',
  CREATE_DELIVERABILITY_TEST_REPORT = 'CreateDeliverabilityTestReport',
  CREATE_EMAIL_IDENTITY = 'CreateEmailIdentity',
  DELETE_CONFIGURATION_SET = 'DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'DeleteConfigurationSetEventDestination',
  DELETE_DEDICATED_IP_POOL = 'DeleteDedicatedIpPool',
  DELETE_EMAIL_IDENTITY = 'DeleteEmailIdentity',
  GET_ACCOUNT = 'GetAccount',
  GET_BLACKLIST_REPORTS = 'GetBlacklistReports',
  GET_CONFIGURATION_SET = 'GetConfigurationSet',
  GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'GetConfigurationSetEventDestinations',
  GET_DEDICATED_IP = 'GetDedicatedIp',
  GET_DEDICATED_IPS = 'GetDedicatedIps',
  GET_DELIVERABILITY_DASHBOARD_OPTIONS = 'GetDeliverabilityDashboardOptions',
  GET_DELIVERABILITY_TEST_REPORT = 'GetDeliverabilityTestReport',
  GET_DOMAIN_STATISTICS_REPORT = 'GetDomainStatisticsReport',
  GET_EMAIL_IDENTITY = 'GetEmailIdentity',
  LIST_CONFIGURATION_SETS = 'ListConfigurationSets',
  LIST_DEDICATED_IP_POOLS = 'ListDedicatedIpPools',
  LIST_DELIVERABILITY_TEST_REPORTS = 'ListDeliverabilityTestReports',
  LIST_EMAIL_IDENTITIES = 'ListEmailIdentities',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_ACCOUNT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'PutAccountDedicatedIpWarmupAttributes',
  PUT_ACCOUNT_SENDING_ATTRIBUTES = 'PutAccountSendingAttributes',
  PUT_CONFIGURATION_SET_DELIVERY_OPTIONS = 'PutConfigurationSetDeliveryOptions',
  PUT_CONFIGURATION_SET_REPUTATION_OPTIONS = 'PutConfigurationSetReputationOptions',
  PUT_CONFIGURATION_SET_SENDING_OPTIONS = 'PutConfigurationSetSendingOptions',
  PUT_CONFIGURATION_SET_TRACKING_OPTIONS = 'PutConfigurationSetTrackingOptions',
  PUT_DEDICATED_IP_IN_POOL = 'PutDedicatedIpInPool',
  PUT_DEDICATED_IP_WARMUP_ATTRIBUTES = 'PutDedicatedIpWarmupAttributes',
  PUT_DELIVERABILITY_DASHBOARD_OPTION = 'PutDeliverabilityDashboardOption',
  PUT_EMAIL_IDENTITY_DKIM_ATTRIBUTES = 'PutEmailIdentityDkimAttributes',
  PUT_EMAIL_IDENTITY_FEEDBACK_ATTRIBUTES = 'PutEmailIdentityFeedbackAttributes',
  PUT_EMAIL_IDENTITY_MAIL_FROM_ATTRIBUTES = 'PutEmailIdentityMailFromAttributes',
  SEND_EMAIL = 'SendEmail',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'UpdateConfigurationSetEventDestination',
}

export enum Ses {
  CLONE_RECEIPT_RULE_SET = 'CloneReceiptRuleSet',
  CREATE_CONFIGURATION_SET = 'CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'CreateConfigurationSetEventDestination',
  CREATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'CreateConfigurationSetTrackingOptions',
  CREATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'CreateCustomVerificationEmailTemplate',
  CREATE_RECEIPT_FILTER = 'CreateReceiptFilter',
  CREATE_RECEIPT_RULE = 'CreateReceiptRule',
  CREATE_RECEIPT_RULE_SET = 'CreateReceiptRuleSet',
  CREATE_TEMPLATE = 'CreateTemplate',
  DELETE_CONFIGURATION_SET = 'DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'DeleteConfigurationSetEventDestination',
  DELETE_CONFIGURATION_SET_TRACKING_OPTIONS = 'DeleteConfigurationSetTrackingOptions',
  DELETE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'DeleteCustomVerificationEmailTemplate',
  DELETE_IDENTITY = 'DeleteIdentity',
  DELETE_IDENTITY_POLICY = 'DeleteIdentityPolicy',
  DELETE_RECEIPT_FILTER = 'DeleteReceiptFilter',
  DELETE_RECEIPT_RULE = 'DeleteReceiptRule',
  DELETE_RECEIPT_RULE_SET = 'DeleteReceiptRuleSet',
  DELETE_TEMPLATE = 'DeleteTemplate',
  DELETE_VERIFIED_EMAIL_ADDRESS = 'DeleteVerifiedEmailAddress',
  DESCRIBE_ACTIVE_RECEIPT_RULE_SET = 'DescribeActiveReceiptRuleSet',
  DESCRIBE_CONFIGURATION_SET = 'DescribeConfigurationSet',
  DESCRIBE_RECEIPT_RULE = 'DescribeReceiptRule',
  DESCRIBE_RECEIPT_RULE_SET = 'DescribeReceiptRuleSet',
  GET_ACCOUNT_SENDING_ENABLED = 'GetAccountSendingEnabled',
  GET_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'GetCustomVerificationEmailTemplate',
  GET_IDENTITY_DKIM_ATTRIBUTES = 'GetIdentityDkimAttributes',
  GET_IDENTITY_MAIL_FROM_DOMAIN_ATTRIBUTES = 'GetIdentityMailFromDomainAttributes',
  GET_IDENTITY_NOTIFICATION_ATTRIBUTES = 'GetIdentityNotificationAttributes',
  GET_IDENTITY_POLICIES = 'GetIdentityPolicies',
  GET_IDENTITY_VERIFICATION_ATTRIBUTES = 'GetIdentityVerificationAttributes',
  GET_SEND_QUOTA = 'GetSendQuota',
  GET_SEND_STATISTICS = 'GetSendStatistics',
  GET_TEMPLATE = 'GetTemplate',
  LIST_CONFIGURATION_SETS = 'ListConfigurationSets',
  LIST_CUSTOM_VERIFICATION_EMAIL_TEMPLATES = 'ListCustomVerificationEmailTemplates',
  LIST_IDENTITIES = 'ListIdentities',
  LIST_IDENTITY_POLICIES = 'ListIdentityPolicies',
  LIST_RECEIPT_FILTERS = 'ListReceiptFilters',
  LIST_RECEIPT_RULE_SETS = 'ListReceiptRuleSets',
  LIST_TEMPLATES = 'ListTemplates',
  LIST_VERIFIED_EMAIL_ADDRESSES = 'ListVerifiedEmailAddresses',
  PUT_IDENTITY_POLICY = 'PutIdentityPolicy',
  REORDER_RECEIPT_RULE_SET = 'ReorderReceiptRuleSet',
  SEND_BOUNCE = 'SendBounce',
  SEND_BULK_TEMPLATED_EMAIL = 'SendBulkTemplatedEmail',
  SEND_CUSTOM_VERIFICATION_EMAIL = 'SendCustomVerificationEmail',
  SEND_EMAIL = 'SendEmail',
  SEND_RAW_EMAIL = 'SendRawEmail',
  SEND_TEMPLATED_EMAIL = 'SendTemplatedEmail',
  SET_ACTIVE_RECEIPT_RULE_SET = 'SetActiveReceiptRuleSet',
  SET_IDENTITY_DKIM_ENABLED = 'SetIdentityDkimEnabled',
  SET_IDENTITY_FEEDBACK_FORWARDING_ENABLED = 'SetIdentityFeedbackForwardingEnabled',
  SET_IDENTITY_HEADERS_IN_NOTIFICATIONS_ENABLED = 'SetIdentityHeadersInNotificationsEnabled',
  SET_IDENTITY_MAIL_FROM_DOMAIN = 'SetIdentityMailFromDomain',
  SET_IDENTITY_NOTIFICATION_TOPIC = 'SetIdentityNotificationTopic',
  SET_RECEIPT_RULE_POSITION = 'SetReceiptRulePosition',
  TEST_RENDER_TEMPLATE = 'TestRenderTemplate',
  UPDATE_ACCOUNT_SENDING_ENABLED = 'UpdateAccountSendingEnabled',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'UpdateConfigurationSetEventDestination',
  UPDATE_CONFIGURATION_SET_REPUTATION_METRICS_ENABLED = 'UpdateConfigurationSetReputationMetricsEnabled',
  UPDATE_CONFIGURATION_SET_SENDING_ENABLED = 'UpdateConfigurationSetSendingEnabled',
  UPDATE_CONFIGURATION_SET_TRACKING_OPTIONS = 'UpdateConfigurationSetTrackingOptions',
  UPDATE_CUSTOM_VERIFICATION_EMAIL_TEMPLATE = 'UpdateCustomVerificationEmailTemplate',
  UPDATE_RECEIPT_RULE = 'UpdateReceiptRule',
  UPDATE_TEMPLATE = 'UpdateTemplate',
  VERIFY_DOMAIN_DKIM = 'VerifyDomainDkim',
  VERIFY_DOMAIN_IDENTITY = 'VerifyDomainIdentity',
  VERIFY_EMAIL_ADDRESS = 'VerifyEmailAddress',
  VERIFY_EMAIL_IDENTITY = 'VerifyEmailIdentity',
}

export enum Costexplorerservice {
  CREATE_COST_CATEGORY_DEFINITION = 'CreateCostCategoryDefinition',
  DELETE_COST_CATEGORY_DEFINITION = 'DeleteCostCategoryDefinition',
  DESCRIBE_COST_CATEGORY_DEFINITION = 'DescribeCostCategoryDefinition',
  GET_COST_AND_USAGE = 'GetCostAndUsage',
  GET_COST_AND_USAGE_WITH_RESOURCES = 'GetCostAndUsageWithResources',
  GET_COST_FORECAST = 'GetCostForecast',
  GET_DIMENSION_VALUES = 'GetDimensionValues',
  GET_RESERVATION_COVERAGE = 'GetReservationCoverage',
  GET_RESERVATION_PURCHASE_RECOMMENDATION = 'GetReservationPurchaseRecommendation',
  GET_RESERVATION_UTILIZATION = 'GetReservationUtilization',
  GET_RIGHTSIZING_RECOMMENDATION = 'GetRightsizingRecommendation',
  GET_SAVINGS_PLANS_COVERAGE = 'GetSavingsPlansCoverage',
  GET_SAVINGS_PLANS_PURCHASE_RECOMMENDATION = 'GetSavingsPlansPurchaseRecommendation',
  GET_SAVINGS_PLANS_UTILIZATION = 'GetSavingsPlansUtilization',
  GET_SAVINGS_PLANS_UTILIZATION_DETAILS = 'GetSavingsPlansUtilizationDetails',
  GET_TAGS = 'GetTags',
  GET_USAGE_FORECAST = 'GetUsageForecast',
  LIST_COST_CATEGORY_DEFINITIONS = 'ListCostCategoryDefinitions',
  UPDATE_COST_CATEGORY_DEFINITION = 'UpdateCostCategoryDefinition',
}

export enum Cloudwatchsynthetics {
  CREATE_CANARY = 'CreateCanary',
  DELETE_CANARY = 'DeleteCanary',
  DESCRIBE_CANARIES = 'DescribeCanaries',
  DESCRIBE_CANARIES_LAST_RUN = 'DescribeCanariesLastRun',
  GET_CANARY_RUNS = 'GetCanaryRuns',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_CANARY = 'StartCanary',
  STOP_CANARY = 'StopCanary',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CANARY = 'UpdateCanary',
}

export enum Elasticinference {
  CONNECT = 'Connect',
}

export enum Deeplens {
  ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'AssociateServiceRoleToAccount',
  BATCH_GET_DEVICE = 'BatchGetDevice',
  BATCH_GET_MODEL = 'BatchGetModel',
  BATCH_GET_PROJECT = 'BatchGetProject',
  CREATE_DEVICE_CERTIFICATES = 'CreateDeviceCertificates',
  CREATE_MODEL = 'CreateModel',
  CREATE_PROJECT = 'CreateProject',
  DELETE_MODEL = 'DeleteModel',
  DELETE_PROJECT = 'DeleteProject',
  DEPLOY_PROJECT = 'DeployProject',
  DEREGISTER_DEVICE = 'DeregisterDevice',
  GET_ASSOCIATED_RESOURCES = 'GetAssociatedResources',
  GET_DEPLOYMENT_STATUS = 'GetDeploymentStatus',
  GET_DEVICE = 'GetDevice',
  GET_MODEL = 'GetModel',
  GET_PROJECT = 'GetProject',
  IMPORT_PROJECT_FROM_TEMPLATE = 'ImportProjectFromTemplate',
  LIST_DEPLOYMENTS = 'ListDeployments',
  LIST_DEVICES = 'ListDevices',
  LIST_MODELS = 'ListModels',
  LIST_PROJECTS = 'ListProjects',
  REGISTER_DEVICE = 'RegisterDevice',
  REMOVE_PROJECT = 'RemoveProject',
  UPDATE_PROJECT = 'UpdateProject',
}

export enum Rdsdataapi {
  BATCH_EXECUTE_STATEMENT = 'BatchExecuteStatement',
  BEGIN_TRANSACTION = 'BeginTransaction',
  COMMIT_TRANSACTION = 'CommitTransaction',
  EXECUTE_SQL = 'ExecuteSql',
  EXECUTE_STATEMENT = 'ExecuteStatement',
  ROLLBACK_TRANSACTION = 'RollbackTransaction',
}

export enum Ssodirectory {
  ADD_MEMBER_TO_GROUP = 'AddMemberToGroup',
  COMPLETE_VIRTUAL_MFA_DEVICE_REGISTRATION = 'CompleteVirtualMfaDeviceRegistration',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_BEARER_TOKEN = 'CreateBearerToken',
  CREATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'CreateExternalIdPConfigurationForDirectory',
  CREATE_GROUP = 'CreateGroup',
  CREATE_PROVISIONING_TENANT = 'CreateProvisioningTenant',
  CREATE_USER = 'CreateUser',
  DELETE_BEARER_TOKEN = 'DeleteBearerToken',
  DELETE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'DeleteExternalIdPConfigurationForDirectory',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_MFA_DEVICE_FOR_USER = 'DeleteMfaDeviceForUser',
  DELETE_PROVISIONING_TENANT = 'DeleteProvisioningTenant',
  DELETE_USER = 'DeleteUser',
  DESCRIBE_DIRECTORY = 'DescribeDirectory',
  DESCRIBE_GROUPS = 'DescribeGroups',
  DESCRIBE_USERS = 'DescribeUsers',
  DISABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'DisableExternalIdPConfigurationForDirectory',
  DISABLE_USER = 'DisableUser',
  ENABLE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'EnableExternalIdPConfigurationForDirectory',
  ENABLE_USER = 'EnableUser',
  GET_AWSSP_CONFIGURATION_FOR_DIRECTORY = 'GetAWSSPConfigurationForDirectory',
  LIST_BEARER_TOKENS = 'ListBearerTokens',
  LIST_EXTERNAL_ID_P_CONFIGURATIONS_FOR_DIRECTORY = 'ListExternalIdPConfigurationsForDirectory',
  LIST_GROUPS_FOR_USER = 'ListGroupsForUser',
  LIST_MEMBERS_IN_GROUP = 'ListMembersInGroup',
  LIST_MFA_DEVICES_FOR_USER = 'ListMfaDevicesForUser',
  LIST_PROVISIONING_TENANTS = 'ListProvisioningTenants',
  REMOVE_MEMBER_FROM_GROUP = 'RemoveMemberFromGroup',
  SEARCH_GROUPS = 'SearchGroups',
  SEARCH_USERS = 'SearchUsers',
  START_VIRTUAL_MFA_DEVICE_REGISTRATION = 'StartVirtualMfaDeviceRegistration',
  UPDATE_EXTERNAL_ID_P_CONFIGURATION_FOR_DIRECTORY = 'UpdateExternalIdPConfigurationForDirectory',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_PASSWORD = 'UpdatePassword',
  UPDATE_USER = 'UpdateUser',
  VERIFY_EMAIL = 'VerifyEmail',
}

export enum Appflow {
  CREATE_CONNECTOR_PROFILE = 'CreateConnectorProfile',
  CREATE_FLOW = 'CreateFlow',
  DELETE_CONNECTOR_PROFILE = 'DeleteConnectorProfile',
  DELETE_FLOW = 'DeleteFlow',
  DESCRIBE_CONNECTOR_FIELDS = 'DescribeConnectorFields',
  DESCRIBE_CONNECTOR_PROFILES = 'DescribeConnectorProfiles',
  DESCRIBE_CONNECTORS = 'DescribeConnectors',
  DESCRIBE_FLOW_EXECUTION = 'DescribeFlowExecution',
  DESCRIBE_FLOWS = 'DescribeFlows',
  LIST_CONNECTOR_FIELDS = 'ListConnectorFields',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  RUN_FLOW = 'RunFlow',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_FLOW = 'UpdateFlow',
}

export enum Trustedadvisor {
  DESCRIBE_ACCOUNT = 'DescribeAccount',
  DESCRIBE_ACCOUNT_ACCESS = 'DescribeAccountAccess',
  DESCRIBE_CHECK_ITEMS = 'DescribeCheckItems',
  DESCRIBE_CHECK_REFRESH_STATUSES = 'DescribeCheckRefreshStatuses',
  DESCRIBE_CHECK_SUMMARIES = 'DescribeCheckSummaries',
  DESCRIBE_CHECKS = 'DescribeChecks',
  DESCRIBE_NOTIFICATION_PREFERENCES = 'DescribeNotificationPreferences',
  EXCLUDE_CHECK_ITEMS = 'ExcludeCheckItems',
  INCLUDE_CHECK_ITEMS = 'IncludeCheckItems',
  REFRESH_CHECK = 'RefreshCheck',
  SET_ACCOUNT_ACCESS = 'SetAccountAccess',
  UPDATE_NOTIFICATION_PREFERENCES = 'UpdateNotificationPreferences',
}

export enum Config {
  BATCH_GET_AGGREGATE_RESOURCE_CONFIG = 'BatchGetAggregateResourceConfig',
  BATCH_GET_RESOURCE_CONFIG = 'BatchGetResourceConfig',
  DELETE_AGGREGATION_AUTHORIZATION = 'DeleteAggregationAuthorization',
  DELETE_CONFIG_RULE = 'DeleteConfigRule',
  DELETE_CONFIGURATION_AGGREGATOR = 'DeleteConfigurationAggregator',
  DELETE_CONFIGURATION_RECORDER = 'DeleteConfigurationRecorder',
  DELETE_CONFORMANCE_PACK = 'DeleteConformancePack',
  DELETE_DELIVERY_CHANNEL = 'DeleteDeliveryChannel',
  DELETE_EVALUATION_RESULTS = 'DeleteEvaluationResults',
  DELETE_ORGANIZATION_CONFIG_RULE = 'DeleteOrganizationConfigRule',
  DELETE_ORGANIZATION_CONFORMANCE_PACK = 'DeleteOrganizationConformancePack',
  DELETE_PENDING_AGGREGATION_REQUEST = 'DeletePendingAggregationRequest',
  DELETE_REMEDIATION_CONFIGURATION = 'DeleteRemediationConfiguration',
  DELETE_REMEDIATION_EXCEPTIONS = 'DeleteRemediationExceptions',
  DELETE_RETENTION_CONFIGURATION = 'DeleteRetentionConfiguration',
  DELIVER_CONFIG_SNAPSHOT = 'DeliverConfigSnapshot',
  DESCRIBE_AGGREGATE_COMPLIANCE_BY_CONFIG_RULES = 'DescribeAggregateComplianceByConfigRules',
  DESCRIBE_AGGREGATION_AUTHORIZATIONS = 'DescribeAggregationAuthorizations',
  DESCRIBE_COMPLIANCE_BY_CONFIG_RULE = 'DescribeComplianceByConfigRule',
  DESCRIBE_COMPLIANCE_BY_RESOURCE = 'DescribeComplianceByResource',
  DESCRIBE_CONFIG_RULE_EVALUATION_STATUS = 'DescribeConfigRuleEvaluationStatus',
  DESCRIBE_CONFIG_RULES = 'DescribeConfigRules',
  DESCRIBE_CONFIGURATION_AGGREGATOR_SOURCES_STATUS = 'DescribeConfigurationAggregatorSourcesStatus',
  DESCRIBE_CONFIGURATION_AGGREGATORS = 'DescribeConfigurationAggregators',
  DESCRIBE_CONFIGURATION_RECORDER_STATUS = 'DescribeConfigurationRecorderStatus',
  DESCRIBE_CONFIGURATION_RECORDERS = 'DescribeConfigurationRecorders',
  DESCRIBE_CONFORMANCE_PACK_COMPLIANCE = 'DescribeConformancePackCompliance',
  DESCRIBE_CONFORMANCE_PACK_STATUS = 'DescribeConformancePackStatus',
  DESCRIBE_CONFORMANCE_PACKS = 'DescribeConformancePacks',
  DESCRIBE_DELIVERY_CHANNEL_STATUS = 'DescribeDeliveryChannelStatus',
  DESCRIBE_DELIVERY_CHANNELS = 'DescribeDeliveryChannels',
  DESCRIBE_ORGANIZATION_CONFIG_RULE_STATUSES = 'DescribeOrganizationConfigRuleStatuses',
  DESCRIBE_ORGANIZATION_CONFIG_RULES = 'DescribeOrganizationConfigRules',
  DESCRIBE_ORGANIZATION_CONFORMANCE_PACK_STATUSES = 'DescribeOrganizationConformancePackStatuses',
  DESCRIBE_ORGANIZATION_CONFORMANCE_PACKS = 'DescribeOrganizationConformancePacks',
  DESCRIBE_PENDING_AGGREGATION_REQUESTS = 'DescribePendingAggregationRequests',
  DESCRIBE_REMEDIATION_CONFIGURATIONS = 'DescribeRemediationConfigurations',
  DESCRIBE_REMEDIATION_EXCEPTIONS = 'DescribeRemediationExceptions',
  DESCRIBE_REMEDIATION_EXECUTION_STATUS = 'DescribeRemediationExecutionStatus',
  DESCRIBE_RETENTION_CONFIGURATIONS = 'DescribeRetentionConfigurations',
  GET_AGGREGATE_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'GetAggregateComplianceDetailsByConfigRule',
  GET_AGGREGATE_CONFIG_RULE_COMPLIANCE_SUMMARY = 'GetAggregateConfigRuleComplianceSummary',
  GET_AGGREGATE_DISCOVERED_RESOURCE_COUNTS = 'GetAggregateDiscoveredResourceCounts',
  GET_AGGREGATE_RESOURCE_CONFIG = 'GetAggregateResourceConfig',
  GET_COMPLIANCE_DETAILS_BY_CONFIG_RULE = 'GetComplianceDetailsByConfigRule',
  GET_COMPLIANCE_DETAILS_BY_RESOURCE = 'GetComplianceDetailsByResource',
  GET_COMPLIANCE_SUMMARY_BY_CONFIG_RULE = 'GetComplianceSummaryByConfigRule',
  GET_COMPLIANCE_SUMMARY_BY_RESOURCE_TYPE = 'GetComplianceSummaryByResourceType',
  GET_CONFORMANCE_PACK_COMPLIANCE_DETAILS = 'GetConformancePackComplianceDetails',
  GET_CONFORMANCE_PACK_COMPLIANCE_SUMMARY = 'GetConformancePackComplianceSummary',
  GET_DISCOVERED_RESOURCE_COUNTS = 'GetDiscoveredResourceCounts',
  GET_ORGANIZATION_CONFIG_RULE_DETAILED_STATUS = 'GetOrganizationConfigRuleDetailedStatus',
  GET_ORGANIZATION_CONFORMANCE_PACK_DETAILED_STATUS = 'GetOrganizationConformancePackDetailedStatus',
  GET_RESOURCE_CONFIG_HISTORY = 'GetResourceConfigHistory',
  GET_RESOURCES = 'GetResources',
  GET_TAG_KEYS = 'GetTagKeys',
  LIST_AGGREGATE_DISCOVERED_RESOURCES = 'ListAggregateDiscoveredResources',
  LIST_DISCOVERED_RESOURCES = 'ListDiscoveredResources',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_AGGREGATION_AUTHORIZATION = 'PutAggregationAuthorization',
  PUT_CONFIG_RULE = 'PutConfigRule',
  PUT_CONFIGURATION_AGGREGATOR = 'PutConfigurationAggregator',
  PUT_CONFIGURATION_RECORDER = 'PutConfigurationRecorder',
  PUT_CONFORMANCE_PACK = 'PutConformancePack',
  PUT_DELIVERY_CHANNEL = 'PutDeliveryChannel',
  PUT_EVALUATIONS = 'PutEvaluations',
  PUT_ORGANIZATION_CONFIG_RULE = 'PutOrganizationConfigRule',
  PUT_ORGANIZATION_CONFORMANCE_PACK = 'PutOrganizationConformancePack',
  PUT_REMEDIATION_CONFIGURATIONS = 'PutRemediationConfigurations',
  PUT_REMEDIATION_EXCEPTIONS = 'PutRemediationExceptions',
  PUT_RETENTION_CONFIGURATION = 'PutRetentionConfiguration',
  SELECT_RESOURCE_CONFIG = 'SelectResourceConfig',
  START_CONFIG_RULES_EVALUATION = 'StartConfigRulesEvaluation',
  START_CONFIGURATION_RECORDER = 'StartConfigurationRecorder',
  START_REMEDIATION_EXECUTION = 'StartRemediationExecution',
  STOP_CONFIGURATION_RECORDER = 'StopConfigurationRecorder',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Rds {
  ADD_ROLE_TO_DB_CLUSTER = 'AddRoleToDBCluster',
  ADD_ROLE_TO_DB_INSTANCE = 'AddRoleToDBInstance',
  ADD_SOURCE_IDENTIFIER_TO_SUBSCRIPTION = 'AddSourceIdentifierToSubscription',
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  APPLY_PENDING_MAINTENANCE_ACTION = 'ApplyPendingMaintenanceAction',
  AUTHORIZE_DB_SECURITY_GROUP_INGRESS = 'AuthorizeDBSecurityGroupIngress',
  BACKTRACK_DB_CLUSTER = 'BacktrackDBCluster',
  CANCEL_EXPORT_TASK = 'CancelExportTask',
  COPY_DB_CLUSTER_PARAMETER_GROUP = 'CopyDBClusterParameterGroup',
  COPY_DB_CLUSTER_SNAPSHOT = 'CopyDBClusterSnapshot',
  COPY_DB_PARAMETER_GROUP = 'CopyDBParameterGroup',
  COPY_DB_SNAPSHOT = 'CopyDBSnapshot',
  COPY_OPTION_GROUP = 'CopyOptionGroup',
  CREATE_DB_CLUSTER = 'CreateDBCluster',
  CREATE_DB_CLUSTER_ENDPOINT = 'CreateDBClusterEndpoint',
  CREATE_DB_CLUSTER_PARAMETER_GROUP = 'CreateDBClusterParameterGroup',
  CREATE_DB_CLUSTER_SNAPSHOT = 'CreateDBClusterSnapshot',
  CREATE_DB_INSTANCE = 'CreateDBInstance',
  CREATE_DB_INSTANCE_READ_REPLICA = 'CreateDBInstanceReadReplica',
  CREATE_DB_PARAMETER_GROUP = 'CreateDBParameterGroup',
  CREATE_DB_PROXY = 'CreateDBProxy',
  CREATE_DB_SECURITY_GROUP = 'CreateDBSecurityGroup',
  CREATE_DB_SNAPSHOT = 'CreateDBSnapshot',
  CREATE_DB_SUBNET_GROUP = 'CreateDBSubnetGroup',
  CREATE_EVENT_SUBSCRIPTION = 'CreateEventSubscription',
  CREATE_GLOBAL_CLUSTER = 'CreateGlobalCluster',
  CREATE_OPTION_GROUP = 'CreateOptionGroup',
  DELETE_DB_CLUSTER = 'DeleteDBCluster',
  DELETE_DB_CLUSTER_ENDPOINT = 'DeleteDBClusterEndpoint',
  DELETE_DB_CLUSTER_PARAMETER_GROUP = 'DeleteDBClusterParameterGroup',
  DELETE_DB_CLUSTER_SNAPSHOT = 'DeleteDBClusterSnapshot',
  DELETE_DB_INSTANCE = 'DeleteDBInstance',
  DELETE_DB_INSTANCE_AUTOMATED_BACKUP = 'DeleteDBInstanceAutomatedBackup',
  DELETE_DB_PARAMETER_GROUP = 'DeleteDBParameterGroup',
  DELETE_DB_PROXY = 'DeleteDBProxy',
  DELETE_DB_SECURITY_GROUP = 'DeleteDBSecurityGroup',
  DELETE_DB_SNAPSHOT = 'DeleteDBSnapshot',
  DELETE_DB_SUBNET_GROUP = 'DeleteDBSubnetGroup',
  DELETE_EVENT_SUBSCRIPTION = 'DeleteEventSubscription',
  DELETE_GLOBAL_CLUSTER = 'DeleteGlobalCluster',
  DELETE_OPTION_GROUP = 'DeleteOptionGroup',
  DEREGISTER_DB_PROXY_TARGETS = 'DeregisterDBProxyTargets',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_CERTIFICATES = 'DescribeCertificates',
  DESCRIBE_DB_CLUSTER_BACKTRACKS = 'DescribeDBClusterBacktracks',
  DESCRIBE_DB_CLUSTER_ENDPOINTS = 'DescribeDBClusterEndpoints',
  DESCRIBE_DB_CLUSTER_PARAMETER_GROUPS = 'DescribeDBClusterParameterGroups',
  DESCRIBE_DB_CLUSTER_PARAMETERS = 'DescribeDBClusterParameters',
  DESCRIBE_DB_CLUSTER_SNAPSHOT_ATTRIBUTES = 'DescribeDBClusterSnapshotAttributes',
  DESCRIBE_DB_CLUSTER_SNAPSHOTS = 'DescribeDBClusterSnapshots',
  DESCRIBE_DB_CLUSTERS = 'DescribeDBClusters',
  DESCRIBE_DB_ENGINE_VERSIONS = 'DescribeDBEngineVersions',
  DESCRIBE_DB_INSTANCE_AUTOMATED_BACKUPS = 'DescribeDBInstanceAutomatedBackups',
  DESCRIBE_DB_INSTANCES = 'DescribeDBInstances',
  DESCRIBE_DB_LOG_FILES = 'DescribeDBLogFiles',
  DESCRIBE_DB_PARAMETER_GROUPS = 'DescribeDBParameterGroups',
  DESCRIBE_DB_PARAMETERS = 'DescribeDBParameters',
  DESCRIBE_DB_PROXIES = 'DescribeDBProxies',
  DESCRIBE_DB_PROXY_TARGET_GROUPS = 'DescribeDBProxyTargetGroups',
  DESCRIBE_DB_PROXY_TARGETS = 'DescribeDBProxyTargets',
  DESCRIBE_DB_SECURITY_GROUPS = 'DescribeDBSecurityGroups',
  DESCRIBE_DB_SNAPSHOT_ATTRIBUTES = 'DescribeDBSnapshotAttributes',
  DESCRIBE_DB_SNAPSHOTS = 'DescribeDBSnapshots',
  DESCRIBE_DB_SUBNET_GROUPS = 'DescribeDBSubnetGroups',
  DESCRIBE_ENGINE_DEFAULT_CLUSTER_PARAMETERS = 'DescribeEngineDefaultClusterParameters',
  DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'DescribeEngineDefaultParameters',
  DESCRIBE_EVENT_CATEGORIES = 'DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_EXPORT_TASKS = 'DescribeExportTasks',
  DESCRIBE_GLOBAL_CLUSTERS = 'DescribeGlobalClusters',
  DESCRIBE_OPTION_GROUP_OPTIONS = 'DescribeOptionGroupOptions',
  DESCRIBE_OPTION_GROUPS = 'DescribeOptionGroups',
  DESCRIBE_ORDERABLE_DB_INSTANCE_OPTIONS = 'DescribeOrderableDBInstanceOptions',
  DESCRIBE_PENDING_MAINTENANCE_ACTIONS = 'DescribePendingMaintenanceActions',
  DESCRIBE_RESERVED_DB_INSTANCES = 'DescribeReservedDBInstances',
  DESCRIBE_RESERVED_DB_INSTANCES_OFFERINGS = 'DescribeReservedDBInstancesOfferings',
  DESCRIBE_SOURCE_REGIONS = 'DescribeSourceRegions',
  DESCRIBE_VALID_DB_INSTANCE_MODIFICATIONS = 'DescribeValidDBInstanceModifications',
  DOWNLOAD_COMPLETE_DB_LOG_FILE = 'DownloadCompleteDBLogFile',
  DOWNLOAD_DB_LOG_FILE_PORTION = 'DownloadDBLogFilePortion',
  FAILOVER_DB_CLUSTER = 'FailoverDBCluster',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_CURRENT_DB_CLUSTER_CAPACITY = 'ModifyCurrentDBClusterCapacity',
  MODIFY_DB_CLUSTER = 'ModifyDBCluster',
  MODIFY_DB_CLUSTER_ENDPOINT = 'ModifyDBClusterEndpoint',
  MODIFY_DB_CLUSTER_PARAMETER_GROUP = 'ModifyDBClusterParameterGroup',
  MODIFY_DB_CLUSTER_SNAPSHOT_ATTRIBUTE = 'ModifyDBClusterSnapshotAttribute',
  MODIFY_DB_INSTANCE = 'ModifyDBInstance',
  MODIFY_DB_PARAMETER_GROUP = 'ModifyDBParameterGroup',
  MODIFY_DB_PROXY = 'ModifyDBProxy',
  MODIFY_DB_PROXY_TARGET_GROUP = 'ModifyDBProxyTargetGroup',
  MODIFY_DB_SNAPSHOT = 'ModifyDBSnapshot',
  MODIFY_DB_SNAPSHOT_ATTRIBUTE = 'ModifyDBSnapshotAttribute',
  MODIFY_DB_SUBNET_GROUP = 'ModifyDBSubnetGroup',
  MODIFY_EVENT_SUBSCRIPTION = 'ModifyEventSubscription',
  MODIFY_GLOBAL_CLUSTER = 'ModifyGlobalCluster',
  MODIFY_OPTION_GROUP = 'ModifyOptionGroup',
  PROMOTE_READ_REPLICA = 'PromoteReadReplica',
  PROMOTE_READ_REPLICA_DB_CLUSTER = 'PromoteReadReplicaDBCluster',
  PURCHASE_RESERVED_DB_INSTANCES_OFFERING = 'PurchaseReservedDBInstancesOffering',
  REBOOT_DB_INSTANCE = 'RebootDBInstance',
  REGISTER_DB_PROXY_TARGETS = 'RegisterDBProxyTargets',
  REMOVE_FROM_GLOBAL_CLUSTER = 'RemoveFromGlobalCluster',
  REMOVE_ROLE_FROM_DB_CLUSTER = 'RemoveRoleFromDBCluster',
  REMOVE_ROLE_FROM_DB_INSTANCE = 'RemoveRoleFromDBInstance',
  REMOVE_SOURCE_IDENTIFIER_FROM_SUBSCRIPTION = 'RemoveSourceIdentifierFromSubscription',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESET_DB_CLUSTER_PARAMETER_GROUP = 'ResetDBClusterParameterGroup',
  RESET_DB_PARAMETER_GROUP = 'ResetDBParameterGroup',
  RESTORE_DB_CLUSTER_FROM_S_3 = 'RestoreDBClusterFromS3',
  RESTORE_DB_CLUSTER_FROM_SNAPSHOT = 'RestoreDBClusterFromSnapshot',
  RESTORE_DB_CLUSTER_TO_POINT_IN_TIME = 'RestoreDBClusterToPointInTime',
  RESTORE_DB_INSTANCE_FROM_DB_SNAPSHOT = 'RestoreDBInstanceFromDBSnapshot',
  RESTORE_DB_INSTANCE_FROM_S_3 = 'RestoreDBInstanceFromS3',
  RESTORE_DB_INSTANCE_TO_POINT_IN_TIME = 'RestoreDBInstanceToPointInTime',
  REVOKE_DB_SECURITY_GROUP_INGRESS = 'RevokeDBSecurityGroupIngress',
  START_ACTIVITY_STREAM = 'StartActivityStream',
  START_DB_CLUSTER = 'StartDBCluster',
  START_DB_INSTANCE = 'StartDBInstance',
  START_EXPORT_TASK = 'StartExportTask',
  STOP_ACTIVITY_STREAM = 'StopActivityStream',
  STOP_DB_CLUSTER = 'StopDBCluster',
  STOP_DB_INSTANCE = 'StopDBInstance',
}

export enum Simpleworkflowservice {
  CANCEL_TIMER = 'CancelTimer',
  CANCEL_WORKFLOW_EXECUTION = 'CancelWorkflowExecution',
  COMPLETE_WORKFLOW_EXECUTION = 'CompleteWorkflowExecution',
  CONTINUE_AS_NEW_WORKFLOW_EXECUTION = 'ContinueAsNewWorkflowExecution',
  COUNT_CLOSED_WORKFLOW_EXECUTIONS = 'CountClosedWorkflowExecutions',
  COUNT_OPEN_WORKFLOW_EXECUTIONS = 'CountOpenWorkflowExecutions',
  COUNT_PENDING_ACTIVITY_TASKS = 'CountPendingActivityTasks',
  COUNT_PENDING_DECISION_TASKS = 'CountPendingDecisionTasks',
  DEPRECATE_ACTIVITY_TYPE = 'DeprecateActivityType',
  DEPRECATE_DOMAIN = 'DeprecateDomain',
  DEPRECATE_WORKFLOW_TYPE = 'DeprecateWorkflowType',
  DESCRIBE_ACTIVITY_TYPE = 'DescribeActivityType',
  DESCRIBE_DOMAIN = 'DescribeDomain',
  DESCRIBE_WORKFLOW_EXECUTION = 'DescribeWorkflowExecution',
  DESCRIBE_WORKFLOW_TYPE = 'DescribeWorkflowType',
  FAIL_WORKFLOW_EXECUTION = 'FailWorkflowExecution',
  GET_WORKFLOW_EXECUTION_HISTORY = 'GetWorkflowExecutionHistory',
  LIST_ACTIVITY_TYPES = 'ListActivityTypes',
  LIST_CLOSED_WORKFLOW_EXECUTIONS = 'ListClosedWorkflowExecutions',
  LIST_DOMAINS = 'ListDomains',
  LIST_OPEN_WORKFLOW_EXECUTIONS = 'ListOpenWorkflowExecutions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WORKFLOW_TYPES = 'ListWorkflowTypes',
  POLL_FOR_ACTIVITY_TASK = 'PollForActivityTask',
  POLL_FOR_DECISION_TASK = 'PollForDecisionTask',
  RECORD_ACTIVITY_TASK_HEARTBEAT = 'RecordActivityTaskHeartbeat',
  RECORD_MARKER = 'RecordMarker',
  REGISTER_ACTIVITY_TYPE = 'RegisterActivityType',
  REGISTER_DOMAIN = 'RegisterDomain',
  REGISTER_WORKFLOW_TYPE = 'RegisterWorkflowType',
  REQUEST_CANCEL_ACTIVITY_TASK = 'RequestCancelActivityTask',
  REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION = 'RequestCancelExternalWorkflowExecution',
  REQUEST_CANCEL_WORKFLOW_EXECUTION = 'RequestCancelWorkflowExecution',
  RESPOND_ACTIVITY_TASK_CANCELED = 'RespondActivityTaskCanceled',
  RESPOND_ACTIVITY_TASK_COMPLETED = 'RespondActivityTaskCompleted',
  RESPOND_ACTIVITY_TASK_FAILED = 'RespondActivityTaskFailed',
  RESPOND_DECISION_TASK_COMPLETED = 'RespondDecisionTaskCompleted',
  SCHEDULE_ACTIVITY_TASK = 'ScheduleActivityTask',
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION = 'SignalExternalWorkflowExecution',
  SIGNAL_WORKFLOW_EXECUTION = 'SignalWorkflowExecution',
  START_CHILD_WORKFLOW_EXECUTION = 'StartChildWorkflowExecution',
  START_TIMER = 'StartTimer',
  START_WORKFLOW_EXECUTION = 'StartWorkflowExecution',
  TAG_RESOURCE = 'TagResource',
  TERMINATE_WORKFLOW_EXECUTION = 'TerminateWorkflowExecution',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Macie {
  ASSOCIATE_MEMBER_ACCOUNT = 'AssociateMemberAccount',
  ASSOCIATE_S_3_RESOURCES = 'AssociateS3Resources',
  DISASSOCIATE_MEMBER_ACCOUNT = 'DisassociateMemberAccount',
  DISASSOCIATE_S_3_RESOURCES = 'DisassociateS3Resources',
  LIST_MEMBER_ACCOUNTS = 'ListMemberAccounts',
  LIST_S_3_RESOURCES = 'ListS3Resources',
  UPDATE_S_3_RESOURCES = 'UpdateS3Resources',
}

export enum Appsync {
  CREATE_API_KEY = 'CreateApiKey',
  CREATE_DATA_SOURCE = 'CreateDataSource',
  CREATE_FUNCTION = 'CreateFunction',
  CREATE_GRAPHQL_API = 'CreateGraphqlApi',
  CREATE_RESOLVER = 'CreateResolver',
  CREATE_TYPE = 'CreateType',
  DELETE_API_KEY = 'DeleteApiKey',
  DELETE_DATA_SOURCE = 'DeleteDataSource',
  DELETE_FUNCTION = 'DeleteFunction',
  DELETE_GRAPHQL_API = 'DeleteGraphqlApi',
  DELETE_RESOLVER = 'DeleteResolver',
  DELETE_TYPE = 'DeleteType',
  GET_DATA_SOURCE = 'GetDataSource',
  GET_FUNCTION = 'GetFunction',
  GET_GRAPHQL_API = 'GetGraphqlApi',
  GET_INTROSPECTION_SCHEMA = 'GetIntrospectionSchema',
  GET_RESOLVER = 'GetResolver',
  GET_SCHEMA_CREATION_STATUS = 'GetSchemaCreationStatus',
  GET_TYPE = 'GetType',
  GRAPH_QL = 'GraphQL',
  LIST_API_KEYS = 'ListApiKeys',
  LIST_DATA_SOURCES = 'ListDataSources',
  LIST_FUNCTIONS = 'ListFunctions',
  LIST_GRAPHQL_APIS = 'ListGraphqlApis',
  LIST_RESOLVERS = 'ListResolvers',
  LIST_RESOLVERS_BY_FUNCTION = 'ListResolversByFunction',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TYPES = 'ListTypes',
  START_SCHEMA_CREATION = 'StartSchemaCreation',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_API_KEY = 'UpdateApiKey',
  UPDATE_DATA_SOURCE = 'UpdateDataSource',
  UPDATE_FUNCTION = 'UpdateFunction',
  UPDATE_GRAPHQL_API = 'UpdateGraphqlApi',
  UPDATE_RESOLVER = 'UpdateResolver',
  UPDATE_TYPE = 'UpdateType',
}

export enum Certificatemanager {
  ADD_TAGS_TO_CERTIFICATE = 'AddTagsToCertificate',
  DELETE_CERTIFICATE = 'DeleteCertificate',
  DESCRIBE_CERTIFICATE = 'DescribeCertificate',
  EXPORT_CERTIFICATE = 'ExportCertificate',
  GET_CERTIFICATE = 'GetCertificate',
  IMPORT_CERTIFICATE = 'ImportCertificate',
  LIST_CERTIFICATES = 'ListCertificates',
  LIST_TAGS_FOR_CERTIFICATE = 'ListTagsForCertificate',
  REMOVE_TAGS_FROM_CERTIFICATE = 'RemoveTagsFromCertificate',
  RENEW_CERTIFICATE = 'RenewCertificate',
  REQUEST_CERTIFICATE = 'RequestCertificate',
  RESEND_VALIDATION_EMAIL = 'ResendValidationEmail',
  UPDATE_CERTIFICATE_OPTIONS = 'UpdateCertificateOptions',
}

export enum Xray {
  BATCH_GET_TRACES = 'BatchGetTraces',
  CREATE_GROUP = 'CreateGroup',
  CREATE_SAMPLING_RULE = 'CreateSamplingRule',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_SAMPLING_RULE = 'DeleteSamplingRule',
  GET_ENCRYPTION_CONFIG = 'GetEncryptionConfig',
  GET_GROUP = 'GetGroup',
  GET_GROUPS = 'GetGroups',
  GET_SAMPLING_RULES = 'GetSamplingRules',
  GET_SAMPLING_STATISTIC_SUMMARIES = 'GetSamplingStatisticSummaries',
  GET_SAMPLING_TARGETS = 'GetSamplingTargets',
  GET_SERVICE_GRAPH = 'GetServiceGraph',
  GET_TIME_SERIES_SERVICE_STATISTICS = 'GetTimeSeriesServiceStatistics',
  GET_TRACE_GRAPH = 'GetTraceGraph',
  GET_TRACE_SUMMARIES = 'GetTraceSummaries',
  PUT_ENCRYPTION_CONFIG = 'PutEncryptionConfig',
  PUT_TELEMETRY_RECORDS = 'PutTelemetryRecords',
  PUT_TRACE_SEGMENTS = 'PutTraceSegments',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_SAMPLING_RULE = 'UpdateSamplingRule',
}

export enum Cloudfront {
  CREATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'CreateCloudFrontOriginAccessIdentity',
  CREATE_DISTRIBUTION = 'CreateDistribution',
  CREATE_DISTRIBUTION_WITH_TAGS = 'CreateDistributionWithTags',
  CREATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'CreateFieldLevelEncryptionConfig',
  CREATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'CreateFieldLevelEncryptionProfile',
  CREATE_INVALIDATION = 'CreateInvalidation',
  CREATE_PUBLIC_KEY = 'CreatePublicKey',
  CREATE_STREAMING_DISTRIBUTION = 'CreateStreamingDistribution',
  CREATE_STREAMING_DISTRIBUTION_WITH_TAGS = 'CreateStreamingDistributionWithTags',
  DELETE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'DeleteCloudFrontOriginAccessIdentity',
  DELETE_DISTRIBUTION = 'DeleteDistribution',
  DELETE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'DeleteFieldLevelEncryptionConfig',
  DELETE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'DeleteFieldLevelEncryptionProfile',
  DELETE_PUBLIC_KEY = 'DeletePublicKey',
  DELETE_STREAMING_DISTRIBUTION = 'DeleteStreamingDistribution',
  GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'GetCloudFrontOriginAccessIdentity',
  GET_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY_CONFIG = 'GetCloudFrontOriginAccessIdentityConfig',
  GET_DISTRIBUTION = 'GetDistribution',
  GET_DISTRIBUTION_CONFIG = 'GetDistributionConfig',
  GET_FIELD_LEVEL_ENCRYPTION = 'GetFieldLevelEncryption',
  GET_FIELD_LEVEL_ENCRYPTION_CONFIG = 'GetFieldLevelEncryptionConfig',
  GET_FIELD_LEVEL_ENCRYPTION_PROFILE = 'GetFieldLevelEncryptionProfile',
  GET_FIELD_LEVEL_ENCRYPTION_PROFILE_CONFIG = 'GetFieldLevelEncryptionProfileConfig',
  GET_INVALIDATION = 'GetInvalidation',
  GET_PUBLIC_KEY = 'GetPublicKey',
  GET_PUBLIC_KEY_CONFIG = 'GetPublicKeyConfig',
  GET_STREAMING_DISTRIBUTION = 'GetStreamingDistribution',
  GET_STREAMING_DISTRIBUTION_CONFIG = 'GetStreamingDistributionConfig',
  LIST_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITIES = 'ListCloudFrontOriginAccessIdentities',
  LIST_DISTRIBUTIONS = 'ListDistributions',
  LIST_DISTRIBUTIONS_BY_LAMBDA_FUNCTION = 'ListDistributionsByLambdaFunction',
  LIST_DISTRIBUTIONS_BY_WEB_ACL_ID = 'ListDistributionsByWebACLId',
  LIST_FIELD_LEVEL_ENCRYPTION_CONFIGS = 'ListFieldLevelEncryptionConfigs',
  LIST_FIELD_LEVEL_ENCRYPTION_PROFILES = 'ListFieldLevelEncryptionProfiles',
  LIST_INVALIDATIONS = 'ListInvalidations',
  LIST_PUBLIC_KEYS = 'ListPublicKeys',
  LIST_STREAMING_DISTRIBUTIONS = 'ListStreamingDistributions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CLOUD_FRONT_ORIGIN_ACCESS_IDENTITY = 'UpdateCloudFrontOriginAccessIdentity',
  UPDATE_DISTRIBUTION = 'UpdateDistribution',
  UPDATE_FIELD_LEVEL_ENCRYPTION_CONFIG = 'UpdateFieldLevelEncryptionConfig',
  UPDATE_FIELD_LEVEL_ENCRYPTION_PROFILE = 'UpdateFieldLevelEncryptionProfile',
  UPDATE_PUBLIC_KEY = 'UpdatePublicKey',
  UPDATE_STREAMING_DISTRIBUTION = 'UpdateStreamingDistribution',
}

export enum Elasticcontainerserviceforkubernetes {
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_FARGATE_PROFILE = 'CreateFargateProfile',
  CREATE_NODEGROUP = 'CreateNodegroup',
  DELETE_CLUSTER = 'DeleteCluster',
  DELETE_FARGATE_PROFILE = 'DeleteFargateProfile',
  DELETE_NODEGROUP = 'DeleteNodegroup',
  DESCRIBE_CLUSTER = 'DescribeCluster',
  DESCRIBE_FARGATE_PROFILE = 'DescribeFargateProfile',
  DESCRIBE_NODEGROUP = 'DescribeNodegroup',
  DESCRIBE_UPDATE = 'DescribeUpdate',
  LIST_CLUSTERS = 'ListClusters',
  LIST_FARGATE_PROFILES = 'ListFargateProfiles',
  LIST_NODEGROUPS = 'ListNodegroups',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_UPDATES = 'ListUpdates',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CLUSTER_CONFIG = 'UpdateClusterConfig',
  UPDATE_CLUSTER_VERSION = 'UpdateClusterVersion',
  UPDATE_NODEGROUP_CONFIG = 'UpdateNodegroupConfig',
  UPDATE_NODEGROUP_VERSION = 'UpdateNodegroupVersion',
}

export enum Firewallmanager {
  ASSOCIATE_ADMIN_ACCOUNT = 'AssociateAdminAccount',
  DELETE_NOTIFICATION_CHANNEL = 'DeleteNotificationChannel',
  DELETE_POLICY = 'DeletePolicy',
  DISASSOCIATE_ADMIN_ACCOUNT = 'DisassociateAdminAccount',
  GET_ADMIN_ACCOUNT = 'GetAdminAccount',
  GET_COMPLIANCE_DETAIL = 'GetComplianceDetail',
  GET_NOTIFICATION_CHANNEL = 'GetNotificationChannel',
  GET_POLICY = 'GetPolicy',
  GET_PROTECTION_STATUS = 'GetProtectionStatus',
  LIST_COMPLIANCE_STATUS = 'ListComplianceStatus',
  LIST_MEMBER_ACCOUNTS = 'ListMemberAccounts',
  LIST_POLICIES = 'ListPolicies',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_NOTIFICATION_CHANNEL = 'PutNotificationChannel',
  PUT_POLICY = 'PutPolicy',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Kinesis {
  ADD_TAGS_TO_STREAM = 'AddTagsToStream',
  CREATE_STREAM = 'CreateStream',
  DECREASE_STREAM_RETENTION_PERIOD = 'DecreaseStreamRetentionPeriod',
  DELETE_STREAM = 'DeleteStream',
  DEREGISTER_STREAM_CONSUMER = 'DeregisterStreamConsumer',
  DESCRIBE_LIMITS = 'DescribeLimits',
  DESCRIBE_STREAM = 'DescribeStream',
  DESCRIBE_STREAM_CONSUMER = 'DescribeStreamConsumer',
  DESCRIBE_STREAM_SUMMARY = 'DescribeStreamSummary',
  DISABLE_ENHANCED_MONITORING = 'DisableEnhancedMonitoring',
  ENABLE_ENHANCED_MONITORING = 'EnableEnhancedMonitoring',
  GET_RECORDS = 'GetRecords',
  GET_SHARD_ITERATOR = 'GetShardIterator',
  INCREASE_STREAM_RETENTION_PERIOD = 'IncreaseStreamRetentionPeriod',
  LIST_SHARDS = 'ListShards',
  LIST_STREAM_CONSUMERS = 'ListStreamConsumers',
  LIST_STREAMS = 'ListStreams',
  LIST_TAGS_FOR_STREAM = 'ListTagsForStream',
  MERGE_SHARDS = 'MergeShards',
  PUT_RECORD = 'PutRecord',
  PUT_RECORDS = 'PutRecords',
  REGISTER_STREAM_CONSUMER = 'RegisterStreamConsumer',
  REMOVE_TAGS_FROM_STREAM = 'RemoveTagsFromStream',
  SPLIT_SHARD = 'SplitShard',
  SUBSCRIBE_TO_SHARD = 'SubscribeToShard',
  UPDATE_SHARD_COUNT = 'UpdateShardCount',
}

export enum Billing {
  MODIFY_ACCOUNT = 'ModifyAccount',
  MODIFY_BILLING = 'ModifyBilling',
  MODIFY_PAYMENT_METHODS = 'ModifyPaymentMethods',
  VIEW_ACCOUNT = 'ViewAccount',
  VIEW_BILLING = 'ViewBilling',
  VIEW_PAYMENT_METHODS = 'ViewPaymentMethods',
  VIEW_USAGE = 'ViewUsage',
}

export enum Directoryservice {
  ACCEPT_SHARED_DIRECTORY = 'AcceptSharedDirectory',
  ADD_IP_ROUTES = 'AddIpRoutes',
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  AUTHORIZE_APPLICATION = 'AuthorizeApplication',
  CANCEL_SCHEMA_EXTENSION = 'CancelSchemaExtension',
  CHECK_ALIAS = 'CheckAlias',
  CONNECT_DIRECTORY = 'ConnectDirectory',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_COMPUTER = 'CreateComputer',
  CREATE_CONDITIONAL_FORWARDER = 'CreateConditionalForwarder',
  CREATE_DIRECTORY = 'CreateDirectory',
  CREATE_IDENTITY_POOL_DIRECTORY = 'CreateIdentityPoolDirectory',
  CREATE_LOG_SUBSCRIPTION = 'CreateLogSubscription',
  CREATE_MICROSOFT_AD = 'CreateMicrosoftAD',
  CREATE_SNAPSHOT = 'CreateSnapshot',
  CREATE_TRUST = 'CreateTrust',
  DELETE_CONDITIONAL_FORWARDER = 'DeleteConditionalForwarder',
  DELETE_DIRECTORY = 'DeleteDirectory',
  DELETE_LOG_SUBSCRIPTION = 'DeleteLogSubscription',
  DELETE_SNAPSHOT = 'DeleteSnapshot',
  DELETE_TRUST = 'DeleteTrust',
  DEREGISTER_CERTIFICATE = 'DeregisterCertificate',
  DEREGISTER_EVENT_TOPIC = 'DeregisterEventTopic',
  DESCRIBE_CERTIFICATE = 'DescribeCertificate',
  DESCRIBE_CONDITIONAL_FORWARDERS = 'DescribeConditionalForwarders',
  DESCRIBE_DIRECTORIES = 'DescribeDirectories',
  DESCRIBE_DOMAIN_CONTROLLERS = 'DescribeDomainControllers',
  DESCRIBE_EVENT_TOPICS = 'DescribeEventTopics',
  DESCRIBE_LDAPS_SETTINGS = 'DescribeLDAPSSettings',
  DESCRIBE_SHARED_DIRECTORIES = 'DescribeSharedDirectories',
  DESCRIBE_SNAPSHOTS = 'DescribeSnapshots',
  DESCRIBE_TRUSTS = 'DescribeTrusts',
  DISABLE_LDAPS = 'DisableLDAPS',
  DISABLE_RADIUS = 'DisableRadius',
  DISABLE_SSO = 'DisableSso',
  ENABLE_LDAPS = 'EnableLDAPS',
  ENABLE_RADIUS = 'EnableRadius',
  ENABLE_SSO = 'EnableSso',
  GET_AUTHORIZED_APPLICATION_DETAILS = 'GetAuthorizedApplicationDetails',
  GET_DIRECTORY_LIMITS = 'GetDirectoryLimits',
  GET_SNAPSHOT_LIMITS = 'GetSnapshotLimits',
  LIST_AUTHORIZED_APPLICATIONS = 'ListAuthorizedApplications',
  LIST_CERTIFICATES = 'ListCertificates',
  LIST_IP_ROUTES = 'ListIpRoutes',
  LIST_LOG_SUBSCRIPTIONS = 'ListLogSubscriptions',
  LIST_SCHEMA_EXTENSIONS = 'ListSchemaExtensions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  REGISTER_CERTIFICATE = 'RegisterCertificate',
  REGISTER_EVENT_TOPIC = 'RegisterEventTopic',
  REJECT_SHARED_DIRECTORY = 'RejectSharedDirectory',
  REMOVE_IP_ROUTES = 'RemoveIpRoutes',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESET_USER_PASSWORD = 'ResetUserPassword',
  RESTORE_FROM_SNAPSHOT = 'RestoreFromSnapshot',
  SHARE_DIRECTORY = 'ShareDirectory',
  START_SCHEMA_EXTENSION = 'StartSchemaExtension',
  UNAUTHORIZE_APPLICATION = 'UnauthorizeApplication',
  UNSHARE_DIRECTORY = 'UnshareDirectory',
  UPDATE_CONDITIONAL_FORWARDER = 'UpdateConditionalForwarder',
  UPDATE_NUMBER_OF_DOMAIN_CONTROLLERS = 'UpdateNumberOfDomainControllers',
  UPDATE_RADIUS = 'UpdateRadius',
  UPDATE_TRUST = 'UpdateTrust',
  VERIFY_TRUST = 'VerifyTrust',
}

export enum Iotsitewise {
  ASSOCIATE_ASSETS = 'AssociateAssets',
  BATCH_ASSOCIATE_PROJECT_ASSETS = 'BatchAssociateProjectAssets',
  BATCH_DISASSOCIATE_PROJECT_ASSETS = 'BatchDisassociateProjectAssets',
  BATCH_PUT_ASSET_PROPERTY_VALUE = 'BatchPutAssetPropertyValue',
  CREATE_ACCESS_POLICY = 'CreateAccessPolicy',
  CREATE_ASSET = 'CreateAsset',
  CREATE_ASSET_MODEL = 'CreateAssetModel',
  CREATE_DASHBOARD = 'CreateDashboard',
  CREATE_GATEWAY = 'CreateGateway',
  CREATE_PORTAL = 'CreatePortal',
  CREATE_PROJECT = 'CreateProject',
  DELETE_ACCESS_POLICY = 'DeleteAccessPolicy',
  DELETE_ASSET = 'DeleteAsset',
  DELETE_ASSET_MODEL = 'DeleteAssetModel',
  DELETE_DASHBOARD = 'DeleteDashboard',
  DELETE_GATEWAY = 'DeleteGateway',
  DELETE_PORTAL = 'DeletePortal',
  DELETE_PROJECT = 'DeleteProject',
  DESCRIBE_ACCESS_POLICY = 'DescribeAccessPolicy',
  DESCRIBE_ASSET = 'DescribeAsset',
  DESCRIBE_ASSET_MODEL = 'DescribeAssetModel',
  DESCRIBE_ASSET_PROPERTY = 'DescribeAssetProperty',
  DESCRIBE_DASHBOARD = 'DescribeDashboard',
  DESCRIBE_GATEWAY = 'DescribeGateway',
  DESCRIBE_GATEWAY_CAPABILITY_CONFIGURATION = 'DescribeGatewayCapabilityConfiguration',
  DESCRIBE_LOGGING_OPTIONS = 'DescribeLoggingOptions',
  DESCRIBE_PORTAL = 'DescribePortal',
  DESCRIBE_PROJECT = 'DescribeProject',
  DISASSOCIATE_ASSETS = 'DisassociateAssets',
  GET_ASSET_PROPERTY_AGGREGATES = 'GetAssetPropertyAggregates',
  GET_ASSET_PROPERTY_VALUE = 'GetAssetPropertyValue',
  GET_ASSET_PROPERTY_VALUE_HISTORY = 'GetAssetPropertyValueHistory',
  LIST_ACCESS_POLICIES = 'ListAccessPolicies',
  LIST_ASSET_MODELS = 'ListAssetModels',
  LIST_ASSETS = 'ListAssets',
  LIST_ASSOCIATED_ASSETS = 'ListAssociatedAssets',
  LIST_DASHBOARDS = 'ListDashboards',
  LIST_GATEWAYS = 'ListGateways',
  LIST_PORTALS = 'ListPortals',
  LIST_PROJECT_ASSETS = 'ListProjectAssets',
  LIST_PROJECTS = 'ListProjects',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'PutLoggingOptions',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ACCESS_POLICY = 'UpdateAccessPolicy',
  UPDATE_ASSET = 'UpdateAsset',
  UPDATE_ASSET_MODEL = 'UpdateAssetModel',
  UPDATE_ASSET_PROPERTY = 'UpdateAssetProperty',
  UPDATE_DASHBOARD = 'UpdateDashboard',
  UPDATE_GATEWAY = 'UpdateGateway',
  UPDATE_GATEWAY_CAPABILITY_CONFIGURATION = 'UpdateGatewayCapabilityConfiguration',
  UPDATE_PORTAL = 'UpdatePortal',
  UPDATE_PROJECT = 'UpdateProject',
}

export enum Codestarnotifications {
  CREATE_NOTIFICATION_RULE = 'CreateNotificationRule',
  DELETE_NOTIFICATION_RULE = 'DeleteNotificationRule',
  DELETE_TARGET = 'DeleteTarget',
  DESCRIBE_NOTIFICATION_RULE = 'DescribeNotificationRule',
  LIST_EVENT_TYPES = 'ListEventTypes',
  LIST_NOTIFICATION_RULES = 'ListNotificationRules',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TARGETS = 'ListTargets',
  SUBSCRIBE = 'Subscribe',
  TAG_RESOURCE = 'TagResource',
  UNSUBSCRIBE = 'Unsubscribe',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_NOTIFICATION_RULE = 'UpdateNotificationRule',
}

export enum Frauddetector {
  BATCH_CREATE_VARIABLE = 'BatchCreateVariable',
  BATCH_GET_VARIABLE = 'BatchGetVariable',
  CREATE_DETECTOR_VERSION = 'CreateDetectorVersion',
  CREATE_MODEL_VERSION = 'CreateModelVersion',
  CREATE_RULE = 'CreateRule',
  CREATE_VARIABLE = 'CreateVariable',
  DELETE_DETECTOR = 'DeleteDetector',
  DELETE_DETECTOR_VERSION = 'DeleteDetectorVersion',
  DELETE_EVENT = 'DeleteEvent',
  DELETE_RULE_VERSION = 'DeleteRuleVersion',
  DESCRIBE_DETECTOR = 'DescribeDetector',
  DESCRIBE_MODEL_VERSIONS = 'DescribeModelVersions',
  GET_DETECTOR_VERSION = 'GetDetectorVersion',
  GET_DETECTORS = 'GetDetectors',
  GET_EXTERNAL_MODELS = 'GetExternalModels',
  GET_MODEL_VERSION = 'GetModelVersion',
  GET_MODELS = 'GetModels',
  GET_OUTCOMES = 'GetOutcomes',
  GET_PREDICTION = 'GetPrediction',
  GET_RULES = 'GetRules',
  GET_VARIABLES = 'GetVariables',
  PUT_DETECTOR = 'PutDetector',
  PUT_EXTERNAL_MODEL = 'PutExternalModel',
  PUT_MODEL = 'PutModel',
  PUT_OUTCOME = 'PutOutcome',
  UPDATE_DETECTOR_VERSION = 'UpdateDetectorVersion',
  UPDATE_DETECTOR_VERSION_METADATA = 'UpdateDetectorVersionMetadata',
  UPDATE_DETECTOR_VERSION_STATUS = 'UpdateDetectorVersionStatus',
  UPDATE_MODEL_VERSION = 'UpdateModelVersion',
  UPDATE_RULE_METADATA = 'UpdateRuleMetadata',
  UPDATE_RULE_VERSION = 'UpdateRuleVersion',
  UPDATE_VARIABLE = 'UpdateVariable',
}

export enum Worklink {
  ASSOCIATE_DOMAIN = 'AssociateDomain',
  ASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'AssociateWebsiteAuthorizationProvider',
  ASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'AssociateWebsiteCertificateAuthority',
  CREATE_FLEET = 'CreateFleet',
  DELETE_FLEET = 'DeleteFleet',
  DESCRIBE_AUDIT_STREAM_CONFIGURATION = 'DescribeAuditStreamConfiguration',
  DESCRIBE_COMPANY_NETWORK_CONFIGURATION = 'DescribeCompanyNetworkConfiguration',
  DESCRIBE_DEVICE = 'DescribeDevice',
  DESCRIBE_DEVICE_POLICY_CONFIGURATION = 'DescribeDevicePolicyConfiguration',
  DESCRIBE_DOMAIN = 'DescribeDomain',
  DESCRIBE_FLEET_METADATA = 'DescribeFleetMetadata',
  DESCRIBE_IDENTITY_PROVIDER_CONFIGURATION = 'DescribeIdentityProviderConfiguration',
  DESCRIBE_WEBSITE_CERTIFICATE_AUTHORITY = 'DescribeWebsiteCertificateAuthority',
  DISASSOCIATE_DOMAIN = 'DisassociateDomain',
  DISASSOCIATE_WEBSITE_AUTHORIZATION_PROVIDER = 'DisassociateWebsiteAuthorizationProvider',
  DISASSOCIATE_WEBSITE_CERTIFICATE_AUTHORITY = 'DisassociateWebsiteCertificateAuthority',
  LIST_DEVICES = 'ListDevices',
  LIST_DOMAINS = 'ListDomains',
  LIST_FLEETS = 'ListFleets',
  LIST_WEBSITE_AUTHORIZATION_PROVIDERS = 'ListWebsiteAuthorizationProviders',
  LIST_WEBSITE_CERTIFICATE_AUTHORITIES = 'ListWebsiteCertificateAuthorities',
  RESTORE_DOMAIN_ACCESS = 'RestoreDomainAccess',
  REVOKE_DOMAIN_ACCESS = 'RevokeDomainAccess',
  SIGN_OUT_USER = 'SignOutUser',
  UPDATE_AUDIT_STREAM_CONFIGURATION = 'UpdateAuditStreamConfiguration',
  UPDATE_COMPANY_NETWORK_CONFIGURATION = 'UpdateCompanyNetworkConfiguration',
  UPDATE_DEVICE_POLICY_CONFIGURATION = 'UpdateDevicePolicyConfiguration',
  UPDATE_DOMAIN_METADATA = 'UpdateDomainMetadata',
  UPDATE_FLEET_METADATA = 'UpdateFleetMetadata',
  UPDATE_IDENTITY_PROVIDER_CONFIGURATION = 'UpdateIdentityProviderConfiguration',
}

export enum Workspaces {
  ASSOCIATE_IP_GROUPS = 'AssociateIpGroups',
  AUTHORIZE_IP_RULES = 'AuthorizeIpRules',
  CREATE_IP_GROUP = 'CreateIpGroup',
  CREATE_TAGS = 'CreateTags',
  CREATE_WORKSPACES = 'CreateWorkspaces',
  DELETE_IP_GROUP = 'DeleteIpGroup',
  DELETE_TAGS = 'DeleteTags',
  DELETE_WORKSPACE_IMAGE = 'DeleteWorkspaceImage',
  DESCRIBE_ACCOUNT = 'DescribeAccount',
  DESCRIBE_ACCOUNT_MODIFICATIONS = 'DescribeAccountModifications',
  DESCRIBE_CLIENT_PROPERTIES = 'DescribeClientProperties',
  DESCRIBE_IP_GROUPS = 'DescribeIpGroups',
  DESCRIBE_TAGS = 'DescribeTags',
  DESCRIBE_WORKSPACE_BUNDLES = 'DescribeWorkspaceBundles',
  DESCRIBE_WORKSPACE_DIRECTORIES = 'DescribeWorkspaceDirectories',
  DESCRIBE_WORKSPACE_IMAGES = 'DescribeWorkspaceImages',
  DESCRIBE_WORKSPACES = 'DescribeWorkspaces',
  DESCRIBE_WORKSPACES_CONNECTION_STATUS = 'DescribeWorkspacesConnectionStatus',
  DISASSOCIATE_IP_GROUPS = 'DisassociateIpGroups',
  IMPORT_WORKSPACE_IMAGE = 'ImportWorkspaceImage',
  LIST_AVAILABLE_MANAGEMENT_CIDR_RANGES = 'ListAvailableManagementCidrRanges',
  MODIFY_ACCOUNT = 'ModifyAccount',
  MODIFY_CLIENT_PROPERTIES = 'ModifyClientProperties',
  MODIFY_WORKSPACE_PROPERTIES = 'ModifyWorkspaceProperties',
  MODIFY_WORKSPACE_STATE = 'ModifyWorkspaceState',
  REBOOT_WORKSPACES = 'RebootWorkspaces',
  REBUILD_WORKSPACES = 'RebuildWorkspaces',
  REVOKE_IP_RULES = 'RevokeIpRules',
  START_WORKSPACES = 'StartWorkspaces',
  STOP_WORKSPACES = 'StopWorkspaces',
  TERMINATE_WORKSPACES = 'TerminateWorkspaces',
  UPDATE_RULES_OF_IP_GROUP = 'UpdateRulesOfIpGroup',
}

export enum Chime {
  ACCEPT_DELEGATE = 'AcceptDelegate',
  ACTIVATE_USERS = 'ActivateUsers',
  ADD_DOMAIN = 'AddDomain',
  ADD_OR_UPDATE_GROUPS = 'AddOrUpdateGroups',
  ASSOCIATE_PHONE_NUMBER_WITH_USER = 'AssociatePhoneNumberWithUser',
  ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR = 'AssociatePhoneNumbersWithVoiceConnector',
  ASSOCIATE_PHONE_NUMBERS_WITH_VOICE_CONNECTOR_GROUP = 'AssociatePhoneNumbersWithVoiceConnectorGroup',
  ASSOCIATE_SIGNIN_DELEGATE_GROUPS_WITH_ACCOUNT = 'AssociateSigninDelegateGroupsWithAccount',
  AUTHORIZE_DIRECTORY = 'AuthorizeDirectory',
  BATCH_CREATE_ATTENDEE = 'BatchCreateAttendee',
  BATCH_CREATE_ROOM_MEMBERSHIP = 'BatchCreateRoomMembership',
  BATCH_DELETE_PHONE_NUMBER = 'BatchDeletePhoneNumber',
  BATCH_SUSPEND_USER = 'BatchSuspendUser',
  BATCH_UNSUSPEND_USER = 'BatchUnsuspendUser',
  BATCH_UPDATE_PHONE_NUMBER = 'BatchUpdatePhoneNumber',
  BATCH_UPDATE_USER = 'BatchUpdateUser',
  CONNECT_DIRECTORY = 'ConnectDirectory',
  CREATE_ACCOUNT = 'CreateAccount',
  CREATE_API_KEY = 'CreateApiKey',
  CREATE_ATTENDEE = 'CreateAttendee',
  CREATE_BOT = 'CreateBot',
  CREATE_BOT_MEMBERSHIP = 'CreateBotMembership',
  CREATE_CDR_BUCKET = 'CreateCDRBucket',
  CREATE_MEETING = 'CreateMeeting',
  CREATE_PHONE_NUMBER_ORDER = 'CreatePhoneNumberOrder',
  CREATE_PROXY_SESSION = 'CreateProxySession',
  CREATE_ROOM = 'CreateRoom',
  CREATE_ROOM_MEMBERSHIP = 'CreateRoomMembership',
  CREATE_USER = 'CreateUser',
  CREATE_VOICE_CONNECTOR = 'CreateVoiceConnector',
  CREATE_VOICE_CONNECTOR_GROUP = 'CreateVoiceConnectorGroup',
  DELETE_ACCOUNT = 'DeleteAccount',
  DELETE_ACCOUNT_OPEN_ID_CONFIG = 'DeleteAccountOpenIdConfig',
  DELETE_API_KEY = 'DeleteApiKey',
  DELETE_ATTENDEE = 'DeleteAttendee',
  DELETE_CDR_BUCKET = 'DeleteCDRBucket',
  DELETE_DELEGATE = 'DeleteDelegate',
  DELETE_DOMAIN = 'DeleteDomain',
  DELETE_EVENTS_CONFIGURATION = 'DeleteEventsConfiguration',
  DELETE_GROUPS = 'DeleteGroups',
  DELETE_MEETING = 'DeleteMeeting',
  DELETE_PHONE_NUMBER = 'DeletePhoneNumber',
  DELETE_PROXY_SESSION = 'DeleteProxySession',
  DELETE_ROOM = 'DeleteRoom',
  DELETE_ROOM_MEMBERSHIP = 'DeleteRoomMembership',
  DELETE_VOICE_CONNECTOR = 'DeleteVoiceConnector',
  DELETE_VOICE_CONNECTOR_GROUP = 'DeleteVoiceConnectorGroup',
  DELETE_VOICE_CONNECTOR_ORIGINATION = 'DeleteVoiceConnectorOrigination',
  DELETE_VOICE_CONNECTOR_PROXY = 'DeleteVoiceConnectorProxy',
  DELETE_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'DeleteVoiceConnectorStreamingConfiguration',
  DELETE_VOICE_CONNECTOR_TERMINATION = 'DeleteVoiceConnectorTermination',
  DELETE_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'DeleteVoiceConnectorTerminationCredentials',
  DISASSOCIATE_PHONE_NUMBER_FROM_USER = 'DisassociatePhoneNumberFromUser',
  DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR = 'DisassociatePhoneNumbersFromVoiceConnector',
  DISASSOCIATE_PHONE_NUMBERS_FROM_VOICE_CONNECTOR_GROUP = 'DisassociatePhoneNumbersFromVoiceConnectorGroup',
  DISASSOCIATE_SIGNIN_DELEGATE_GROUPS_FROM_ACCOUNT = 'DisassociateSigninDelegateGroupsFromAccount',
  DISCONNECT_DIRECTORY = 'DisconnectDirectory',
  GET_ACCOUNT = 'GetAccount',
  GET_ACCOUNT_RESOURCE = 'GetAccountResource',
  GET_ACCOUNT_SETTINGS = 'GetAccountSettings',
  GET_ACCOUNT_WITH_OPEN_ID_CONFIG = 'GetAccountWithOpenIdConfig',
  GET_ATTENDEE = 'GetAttendee',
  GET_BOT = 'GetBot',
  GET_CDR_BUCKET = 'GetCDRBucket',
  GET_DOMAIN = 'GetDomain',
  GET_EVENTS_CONFIGURATION = 'GetEventsConfiguration',
  GET_GLOBAL_SETTINGS = 'GetGlobalSettings',
  GET_MEETING = 'GetMeeting',
  GET_MEETING_DETAIL = 'GetMeetingDetail',
  GET_PHONE_NUMBER = 'GetPhoneNumber',
  GET_PHONE_NUMBER_ORDER = 'GetPhoneNumberOrder',
  GET_PHONE_NUMBER_SETTINGS = 'GetPhoneNumberSettings',
  GET_PROXY_SESSION = 'GetProxySession',
  GET_ROOM = 'GetRoom',
  GET_TELEPHONY_LIMITS = 'GetTelephonyLimits',
  GET_USER = 'GetUser',
  GET_USER_ACTIVITY_REPORT_DATA = 'GetUserActivityReportData',
  GET_USER_BY_EMAIL = 'GetUserByEmail',
  GET_USER_SETTINGS = 'GetUserSettings',
  GET_VOICE_CONNECTOR = 'GetVoiceConnector',
  GET_VOICE_CONNECTOR_GROUP = 'GetVoiceConnectorGroup',
  GET_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'GetVoiceConnectorLoggingConfiguration',
  GET_VOICE_CONNECTOR_ORIGINATION = 'GetVoiceConnectorOrigination',
  GET_VOICE_CONNECTOR_PROXY = 'GetVoiceConnectorProxy',
  GET_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'GetVoiceConnectorStreamingConfiguration',
  GET_VOICE_CONNECTOR_TERMINATION = 'GetVoiceConnectorTermination',
  GET_VOICE_CONNECTOR_TERMINATION_HEALTH = 'GetVoiceConnectorTerminationHealth',
  INVITE_DELEGATE = 'InviteDelegate',
  INVITE_USERS = 'InviteUsers',
  INVITE_USERS_FROM_PROVIDER = 'InviteUsersFromProvider',
  LIST_ACCOUNT_USAGE_REPORT_DATA = 'ListAccountUsageReportData',
  LIST_ACCOUNTS = 'ListAccounts',
  LIST_API_KEYS = 'ListApiKeys',
  LIST_ATTENDEE_TAGS = 'ListAttendeeTags',
  LIST_ATTENDEES = 'ListAttendees',
  LIST_BOTS = 'ListBots',
  LIST_CDR_BUCKET = 'ListCDRBucket',
  LIST_CALLING_REGIONS = 'ListCallingRegions',
  LIST_DELEGATES = 'ListDelegates',
  LIST_DIRECTORIES = 'ListDirectories',
  LIST_DOMAINS = 'ListDomains',
  LIST_GROUPS = 'ListGroups',
  LIST_MEETING_EVENTS = 'ListMeetingEvents',
  LIST_MEETING_TAGS = 'ListMeetingTags',
  LIST_MEETINGS = 'ListMeetings',
  LIST_MEETINGS_REPORT_DATA = 'ListMeetingsReportData',
  LIST_PHONE_NUMBER_ORDERS = 'ListPhoneNumberOrders',
  LIST_PHONE_NUMBERS = 'ListPhoneNumbers',
  LIST_PROXY_SESSIONS = 'ListProxySessions',
  LIST_ROOM_MEMBERSHIPS = 'ListRoomMemberships',
  LIST_ROOMS = 'ListRooms',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USERS = 'ListUsers',
  LIST_VOICE_CONNECTOR_GROUPS = 'ListVoiceConnectorGroups',
  LIST_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'ListVoiceConnectorTerminationCredentials',
  LIST_VOICE_CONNECTORS = 'ListVoiceConnectors',
  LOGOUT_USER = 'LogoutUser',
  PUT_EVENTS_CONFIGURATION = 'PutEventsConfiguration',
  PUT_VOICE_CONNECTOR_LOGGING_CONFIGURATION = 'PutVoiceConnectorLoggingConfiguration',
  PUT_VOICE_CONNECTOR_ORIGINATION = 'PutVoiceConnectorOrigination',
  PUT_VOICE_CONNECTOR_PROXY = 'PutVoiceConnectorProxy',
  PUT_VOICE_CONNECTOR_STREAMING_CONFIGURATION = 'PutVoiceConnectorStreamingConfiguration',
  PUT_VOICE_CONNECTOR_TERMINATION = 'PutVoiceConnectorTermination',
  PUT_VOICE_CONNECTOR_TERMINATION_CREDENTIALS = 'PutVoiceConnectorTerminationCredentials',
  REGENERATE_SECURITY_TOKEN = 'RegenerateSecurityToken',
  RENAME_ACCOUNT = 'RenameAccount',
  RENEW_DELEGATE = 'RenewDelegate',
  RESET_ACCOUNT_RESOURCE = 'ResetAccountResource',
  RESET_PERSONAL_PIN = 'ResetPersonalPIN',
  RESTORE_PHONE_NUMBER = 'RestorePhoneNumber',
  RETRIEVE_DATA_EXPORTS = 'RetrieveDataExports',
  SEARCH_AVAILABLE_PHONE_NUMBERS = 'SearchAvailablePhoneNumbers',
  START_DATA_EXPORT = 'StartDataExport',
  SUBMIT_SUPPORT_REQUEST = 'SubmitSupportRequest',
  SUSPEND_USERS = 'SuspendUsers',
  TAG_ATTENDEE = 'TagAttendee',
  TAG_MEETING = 'TagMeeting',
  TAG_RESOURCE = 'TagResource',
  UNAUTHORIZE_DIRECTORY = 'UnauthorizeDirectory',
  UNTAG_ATTENDEE = 'UntagAttendee',
  UNTAG_MEETING = 'UntagMeeting',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ACCOUNT = 'UpdateAccount',
  UPDATE_ACCOUNT_OPEN_ID_CONFIG = 'UpdateAccountOpenIdConfig',
  UPDATE_ACCOUNT_RESOURCE = 'UpdateAccountResource',
  UPDATE_ACCOUNT_SETTINGS = 'UpdateAccountSettings',
  UPDATE_BOT = 'UpdateBot',
  UPDATE_CDR_SETTINGS = 'UpdateCDRSettings',
  UPDATE_GLOBAL_SETTINGS = 'UpdateGlobalSettings',
  UPDATE_PHONE_NUMBER = 'UpdatePhoneNumber',
  UPDATE_PHONE_NUMBER_SETTINGS = 'UpdatePhoneNumberSettings',
  UPDATE_PROXY_SESSION = 'UpdateProxySession',
  UPDATE_ROOM = 'UpdateRoom',
  UPDATE_ROOM_MEMBERSHIP = 'UpdateRoomMembership',
  UPDATE_SUPPORTED_LICENSES = 'UpdateSupportedLicenses',
  UPDATE_USER = 'UpdateUser',
  UPDATE_USER_LICENSES = 'UpdateUserLicenses',
  UPDATE_USER_SETTINGS = 'UpdateUserSettings',
  UPDATE_VOICE_CONNECTOR = 'UpdateVoiceConnector',
  UPDATE_VOICE_CONNECTOR_GROUP = 'UpdateVoiceConnectorGroup',
  VALIDATE_ACCOUNT_RESOURCE = 'ValidateAccountResource',
}

export enum Elasticache {
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  AUTHORIZE_CACHE_SECURITY_GROUP_INGRESS = 'AuthorizeCacheSecurityGroupIngress',
  COPY_SNAPSHOT = 'CopySnapshot',
  CREATE_CACHE_CLUSTER = 'CreateCacheCluster',
  CREATE_CACHE_PARAMETER_GROUP = 'CreateCacheParameterGroup',
  CREATE_CACHE_SECURITY_GROUP = 'CreateCacheSecurityGroup',
  CREATE_CACHE_SUBNET_GROUP = 'CreateCacheSubnetGroup',
  CREATE_REPLICATION_GROUP = 'CreateReplicationGroup',
  CREATE_SNAPSHOT = 'CreateSnapshot',
  DECREASE_REPLICA_COUNT = 'DecreaseReplicaCount',
  DELETE_CACHE_CLUSTER = 'DeleteCacheCluster',
  DELETE_CACHE_PARAMETER_GROUP = 'DeleteCacheParameterGroup',
  DELETE_CACHE_SECURITY_GROUP = 'DeleteCacheSecurityGroup',
  DELETE_CACHE_SUBNET_GROUP = 'DeleteCacheSubnetGroup',
  DELETE_REPLICATION_GROUP = 'DeleteReplicationGroup',
  DELETE_SNAPSHOT = 'DeleteSnapshot',
  DESCRIBE_CACHE_CLUSTERS = 'DescribeCacheClusters',
  DESCRIBE_CACHE_ENGINE_VERSIONS = 'DescribeCacheEngineVersions',
  DESCRIBE_CACHE_PARAMETER_GROUPS = 'DescribeCacheParameterGroups',
  DESCRIBE_CACHE_PARAMETERS = 'DescribeCacheParameters',
  DESCRIBE_CACHE_SECURITY_GROUPS = 'DescribeCacheSecurityGroups',
  DESCRIBE_CACHE_SUBNET_GROUPS = 'DescribeCacheSubnetGroups',
  DESCRIBE_ENGINE_DEFAULT_PARAMETERS = 'DescribeEngineDefaultParameters',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_REPLICATION_GROUPS = 'DescribeReplicationGroups',
  DESCRIBE_RESERVED_CACHE_NODES = 'DescribeReservedCacheNodes',
  DESCRIBE_RESERVED_CACHE_NODES_OFFERINGS = 'DescribeReservedCacheNodesOfferings',
  DESCRIBE_SNAPSHOTS = 'DescribeSnapshots',
  INCREASE_REPLICA_COUNT = 'IncreaseReplicaCount',
  LIST_ALLOWED_NODE_TYPE_MODIFICATIONS = 'ListAllowedNodeTypeModifications',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_CACHE_CLUSTER = 'ModifyCacheCluster',
  MODIFY_CACHE_PARAMETER_GROUP = 'ModifyCacheParameterGroup',
  MODIFY_CACHE_SUBNET_GROUP = 'ModifyCacheSubnetGroup',
  MODIFY_REPLICATION_GROUP = 'ModifyReplicationGroup',
  MODIFY_REPLICATION_GROUP_SHARD_CONFIGURATION = 'ModifyReplicationGroupShardConfiguration',
  PURCHASE_RESERVED_CACHE_NODES_OFFERING = 'PurchaseReservedCacheNodesOffering',
  REBOOT_CACHE_CLUSTER = 'RebootCacheCluster',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESET_CACHE_PARAMETER_GROUP = 'ResetCacheParameterGroup',
  REVOKE_CACHE_SECURITY_GROUP_INGRESS = 'RevokeCacheSecurityGroupIngress',
  TEST_FAILOVER = 'TestFailover',
}

export enum Kinesisfirehose {
  CREATE_DELIVERY_STREAM = 'CreateDeliveryStream',
  DELETE_DELIVERY_STREAM = 'DeleteDeliveryStream',
  DESCRIBE_DELIVERY_STREAM = 'DescribeDeliveryStream',
  LIST_DELIVERY_STREAMS = 'ListDeliveryStreams',
  LIST_TAGS_FOR_DELIVERY_STREAM = 'ListTagsForDeliveryStream',
  PUT_RECORD = 'PutRecord',
  PUT_RECORD_BATCH = 'PutRecordBatch',
  START_DELIVERY_STREAM_ENCRYPTION = 'StartDeliveryStreamEncryption',
  STOP_DELIVERY_STREAM_ENCRYPTION = 'StopDeliveryStreamEncryption',
  TAG_DELIVERY_STREAM = 'TagDeliveryStream',
  UNTAG_DELIVERY_STREAM = 'UntagDeliveryStream',
  UPDATE_DESTINATION = 'UpdateDestination',
}

export enum Mechanicalturk {
  ACCEPT_QUALIFICATION_REQUEST = 'AcceptQualificationRequest',
  APPROVE_ASSIGNMENT = 'ApproveAssignment',
  ASSOCIATE_QUALIFICATION_WITH_WORKER = 'AssociateQualificationWithWorker',
  CREATE_ADDITIONAL_ASSIGNMENTS_FOR_HIT = 'CreateAdditionalAssignmentsForHIT',
  CREATE_HIT = 'CreateHIT',
  CREATE_HIT_TYPE = 'CreateHITType',
  CREATE_HIT_WITH_HIT_TYPE = 'CreateHITWithHITType',
  CREATE_QUALIFICATION_TYPE = 'CreateQualificationType',
  CREATE_WORKER_BLOCK = 'CreateWorkerBlock',
  DELETE_HIT = 'DeleteHIT',
  DELETE_QUALIFICATION_TYPE = 'DeleteQualificationType',
  DELETE_WORKER_BLOCK = 'DeleteWorkerBlock',
  DISASSOCIATE_QUALIFICATION_FROM_WORKER = 'DisassociateQualificationFromWorker',
  GET_ACCOUNT_BALANCE = 'GetAccountBalance',
  GET_ASSIGNMENT = 'GetAssignment',
  GET_FILE_UPLOAD_URL = 'GetFileUploadURL',
  GET_HIT = 'GetHIT',
  GET_QUALIFICATION_SCORE = 'GetQualificationScore',
  GET_QUALIFICATION_TYPE = 'GetQualificationType',
  LIST_ASSIGNMENTS_FOR_HIT = 'ListAssignmentsForHIT',
  LIST_BONUS_PAYMENTS = 'ListBonusPayments',
  LIST_HI_TS = 'ListHITs',
  LIST_HI_TS_FOR_QUALIFICATION_TYPE = 'ListHITsForQualificationType',
  LIST_QUALIFICATION_REQUESTS = 'ListQualificationRequests',
  LIST_QUALIFICATION_TYPES = 'ListQualificationTypes',
  LIST_REVIEW_POLICY_RESULTS_FOR_HIT = 'ListReviewPolicyResultsForHIT',
  LIST_REVIEWABLE_HI_TS = 'ListReviewableHITs',
  LIST_WORKER_BLOCKS = 'ListWorkerBlocks',
  LIST_WORKERS_WITH_QUALIFICATION_TYPE = 'ListWorkersWithQualificationType',
  NOTIFY_WORKERS = 'NotifyWorkers',
  REJECT_ASSIGNMENT = 'RejectAssignment',
  REJECT_QUALIFICATION_REQUEST = 'RejectQualificationRequest',
  SEND_BONUS = 'SendBonus',
  SEND_TEST_EVENT_NOTIFICATION = 'SendTestEventNotification',
  UPDATE_EXPIRATION_FOR_HIT = 'UpdateExpirationForHIT',
  UPDATE_HIT_REVIEW_STATUS = 'UpdateHITReviewStatus',
  UPDATE_HIT_TYPE_OF_HIT = 'UpdateHITTypeOfHIT',
  UPDATE_NOTIFICATION_SETTINGS = 'UpdateNotificationSettings',
  UPDATE_QUALIFICATION_TYPE = 'UpdateQualificationType',
}

export enum Storagegateway {
  ACTIVATE_GATEWAY = 'ActivateGateway',
  ADD_CACHE = 'AddCache',
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  ADD_UPLOAD_BUFFER = 'AddUploadBuffer',
  ADD_WORKING_STORAGE = 'AddWorkingStorage',
  ATTACH_VOLUME = 'AttachVolume',
  CANCEL_ARCHIVAL = 'CancelArchival',
  CANCEL_RETRIEVAL = 'CancelRetrieval',
  CREATE_CACHEDI_SCSI_VOLUME = 'CreateCachediSCSIVolume',
  CREATE_NFS_FILE_SHARE = 'CreateNFSFileShare',
  CREATE_SMB_FILE_SHARE = 'CreateSMBFileShare',
  CREATE_SNAPSHOT = 'CreateSnapshot',
  CREATE_SNAPSHOT_FROM_VOLUME_RECOVERY_POINT = 'CreateSnapshotFromVolumeRecoveryPoint',
  CREATE_STOREDI_SCSI_VOLUME = 'CreateStorediSCSIVolume',
  CREATE_TAPE_WITH_BARCODE = 'CreateTapeWithBarcode',
  CREATE_TAPES = 'CreateTapes',
  DELETE_BANDWIDTH_RATE_LIMIT = 'DeleteBandwidthRateLimit',
  DELETE_CHAP_CREDENTIALS = 'DeleteChapCredentials',
  DELETE_FILE_SHARE = 'DeleteFileShare',
  DELETE_GATEWAY = 'DeleteGateway',
  DELETE_SNAPSHOT_SCHEDULE = 'DeleteSnapshotSchedule',
  DELETE_TAPE = 'DeleteTape',
  DELETE_TAPE_ARCHIVE = 'DeleteTapeArchive',
  DELETE_VOLUME = 'DeleteVolume',
  DESCRIBE_BANDWIDTH_RATE_LIMIT = 'DescribeBandwidthRateLimit',
  DESCRIBE_CACHE = 'DescribeCache',
  DESCRIBE_CACHEDI_SCSI_VOLUMES = 'DescribeCachediSCSIVolumes',
  DESCRIBE_CHAP_CREDENTIALS = 'DescribeChapCredentials',
  DESCRIBE_GATEWAY_INFORMATION = 'DescribeGatewayInformation',
  DESCRIBE_MAINTENANCE_START_TIME = 'DescribeMaintenanceStartTime',
  DESCRIBE_NFS_FILE_SHARES = 'DescribeNFSFileShares',
  DESCRIBE_SMB_FILE_SHARES = 'DescribeSMBFileShares',
  DESCRIBE_SMB_SETTINGS = 'DescribeSMBSettings',
  DESCRIBE_SNAPSHOT_SCHEDULE = 'DescribeSnapshotSchedule',
  DESCRIBE_STOREDI_SCSI_VOLUMES = 'DescribeStorediSCSIVolumes',
  DESCRIBE_TAPE_ARCHIVES = 'DescribeTapeArchives',
  DESCRIBE_TAPE_RECOVERY_POINTS = 'DescribeTapeRecoveryPoints',
  DESCRIBE_TAPES = 'DescribeTapes',
  DESCRIBE_UPLOAD_BUFFER = 'DescribeUploadBuffer',
  DESCRIBE_VTL_DEVICES = 'DescribeVTLDevices',
  DESCRIBE_WORKING_STORAGE = 'DescribeWorkingStorage',
  DETACH_VOLUME = 'DetachVolume',
  DISABLE_GATEWAY = 'DisableGateway',
  JOIN_DOMAIN = 'JoinDomain',
  LIST_FILE_SHARES = 'ListFileShares',
  LIST_GATEWAYS = 'ListGateways',
  LIST_LOCAL_DISKS = 'ListLocalDisks',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TAPES = 'ListTapes',
  LIST_VOLUME_INITIATORS = 'ListVolumeInitiators',
  LIST_VOLUME_RECOVERY_POINTS = 'ListVolumeRecoveryPoints',
  LIST_VOLUMES = 'ListVolumes',
  NOTIFY_WHEN_UPLOADED = 'NotifyWhenUploaded',
  REFRESH_CACHE = 'RefreshCache',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESET_CACHE = 'ResetCache',
  RETRIEVE_TAPE_ARCHIVE = 'RetrieveTapeArchive',
  RETRIEVE_TAPE_RECOVERY_POINT = 'RetrieveTapeRecoveryPoint',
  SET_LOCAL_CONSOLE_PASSWORD = 'SetLocalConsolePassword',
  SET_SMB_GUEST_PASSWORD = 'SetSMBGuestPassword',
  SHUTDOWN_GATEWAY = 'ShutdownGateway',
  START_GATEWAY = 'StartGateway',
  UPDATE_BANDWIDTH_RATE_LIMIT = 'UpdateBandwidthRateLimit',
  UPDATE_CHAP_CREDENTIALS = 'UpdateChapCredentials',
  UPDATE_GATEWAY_INFORMATION = 'UpdateGatewayInformation',
  UPDATE_GATEWAY_SOFTWARE_NOW = 'UpdateGatewaySoftwareNow',
  UPDATE_MAINTENANCE_START_TIME = 'UpdateMaintenanceStartTime',
  UPDATE_NFS_FILE_SHARE = 'UpdateNFSFileShare',
  UPDATE_SMB_FILE_SHARE = 'UpdateSMBFileShare',
  UPDATE_SNAPSHOT_SCHEDULE = 'UpdateSnapshotSchedule',
  UPDATE_VTL_DEVICE_TYPE = 'UpdateVTLDeviceType',
}

export enum Elasticmapreduce {
  ADD_INSTANCE_FLEET = 'AddInstanceFleet',
  ADD_INSTANCE_GROUPS = 'AddInstanceGroups',
  ADD_JOB_FLOW_STEPS = 'AddJobFlowSteps',
  ADD_TAGS = 'AddTags',
  CANCEL_STEPS = 'CancelSteps',
  CREATE_EDITOR = 'CreateEditor',
  CREATE_SECURITY_CONFIGURATION = 'CreateSecurityConfiguration',
  DELETE_EDITOR = 'DeleteEditor',
  DELETE_SECURITY_CONFIGURATION = 'DeleteSecurityConfiguration',
  DESCRIBE_CLUSTER = 'DescribeCluster',
  DESCRIBE_EDITOR = 'DescribeEditor',
  DESCRIBE_JOB_FLOWS = 'DescribeJobFlows',
  DESCRIBE_SECURITY_CONFIGURATION = 'DescribeSecurityConfiguration',
  DESCRIBE_STEP = 'DescribeStep',
  GET_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'GetBlockPublicAccessConfiguration',
  LIST_BOOTSTRAP_ACTIONS = 'ListBootstrapActions',
  LIST_CLUSTERS = 'ListClusters',
  LIST_EDITORS = 'ListEditors',
  LIST_INSTANCE_FLEETS = 'ListInstanceFleets',
  LIST_INSTANCE_GROUPS = 'ListInstanceGroups',
  LIST_INSTANCES = 'ListInstances',
  LIST_SECURITY_CONFIGURATIONS = 'ListSecurityConfigurations',
  LIST_STEPS = 'ListSteps',
  MODIFY_CLUSTER = 'ModifyCluster',
  MODIFY_INSTANCE_FLEET = 'ModifyInstanceFleet',
  MODIFY_INSTANCE_GROUPS = 'ModifyInstanceGroups',
  OPEN_EDITOR_IN_CONSOLE = 'OpenEditorInConsole',
  PUT_AUTO_SCALING_POLICY = 'PutAutoScalingPolicy',
  PUT_BLOCK_PUBLIC_ACCESS_CONFIGURATION = 'PutBlockPublicAccessConfiguration',
  REMOVE_AUTO_SCALING_POLICY = 'RemoveAutoScalingPolicy',
  REMOVE_TAGS = 'RemoveTags',
  RUN_JOB_FLOW = 'RunJobFlow',
  SET_TERMINATION_PROTECTION = 'SetTerminationProtection',
  START_EDITOR = 'StartEditor',
  STOP_EDITOR = 'StopEditor',
  TERMINATE_JOB_FLOWS = 'TerminateJobFlows',
  VIEW_EVENTS_FROM_ALL_CLUSTERS_IN_CONSOLE = 'ViewEventsFromAllClustersInConsole',
}

export enum Batch {
  CANCEL_JOB = 'CancelJob',
  CREATE_COMPUTE_ENVIRONMENT = 'CreateComputeEnvironment',
  CREATE_JOB_QUEUE = 'CreateJobQueue',
  DELETE_COMPUTE_ENVIRONMENT = 'DeleteComputeEnvironment',
  DELETE_JOB_QUEUE = 'DeleteJobQueue',
  DEREGISTER_JOB_DEFINITION = 'DeregisterJobDefinition',
  DESCRIBE_COMPUTE_ENVIRONMENTS = 'DescribeComputeEnvironments',
  DESCRIBE_JOB_DEFINITIONS = 'DescribeJobDefinitions',
  DESCRIBE_JOB_QUEUES = 'DescribeJobQueues',
  DESCRIBE_JOBS = 'DescribeJobs',
  LIST_JOBS = 'ListJobs',
  REGISTER_JOB_DEFINITION = 'RegisterJobDefinition',
  SUBMIT_JOB = 'SubmitJob',
  TERMINATE_JOB = 'TerminateJob',
  UPDATE_COMPUTE_ENVIRONMENT = 'UpdateComputeEnvironment',
  UPDATE_JOB_QUEUE = 'UpdateJobQueue',
}

export enum Iotevents {
  BATCH_PUT_MESSAGE = 'BatchPutMessage',
  BATCH_UPDATE_DETECTOR = 'BatchUpdateDetector',
  CREATE_DETECTOR_MODEL = 'CreateDetectorModel',
  CREATE_INPUT = 'CreateInput',
  DELETE_DETECTOR_MODEL = 'DeleteDetectorModel',
  DELETE_INPUT = 'DeleteInput',
  DESCRIBE_DETECTOR = 'DescribeDetector',
  DESCRIBE_DETECTOR_MODEL = 'DescribeDetectorModel',
  DESCRIBE_INPUT = 'DescribeInput',
  DESCRIBE_LOGGING_OPTIONS = 'DescribeLoggingOptions',
  LIST_DETECTOR_MODEL_VERSIONS = 'ListDetectorModelVersions',
  LIST_DETECTOR_MODELS = 'ListDetectorModels',
  LIST_DETECTORS = 'ListDetectors',
  LIST_INPUTS = 'ListInputs',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_LOGGING_OPTIONS = 'PutLoggingOptions',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DETECTOR_MODEL = 'UpdateDetectorModel',
  UPDATE_INPUT = 'UpdateInput',
  UPDATE_INPUT_ROUTING = 'UpdateInputRouting',
}

export enum Cloudtrail {
  ADD_TAGS = 'AddTags',
  CREATE_TRAIL = 'CreateTrail',
  DELETE_TRAIL = 'DeleteTrail',
  DESCRIBE_TRAILS = 'DescribeTrails',
  GET_EVENT_SELECTORS = 'GetEventSelectors',
  GET_INSIGHT_SELECTORS = 'GetInsightSelectors',
  GET_TRAIL = 'GetTrail',
  GET_TRAIL_STATUS = 'GetTrailStatus',
  LIST_PUBLIC_KEYS = 'ListPublicKeys',
  LIST_TAGS = 'ListTags',
  LIST_TRAILS = 'ListTrails',
  LOOKUP_EVENTS = 'LookupEvents',
  PUT_EVENT_SELECTORS = 'PutEventSelectors',
  PUT_INSIGHT_SELECTORS = 'PutInsightSelectors',
  REMOVE_TAGS = 'RemoveTags',
  START_LOGGING = 'StartLogging',
  STOP_LOGGING = 'StopLogging',
  UPDATE_TRAIL = 'UpdateTrail',
}

export enum Dynamodb {
  BATCH_GET_ITEM = 'BatchGetItem',
  BATCH_WRITE_ITEM = 'BatchWriteItem',
  CONDITION_CHECK_ITEM = 'ConditionCheckItem',
  CREATE_BACKUP = 'CreateBackup',
  CREATE_GLOBAL_TABLE = 'CreateGlobalTable',
  CREATE_TABLE = 'CreateTable',
  CREATE_TABLE_REPLICA = 'CreateTableReplica',
  DELETE_BACKUP = 'DeleteBackup',
  DELETE_ITEM = 'DeleteItem',
  DELETE_TABLE = 'DeleteTable',
  DELETE_TABLE_REPLICA = 'DeleteTableReplica',
  DESCRIBE_BACKUP = 'DescribeBackup',
  DESCRIBE_CONTINUOUS_BACKUPS = 'DescribeContinuousBackups',
  DESCRIBE_CONTRIBUTOR_INSIGHTS = 'DescribeContributorInsights',
  DESCRIBE_GLOBAL_TABLE = 'DescribeGlobalTable',
  DESCRIBE_GLOBAL_TABLE_SETTINGS = 'DescribeGlobalTableSettings',
  DESCRIBE_LIMITS = 'DescribeLimits',
  DESCRIBE_RESERVED_CAPACITY = 'DescribeReservedCapacity',
  DESCRIBE_RESERVED_CAPACITY_OFFERINGS = 'DescribeReservedCapacityOfferings',
  DESCRIBE_STREAM = 'DescribeStream',
  DESCRIBE_TABLE = 'DescribeTable',
  DESCRIBE_TABLE_REPLICA_AUTO_SCALING = 'DescribeTableReplicaAutoScaling',
  DESCRIBE_TIME_TO_LIVE = 'DescribeTimeToLive',
  GET_ITEM = 'GetItem',
  GET_RECORDS = 'GetRecords',
  GET_SHARD_ITERATOR = 'GetShardIterator',
  LIST_BACKUPS = 'ListBackups',
  LIST_CONTRIBUTOR_INSIGHTS = 'ListContributorInsights',
  LIST_GLOBAL_TABLES = 'ListGlobalTables',
  LIST_STREAMS = 'ListStreams',
  LIST_TABLES = 'ListTables',
  LIST_TAGS_OF_RESOURCE = 'ListTagsOfResource',
  PURCHASE_RESERVED_CAPACITY_OFFERINGS = 'PurchaseReservedCapacityOfferings',
  PUT_ITEM = 'PutItem',
  QUERY = 'Query',
  RESTORE_TABLE_FROM_BACKUP = 'RestoreTableFromBackup',
  RESTORE_TABLE_TO_POINT_IN_TIME = 'RestoreTableToPointInTime',
  SCAN = 'Scan',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONTINUOUS_BACKUPS = 'UpdateContinuousBackups',
  UPDATE_CONTRIBUTOR_INSIGHTS = 'UpdateContributorInsights',
  UPDATE_GLOBAL_TABLE = 'UpdateGlobalTable',
  UPDATE_GLOBAL_TABLE_SETTINGS = 'UpdateGlobalTableSettings',
  UPDATE_ITEM = 'UpdateItem',
  UPDATE_TABLE = 'UpdateTable',
  UPDATE_TABLE_REPLICA_AUTO_SCALING = 'UpdateTableReplicaAutoScaling',
  UPDATE_TIME_TO_LIVE = 'UpdateTimeToLive',
}

export enum Elasticsearchservice {
  ADD_TAGS = 'AddTags',
  CREATE_ELASTICSEARCH_DOMAIN = 'CreateElasticsearchDomain',
  CREATE_ELASTICSEARCH_SERVICE_ROLE = 'CreateElasticsearchServiceRole',
  DELETE_ELASTICSEARCH_DOMAIN = 'DeleteElasticsearchDomain',
  DELETE_ELASTICSEARCH_SERVICE_ROLE = 'DeleteElasticsearchServiceRole',
  DESCRIBE_ELASTICSEARCH_DOMAIN = 'DescribeElasticsearchDomain',
  DESCRIBE_ELASTICSEARCH_DOMAIN_CONFIG = 'DescribeElasticsearchDomainConfig',
  DESCRIBE_ELASTICSEARCH_DOMAINS = 'DescribeElasticsearchDomains',
  DESCRIBE_ELASTICSEARCH_INSTANCE_TYPE_LIMITS = 'DescribeElasticsearchInstanceTypeLimits',
  DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERINGS = 'DescribeReservedElasticsearchInstanceOfferings',
  DESCRIBE_RESERVED_ELASTICSEARCH_INSTANCES = 'DescribeReservedElasticsearchInstances',
  ES_HTTP_DELETE = 'ESHttpDelete',
  ES_HTTP_GET = 'ESHttpGet',
  ES_HTTP_HEAD = 'ESHttpHead',
  ES_HTTP_PATCH = 'ESHttpPatch',
  ES_HTTP_POST = 'ESHttpPost',
  ES_HTTP_PUT = 'ESHttpPut',
  GET_COMPATIBLE_ELASTICSEARCH_VERSIONS = 'GetCompatibleElasticsearchVersions',
  GET_UPGRADE_HISTORY = 'GetUpgradeHistory',
  GET_UPGRADE_STATUS = 'GetUpgradeStatus',
  LIST_DOMAIN_NAMES = 'ListDomainNames',
  LIST_ELASTICSEARCH_INSTANCE_TYPE_DETAILS = 'ListElasticsearchInstanceTypeDetails',
  LIST_ELASTICSEARCH_INSTANCE_TYPES = 'ListElasticsearchInstanceTypes',
  LIST_ELASTICSEARCH_VERSIONS = 'ListElasticsearchVersions',
  LIST_TAGS = 'ListTags',
  PURCHASE_RESERVED_ELASTICSEARCH_INSTANCE_OFFERING = 'PurchaseReservedElasticsearchInstanceOffering',
  REMOVE_TAGS = 'RemoveTags',
  UPDATE_ELASTICSEARCH_DOMAIN_CONFIG = 'UpdateElasticsearchDomainConfig',
  UPGRADE_ELASTICSEARCH_DOMAIN = 'UpgradeElasticsearchDomain',
}

export enum Deepracer {
  CLONE_REINFORCEMENT_LEARNING_MODEL = 'CloneReinforcementLearningModel',
  CREATE_ACCOUNT_RESOURCES = 'CreateAccountResources',
  CREATE_LEADERBOARD_SUBMISSION = 'CreateLeaderboardSubmission',
  CREATE_REINFORCEMENT_LEARNING_MODEL = 'CreateReinforcementLearningModel',
  DELETE_ACCOUNT_RESOURCES = 'DeleteAccountResources',
  DELETE_MODEL = 'DeleteModel',
  GET_ACCOUNT_RESOURCES = 'GetAccountResources',
  GET_ALIAS = 'GetAlias',
  GET_EVALUATION = 'GetEvaluation',
  GET_LATEST_USER_SUBMISSION = 'GetLatestUserSubmission',
  GET_LEADERBOARD = 'GetLeaderboard',
  GET_MODEL = 'GetModel',
  GET_RANKED_USER_SUBMISSION = 'GetRankedUserSubmission',
  GET_TRACK = 'GetTrack',
  GET_TRAINING_JOB = 'GetTrainingJob',
  LIST_EVALUATIONS = 'ListEvaluations',
  LIST_LEADERBOARD_SUBMISSIONS = 'ListLeaderboardSubmissions',
  LIST_LEADERBOARDS = 'ListLeaderboards',
  LIST_MODELS = 'ListModels',
  LIST_TRACKS = 'ListTracks',
  LIST_TRAINING_JOBS = 'ListTrainingJobs',
  SET_ALIAS = 'SetAlias',
  START_EVALUATION = 'StartEvaluation',
  STOP_EVALUATION = 'StopEvaluation',
  STOP_TRAINING_REINFORCEMENT_LEARNING_MODEL = 'StopTrainingReinforcementLearningModel',
  TEST_REWARD_FUNCTION = 'TestRewardFunction',
}

export enum Budgetservice {
  MODIFY_BUDGET = 'ModifyBudget',
  VIEW_BUDGET = 'ViewBudget',
}

export enum Eventbridgeschemas {
  CREATE_DISCOVERER = 'CreateDiscoverer',
  CREATE_REGISTRY = 'CreateRegistry',
  CREATE_SCHEMA = 'CreateSchema',
  DELETE_DISCOVERER = 'DeleteDiscoverer',
  DELETE_REGISTRY = 'DeleteRegistry',
  DELETE_RESOURCE_POLICY = 'DeleteResourcePolicy',
  DELETE_SCHEMA = 'DeleteSchema',
  DELETE_SCHEMA_VERSION = 'DeleteSchemaVersion',
  DESCRIBE_CODE_BINDING = 'DescribeCodeBinding',
  DESCRIBE_DISCOVERER = 'DescribeDiscoverer',
  DESCRIBE_REGISTRY = 'DescribeRegistry',
  DESCRIBE_SCHEMA = 'DescribeSchema',
  GET_CODE_BINDING_SOURCE = 'GetCodeBindingSource',
  GET_DISCOVERED_SCHEMA = 'GetDiscoveredSchema',
  GET_RESOURCE_POLICY = 'GetResourcePolicy',
  LIST_DISCOVERERS = 'ListDiscoverers',
  LIST_REGISTRIES = 'ListRegistries',
  LIST_SCHEMA_VERSIONS = 'ListSchemaVersions',
  LIST_SCHEMAS = 'ListSchemas',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_CODE_BINDING = 'PutCodeBinding',
  PUT_RESOURCE_POLICY = 'PutResourcePolicy',
  SEARCH_SCHEMAS = 'SearchSchemas',
  START_DISCOVERER = 'StartDiscoverer',
  STOP_DISCOVERER = 'StopDiscoverer',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DISCOVERER = 'UpdateDiscoverer',
  UPDATE_REGISTRY = 'UpdateRegistry',
  UPDATE_SCHEMA = 'UpdateSchema',
}

export enum Networkmanager {
  ASSOCIATE_CUSTOMER_GATEWAY = 'AssociateCustomerGateway',
  ASSOCIATE_LINK = 'AssociateLink',
  CREATE_DEVICE = 'CreateDevice',
  CREATE_GLOBAL_NETWORK = 'CreateGlobalNetwork',
  CREATE_LINK = 'CreateLink',
  CREATE_SITE = 'CreateSite',
  DELETE_DEVICE = 'DeleteDevice',
  DELETE_GLOBAL_NETWORK = 'DeleteGlobalNetwork',
  DELETE_LINK = 'DeleteLink',
  DELETE_SITE = 'DeleteSite',
  DEREGISTER_TRANSIT_GATEWAY = 'DeregisterTransitGateway',
  DESCRIBE_GLOBAL_NETWORKS = 'DescribeGlobalNetworks',
  DISASSOCIATE_CUSTOMER_GATEWAY = 'DisassociateCustomerGateway',
  DISASSOCIATE_LINK = 'DisassociateLink',
  GET_CUSTOMER_GATEWAY_ASSOCIATIONS = 'GetCustomerGatewayAssociations',
  GET_DEVICES = 'GetDevices',
  GET_LINK_ASSOCIATIONS = 'GetLinkAssociations',
  GET_LINKS = 'GetLinks',
  GET_SITES = 'GetSites',
  GET_TRANSIT_GATEWAY_REGISTRATIONS = 'GetTransitGatewayRegistrations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  REGISTER_TRANSIT_GATEWAY = 'RegisterTransitGateway',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DEVICE = 'UpdateDevice',
  UPDATE_GLOBAL_NETWORK = 'UpdateGlobalNetwork',
  UPDATE_LINK = 'UpdateLink',
  UPDATE_SITE = 'UpdateSite',
}

export enum Support {
  ADD_ATTACHMENTS_TO_SET = 'AddAttachmentsToSet',
  ADD_COMMUNICATION_TO_CASE = 'AddCommunicationToCase',
  CREATE_CASE = 'CreateCase',
  DESCRIBE_ATTACHMENT = 'DescribeAttachment',
  DESCRIBE_CASE_ATTRIBUTES = 'DescribeCaseAttributes',
  DESCRIBE_CASES = 'DescribeCases',
  DESCRIBE_COMMUNICATIONS = 'DescribeCommunications',
  DESCRIBE_ISSUE_TYPES = 'DescribeIssueTypes',
  DESCRIBE_SERVICES = 'DescribeServices',
  DESCRIBE_SEVERITY_LEVELS = 'DescribeSeverityLevels',
  DESCRIBE_SUPPORT_LEVEL = 'DescribeSupportLevel',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_REFRESH_STATUSES = 'DescribeTrustedAdvisorCheckRefreshStatuses',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_RESULT = 'DescribeTrustedAdvisorCheckResult',
  DESCRIBE_TRUSTED_ADVISOR_CHECK_SUMMARIES = 'DescribeTrustedAdvisorCheckSummaries',
  DESCRIBE_TRUSTED_ADVISOR_CHECKS = 'DescribeTrustedAdvisorChecks',
  INITIATE_CALL_FOR_CASE = 'InitiateCallForCase',
  INITIATE_CHAT_FOR_CASE = 'InitiateChatForCase',
  PUT_CASE_ATTRIBUTES = 'PutCaseAttributes',
  RATE_CASE_COMMUNICATION = 'RateCaseCommunication',
  REFRESH_TRUSTED_ADVISOR_CHECK = 'RefreshTrustedAdvisorCheck',
  RESOLVE_CASE = 'ResolveCase',
  SEARCH_FOR_CASES = 'SearchForCases',
}

export enum Cognitoidentity {
  CREATE_IDENTITY_POOL = 'CreateIdentityPool',
  DELETE_IDENTITIES = 'DeleteIdentities',
  DELETE_IDENTITY_POOL = 'DeleteIdentityPool',
  DESCRIBE_IDENTITY = 'DescribeIdentity',
  DESCRIBE_IDENTITY_POOL = 'DescribeIdentityPool',
  GET_CREDENTIALS_FOR_IDENTITY = 'GetCredentialsForIdentity',
  GET_ID = 'GetId',
  GET_IDENTITY_POOL_ROLES = 'GetIdentityPoolRoles',
  GET_OPEN_ID_TOKEN = 'GetOpenIdToken',
  GET_OPEN_ID_TOKEN_FOR_DEVELOPER_IDENTITY = 'GetOpenIdTokenForDeveloperIdentity',
  LIST_IDENTITIES = 'ListIdentities',
  LIST_IDENTITY_POOLS = 'ListIdentityPools',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LOOKUP_DEVELOPER_IDENTITY = 'LookupDeveloperIdentity',
  MERGE_DEVELOPER_IDENTITIES = 'MergeDeveloperIdentities',
  SET_IDENTITY_POOL_ROLES = 'SetIdentityPoolRoles',
  TAG_RESOURCE = 'TagResource',
  UNLINK_DEVELOPER_IDENTITY = 'UnlinkDeveloperIdentity',
  UNLINK_IDENTITY = 'UnlinkIdentity',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_IDENTITY_POOL = 'UpdateIdentityPool',
}

export enum Polly {
  DELETE_LEXICON = 'DeleteLexicon',
  DESCRIBE_VOICES = 'DescribeVoices',
  GET_LEXICON = 'GetLexicon',
  GET_SPEECH_SYNTHESIS_TASK = 'GetSpeechSynthesisTask',
  LIST_LEXICONS = 'ListLexicons',
  LIST_SPEECH_SYNTHESIS_TASKS = 'ListSpeechSynthesisTasks',
  PUT_LEXICON = 'PutLexicon',
  START_SPEECH_SYNTHESIS_TASK = 'StartSpeechSynthesisTask',
  SYNTHESIZE_SPEECH = 'SynthesizeSpeech',
}

export enum Appconfig {
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_CONFIGURATION_PROFILE = 'CreateConfigurationProfile',
  CREATE_DEPLOYMENT_STRATEGY = 'CreateDeploymentStrategy',
  CREATE_ENVIRONMENT = 'CreateEnvironment',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_CONFIGURATION_PROFILE = 'DeleteConfigurationProfile',
  DELETE_DEPLOYMENT_STRATEGY = 'DeleteDeploymentStrategy',
  DELETE_ENVIRONMENT = 'DeleteEnvironment',
  GET_APPLICATION = 'GetApplication',
  GET_CONFIGURATION = 'GetConfiguration',
  GET_CONFIGURATION_PROFILE = 'GetConfigurationProfile',
  GET_DEPLOYMENT = 'GetDeployment',
  GET_DEPLOYMENT_STRATEGY = 'GetDeploymentStrategy',
  GET_ENVIRONMENT = 'GetEnvironment',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_CONFIGURATION_PROFILES = 'ListConfigurationProfiles',
  LIST_DEPLOYMENT_STRATEGIES = 'ListDeploymentStrategies',
  LIST_DEPLOYMENTS = 'ListDeployments',
  LIST_ENVIRONMENTS = 'ListEnvironments',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_DEPLOYMENT = 'StartDeployment',
  STOP_DEPLOYMENT = 'StopDeployment',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APPLICATION = 'UpdateApplication',
  UPDATE_CONFIGURATION_PROFILE = 'UpdateConfigurationProfile',
  UPDATE_DEPLOYMENT_STRATEGY = 'UpdateDeploymentStrategy',
  UPDATE_ENVIRONMENT = 'UpdateEnvironment',
  VALIDATE_CONFIGURATION = 'ValidateConfiguration',
}

export enum Licensemanager {
  CREATE_LICENSE_CONFIGURATION = 'CreateLicenseConfiguration',
  DELETE_LICENSE_CONFIGURATION = 'DeleteLicenseConfiguration',
  GET_LICENSE_CONFIGURATION = 'GetLicenseConfiguration',
  GET_SERVICE_SETTINGS = 'GetServiceSettings',
  LIST_ASSOCIATIONS_FOR_LICENSE_CONFIGURATION = 'ListAssociationsForLicenseConfiguration',
  LIST_LICENSE_CONFIGURATIONS = 'ListLicenseConfigurations',
  LIST_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'ListLicenseSpecificationsForResource',
  LIST_RESOURCE_INVENTORY = 'ListResourceInventory',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USAGE_FOR_LICENSE_CONFIGURATION = 'ListUsageForLicenseConfiguration',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_LICENSE_CONFIGURATION = 'UpdateLicenseConfiguration',
  UPDATE_LICENSE_SPECIFICATIONS_FOR_RESOURCE = 'UpdateLicenseSpecificationsForResource',
  UPDATE_SERVICE_SETTINGS = 'UpdateServiceSettings',
}

export enum Alexaforbusiness {
  APPROVE_SKILL = 'ApproveSkill',
  ASSOCIATE_CONTACT_WITH_ADDRESS_BOOK = 'AssociateContactWithAddressBook',
  ASSOCIATE_DEVICE_WITH_ROOM = 'AssociateDeviceWithRoom',
  ASSOCIATE_SKILL_GROUP_WITH_ROOM = 'AssociateSkillGroupWithRoom',
  ASSOCIATE_SKILL_WITH_SKILL_GROUP = 'AssociateSkillWithSkillGroup',
  ASSOCIATE_SKILL_WITH_USERS = 'AssociateSkillWithUsers',
  COMPLETE_REGISTRATION = 'CompleteRegistration',
  CREATE_ADDRESS_BOOK = 'CreateAddressBook',
  CREATE_BUSINESS_REPORT_SCHEDULE = 'CreateBusinessReportSchedule',
  CREATE_CONFERENCE_PROVIDER = 'CreateConferenceProvider',
  CREATE_CONTACT = 'CreateContact',
  CREATE_PROFILE = 'CreateProfile',
  CREATE_ROOM = 'CreateRoom',
  CREATE_SKILL_GROUP = 'CreateSkillGroup',
  CREATE_USER = 'CreateUser',
  DELETE_ADDRESS_BOOK = 'DeleteAddressBook',
  DELETE_BUSINESS_REPORT_SCHEDULE = 'DeleteBusinessReportSchedule',
  DELETE_CONFERENCE_PROVIDER = 'DeleteConferenceProvider',
  DELETE_CONTACT = 'DeleteContact',
  DELETE_DEVICE = 'DeleteDevice',
  DELETE_PROFILE = 'DeleteProfile',
  DELETE_ROOM = 'DeleteRoom',
  DELETE_ROOM_SKILL_PARAMETER = 'DeleteRoomSkillParameter',
  DELETE_SKILL_AUTHORIZATION = 'DeleteSkillAuthorization',
  DELETE_SKILL_GROUP = 'DeleteSkillGroup',
  DELETE_USER = 'DeleteUser',
  DISASSOCIATE_CONTACT_FROM_ADDRESS_BOOK = 'DisassociateContactFromAddressBook',
  DISASSOCIATE_DEVICE_FROM_ROOM = 'DisassociateDeviceFromRoom',
  DISASSOCIATE_SKILL_FROM_SKILL_GROUP = 'DisassociateSkillFromSkillGroup',
  DISASSOCIATE_SKILL_FROM_USERS = 'DisassociateSkillFromUsers',
  DISASSOCIATE_SKILL_GROUP_FROM_ROOM = 'DisassociateSkillGroupFromRoom',
  FORGET_SMART_HOME_APPLIANCES = 'ForgetSmartHomeAppliances',
  GET_ADDRESS_BOOK = 'GetAddressBook',
  GET_CONFERENCE_PREFERENCE = 'GetConferencePreference',
  GET_CONFERENCE_PROVIDER = 'GetConferenceProvider',
  GET_CONTACT = 'GetContact',
  GET_DEVICE = 'GetDevice',
  GET_NETWORK_PROFILE = 'GetNetworkProfile',
  GET_PROFILE = 'GetProfile',
  GET_ROOM = 'GetRoom',
  GET_ROOM_SKILL_PARAMETER = 'GetRoomSkillParameter',
  GET_SKILL_GROUP = 'GetSkillGroup',
  LIST_BUSINESS_REPORT_SCHEDULES = 'ListBusinessReportSchedules',
  LIST_CONFERENCE_PROVIDERS = 'ListConferenceProviders',
  LIST_DEVICE_EVENTS = 'ListDeviceEvents',
  LIST_SKILLS = 'ListSkills',
  LIST_SKILLS_STORE_CATEGORIES = 'ListSkillsStoreCategories',
  LIST_SKILLS_STORE_SKILLS_BY_CATEGORY = 'ListSkillsStoreSkillsByCategory',
  LIST_SMART_HOME_APPLIANCES = 'ListSmartHomeAppliances',
  LIST_TAGS = 'ListTags',
  PUT_CONFERENCE_PREFERENCE = 'PutConferencePreference',
  PUT_DEVICE_SETUP_EVENTS = 'PutDeviceSetupEvents',
  PUT_ROOM_SKILL_PARAMETER = 'PutRoomSkillParameter',
  PUT_SKILL_AUTHORIZATION = 'PutSkillAuthorization',
  REGISTER_AVS_DEVICE = 'RegisterAVSDevice',
  REGISTER_DEVICE = 'RegisterDevice',
  REJECT_SKILL = 'RejectSkill',
  RESOLVE_ROOM = 'ResolveRoom',
  REVOKE_INVITATION = 'RevokeInvitation',
  SEARCH_ADDRESS_BOOKS = 'SearchAddressBooks',
  SEARCH_CONTACTS = 'SearchContacts',
  SEARCH_DEVICES = 'SearchDevices',
  SEARCH_NETWORK_PROFILES = 'SearchNetworkProfiles',
  SEARCH_PROFILES = 'SearchProfiles',
  SEARCH_ROOMS = 'SearchRooms',
  SEARCH_SKILL_GROUPS = 'SearchSkillGroups',
  SEARCH_USERS = 'SearchUsers',
  SEND_INVITATION = 'SendInvitation',
  START_DEVICE_SYNC = 'StartDeviceSync',
  START_SMART_HOME_APPLIANCE_DISCOVERY = 'StartSmartHomeApplianceDiscovery',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ADDRESS_BOOK = 'UpdateAddressBook',
  UPDATE_BUSINESS_REPORT_SCHEDULE = 'UpdateBusinessReportSchedule',
  UPDATE_CONFERENCE_PROVIDER = 'UpdateConferenceProvider',
  UPDATE_CONTACT = 'UpdateContact',
  UPDATE_DEVICE = 'UpdateDevice',
  UPDATE_PROFILE = 'UpdateProfile',
  UPDATE_ROOM = 'UpdateRoom',
  UPDATE_SKILL_GROUP = 'UpdateSkillGroup',
}

export enum Certificatemanagerprivatecertificateauthority {
  CREATE_CERTIFICATE_AUTHORITY = 'CreateCertificateAuthority',
  CREATE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'CreateCertificateAuthorityAuditReport',
  CREATE_PERMISSION = 'CreatePermission',
  DELETE_CERTIFICATE_AUTHORITY = 'DeleteCertificateAuthority',
  DELETE_PERMISSION = 'DeletePermission',
  DESCRIBE_CERTIFICATE_AUTHORITY = 'DescribeCertificateAuthority',
  DESCRIBE_CERTIFICATE_AUTHORITY_AUDIT_REPORT = 'DescribeCertificateAuthorityAuditReport',
  GET_CERTIFICATE = 'GetCertificate',
  GET_CERTIFICATE_AUTHORITY_CERTIFICATE = 'GetCertificateAuthorityCertificate',
  GET_CERTIFICATE_AUTHORITY_CSR = 'GetCertificateAuthorityCsr',
  IMPORT_CERTIFICATE_AUTHORITY_CERTIFICATE = 'ImportCertificateAuthorityCertificate',
  ISSUE_CERTIFICATE = 'IssueCertificate',
  LIST_CERTIFICATE_AUTHORITIES = 'ListCertificateAuthorities',
  LIST_PERMISSIONS = 'ListPermissions',
  LIST_TAGS = 'ListTags',
  RESTORE_CERTIFICATE_AUTHORITY = 'RestoreCertificateAuthority',
  REVOKE_CERTIFICATE = 'RevokeCertificate',
  TAG_CERTIFICATE_AUTHORITY = 'TagCertificateAuthority',
  UNTAG_CERTIFICATE_AUTHORITY = 'UntagCertificateAuthority',
  UPDATE_CERTIFICATE_AUTHORITY = 'UpdateCertificateAuthority',
}

export enum Stepfunctions {
  CREATE_ACTIVITY = 'CreateActivity',
  CREATE_STATE_MACHINE = 'CreateStateMachine',
  DELETE_ACTIVITY = 'DeleteActivity',
  DELETE_STATE_MACHINE = 'DeleteStateMachine',
  DESCRIBE_ACTIVITY = 'DescribeActivity',
  DESCRIBE_EXECUTION = 'DescribeExecution',
  DESCRIBE_STATE_MACHINE = 'DescribeStateMachine',
  DESCRIBE_STATE_MACHINE_FOR_EXECUTION = 'DescribeStateMachineForExecution',
  GET_ACTIVITY_TASK = 'GetActivityTask',
  GET_EXECUTION_HISTORY = 'GetExecutionHistory',
  LIST_ACTIVITIES = 'ListActivities',
  LIST_EXECUTIONS = 'ListExecutions',
  LIST_STATE_MACHINES = 'ListStateMachines',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  SEND_TASK_FAILURE = 'SendTaskFailure',
  SEND_TASK_HEARTBEAT = 'SendTaskHeartbeat',
  SEND_TASK_SUCCESS = 'SendTaskSuccess',
  START_EXECUTION = 'StartExecution',
  STOP_EXECUTION = 'StopExecution',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_STATE_MACHINE = 'UpdateStateMachine',
}

export enum Messagedeliveryservice {
  ACKNOWLEDGE_MESSAGE = 'AcknowledgeMessage',
  DELETE_MESSAGE = 'DeleteMessage',
  FAIL_MESSAGE = 'FailMessage',
  GET_ENDPOINT = 'GetEndpoint',
  GET_MESSAGES = 'GetMessages',
  SEND_REPLY = 'SendReply',
}

export enum Iotgreengrass {
  ASSOCIATE_ROLE_TO_GROUP = 'AssociateRoleToGroup',
  ASSOCIATE_SERVICE_ROLE_TO_ACCOUNT = 'AssociateServiceRoleToAccount',
  CREATE_CONNECTOR_DEFINITION = 'CreateConnectorDefinition',
  CREATE_CONNECTOR_DEFINITION_VERSION = 'CreateConnectorDefinitionVersion',
  CREATE_CORE_DEFINITION = 'CreateCoreDefinition',
  CREATE_CORE_DEFINITION_VERSION = 'CreateCoreDefinitionVersion',
  CREATE_DEPLOYMENT = 'CreateDeployment',
  CREATE_DEVICE_DEFINITION = 'CreateDeviceDefinition',
  CREATE_DEVICE_DEFINITION_VERSION = 'CreateDeviceDefinitionVersion',
  CREATE_FUNCTION_DEFINITION = 'CreateFunctionDefinition',
  CREATE_FUNCTION_DEFINITION_VERSION = 'CreateFunctionDefinitionVersion',
  CREATE_GROUP = 'CreateGroup',
  CREATE_GROUP_CERTIFICATE_AUTHORITY = 'CreateGroupCertificateAuthority',
  CREATE_GROUP_VERSION = 'CreateGroupVersion',
  CREATE_LOGGER_DEFINITION = 'CreateLoggerDefinition',
  CREATE_LOGGER_DEFINITION_VERSION = 'CreateLoggerDefinitionVersion',
  CREATE_RESOURCE_DEFINITION = 'CreateResourceDefinition',
  CREATE_RESOURCE_DEFINITION_VERSION = 'CreateResourceDefinitionVersion',
  CREATE_SOFTWARE_UPDATE_JOB = 'CreateSoftwareUpdateJob',
  CREATE_SUBSCRIPTION_DEFINITION = 'CreateSubscriptionDefinition',
  CREATE_SUBSCRIPTION_DEFINITION_VERSION = 'CreateSubscriptionDefinitionVersion',
  DELETE_CONNECTOR_DEFINITION = 'DeleteConnectorDefinition',
  DELETE_CORE_DEFINITION = 'DeleteCoreDefinition',
  DELETE_DEVICE_DEFINITION = 'DeleteDeviceDefinition',
  DELETE_FUNCTION_DEFINITION = 'DeleteFunctionDefinition',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_LOGGER_DEFINITION = 'DeleteLoggerDefinition',
  DELETE_RESOURCE_DEFINITION = 'DeleteResourceDefinition',
  DELETE_SUBSCRIPTION_DEFINITION = 'DeleteSubscriptionDefinition',
  DISASSOCIATE_ROLE_FROM_GROUP = 'DisassociateRoleFromGroup',
  DISASSOCIATE_SERVICE_ROLE_FROM_ACCOUNT = 'DisassociateServiceRoleFromAccount',
  GET_ASSOCIATED_ROLE = 'GetAssociatedRole',
  GET_BULK_DEPLOYMENT_STATUS = 'GetBulkDeploymentStatus',
  GET_CONNECTIVITY_INFO = 'GetConnectivityInfo',
  GET_CONNECTOR_DEFINITION = 'GetConnectorDefinition',
  GET_CONNECTOR_DEFINITION_VERSION = 'GetConnectorDefinitionVersion',
  GET_CORE_DEFINITION = 'GetCoreDefinition',
  GET_CORE_DEFINITION_VERSION = 'GetCoreDefinitionVersion',
  GET_DEPLOYMENT_STATUS = 'GetDeploymentStatus',
  GET_DEVICE_DEFINITION = 'GetDeviceDefinition',
  GET_DEVICE_DEFINITION_VERSION = 'GetDeviceDefinitionVersion',
  GET_FUNCTION_DEFINITION = 'GetFunctionDefinition',
  GET_FUNCTION_DEFINITION_VERSION = 'GetFunctionDefinitionVersion',
  GET_GROUP = 'GetGroup',
  GET_GROUP_CERTIFICATE_AUTHORITY = 'GetGroupCertificateAuthority',
  GET_GROUP_CERTIFICATE_CONFIGURATION = 'GetGroupCertificateConfiguration',
  GET_GROUP_VERSION = 'GetGroupVersion',
  GET_LOGGER_DEFINITION = 'GetLoggerDefinition',
  GET_LOGGER_DEFINITION_VERSION = 'GetLoggerDefinitionVersion',
  GET_RESOURCE_DEFINITION = 'GetResourceDefinition',
  GET_RESOURCE_DEFINITION_VERSION = 'GetResourceDefinitionVersion',
  GET_SERVICE_ROLE_FOR_ACCOUNT = 'GetServiceRoleForAccount',
  GET_SUBSCRIPTION_DEFINITION = 'GetSubscriptionDefinition',
  GET_SUBSCRIPTION_DEFINITION_VERSION = 'GetSubscriptionDefinitionVersion',
  LIST_BULK_DEPLOYMENT_DETAILED_REPORTS = 'ListBulkDeploymentDetailedReports',
  LIST_BULK_DEPLOYMENTS = 'ListBulkDeployments',
  LIST_CONNECTOR_DEFINITION_VERSIONS = 'ListConnectorDefinitionVersions',
  LIST_CONNECTOR_DEFINITIONS = 'ListConnectorDefinitions',
  LIST_CORE_DEFINITION_VERSIONS = 'ListCoreDefinitionVersions',
  LIST_CORE_DEFINITIONS = 'ListCoreDefinitions',
  LIST_DEPLOYMENTS = 'ListDeployments',
  LIST_DEVICE_DEFINITION_VERSIONS = 'ListDeviceDefinitionVersions',
  LIST_DEVICE_DEFINITIONS = 'ListDeviceDefinitions',
  LIST_FUNCTION_DEFINITION_VERSIONS = 'ListFunctionDefinitionVersions',
  LIST_FUNCTION_DEFINITIONS = 'ListFunctionDefinitions',
  LIST_GROUP_CERTIFICATE_AUTHORITIES = 'ListGroupCertificateAuthorities',
  LIST_GROUP_VERSIONS = 'ListGroupVersions',
  LIST_GROUPS = 'ListGroups',
  LIST_LOGGER_DEFINITION_VERSIONS = 'ListLoggerDefinitionVersions',
  LIST_LOGGER_DEFINITIONS = 'ListLoggerDefinitions',
  LIST_RESOURCE_DEFINITION_VERSIONS = 'ListResourceDefinitionVersions',
  LIST_RESOURCE_DEFINITIONS = 'ListResourceDefinitions',
  LIST_SUBSCRIPTION_DEFINITION_VERSIONS = 'ListSubscriptionDefinitionVersions',
  LIST_SUBSCRIPTION_DEFINITIONS = 'ListSubscriptionDefinitions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  RESET_DEPLOYMENTS = 'ResetDeployments',
  START_BULK_DEPLOYMENT = 'StartBulkDeployment',
  STOP_BULK_DEPLOYMENT = 'StopBulkDeployment',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONNECTIVITY_INFO = 'UpdateConnectivityInfo',
  UPDATE_CONNECTOR_DEFINITION = 'UpdateConnectorDefinition',
  UPDATE_CORE_DEFINITION = 'UpdateCoreDefinition',
  UPDATE_DEVICE_DEFINITION = 'UpdateDeviceDefinition',
  UPDATE_FUNCTION_DEFINITION = 'UpdateFunctionDefinition',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_GROUP_CERTIFICATE_CONFIGURATION = 'UpdateGroupCertificateConfiguration',
  UPDATE_LOGGER_DEFINITION = 'UpdateLoggerDefinition',
  UPDATE_RESOURCE_DEFINITION = 'UpdateResourceDefinition',
  UPDATE_SUBSCRIPTION_DEFINITION = 'UpdateSubscriptionDefinition',
}

export enum Redshift {
  ACCEPT_RESERVED_NODE_EXCHANGE = 'AcceptReservedNodeExchange',
  AUTHORIZE_CLUSTER_SECURITY_GROUP_INGRESS = 'AuthorizeClusterSecurityGroupIngress',
  AUTHORIZE_SNAPSHOT_ACCESS = 'AuthorizeSnapshotAccess',
  BATCH_DELETE_CLUSTER_SNAPSHOTS = 'BatchDeleteClusterSnapshots',
  BATCH_MODIFY_CLUSTER_SNAPSHOTS = 'BatchModifyClusterSnapshots',
  CANCEL_QUERY = 'CancelQuery',
  CANCEL_QUERY_SESSION = 'CancelQuerySession',
  CANCEL_RESIZE = 'CancelResize',
  COPY_CLUSTER_SNAPSHOT = 'CopyClusterSnapshot',
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_CLUSTER_PARAMETER_GROUP = 'CreateClusterParameterGroup',
  CREATE_CLUSTER_SECURITY_GROUP = 'CreateClusterSecurityGroup',
  CREATE_CLUSTER_SNAPSHOT = 'CreateClusterSnapshot',
  CREATE_CLUSTER_SUBNET_GROUP = 'CreateClusterSubnetGroup',
  CREATE_CLUSTER_USER = 'CreateClusterUser',
  CREATE_EVENT_SUBSCRIPTION = 'CreateEventSubscription',
  CREATE_HSM_CLIENT_CERTIFICATE = 'CreateHsmClientCertificate',
  CREATE_HSM_CONFIGURATION = 'CreateHsmConfiguration',
  CREATE_SAVED_QUERY = 'CreateSavedQuery',
  CREATE_SCHEDULED_ACTION = 'CreateScheduledAction',
  CREATE_SNAPSHOT_COPY_GRANT = 'CreateSnapshotCopyGrant',
  CREATE_SNAPSHOT_SCHEDULE = 'CreateSnapshotSchedule',
  CREATE_TAGS = 'CreateTags',
  DELETE_CLUSTER = 'DeleteCluster',
  DELETE_CLUSTER_PARAMETER_GROUP = 'DeleteClusterParameterGroup',
  DELETE_CLUSTER_SECURITY_GROUP = 'DeleteClusterSecurityGroup',
  DELETE_CLUSTER_SNAPSHOT = 'DeleteClusterSnapshot',
  DELETE_CLUSTER_SUBNET_GROUP = 'DeleteClusterSubnetGroup',
  DELETE_EVENT_SUBSCRIPTION = 'DeleteEventSubscription',
  DELETE_HSM_CLIENT_CERTIFICATE = 'DeleteHsmClientCertificate',
  DELETE_HSM_CONFIGURATION = 'DeleteHsmConfiguration',
  DELETE_SAVED_QUERIES = 'DeleteSavedQueries',
  DELETE_SCHEDULED_ACTION = 'DeleteScheduledAction',
  DELETE_SNAPSHOT_COPY_GRANT = 'DeleteSnapshotCopyGrant',
  DELETE_SNAPSHOT_SCHEDULE = 'DeleteSnapshotSchedule',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_CLUSTER_DB_REVISIONS = 'DescribeClusterDbRevisions',
  DESCRIBE_CLUSTER_PARAMETER_GROUPS = 'DescribeClusterParameterGroups',
  DESCRIBE_CLUSTER_PARAMETERS = 'DescribeClusterParameters',
  DESCRIBE_CLUSTER_SECURITY_GROUPS = 'DescribeClusterSecurityGroups',
  DESCRIBE_CLUSTER_SNAPSHOTS = 'DescribeClusterSnapshots',
  DESCRIBE_CLUSTER_SUBNET_GROUPS = 'DescribeClusterSubnetGroups',
  DESCRIBE_CLUSTER_TRACKS = 'DescribeClusterTracks',
  DESCRIBE_CLUSTER_VERSIONS = 'DescribeClusterVersions',
  DESCRIBE_CLUSTERS = 'DescribeClusters',
  DESCRIBE_DEFAULT_CLUSTER_PARAMETERS = 'DescribeDefaultClusterParameters',
  DESCRIBE_EVENT_CATEGORIES = 'DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_HSM_CLIENT_CERTIFICATES = 'DescribeHsmClientCertificates',
  DESCRIBE_HSM_CONFIGURATIONS = 'DescribeHsmConfigurations',
  DESCRIBE_LOGGING_STATUS = 'DescribeLoggingStatus',
  DESCRIBE_NODE_CONFIGURATION_OPTIONS = 'DescribeNodeConfigurationOptions',
  DESCRIBE_ORDERABLE_CLUSTER_OPTIONS = 'DescribeOrderableClusterOptions',
  DESCRIBE_QUERY = 'DescribeQuery',
  DESCRIBE_RESERVED_NODE_OFFERINGS = 'DescribeReservedNodeOfferings',
  DESCRIBE_RESERVED_NODES = 'DescribeReservedNodes',
  DESCRIBE_RESIZE = 'DescribeResize',
  DESCRIBE_SAVED_QUERIES = 'DescribeSavedQueries',
  DESCRIBE_SCHEDULED_ACTIONS = 'DescribeScheduledActions',
  DESCRIBE_SNAPSHOT_COPY_GRANTS = 'DescribeSnapshotCopyGrants',
  DESCRIBE_SNAPSHOT_SCHEDULES = 'DescribeSnapshotSchedules',
  DESCRIBE_STORAGE = 'DescribeStorage',
  DESCRIBE_TABLE = 'DescribeTable',
  DESCRIBE_TABLE_RESTORE_STATUS = 'DescribeTableRestoreStatus',
  DESCRIBE_TAGS = 'DescribeTags',
  DISABLE_LOGGING = 'DisableLogging',
  DISABLE_SNAPSHOT_COPY = 'DisableSnapshotCopy',
  ENABLE_LOGGING = 'EnableLogging',
  ENABLE_SNAPSHOT_COPY = 'EnableSnapshotCopy',
  EXECUTE_QUERY = 'ExecuteQuery',
  FETCH_RESULTS = 'FetchResults',
  GET_CLUSTER_CREDENTIALS = 'GetClusterCredentials',
  GET_RESERVED_NODE_EXCHANGE_OFFERINGS = 'GetReservedNodeExchangeOfferings',
  JOIN_GROUP = 'JoinGroup',
  LIST_DATABASES = 'ListDatabases',
  LIST_SAVED_QUERIES = 'ListSavedQueries',
  LIST_SCHEMAS = 'ListSchemas',
  LIST_TABLES = 'ListTables',
  MODIFY_CLUSTER = 'ModifyCluster',
  MODIFY_CLUSTER_DB_REVISION = 'ModifyClusterDbRevision',
  MODIFY_CLUSTER_IAM_ROLES = 'ModifyClusterIamRoles',
  MODIFY_CLUSTER_MAINTENANCE = 'ModifyClusterMaintenance',
  MODIFY_CLUSTER_PARAMETER_GROUP = 'ModifyClusterParameterGroup',
  MODIFY_CLUSTER_SNAPSHOT = 'ModifyClusterSnapshot',
  MODIFY_CLUSTER_SNAPSHOT_SCHEDULE = 'ModifyClusterSnapshotSchedule',
  MODIFY_CLUSTER_SUBNET_GROUP = 'ModifyClusterSubnetGroup',
  MODIFY_EVENT_SUBSCRIPTION = 'ModifyEventSubscription',
  MODIFY_SAVED_QUERY = 'ModifySavedQuery',
  MODIFY_SCHEDULED_ACTION = 'ModifyScheduledAction',
  MODIFY_SNAPSHOT_COPY_RETENTION_PERIOD = 'ModifySnapshotCopyRetentionPeriod',
  MODIFY_SNAPSHOT_SCHEDULE = 'ModifySnapshotSchedule',
  PAUSE_CLUSTER = 'PauseCluster',
  PURCHASE_RESERVED_NODE_OFFERING = 'PurchaseReservedNodeOffering',
  REBOOT_CLUSTER = 'RebootCluster',
  RESET_CLUSTER_PARAMETER_GROUP = 'ResetClusterParameterGroup',
  RESIZE_CLUSTER = 'ResizeCluster',
  RESTORE_FROM_CLUSTER_SNAPSHOT = 'RestoreFromClusterSnapshot',
  RESTORE_TABLE_FROM_CLUSTER_SNAPSHOT = 'RestoreTableFromClusterSnapshot',
  RESUME_CLUSTER = 'ResumeCluster',
  REVOKE_CLUSTER_SECURITY_GROUP_INGRESS = 'RevokeClusterSecurityGroupIngress',
  REVOKE_SNAPSHOT_ACCESS = 'RevokeSnapshotAccess',
  ROTATE_ENCRYPTION_KEY = 'RotateEncryptionKey',
  VIEW_QUERIES_FROM_CONSOLE = 'ViewQueriesFromConsole',
  VIEW_QUERIES_IN_CONSOLE = 'ViewQueriesInConsole',
}

export enum Workdocs {
  ABORT_DOCUMENT_VERSION_UPLOAD = 'AbortDocumentVersionUpload',
  ACTIVATE_USER = 'ActivateUser',
  ADD_RESOURCE_PERMISSIONS = 'AddResourcePermissions',
  ADD_USER_TO_GROUP = 'AddUserToGroup',
  CHECK_ALIAS = 'CheckAlias',
  CREATE_COMMENT = 'CreateComment',
  CREATE_CUSTOM_METADATA = 'CreateCustomMetadata',
  CREATE_FOLDER = 'CreateFolder',
  CREATE_INSTANCE = 'CreateInstance',
  CREATE_LABELS = 'CreateLabels',
  CREATE_NOTIFICATION_SUBSCRIPTION = 'CreateNotificationSubscription',
  CREATE_USER = 'CreateUser',
  DEACTIVATE_USER = 'DeactivateUser',
  DELETE_COMMENT = 'DeleteComment',
  DELETE_CUSTOM_METADATA = 'DeleteCustomMetadata',
  DELETE_DOCUMENT = 'DeleteDocument',
  DELETE_FOLDER = 'DeleteFolder',
  DELETE_FOLDER_CONTENTS = 'DeleteFolderContents',
  DELETE_INSTANCE = 'DeleteInstance',
  DELETE_LABELS = 'DeleteLabels',
  DELETE_NOTIFICATION_SUBSCRIPTION = 'DeleteNotificationSubscription',
  DELETE_USER = 'DeleteUser',
  DEREGISTER_DIRECTORY = 'DeregisterDirectory',
  DESCRIBE_ACTIVITIES = 'DescribeActivities',
  DESCRIBE_AVAILABLE_DIRECTORIES = 'DescribeAvailableDirectories',
  DESCRIBE_COMMENTS = 'DescribeComments',
  DESCRIBE_DOCUMENT_VERSIONS = 'DescribeDocumentVersions',
  DESCRIBE_FOLDER_CONTENTS = 'DescribeFolderContents',
  DESCRIBE_GROUPS = 'DescribeGroups',
  DESCRIBE_INSTANCES = 'DescribeInstances',
  DESCRIBE_NOTIFICATION_SUBSCRIPTIONS = 'DescribeNotificationSubscriptions',
  DESCRIBE_RESOURCE_PERMISSIONS = 'DescribeResourcePermissions',
  DESCRIBE_ROOT_FOLDERS = 'DescribeRootFolders',
  DESCRIBE_USERS = 'DescribeUsers',
  DOWNLOAD_DOCUMENT_VERSION = 'DownloadDocumentVersion',
  GET_CURRENT_USER = 'GetCurrentUser',
  GET_DOCUMENT = 'GetDocument',
  GET_DOCUMENT_PATH = 'GetDocumentPath',
  GET_DOCUMENT_VERSION = 'GetDocumentVersion',
  GET_FOLDER = 'GetFolder',
  GET_FOLDER_PATH = 'GetFolderPath',
  GET_RESOURCES = 'GetResources',
  INITIATE_DOCUMENT_VERSION_UPLOAD = 'InitiateDocumentVersionUpload',
  REGISTER_DIRECTORY = 'RegisterDirectory',
  REMOVE_ALL_RESOURCE_PERMISSIONS = 'RemoveAllResourcePermissions',
  REMOVE_RESOURCE_PERMISSION = 'RemoveResourcePermission',
  UPDATE_DOCUMENT = 'UpdateDocument',
  UPDATE_DOCUMENT_VERSION = 'UpdateDocumentVersion',
  UPDATE_FOLDER = 'UpdateFolder',
  UPDATE_INSTANCE_ALIAS = 'UpdateInstanceAlias',
  UPDATE_USER = 'UpdateUser',
}

export enum Marketplacemanagementportal {
  UPLOAD_FILES = 'uploadFiles',
  VIEW_MARKETING = 'viewMarketing',
  VIEW_REPORTS = 'viewReports',
  VIEW_SETTINGS = 'viewSettings',
  VIEW_SUPPORT = 'viewSupport',
}

export enum Comprehendmedical {
  DETECT_ENTITIES = 'DetectEntities',
  DETECT_PHI = 'DetectPHI',
}

export enum Deepcomposer {
  ASSOCIATE_COUPON = 'AssociateCoupon',
  CREATE_AUDIO = 'CreateAudio',
  CREATE_COMPOSITION = 'CreateComposition',
  CREATE_MODEL = 'CreateModel',
  DELETE_COMPOSITION = 'DeleteComposition',
  DELETE_MODEL = 'DeleteModel',
  GET_COMPOSITION = 'GetComposition',
  GET_MODEL = 'GetModel',
  GET_SAMPLE_MODEL = 'GetSampleModel',
  LIST_COMPOSITIONS = 'ListCompositions',
  LIST_MODELS = 'ListModels',
  LIST_SAMPLE_MODELS = 'ListSampleModels',
  LIST_TRAINING_TOPICS = 'ListTrainingTopics',
  UPDATE_COMPOSITION = 'UpdateComposition',
  UPDATE_MODEL = 'UpdateModel',
}

export enum Managedblockchain {
  CREATE_MEMBER = 'CreateMember',
  CREATE_NETWORK = 'CreateNetwork',
  CREATE_NODE = 'CreateNode',
  CREATE_PROPOSAL = 'CreateProposal',
  DELETE_MEMBER = 'DeleteMember',
  DELETE_NODE = 'DeleteNode',
  GET_MEMBER = 'GetMember',
  GET_NETWORK = 'GetNetwork',
  GET_NODE = 'GetNode',
  GET_PROPOSAL = 'GetProposal',
  LIST_INVITATIONS = 'ListInvitations',
  LIST_MEMBERS = 'ListMembers',
  LIST_NETWORKS = 'ListNetworks',
  LIST_NODES = 'ListNodes',
  LIST_PROPOSAL_VOTES = 'ListProposalVotes',
  LIST_PROPOSALS = 'ListProposals',
  REJECT_INVITATION = 'RejectInvitation',
  UPDATE_MEMBER = 'UpdateMember',
  UPDATE_NODE = 'UpdateNode',
  VOTE_ON_PROPOSAL = 'VoteOnProposal',
}

export enum Waf {
  CREATE_BYTE_MATCH_SET = 'CreateByteMatchSet',
  CREATE_GEO_MATCH_SET = 'CreateGeoMatchSet',
  CREATE_IP_SET = 'CreateIPSet',
  CREATE_RATE_BASED_RULE = 'CreateRateBasedRule',
  CREATE_REGEX_MATCH_SET = 'CreateRegexMatchSet',
  CREATE_REGEX_PATTERN_SET = 'CreateRegexPatternSet',
  CREATE_RULE = 'CreateRule',
  CREATE_RULE_GROUP = 'CreateRuleGroup',
  CREATE_SIZE_CONSTRAINT_SET = 'CreateSizeConstraintSet',
  CREATE_SQL_INJECTION_MATCH_SET = 'CreateSqlInjectionMatchSet',
  CREATE_WEB_ACL = 'CreateWebACL',
  CREATE_XSS_MATCH_SET = 'CreateXssMatchSet',
  DELETE_BYTE_MATCH_SET = 'DeleteByteMatchSet',
  DELETE_GEO_MATCH_SET = 'DeleteGeoMatchSet',
  DELETE_IP_SET = 'DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'DeleteLoggingConfiguration',
  DELETE_PERMISSION_POLICY = 'DeletePermissionPolicy',
  DELETE_RATE_BASED_RULE = 'DeleteRateBasedRule',
  DELETE_REGEX_MATCH_SET = 'DeleteRegexMatchSet',
  DELETE_REGEX_PATTERN_SET = 'DeleteRegexPatternSet',
  DELETE_RULE = 'DeleteRule',
  DELETE_RULE_GROUP = 'DeleteRuleGroup',
  DELETE_SIZE_CONSTRAINT_SET = 'DeleteSizeConstraintSet',
  DELETE_SQL_INJECTION_MATCH_SET = 'DeleteSqlInjectionMatchSet',
  DELETE_WEB_ACL = 'DeleteWebACL',
  DELETE_XSS_MATCH_SET = 'DeleteXssMatchSet',
  GET_BYTE_MATCH_SET = 'GetByteMatchSet',
  GET_CHANGE_TOKEN = 'GetChangeToken',
  GET_CHANGE_TOKEN_STATUS = 'GetChangeTokenStatus',
  GET_GEO_MATCH_SET = 'GetGeoMatchSet',
  GET_IP_SET = 'GetIPSet',
  GET_LOGGING_CONFIGURATION = 'GetLoggingConfiguration',
  GET_PERMISSION_POLICY = 'GetPermissionPolicy',
  GET_RATE_BASED_RULE = 'GetRateBasedRule',
  GET_RATE_BASED_RULE_MANAGED_KEYS = 'GetRateBasedRuleManagedKeys',
  GET_REGEX_MATCH_SET = 'GetRegexMatchSet',
  GET_REGEX_PATTERN_SET = 'GetRegexPatternSet',
  GET_RULE = 'GetRule',
  GET_RULE_GROUP = 'GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'GetSampledRequests',
  GET_SIZE_CONSTRAINT_SET = 'GetSizeConstraintSet',
  GET_SQL_INJECTION_MATCH_SET = 'GetSqlInjectionMatchSet',
  GET_WEB_ACL = 'GetWebACL',
  GET_XSS_MATCH_SET = 'GetXssMatchSet',
  LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'ListActivatedRulesInRuleGroup',
  LIST_BYTE_MATCH_SETS = 'ListByteMatchSets',
  LIST_GEO_MATCH_SETS = 'ListGeoMatchSets',
  LIST_IP_SETS = 'ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'ListLoggingConfigurations',
  LIST_RATE_BASED_RULES = 'ListRateBasedRules',
  LIST_REGEX_MATCH_SETS = 'ListRegexMatchSets',
  LIST_REGEX_PATTERN_SETS = 'ListRegexPatternSets',
  LIST_RULE_GROUPS = 'ListRuleGroups',
  LIST_RULES = 'ListRules',
  LIST_SIZE_CONSTRAINT_SETS = 'ListSizeConstraintSets',
  LIST_SQL_INJECTION_MATCH_SETS = 'ListSqlInjectionMatchSets',
  LIST_SUBSCRIBED_RULE_GROUPS = 'ListSubscribedRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WEB_AC_LS = 'ListWebACLs',
  LIST_XSS_MATCH_SETS = 'ListXssMatchSets',
  PUT_LOGGING_CONFIGURATION = 'PutLoggingConfiguration',
  PUT_PERMISSION_POLICY = 'PutPermissionPolicy',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_BYTE_MATCH_SET = 'UpdateByteMatchSet',
  UPDATE_GEO_MATCH_SET = 'UpdateGeoMatchSet',
  UPDATE_IP_SET = 'UpdateIPSet',
  UPDATE_RATE_BASED_RULE = 'UpdateRateBasedRule',
  UPDATE_REGEX_MATCH_SET = 'UpdateRegexMatchSet',
  UPDATE_REGEX_PATTERN_SET = 'UpdateRegexPatternSet',
  UPDATE_RULE = 'UpdateRule',
  UPDATE_RULE_GROUP = 'UpdateRuleGroup',
  UPDATE_SIZE_CONSTRAINT_SET = 'UpdateSizeConstraintSet',
  UPDATE_SQL_INJECTION_MATCH_SET = 'UpdateSqlInjectionMatchSet',
  UPDATE_WEB_ACL = 'UpdateWebACL',
  UPDATE_XSS_MATCH_SET = 'UpdateXssMatchSet',
}

export enum Appstream20 {
  ASSOCIATE_FLEET = 'AssociateFleet',
  BATCH_ASSOCIATE_USER_STACK = 'BatchAssociateUserStack',
  BATCH_DISASSOCIATE_USER_STACK = 'BatchDisassociateUserStack',
  COPY_IMAGE = 'CopyImage',
  CREATE_DIRECTORY_CONFIG = 'CreateDirectoryConfig',
  CREATE_FLEET = 'CreateFleet',
  CREATE_IMAGE_BUILDER = 'CreateImageBuilder',
  CREATE_IMAGE_BUILDER_STREAMING_URL = 'CreateImageBuilderStreamingURL',
  CREATE_STACK = 'CreateStack',
  CREATE_STREAMING_URL = 'CreateStreamingURL',
  CREATE_USAGE_REPORT_SUBSCRIPTION = 'CreateUsageReportSubscription',
  CREATE_USER = 'CreateUser',
  DELETE_DIRECTORY_CONFIG = 'DeleteDirectoryConfig',
  DELETE_FLEET = 'DeleteFleet',
  DELETE_IMAGE = 'DeleteImage',
  DELETE_IMAGE_BUILDER = 'DeleteImageBuilder',
  DELETE_IMAGE_PERMISSIONS = 'DeleteImagePermissions',
  DELETE_STACK = 'DeleteStack',
  DELETE_USAGE_REPORT_SUBSCRIPTION = 'DeleteUsageReportSubscription',
  DELETE_USER = 'DeleteUser',
  DESCRIBE_DIRECTORY_CONFIGS = 'DescribeDirectoryConfigs',
  DESCRIBE_FLEETS = 'DescribeFleets',
  DESCRIBE_IMAGE_BUILDERS = 'DescribeImageBuilders',
  DESCRIBE_IMAGE_PERMISSIONS = 'DescribeImagePermissions',
  DESCRIBE_IMAGES = 'DescribeImages',
  DESCRIBE_SESSIONS = 'DescribeSessions',
  DESCRIBE_STACKS = 'DescribeStacks',
  DESCRIBE_USAGE_REPORT_SUBSCRIPTIONS = 'DescribeUsageReportSubscriptions',
  DESCRIBE_USER_STACK_ASSOCIATIONS = 'DescribeUserStackAssociations',
  DESCRIBE_USERS = 'DescribeUsers',
  DISABLE_USER = 'DisableUser',
  DISASSOCIATE_FLEET = 'DisassociateFleet',
  ENABLE_USER = 'EnableUser',
  EXPIRE_SESSION = 'ExpireSession',
  GET_IMAGE_BUILDERS = 'GetImageBuilders',
  GET_PARAMETERS_FOR_THEME_ASSET_UPLOAD = 'GetParametersForThemeAssetUpload',
  LIST_ASSOCIATED_FLEETS = 'ListAssociatedFleets',
  LIST_ASSOCIATED_STACKS = 'ListAssociatedStacks',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_FLEET = 'StartFleet',
  START_IMAGE_BUILDER = 'StartImageBuilder',
  STOP_FLEET = 'StopFleet',
  STOP_IMAGE_BUILDER = 'StopImageBuilder',
  STREAM = 'Stream',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DIRECTORY_CONFIG = 'UpdateDirectoryConfig',
  UPDATE_FLEET = 'UpdateFleet',
  UPDATE_IMAGE_PERMISSIONS = 'UpdateImagePermissions',
  UPDATE_STACK = 'UpdateStack',
}

export enum Quicksight {
  CREATE_ADMIN = 'CreateAdmin',
  CREATE_DASHBOARD = 'CreateDashboard',
  CREATE_GROUP = 'CreateGroup',
  CREATE_GROUP_MEMBERSHIP = 'CreateGroupMembership',
  CREATE_IAM_POLICY_ASSIGNMENT = 'CreateIAMPolicyAssignment',
  CREATE_READER = 'CreateReader',
  CREATE_TEMPLATE = 'CreateTemplate',
  CREATE_TEMPLATE_ALIAS = 'CreateTemplateAlias',
  CREATE_USER = 'CreateUser',
  DELETE_DASHBOARD = 'DeleteDashboard',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_GROUP_MEMBERSHIP = 'DeleteGroupMembership',
  DELETE_IAM_POLICY_ASSIGNMENT = 'DeleteIAMPolicyAssignment',
  DELETE_TEMPLATE = 'DeleteTemplate',
  DELETE_TEMPLATE_ALIAS = 'DeleteTemplateAlias',
  DELETE_USER = 'DeleteUser',
  DELETE_USER_BY_PRINCIPAL_ID = 'DeleteUserByPrincipalId',
  DESCRIBE_DASHBOARD = 'DescribeDashboard',
  DESCRIBE_DASHBOARD_PERMISSIONS = 'DescribeDashboardPermissions',
  DESCRIBE_GROUP = 'DescribeGroup',
  DESCRIBE_IAM_POLICY_ASSIGNMENT = 'DescribeIAMPolicyAssignment',
  DESCRIBE_TEMPLATE = 'DescribeTemplate',
  DESCRIBE_TEMPLATE_ALIAS = 'DescribeTemplateAlias',
  DESCRIBE_TEMPLATE_PERMISSIONS = 'DescribeTemplatePermissions',
  DESCRIBE_USER = 'DescribeUser',
  GET_AUTH_CODE = 'GetAuthCode',
  GET_DASHBOARD_EMBED_URL = 'GetDashboardEmbedUrl',
  GET_GROUP_MAPPING = 'GetGroupMapping',
  LIST_DASHBOARD_VERSIONS = 'ListDashboardVersions',
  LIST_DASHBOARDS = 'ListDashboards',
  LIST_GROUP_MEMBERSHIPS = 'ListGroupMemberships',
  LIST_GROUPS = 'ListGroups',
  LIST_IAM_POLICY_ASSIGNMENTS = 'ListIAMPolicyAssignments',
  LIST_IAM_POLICY_ASSIGNMENTS_FOR_USER = 'ListIAMPolicyAssignmentsForUser',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TEMPLATE_ALIASES = 'ListTemplateAliases',
  LIST_TEMPLATE_VERSIONS = 'ListTemplateVersions',
  LIST_TEMPLATES = 'ListTemplates',
  LIST_USER_GROUPS = 'ListUserGroups',
  LIST_USERS = 'ListUsers',
  REGISTER_USER = 'RegisterUser',
  SEARCH_DIRECTORY_GROUPS = 'SearchDirectoryGroups',
  SET_GROUP_MAPPING = 'SetGroupMapping',
  SUBSCRIBE = 'Subscribe',
  TAG_RESOURCE = 'TagResource',
  UNSUBSCRIBE = 'Unsubscribe',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DASHBOARD = 'UpdateDashboard',
  UPDATE_DASHBOARD_PERMISSIONS = 'UpdateDashboardPermissions',
  UPDATE_DASHBOARD_PUBLISHED_VERSION = 'UpdateDashboardPublishedVersion',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_IAM_POLICY_ASSIGNMENT = 'UpdateIAMPolicyAssignment',
  UPDATE_TEMPLATE = 'UpdateTemplate',
  UPDATE_TEMPLATE_ALIAS = 'UpdateTemplateAlias',
  UPDATE_TEMPLATE_PERMISSIONS = 'UpdateTemplatePermissions',
  UPDATE_USER = 'UpdateUser',
}

export enum Wafv2 {
  ASSOCIATE_WEB_ACL = 'AssociateWebACL',
  CHECK_CAPACITY = 'CheckCapacity',
  CREATE_IP_SET = 'CreateIPSet',
  CREATE_REGEX_PATTERN_SET = 'CreateRegexPatternSet',
  CREATE_RULE_GROUP = 'CreateRuleGroup',
  CREATE_WEB_ACL = 'CreateWebACL',
  DELETE_IP_SET = 'DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'DeleteLoggingConfiguration',
  DELETE_REGEX_PATTERN_SET = 'DeleteRegexPatternSet',
  DELETE_RULE_GROUP = 'DeleteRuleGroup',
  DELETE_WEB_ACL = 'DeleteWebACL',
  DESCRIBE_MANAGED_RULE_GROUP = 'DescribeManagedRuleGroup',
  DISASSOCIATE_WEB_ACL = 'DisassociateWebACL',
  GET_IP_SET = 'GetIPSet',
  GET_LOGGING_CONFIGURATION = 'GetLoggingConfiguration',
  GET_RATE_BASED_STATEMENT_MANAGED_KEYS = 'GetRateBasedStatementManagedKeys',
  GET_REGEX_PATTERN_SET = 'GetRegexPatternSet',
  GET_RULE_GROUP = 'GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'GetSampledRequests',
  GET_WEB_ACL = 'GetWebACL',
  GET_WEB_ACL_FOR_RESOURCE = 'GetWebACLForResource',
  LIST_AVAILABLE_MANAGED_RULE_GROUPS = 'ListAvailableManagedRuleGroups',
  LIST_IP_SETS = 'ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'ListLoggingConfigurations',
  LIST_REGEX_PATTERN_SETS = 'ListRegexPatternSets',
  LIST_RESOURCES_FOR_WEB_ACL = 'ListResourcesForWebACL',
  LIST_RULE_GROUPS = 'ListRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WEB_AC_LS = 'ListWebACLs',
  PUT_LOGGING_CONFIGURATION = 'PutLoggingConfiguration',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_IP_SET = 'UpdateIPSet',
  UPDATE_REGEX_PATTERN_SET = 'UpdateRegexPatternSet',
  UPDATE_RULE_GROUP = 'UpdateRuleGroup',
  UPDATE_WEB_ACL = 'UpdateWebACL',
}

export enum Workspacesapplicationmanager {
  AUTHENTICATE_PACKAGER = 'AuthenticatePackager',
}

export enum Datalifecyclemanager {
  CREATE_LIFECYCLE_POLICY = 'CreateLifecyclePolicy',
  DELETE_LIFECYCLE_POLICY = 'DeleteLifecyclePolicy',
  GET_LIFECYCLE_POLICIES = 'GetLifecyclePolicies',
  GET_LIFECYCLE_POLICY = 'GetLifecyclePolicy',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_LIFECYCLE_POLICY = 'UpdateLifecyclePolicy',
}

export enum Wellarchitectedtool {
  CREATE_WORKLOAD = 'CreateWorkload',
  CREATE_WORKLOAD_SHARE = 'CreateWorkloadShare',
  DELETE_WORKLOAD = 'DeleteWorkload',
  GET_WORKLOAD = 'GetWorkload',
  LIST_WORKLOADS = 'ListWorkloads',
}

export enum Connectorservice {
  GET_CONNECTOR_HEALTH = 'GetConnectorHealth',
  REGISTER_CONNECTOR = 'RegisterConnector',
  VALIDATE_CONNECTOR_ID = 'ValidateConnectorId',
}

export enum Kendra {
  BATCH_DELETE_DOCUMENT = 'BatchDeleteDocument',
  BATCH_PUT_DOCUMENT = 'BatchPutDocument',
  CREATE_DATA_SOURCE = 'CreateDataSource',
  CREATE_FAQ = 'CreateFaq',
  CREATE_INDEX = 'CreateIndex',
  DELETE_FAQ = 'DeleteFaq',
  DELETE_INDEX = 'DeleteIndex',
  DESCRIBE_DATA_SOURCE = 'DescribeDataSource',
  DESCRIBE_FAQ = 'DescribeFaq',
  DESCRIBE_INDEX = 'DescribeIndex',
  LIST_DATA_SOURCE_SYNC_JOBS = 'ListDataSourceSyncJobs',
  LIST_DATA_SOURCES = 'ListDataSources',
  LIST_FAQS = 'ListFaqs',
  LIST_INDICES = 'ListIndices',
  QUERY = 'Query',
  START_DATA_SOURCE_SYNC_JOB = 'StartDataSourceSyncJob',
  STOP_DATA_SOURCE_SYNC_JOB = 'StopDataSourceSyncJob',
  SUBMIT_FEEDBACK = 'SubmitFeedback',
  UPDATE_DATA_SOURCE = 'UpdateDataSource',
  UPDATE_INDEX = 'UpdateIndex',
}

export enum Lightsail {
  ALLOCATE_STATIC_IP = 'AllocateStaticIp',
  ATTACH_DISK = 'AttachDisk',
  ATTACH_INSTANCES_TO_LOAD_BALANCER = 'AttachInstancesToLoadBalancer',
  ATTACH_LOAD_BALANCER_TLS_CERTIFICATE = 'AttachLoadBalancerTlsCertificate',
  ATTACH_STATIC_IP = 'AttachStaticIp',
  CLOSE_INSTANCE_PUBLIC_PORTS = 'CloseInstancePublicPorts',
  COPY_SNAPSHOT = 'CopySnapshot',
  CREATE_CLOUD_FORMATION_STACK = 'CreateCloudFormationStack',
  CREATE_DISK = 'CreateDisk',
  CREATE_DISK_FROM_SNAPSHOT = 'CreateDiskFromSnapshot',
  CREATE_DISK_SNAPSHOT = 'CreateDiskSnapshot',
  CREATE_DOMAIN = 'CreateDomain',
  CREATE_DOMAIN_ENTRY = 'CreateDomainEntry',
  CREATE_INSTANCE_SNAPSHOT = 'CreateInstanceSnapshot',
  CREATE_INSTANCES = 'CreateInstances',
  CREATE_INSTANCES_FROM_SNAPSHOT = 'CreateInstancesFromSnapshot',
  CREATE_KEY_PAIR = 'CreateKeyPair',
  CREATE_LOAD_BALANCER = 'CreateLoadBalancer',
  CREATE_LOAD_BALANCER_TLS_CERTIFICATE = 'CreateLoadBalancerTlsCertificate',
  CREATE_RELATIONAL_DATABASE = 'CreateRelationalDatabase',
  CREATE_RELATIONAL_DATABASE_FROM_SNAPSHOT = 'CreateRelationalDatabaseFromSnapshot',
  CREATE_RELATIONAL_DATABASE_SNAPSHOT = 'CreateRelationalDatabaseSnapshot',
  DELETE_DISK = 'DeleteDisk',
  DELETE_DISK_SNAPSHOT = 'DeleteDiskSnapshot',
  DELETE_DOMAIN = 'DeleteDomain',
  DELETE_DOMAIN_ENTRY = 'DeleteDomainEntry',
  DELETE_INSTANCE = 'DeleteInstance',
  DELETE_INSTANCE_SNAPSHOT = 'DeleteInstanceSnapshot',
  DELETE_KEY_PAIR = 'DeleteKeyPair',
  DELETE_KNOWN_HOST_KEYS = 'DeleteKnownHostKeys',
  DELETE_LOAD_BALANCER = 'DeleteLoadBalancer',
  DELETE_LOAD_BALANCER_TLS_CERTIFICATE = 'DeleteLoadBalancerTlsCertificate',
  DELETE_RELATIONAL_DATABASE = 'DeleteRelationalDatabase',
  DELETE_RELATIONAL_DATABASE_SNAPSHOT = 'DeleteRelationalDatabaseSnapshot',
  DETACH_DISK = 'DetachDisk',
  DETACH_INSTANCES_FROM_LOAD_BALANCER = 'DetachInstancesFromLoadBalancer',
  DETACH_STATIC_IP = 'DetachStaticIp',
  DOWNLOAD_DEFAULT_KEY_PAIR = 'DownloadDefaultKeyPair',
  EXPORT_SNAPSHOT = 'ExportSnapshot',
  GET_ACTIVE_NAMES = 'GetActiveNames',
  GET_BLUEPRINTS = 'GetBlueprints',
  GET_BUNDLES = 'GetBundles',
  GET_CLOUD_FORMATION_STACK_RECORDS = 'GetCloudFormationStackRecords',
  GET_DISK = 'GetDisk',
  GET_DISK_SNAPSHOT = 'GetDiskSnapshot',
  GET_DISK_SNAPSHOTS = 'GetDiskSnapshots',
  GET_DISKS = 'GetDisks',
  GET_DOMAIN = 'GetDomain',
  GET_DOMAINS = 'GetDomains',
  GET_EXPORT_SNAPSHOT_RECORDS = 'GetExportSnapshotRecords',
  GET_INSTANCE = 'GetInstance',
  GET_INSTANCE_ACCESS_DETAILS = 'GetInstanceAccessDetails',
  GET_INSTANCE_METRIC_DATA = 'GetInstanceMetricData',
  GET_INSTANCE_PORT_STATES = 'GetInstancePortStates',
  GET_INSTANCE_SNAPSHOT = 'GetInstanceSnapshot',
  GET_INSTANCE_SNAPSHOTS = 'GetInstanceSnapshots',
  GET_INSTANCE_STATE = 'GetInstanceState',
  GET_INSTANCES = 'GetInstances',
  GET_KEY_PAIR = 'GetKeyPair',
  GET_KEY_PAIRS = 'GetKeyPairs',
  GET_LOAD_BALANCER = 'GetLoadBalancer',
  GET_LOAD_BALANCER_METRIC_DATA = 'GetLoadBalancerMetricData',
  GET_LOAD_BALANCER_TLS_CERTIFICATES = 'GetLoadBalancerTlsCertificates',
  GET_LOAD_BALANCERS = 'GetLoadBalancers',
  GET_OPERATION = 'GetOperation',
  GET_OPERATIONS = 'GetOperations',
  GET_OPERATIONS_FOR_RESOURCE = 'GetOperationsForResource',
  GET_REGIONS = 'GetRegions',
  GET_RELATIONAL_DATABASE = 'GetRelationalDatabase',
  GET_RELATIONAL_DATABASE_BLUEPRINTS = 'GetRelationalDatabaseBlueprints',
  GET_RELATIONAL_DATABASE_BUNDLES = 'GetRelationalDatabaseBundles',
  GET_RELATIONAL_DATABASE_EVENTS = 'GetRelationalDatabaseEvents',
  GET_RELATIONAL_DATABASE_LOG_EVENTS = 'GetRelationalDatabaseLogEvents',
  GET_RELATIONAL_DATABASE_LOG_STREAMS = 'GetRelationalDatabaseLogStreams',
  GET_RELATIONAL_DATABASE_MASTER_USER_PASSWORD = 'GetRelationalDatabaseMasterUserPassword',
  GET_RELATIONAL_DATABASE_METRIC_DATA = 'GetRelationalDatabaseMetricData',
  GET_RELATIONAL_DATABASE_PARAMETERS = 'GetRelationalDatabaseParameters',
  GET_RELATIONAL_DATABASE_SNAPSHOT = 'GetRelationalDatabaseSnapshot',
  GET_RELATIONAL_DATABASE_SNAPSHOTS = 'GetRelationalDatabaseSnapshots',
  GET_RELATIONAL_DATABASES = 'GetRelationalDatabases',
  GET_STATIC_IP = 'GetStaticIp',
  GET_STATIC_IPS = 'GetStaticIps',
  IMPORT_KEY_PAIR = 'ImportKeyPair',
  IS_VPC_PEERED = 'IsVpcPeered',
  OPEN_INSTANCE_PUBLIC_PORTS = 'OpenInstancePublicPorts',
  PEER_VPC = 'PeerVpc',
  PUT_INSTANCE_PUBLIC_PORTS = 'PutInstancePublicPorts',
  REBOOT_INSTANCE = 'RebootInstance',
  REBOOT_RELATIONAL_DATABASE = 'RebootRelationalDatabase',
  RELEASE_STATIC_IP = 'ReleaseStaticIp',
  START_INSTANCE = 'StartInstance',
  START_RELATIONAL_DATABASE = 'StartRelationalDatabase',
  STOP_INSTANCE = 'StopInstance',
  STOP_RELATIONAL_DATABASE = 'StopRelationalDatabase',
  TAG_RESOURCE = 'TagResource',
  UNPEER_VPC = 'UnpeerVpc',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DOMAIN_ENTRY = 'UpdateDomainEntry',
  UPDATE_LOAD_BALANCER_ATTRIBUTE = 'UpdateLoadBalancerAttribute',
  UPDATE_RELATIONAL_DATABASE = 'UpdateRelationalDatabase',
  UPDATE_RELATIONAL_DATABASE_PARAMETERS = 'UpdateRelationalDatabaseParameters',
}

export enum Backupstorage {
  MOUNT_CAPSULE = 'MountCapsule',
}

export enum Cognitosync {
  BULK_PUBLISH = 'BulkPublish',
  DELETE_DATASET = 'DeleteDataset',
  DESCRIBE_DATASET = 'DescribeDataset',
  DESCRIBE_IDENTITY_POOL_USAGE = 'DescribeIdentityPoolUsage',
  DESCRIBE_IDENTITY_USAGE = 'DescribeIdentityUsage',
  GET_BULK_PUBLISH_DETAILS = 'GetBulkPublishDetails',
  GET_COGNITO_EVENTS = 'GetCognitoEvents',
  GET_IDENTITY_POOL_CONFIGURATION = 'GetIdentityPoolConfiguration',
  LIST_DATASETS = 'ListDatasets',
  LIST_IDENTITY_POOL_USAGE = 'ListIdentityPoolUsage',
  LIST_RECORDS = 'ListRecords',
  QUERY_RECORDS = 'QueryRecords',
  REGISTER_DEVICE = 'RegisterDevice',
  SET_COGNITO_EVENTS = 'SetCognitoEvents',
  SET_DATASET_CONFIGURATION = 'SetDatasetConfiguration',
  SET_IDENTITY_POOL_CONFIGURATION = 'SetIdentityPoolConfiguration',
  SUBSCRIBE_TO_DATASET = 'SubscribeToDataset',
  UNSUBSCRIBE_FROM_DATASET = 'UnsubscribeFromDataset',
  UPDATE_RECORDS = 'UpdateRecords',
}

export enum Cloudsearch {
  ADD_TAGS = 'AddTags',
  BUILD_SUGGESTERS = 'BuildSuggesters',
  CREATE_DOMAIN = 'CreateDomain',
  DEFINE_ANALYSIS_SCHEME = 'DefineAnalysisScheme',
  DEFINE_EXPRESSION = 'DefineExpression',
  DEFINE_INDEX_FIELD = 'DefineIndexField',
  DEFINE_SUGGESTER = 'DefineSuggester',
  DELETE_ANALYSIS_SCHEME = 'DeleteAnalysisScheme',
  DELETE_DOMAIN = 'DeleteDomain',
  DELETE_EXPRESSION = 'DeleteExpression',
  DELETE_INDEX_FIELD = 'DeleteIndexField',
  DELETE_SUGGESTER = 'DeleteSuggester',
  DESCRIBE_ANALYSIS_SCHEMES = 'DescribeAnalysisSchemes',
  DESCRIBE_AVAILABILITY_OPTIONS = 'DescribeAvailabilityOptions',
  DESCRIBE_DOMAIN_ENDPOINT_OPTIONS = 'DescribeDomainEndpointOptions',
  DESCRIBE_DOMAINS = 'DescribeDomains',
  DESCRIBE_EXPRESSIONS = 'DescribeExpressions',
  DESCRIBE_INDEX_FIELDS = 'DescribeIndexFields',
  DESCRIBE_SCALING_PARAMETERS = 'DescribeScalingParameters',
  DESCRIBE_SERVICE_ACCESS_POLICIES = 'DescribeServiceAccessPolicies',
  DESCRIBE_SUGGESTERS = 'DescribeSuggesters',
  INDEX_DOCUMENTS = 'IndexDocuments',
  LIST_DOMAIN_NAMES = 'ListDomainNames',
  LIST_TAGS = 'ListTags',
  REMOVE_TAGS = 'RemoveTags',
  UPDATE_AVAILABILITY_OPTIONS = 'UpdateAvailabilityOptions',
  UPDATE_DOMAIN_ENDPOINT_OPTIONS = 'UpdateDomainEndpointOptions',
  UPDATE_SCALING_PARAMETERS = 'UpdateScalingParameters',
  UPDATE_SERVICE_ACCESS_POLICIES = 'UpdateServiceAccessPolicies',
  DOCUMENT = 'document',
  SEARCH = 'search',
  SUGGEST = 'suggest',
}

export enum Elastictranscoder {
  CANCEL_JOB = 'CancelJob',
  CREATE_JOB = 'CreateJob',
  CREATE_PIPELINE = 'CreatePipeline',
  CREATE_PRESET = 'CreatePreset',
  DELETE_PIPELINE = 'DeletePipeline',
  DELETE_PRESET = 'DeletePreset',
  LIST_JOBS_BY_PIPELINE = 'ListJobsByPipeline',
  LIST_JOBS_BY_STATUS = 'ListJobsByStatus',
  LIST_PIPELINES = 'ListPipelines',
  LIST_PRESETS = 'ListPresets',
  READ_JOB = 'ReadJob',
  READ_PIPELINE = 'ReadPipeline',
  READ_PRESET = 'ReadPreset',
  TEST_ROLE = 'TestRole',
  UPDATE_PIPELINE = 'UpdatePipeline',
  UPDATE_PIPELINE_NOTIFICATIONS = 'UpdatePipelineNotifications',
  UPDATE_PIPELINE_STATUS = 'UpdatePipelineStatus',
}

export enum Pricelist {
  DESCRIBE_SERVICES = 'DescribeServices',
  GET_ATTRIBUTE_VALUES = 'GetAttributeValues',
  GET_PRODUCTS = 'GetProducts',
}

export enum Backup {
  COPY_INTO_BACKUP_VAULT = 'CopyIntoBackupVault',
  CREATE_BACKUP_PLAN = 'CreateBackupPlan',
  CREATE_BACKUP_SELECTION = 'CreateBackupSelection',
  CREATE_BACKUP_VAULT = 'CreateBackupVault',
  DELETE_BACKUP_PLAN = 'DeleteBackupPlan',
  DELETE_BACKUP_SELECTION = 'DeleteBackupSelection',
  DELETE_BACKUP_VAULT = 'DeleteBackupVault',
  DELETE_BACKUP_VAULT_ACCESS_POLICY = 'DeleteBackupVaultAccessPolicy',
  DELETE_BACKUP_VAULT_NOTIFICATIONS = 'DeleteBackupVaultNotifications',
  DELETE_RECOVERY_POINT = 'DeleteRecoveryPoint',
  DESCRIBE_BACKUP_JOB = 'DescribeBackupJob',
  DESCRIBE_BACKUP_VAULT = 'DescribeBackupVault',
  DESCRIBE_COPY_JOB = 'DescribeCopyJob',
  DESCRIBE_PROTECTED_RESOURCE = 'DescribeProtectedResource',
  DESCRIBE_RECOVERY_POINT = 'DescribeRecoveryPoint',
  DESCRIBE_RESTORE_JOB = 'DescribeRestoreJob',
  EXPORT_BACKUP_PLAN_TEMPLATE = 'ExportBackupPlanTemplate',
  GET_BACKUP_PLAN = 'GetBackupPlan',
  GET_BACKUP_PLAN_FROM_JSON = 'GetBackupPlanFromJSON',
  GET_BACKUP_PLAN_FROM_TEMPLATE = 'GetBackupPlanFromTemplate',
  GET_BACKUP_SELECTION = 'GetBackupSelection',
  GET_BACKUP_VAULT_ACCESS_POLICY = 'GetBackupVaultAccessPolicy',
  GET_BACKUP_VAULT_NOTIFICATIONS = 'GetBackupVaultNotifications',
  GET_RECOVERY_POINT_RESTORE_METADATA = 'GetRecoveryPointRestoreMetadata',
  GET_SUPPORTED_RESOURCE_TYPES = 'GetSupportedResourceTypes',
  LIST_BACKUP_JOBS = 'ListBackupJobs',
  LIST_BACKUP_PLAN_TEMPLATES = 'ListBackupPlanTemplates',
  LIST_BACKUP_PLAN_VERSIONS = 'ListBackupPlanVersions',
  LIST_BACKUP_PLANS = 'ListBackupPlans',
  LIST_BACKUP_SELECTIONS = 'ListBackupSelections',
  LIST_BACKUP_VAULTS = 'ListBackupVaults',
  LIST_COPY_JOBS = 'ListCopyJobs',
  LIST_PROTECTED_RESOURCES = 'ListProtectedResources',
  LIST_RECOVERY_POINTS_BY_BACKUP_VAULT = 'ListRecoveryPointsByBackupVault',
  LIST_RECOVERY_POINTS_BY_RESOURCE = 'ListRecoveryPointsByResource',
  LIST_RESTORE_JOBS = 'ListRestoreJobs',
  LIST_TAGS = 'ListTags',
  PUT_BACKUP_VAULT_ACCESS_POLICY = 'PutBackupVaultAccessPolicy',
  PUT_BACKUP_VAULT_NOTIFICATIONS = 'PutBackupVaultNotifications',
  START_BACKUP_JOB = 'StartBackupJob',
  START_COPY_JOB = 'StartCopyJob',
  START_RESTORE_JOB = 'StartRestoreJob',
  STOP_BACKUP_JOB = 'StopBackupJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_BACKUP_PLAN = 'UpdateBackupPlan',
  UPDATE_RECOVERY_POINT_LIFECYCLE = 'UpdateRecoveryPointLifecycle',
}

export enum Mobileanalytics {
  GET_FINANCIAL_REPORTS = 'GetFinancialReports',
  GET_REPORTS = 'GetReports',
  PUT_EVENTS = 'PutEvents',
}

export enum Iotdevicetester {
  CHECK_VERSION = 'CheckVersion',
  DOWNLOAD_TEST_SUITE = 'DownloadTestSuite',
  LATEST_IDT = 'LatestIdt',
  SEND_METRICS = 'SendMetrics',
  SUPPORTED_VERSION = 'SupportedVersion',
}

export enum Databasemigrationservice {
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  APPLY_PENDING_MAINTENANCE_ACTION = 'ApplyPendingMaintenanceAction',
  CREATE_ENDPOINT = 'CreateEndpoint',
  CREATE_EVENT_SUBSCRIPTION = 'CreateEventSubscription',
  CREATE_REPLICATION_INSTANCE = 'CreateReplicationInstance',
  CREATE_REPLICATION_SUBNET_GROUP = 'CreateReplicationSubnetGroup',
  CREATE_REPLICATION_TASK = 'CreateReplicationTask',
  DELETE_CERTIFICATE = 'DeleteCertificate',
  DELETE_ENDPOINT = 'DeleteEndpoint',
  DELETE_EVENT_SUBSCRIPTION = 'DeleteEventSubscription',
  DELETE_REPLICATION_INSTANCE = 'DeleteReplicationInstance',
  DELETE_REPLICATION_SUBNET_GROUP = 'DeleteReplicationSubnetGroup',
  DELETE_REPLICATION_TASK = 'DeleteReplicationTask',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_CERTIFICATES = 'DescribeCertificates',
  DESCRIBE_CONNECTIONS = 'DescribeConnections',
  DESCRIBE_ENDPOINT_TYPES = 'DescribeEndpointTypes',
  DESCRIBE_ENDPOINTS = 'DescribeEndpoints',
  DESCRIBE_EVENT_CATEGORIES = 'DescribeEventCategories',
  DESCRIBE_EVENT_SUBSCRIPTIONS = 'DescribeEventSubscriptions',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_ORDERABLE_REPLICATION_INSTANCES = 'DescribeOrderableReplicationInstances',
  DESCRIBE_REFRESH_SCHEMAS_STATUS = 'DescribeRefreshSchemasStatus',
  DESCRIBE_REPLICATION_INSTANCE_TASK_LOGS = 'DescribeReplicationInstanceTaskLogs',
  DESCRIBE_REPLICATION_INSTANCES = 'DescribeReplicationInstances',
  DESCRIBE_REPLICATION_SUBNET_GROUPS = 'DescribeReplicationSubnetGroups',
  DESCRIBE_REPLICATION_TASK_ASSESSMENT_RESULTS = 'DescribeReplicationTaskAssessmentResults',
  DESCRIBE_REPLICATION_TASKS = 'DescribeReplicationTasks',
  DESCRIBE_SCHEMAS = 'DescribeSchemas',
  DESCRIBE_TABLE_STATISTICS = 'DescribeTableStatistics',
  IMPORT_CERTIFICATE = 'ImportCertificate',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_ENDPOINT = 'ModifyEndpoint',
  MODIFY_EVENT_SUBSCRIPTION = 'ModifyEventSubscription',
  MODIFY_REPLICATION_INSTANCE = 'ModifyReplicationInstance',
  MODIFY_REPLICATION_SUBNET_GROUP = 'ModifyReplicationSubnetGroup',
  MODIFY_REPLICATION_TASK = 'ModifyReplicationTask',
  REBOOT_REPLICATION_INSTANCE = 'RebootReplicationInstance',
  REFRESH_SCHEMAS = 'RefreshSchemas',
  RELOAD_TABLES = 'ReloadTables',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  START_REPLICATION_TASK = 'StartReplicationTask',
  START_REPLICATION_TASK_ASSESSMENT = 'StartReplicationTaskAssessment',
  STOP_REPLICATION_TASK = 'StopReplicationTask',
  TEST_CONNECTION = 'TestConnection',
}

export enum Sessionmanagermessagegatewayservice {
  CREATE_CONTROL_CHANNEL = 'CreateControlChannel',
  CREATE_DATA_CHANNEL = 'CreateDataChannel',
  OPEN_CONTROL_CHANNEL = 'OpenControlChannel',
  OPEN_DATA_CHANNEL = 'OpenDataChannel',
}

export enum Artifact {
  ACCEPT_AGREEMENT = 'AcceptAgreement',
  DOWNLOAD_AGREEMENT = 'DownloadAgreement',
  GET = 'Get',
  TERMINATE_AGREEMENT = 'TerminateAgreement',
}

export enum Transcribe {
  CREATE_VOCABULARY = 'CreateVocabulary',
  CREATE_VOCABULARY_FILTER = 'CreateVocabularyFilter',
  DELETE_MEDICAL_TRANSCRIPTION_JOB = 'DeleteMedicalTranscriptionJob',
  DELETE_TRANSCRIPTION_JOB = 'DeleteTranscriptionJob',
  DELETE_VOCABULARY = 'DeleteVocabulary',
  DELETE_VOCABULARY_FILTER = 'DeleteVocabularyFilter',
  GET_MEDICAL_TRANSCRIPTION_JOB = 'GetMedicalTranscriptionJob',
  GET_TRANSCRIPTION_JOB = 'GetTranscriptionJob',
  GET_VOCABULARY = 'GetVocabulary',
  GET_VOCABULARY_FILTER = 'GetVocabularyFilter',
  LIST_MEDICAL_TRANSCRIPTION_JOBS = 'ListMedicalTranscriptionJobs',
  LIST_TRANSCRIPTION_JOBS = 'ListTranscriptionJobs',
  LIST_VOCABULARIES = 'ListVocabularies',
  LIST_VOCABULARY_FILTERS = 'ListVocabularyFilters',
  START_MEDICAL_STREAM_TRANSCRIPTION = 'StartMedicalStreamTranscription',
  START_MEDICAL_TRANSCRIPTION_JOB = 'StartMedicalTranscriptionJob',
  START_STREAM_TRANSCRIPTION = 'StartStreamTranscription',
  START_TRANSCRIPTION_JOB = 'StartTranscriptionJob',
  UPDATE_VOCABULARY = 'UpdateVocabulary',
  UPDATE_VOCABULARY_FILTER = 'UpdateVocabularyFilter',
}

export enum Iqpermissions {
  APPROVE_ACCESS_GRANT = 'ApproveAccessGrant',
}

export enum Elementalmediapackagevod {
  CREATE_ASSET = 'CreateAsset',
  CREATE_PACKAGING_CONFIGURATION = 'CreatePackagingConfiguration',
  CREATE_PACKAGING_GROUP = 'CreatePackagingGroup',
  DELETE_ASSET = 'DeleteAsset',
  DELETE_PACKAGING_CONFIGURATION = 'DeletePackagingConfiguration',
  DELETE_PACKAGING_GROUP = 'DeletePackagingGroup',
  DESCRIBE_ASSET = 'DescribeAsset',
  DESCRIBE_PACKAGING_CONFIGURATION = 'DescribePackagingConfiguration',
  DESCRIBE_PACKAGING_GROUP = 'DescribePackagingGroup',
  LIST_ASSETS = 'ListAssets',
  LIST_PACKAGING_CONFIGURATIONS = 'ListPackagingConfigurations',
  LIST_PACKAGING_GROUPS = 'ListPackagingGroups',
}

export enum Devicefarm {
  CREATE_DEVICE_POOL = 'CreateDevicePool',
  CREATE_INSTANCE_PROFILE = 'CreateInstanceProfile',
  CREATE_NETWORK_PROFILE = 'CreateNetworkProfile',
  CREATE_PROJECT = 'CreateProject',
  CREATE_REMOTE_ACCESS_SESSION = 'CreateRemoteAccessSession',
  CREATE_TEST_GRID_PROJECT = 'CreateTestGridProject',
  CREATE_TEST_GRID_URL = 'CreateTestGridUrl',
  CREATE_UPLOAD = 'CreateUpload',
  CREATE_VPCE_CONFIGURATION = 'CreateVPCEConfiguration',
  DELETE_DEVICE_POOL = 'DeleteDevicePool',
  DELETE_INSTANCE_PROFILE = 'DeleteInstanceProfile',
  DELETE_NETWORK_PROFILE = 'DeleteNetworkProfile',
  DELETE_PROJECT = 'DeleteProject',
  DELETE_REMOTE_ACCESS_SESSION = 'DeleteRemoteAccessSession',
  DELETE_RUN = 'DeleteRun',
  DELETE_TEST_GRID_PROJECT = 'DeleteTestGridProject',
  DELETE_UPLOAD = 'DeleteUpload',
  DELETE_VPCE_CONFIGURATION = 'DeleteVPCEConfiguration',
  GET_ACCOUNT_SETTINGS = 'GetAccountSettings',
  GET_DEVICE = 'GetDevice',
  GET_DEVICE_INSTANCE = 'GetDeviceInstance',
  GET_DEVICE_POOL = 'GetDevicePool',
  GET_DEVICE_POOL_COMPATIBILITY = 'GetDevicePoolCompatibility',
  GET_INSTANCE_PROFILE = 'GetInstanceProfile',
  GET_JOB = 'GetJob',
  GET_NETWORK_PROFILE = 'GetNetworkProfile',
  GET_OFFERING_STATUS = 'GetOfferingStatus',
  GET_PROJECT = 'GetProject',
  GET_REMOTE_ACCESS_SESSION = 'GetRemoteAccessSession',
  GET_RUN = 'GetRun',
  GET_SUITE = 'GetSuite',
  GET_TEST = 'GetTest',
  GET_TEST_GRID_PROJECT = 'GetTestGridProject',
  GET_TEST_GRID_SESSION = 'GetTestGridSession',
  GET_UPLOAD = 'GetUpload',
  GET_VPCE_CONFIGURATION = 'GetVPCEConfiguration',
  INSTALL_TO_REMOTE_ACCESS_SESSION = 'InstallToRemoteAccessSession',
  LIST_ARTIFACTS = 'ListArtifacts',
  LIST_DEVICE_INSTANCES = 'ListDeviceInstances',
  LIST_DEVICE_POOLS = 'ListDevicePools',
  LIST_DEVICES = 'ListDevices',
  LIST_INSTANCE_PROFILES = 'ListInstanceProfiles',
  LIST_JOBS = 'ListJobs',
  LIST_NETWORK_PROFILES = 'ListNetworkProfiles',
  LIST_OFFERING_PROMOTIONS = 'ListOfferingPromotions',
  LIST_OFFERING_TRANSACTIONS = 'ListOfferingTransactions',
  LIST_OFFERINGS = 'ListOfferings',
  LIST_PROJECTS = 'ListProjects',
  LIST_REMOTE_ACCESS_SESSIONS = 'ListRemoteAccessSessions',
  LIST_RUNS = 'ListRuns',
  LIST_SAMPLES = 'ListSamples',
  LIST_SUITES = 'ListSuites',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TEST_GRID_PROJECTS = 'ListTestGridProjects',
  LIST_TEST_GRID_SESSION_ACTIONS = 'ListTestGridSessionActions',
  LIST_TEST_GRID_SESSION_ARTIFACTS = 'ListTestGridSessionArtifacts',
  LIST_TEST_GRID_SESSIONS = 'ListTestGridSessions',
  LIST_TESTS = 'ListTests',
  LIST_UNIQUE_PROBLEMS = 'ListUniqueProblems',
  LIST_UPLOADS = 'ListUploads',
  LIST_VPCE_CONFIGURATIONS = 'ListVPCEConfigurations',
  PURCHASE_OFFERING = 'PurchaseOffering',
  RENEW_OFFERING = 'RenewOffering',
  SCHEDULE_RUN = 'ScheduleRun',
  STOP_JOB = 'StopJob',
  STOP_REMOTE_ACCESS_SESSION = 'StopRemoteAccessSession',
  STOP_RUN = 'StopRun',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DEVICE_INSTANCE = 'UpdateDeviceInstance',
  UPDATE_DEVICE_POOL = 'UpdateDevicePool',
  UPDATE_INSTANCE_PROFILE = 'UpdateInstanceProfile',
  UPDATE_NETWORK_PROFILE = 'UpdateNetworkProfile',
  UPDATE_PROJECT = 'UpdateProject',
  UPDATE_TEST_GRID_PROJECT = 'UpdateTestGridProject',
  UPDATE_UPLOAD = 'UpdateUpload',
  UPDATE_VPCE_CONFIGURATION = 'UpdateVPCEConfiguration',
}

export enum Groundstation {
  CANCEL_CONTACT = 'CancelContact',
  CREATE_CONFIG = 'CreateConfig',
  CREATE_DATAFLOW_ENDPOINT_GROUP = 'CreateDataflowEndpointGroup',
  CREATE_MISSION_PROFILE = 'CreateMissionProfile',
  DELETE_CONFIG = 'DeleteConfig',
  DELETE_DATAFLOW_ENDPOINT_GROUP = 'DeleteDataflowEndpointGroup',
  DELETE_MISSION_PROFILE = 'DeleteMissionProfile',
  DESCRIBE_CONTACT = 'DescribeContact',
  GET_CONFIG = 'GetConfig',
  GET_DATAFLOW_ENDPOINT_GROUP = 'GetDataflowEndpointGroup',
  GET_MINUTE_USAGE = 'GetMinuteUsage',
  GET_MISSION_PROFILE = 'GetMissionProfile',
  GET_SATELLITE = 'GetSatellite',
  LIST_CONFIGS = 'ListConfigs',
  LIST_CONTACTS = 'ListContacts',
  LIST_DATAFLOW_ENDPOINT_GROUPS = 'ListDataflowEndpointGroups',
  LIST_GROUND_STATIONS = 'ListGroundStations',
  LIST_MISSION_PROFILES = 'ListMissionProfiles',
  LIST_SATELLITES = 'ListSatellites',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  RESERVE_CONTACT = 'ReserveContact',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONFIG = 'UpdateConfig',
  UPDATE_MISSION_PROFILE = 'UpdateMissionProfile',
}

export enum Codesigningforfreertos {
  CANCEL_SIGNING_PROFILE = 'CancelSigningProfile',
  DESCRIBE_SIGNING_JOB = 'DescribeSigningJob',
  GET_SIGNING_PLATFORM = 'GetSigningPlatform',
  GET_SIGNING_PROFILE = 'GetSigningProfile',
  LIST_SIGNING_JOBS = 'ListSigningJobs',
  LIST_SIGNING_PLATFORMS = 'ListSigningPlatforms',
  LIST_SIGNING_PROFILES = 'ListSigningProfiles',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_SIGNING_PROFILE = 'PutSigningProfile',
  START_SIGNING_JOB = 'StartSigningJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Purchaseordersconsole {
  MODIFY_PURCHASE_ORDERS = 'ModifyPurchaseOrders',
  VIEW_PURCHASE_ORDERS = 'ViewPurchaseOrders',
}

export enum Resourcegroups {
  CREATE_GROUP = 'CreateGroup',
  DELETE_GROUP = 'DeleteGroup',
  GET_GROUP = 'GetGroup',
  GET_GROUP_QUERY = 'GetGroupQuery',
  GET_TAGS = 'GetTags',
  LIST_GROUP_RESOURCES = 'ListGroupResources',
  LIST_GROUPS = 'ListGroups',
  SEARCH_RESOURCES = 'SearchResources',
  TAG = 'Tag',
  UNTAG = 'Untag',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_GROUP_QUERY = 'UpdateGroupQuery',
}

export enum Iq {
  CREATE_PROJECT = 'CreateProject',
}

export enum Manageapigateway {
  DELETE = 'DELETE',
  GET = 'GET',
  PATCH = 'PATCH',
  POST = 'POST',
  PUT = 'PUT',
  SET_WEB_ACL = 'SetWebACL',
  UPDATE_REST_API_POLICY = 'UpdateRestApiPolicy',
}

export enum Appmesh {
  CREATE_MESH = 'CreateMesh',
  CREATE_ROUTE = 'CreateRoute',
  CREATE_VIRTUAL_NODE = 'CreateVirtualNode',
  CREATE_VIRTUAL_ROUTER = 'CreateVirtualRouter',
  CREATE_VIRTUAL_SERVICE = 'CreateVirtualService',
  DELETE_MESH = 'DeleteMesh',
  DELETE_ROUTE = 'DeleteRoute',
  DELETE_VIRTUAL_NODE = 'DeleteVirtualNode',
  DELETE_VIRTUAL_ROUTER = 'DeleteVirtualRouter',
  DELETE_VIRTUAL_SERVICE = 'DeleteVirtualService',
  DESCRIBE_MESH = 'DescribeMesh',
  DESCRIBE_ROUTE = 'DescribeRoute',
  DESCRIBE_VIRTUAL_NODE = 'DescribeVirtualNode',
  DESCRIBE_VIRTUAL_ROUTER = 'DescribeVirtualRouter',
  DESCRIBE_VIRTUAL_SERVICE = 'DescribeVirtualService',
  LIST_MESHES = 'ListMeshes',
  LIST_ROUTES = 'ListRoutes',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_VIRTUAL_NODES = 'ListVirtualNodes',
  LIST_VIRTUAL_ROUTERS = 'ListVirtualRouters',
  LIST_VIRTUAL_SERVICES = 'ListVirtualServices',
  STREAM_AGGREGATED_RESOURCES = 'StreamAggregatedResources',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_MESH = 'UpdateMesh',
  UPDATE_ROUTE = 'UpdateRoute',
  UPDATE_VIRTUAL_NODE = 'UpdateVirtualNode',
  UPDATE_VIRTUAL_ROUTER = 'UpdateVirtualRouter',
  UPDATE_VIRTUAL_SERVICE = 'UpdateVirtualService',
}

export enum Databasequerymetadataservice {
  CREATE_FAVORITE_QUERY = 'CreateFavoriteQuery',
  CREATE_QUERY_HISTORY = 'CreateQueryHistory',
  DELETE_FAVORITE_QUERIES = 'DeleteFavoriteQueries',
  DELETE_QUERY_HISTORY = 'DeleteQueryHistory',
  DESCRIBE_FAVORITE_QUERIES = 'DescribeFavoriteQueries',
  DESCRIBE_QUERY_HISTORY = 'DescribeQueryHistory',
  GET_QUERY_STRING = 'GetQueryString',
  UPDATE_FAVORITE_QUERY = 'UpdateFavoriteQuery',
  UPDATE_QUERY_HISTORY = 'UpdateQueryHistory',
}

export enum Managedstreamingforkafka {
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_CONFIGURATION = 'CreateConfiguration',
  DELETE_CLUSTER = 'DeleteCluster',
  DESCRIBE_CLUSTER = 'DescribeCluster',
  DESCRIBE_CLUSTER_OPERATION = 'DescribeClusterOperation',
  DESCRIBE_CONFIGURATION = 'DescribeConfiguration',
  DESCRIBE_CONFIGURATION_REVISION = 'DescribeConfigurationRevision',
  GET_BOOTSTRAP_BROKERS = 'GetBootstrapBrokers',
  LIST_CLUSTER_OPERATIONS = 'ListClusterOperations',
  LIST_CLUSTERS = 'ListClusters',
  LIST_CONFIGURATIONS = 'ListConfigurations',
  LIST_NODES = 'ListNodes',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_BROKER_COUNT = 'UpdateBrokerCount',
  UPDATE_BROKER_STORAGE = 'UpdateBrokerStorage',
  UPDATE_CLUSTER_CONFIGURATION = 'UpdateClusterConfiguration',
  UPDATE_MONITORING = 'UpdateMonitoring',
}

export enum Codegurureviewer {
  ASSOCIATE_REPOSITORY = 'AssociateRepository',
  CREATE_CONNECTION_TOKEN = 'CreateConnectionToken',
  DESCRIBE_REPOSITORY_ASSOCIATION = 'DescribeRepositoryAssociation',
  DISASSOCIATE_REPOSITORY = 'DisassociateRepository',
  GET_METRICS_DATA = 'GetMetricsData',
  LIST_REPOSITORY_ASSOCIATIONS = 'ListRepositoryAssociations',
  LIST_THIRD_PARTY_REPOSITORIES = 'ListThirdPartyRepositories',
}

export enum Pinpointsmsandvoiceservice {
  CREATE_CONFIGURATION_SET = 'CreateConfigurationSet',
  CREATE_CONFIGURATION_SET_EVENT_DESTINATION = 'CreateConfigurationSetEventDestination',
  DELETE_CONFIGURATION_SET = 'DeleteConfigurationSet',
  DELETE_CONFIGURATION_SET_EVENT_DESTINATION = 'DeleteConfigurationSetEventDestination',
  GET_CONFIGURATION_SET_EVENT_DESTINATIONS = 'GetConfigurationSetEventDestinations',
  LIST_CONFIGURATION_SETS = 'ListConfigurationSets',
  SEND_VOICE_MESSAGE = 'SendVoiceMessage',
  UPDATE_CONFIGURATION_SET_EVENT_DESTINATION = 'UpdateConfigurationSetEventDestination',
}

export enum Cloudwatch {
  DELETE_ALARMS = 'DeleteAlarms',
  DELETE_ANOMALY_DETECTOR = 'DeleteAnomalyDetector',
  DELETE_DASHBOARDS = 'DeleteDashboards',
  DELETE_INSIGHT_RULES = 'DeleteInsightRules',
  DESCRIBE_ALARM_HISTORY = 'DescribeAlarmHistory',
  DESCRIBE_ALARMS = 'DescribeAlarms',
  DESCRIBE_ALARMS_FOR_METRIC = 'DescribeAlarmsForMetric',
  DESCRIBE_ANOMALY_DETECTORS = 'DescribeAnomalyDetectors',
  DESCRIBE_INSIGHT_RULES = 'DescribeInsightRules',
  DISABLE_ALARM_ACTIONS = 'DisableAlarmActions',
  DISABLE_INSIGHT_RULES = 'DisableInsightRules',
  ENABLE_ALARM_ACTIONS = 'EnableAlarmActions',
  ENABLE_INSIGHT_RULES = 'EnableInsightRules',
  GET_DASHBOARD = 'GetDashboard',
  GET_INSIGHT_RULE_REPORT = 'GetInsightRuleReport',
  GET_METRIC_DATA = 'GetMetricData',
  GET_METRIC_STATISTICS = 'GetMetricStatistics',
  GET_METRIC_WIDGET_IMAGE = 'GetMetricWidgetImage',
  LIST_DASHBOARDS = 'ListDashboards',
  LIST_METRICS = 'ListMetrics',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_ANOMALY_DETECTOR = 'PutAnomalyDetector',
  PUT_DASHBOARD = 'PutDashboard',
  PUT_INSIGHT_RULE = 'PutInsightRule',
  PUT_METRIC_ALARM = 'PutMetricAlarm',
  PUT_METRIC_DATA = 'PutMetricData',
  SET_ALARM_STATE = 'SetAlarmState',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Ec2autoscaling {
  ATTACH_INSTANCES = 'AttachInstances',
  ATTACH_LOAD_BALANCER_TARGET_GROUPS = 'AttachLoadBalancerTargetGroups',
  ATTACH_LOAD_BALANCERS = 'AttachLoadBalancers',
  BATCH_DELETE_SCHEDULED_ACTION = 'BatchDeleteScheduledAction',
  BATCH_PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'BatchPutScheduledUpdateGroupAction',
  COMPLETE_LIFECYCLE_ACTION = 'CompleteLifecycleAction',
  CREATE_AUTO_SCALING_GROUP = 'CreateAutoScalingGroup',
  CREATE_LAUNCH_CONFIGURATION = 'CreateLaunchConfiguration',
  CREATE_OR_UPDATE_TAGS = 'CreateOrUpdateTags',
  DELETE_AUTO_SCALING_GROUP = 'DeleteAutoScalingGroup',
  DELETE_LAUNCH_CONFIGURATION = 'DeleteLaunchConfiguration',
  DELETE_LIFECYCLE_HOOK = 'DeleteLifecycleHook',
  DELETE_NOTIFICATION_CONFIGURATION = 'DeleteNotificationConfiguration',
  DELETE_POLICY = 'DeletePolicy',
  DELETE_SCHEDULED_ACTION = 'DeleteScheduledAction',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_ACCOUNT_LIMITS = 'DescribeAccountLimits',
  DESCRIBE_ADJUSTMENT_TYPES = 'DescribeAdjustmentTypes',
  DESCRIBE_AUTO_SCALING_GROUPS = 'DescribeAutoScalingGroups',
  DESCRIBE_AUTO_SCALING_INSTANCES = 'DescribeAutoScalingInstances',
  DESCRIBE_AUTO_SCALING_NOTIFICATION_TYPES = 'DescribeAutoScalingNotificationTypes',
  DESCRIBE_LAUNCH_CONFIGURATIONS = 'DescribeLaunchConfigurations',
  DESCRIBE_LIFECYCLE_HOOK_TYPES = 'DescribeLifecycleHookTypes',
  DESCRIBE_LIFECYCLE_HOOKS = 'DescribeLifecycleHooks',
  DESCRIBE_LOAD_BALANCER_TARGET_GROUPS = 'DescribeLoadBalancerTargetGroups',
  DESCRIBE_LOAD_BALANCERS = 'DescribeLoadBalancers',
  DESCRIBE_METRIC_COLLECTION_TYPES = 'DescribeMetricCollectionTypes',
  DESCRIBE_NOTIFICATION_CONFIGURATIONS = 'DescribeNotificationConfigurations',
  DESCRIBE_POLICIES = 'DescribePolicies',
  DESCRIBE_SCALING_ACTIVITIES = 'DescribeScalingActivities',
  DESCRIBE_SCALING_PROCESS_TYPES = 'DescribeScalingProcessTypes',
  DESCRIBE_SCHEDULED_ACTIONS = 'DescribeScheduledActions',
  DESCRIBE_TAGS = 'DescribeTags',
  DESCRIBE_TERMINATION_POLICY_TYPES = 'DescribeTerminationPolicyTypes',
  DETACH_INSTANCES = 'DetachInstances',
  DETACH_LOAD_BALANCER_TARGET_GROUPS = 'DetachLoadBalancerTargetGroups',
  DETACH_LOAD_BALANCERS = 'DetachLoadBalancers',
  DISABLE_METRICS_COLLECTION = 'DisableMetricsCollection',
  ENABLE_METRICS_COLLECTION = 'EnableMetricsCollection',
  ENTER_STANDBY = 'EnterStandby',
  EXECUTE_POLICY = 'ExecutePolicy',
  EXIT_STANDBY = 'ExitStandby',
  PUT_LIFECYCLE_HOOK = 'PutLifecycleHook',
  PUT_NOTIFICATION_CONFIGURATION = 'PutNotificationConfiguration',
  PUT_SCALING_POLICY = 'PutScalingPolicy',
  PUT_SCHEDULED_UPDATE_GROUP_ACTION = 'PutScheduledUpdateGroupAction',
  RECORD_LIFECYCLE_ACTION_HEARTBEAT = 'RecordLifecycleActionHeartbeat',
  RESUME_PROCESSES = 'ResumeProcesses',
  SET_DESIRED_CAPACITY = 'SetDesiredCapacity',
  SET_INSTANCE_HEALTH = 'SetInstanceHealth',
  SET_INSTANCE_PROTECTION = 'SetInstanceProtection',
  SUSPEND_PROCESSES = 'SuspendProcesses',
  TERMINATE_INSTANCE_IN_AUTO_SCALING_GROUP = 'TerminateInstanceInAutoScalingGroup',
  UPDATE_AUTO_SCALING_GROUP = 'UpdateAutoScalingGroup',
}

export enum Snowball {
  CANCEL_CLUSTER = 'CancelCluster',
  CANCEL_JOB = 'CancelJob',
  CREATE_ADDRESS = 'CreateAddress',
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_JOB = 'CreateJob',
  DESCRIBE_ADDRESS = 'DescribeAddress',
  DESCRIBE_ADDRESSES = 'DescribeAddresses',
  DESCRIBE_CLUSTER = 'DescribeCluster',
  DESCRIBE_JOB = 'DescribeJob',
  GET_JOB_MANIFEST = 'GetJobManifest',
  GET_JOB_UNLOCK_CODE = 'GetJobUnlockCode',
  GET_SNOWBALL_USAGE = 'GetSnowballUsage',
  LIST_CLUSTER_JOBS = 'ListClusterJobs',
  LIST_CLUSTERS = 'ListClusters',
  LIST_JOBS = 'ListJobs',
  UPDATE_CLUSTER = 'UpdateCluster',
  UPDATE_JOB = 'UpdateJob',
}

export enum Shield {
  ASSOCIATE_DRT_LOG_BUCKET = 'AssociateDRTLogBucket',
  ASSOCIATE_DRT_ROLE = 'AssociateDRTRole',
  CREATE_PROTECTION = 'CreateProtection',
  CREATE_SUBSCRIPTION = 'CreateSubscription',
  DELETE_PROTECTION = 'DeleteProtection',
  DELETE_SUBSCRIPTION = 'DeleteSubscription',
  DESCRIBE_ATTACK = 'DescribeAttack',
  DESCRIBE_DRT_ACCESS = 'DescribeDRTAccess',
  DESCRIBE_EMERGENCY_CONTACT_SETTINGS = 'DescribeEmergencyContactSettings',
  DESCRIBE_PROTECTION = 'DescribeProtection',
  DESCRIBE_SUBSCRIPTION = 'DescribeSubscription',
  DISASSOCIATE_DRT_LOG_BUCKET = 'DisassociateDRTLogBucket',
  DISASSOCIATE_DRT_ROLE = 'DisassociateDRTRole',
  GET_SUBSCRIPTION_STATE = 'GetSubscriptionState',
  LIST_ATTACKS = 'ListAttacks',
  LIST_PROTECTIONS = 'ListProtections',
  UPDATE_EMERGENCY_CONTACT_SETTINGS = 'UpdateEmergencyContactSettings',
  UPDATE_SUBSCRIPTION = 'UpdateSubscription',
}

export enum Secretsmanager {
  CANCEL_ROTATE_SECRET = 'CancelRotateSecret',
  CREATE_SECRET = 'CreateSecret',
  DELETE_RESOURCE_POLICY = 'DeleteResourcePolicy',
  DELETE_SECRET = 'DeleteSecret',
  DESCRIBE_SECRET = 'DescribeSecret',
  GET_RANDOM_PASSWORD = 'GetRandomPassword',
  GET_RESOURCE_POLICY = 'GetResourcePolicy',
  GET_SECRET_VALUE = 'GetSecretValue',
  LIST_SECRET_VERSION_IDS = 'ListSecretVersionIds',
  LIST_SECRETS = 'ListSecrets',
  PUT_RESOURCE_POLICY = 'PutResourcePolicy',
  PUT_SECRET_VALUE = 'PutSecretValue',
  RESTORE_SECRET = 'RestoreSecret',
  ROTATE_SECRET = 'RotateSecret',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_SECRET = 'UpdateSecret',
  UPDATE_SECRET_VERSION_STAGE = 'UpdateSecretVersionStage',
}

export enum Applicationautoscaling {
  DELETE_SCALING_POLICY = 'DeleteScalingPolicy',
  DELETE_SCHEDULED_ACTION = 'DeleteScheduledAction',
  DEREGISTER_SCALABLE_TARGET = 'DeregisterScalableTarget',
  DESCRIBE_SCALABLE_TARGETS = 'DescribeScalableTargets',
  DESCRIBE_SCALING_ACTIVITIES = 'DescribeScalingActivities',
  DESCRIBE_SCALING_POLICIES = 'DescribeScalingPolicies',
  DESCRIBE_SCHEDULED_ACTIONS = 'DescribeScheduledActions',
  PUT_SCALING_POLICY = 'PutScalingPolicy',
  PUT_SCHEDULED_ACTION = 'PutScheduledAction',
  REGISTER_SCALABLE_TARGET = 'RegisterScalableTarget',
}

export enum Fsx {
  CANCEL_DATA_REPOSITORY_TASK = 'CancelDataRepositoryTask',
  CREATE_BACKUP = 'CreateBackup',
  CREATE_DATA_REPOSITORY_TASK = 'CreateDataRepositoryTask',
  CREATE_FILE_SYSTEM = 'CreateFileSystem',
  CREATE_FILE_SYSTEM_FROM_BACKUP = 'CreateFileSystemFromBackup',
  DELETE_BACKUP = 'DeleteBackup',
  DELETE_FILE_SYSTEM = 'DeleteFileSystem',
  DESCRIBE_BACKUPS = 'DescribeBackups',
  DESCRIBE_DATA_REPOSITORY_TASKS = 'DescribeDataRepositoryTasks',
  DESCRIBE_FILE_SYSTEMS = 'DescribeFileSystems',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_FILE_SYSTEM = 'UpdateFileSystem',
}

export enum Amplify {
  CREATE_APP = 'CreateApp',
  CREATE_BACKEND_ENVIRONMENT = 'CreateBackendEnvironment',
  CREATE_BRANCH = 'CreateBranch',
  CREATE_DEPLOYMENT = 'CreateDeployment',
  CREATE_DOMAIN_ASSOCIATION = 'CreateDomainAssociation',
  CREATE_WEB_HOOK = 'CreateWebHook',
  DELETE_APP = 'DeleteApp',
  DELETE_BACKEND_ENVIRONMENT = 'DeleteBackendEnvironment',
  DELETE_BRANCH = 'DeleteBranch',
  DELETE_DOMAIN_ASSOCIATION = 'DeleteDomainAssociation',
  DELETE_JOB = 'DeleteJob',
  DELETE_WEB_HOOK = 'DeleteWebHook',
  GENERATE_ACCESS_LOGS = 'GenerateAccessLogs',
  GET_APP = 'GetApp',
  GET_ARTIFACT_URL = 'GetArtifactUrl',
  GET_BACKEND_ENVIRONMENT = 'GetBackendEnvironment',
  GET_BRANCH = 'GetBranch',
  GET_DOMAIN_ASSOCIATION = 'GetDomainAssociation',
  GET_JOB = 'GetJob',
  GET_WEB_HOOK = 'GetWebHook',
  LIST_APPS = 'ListApps',
  LIST_ARTIFACTS = 'ListArtifacts',
  LIST_BACKEND_ENVIRONMENTS = 'ListBackendEnvironments',
  LIST_BRANCHES = 'ListBranches',
  LIST_DOMAIN_ASSOCIATIONS = 'ListDomainAssociations',
  LIST_JOBS = 'ListJobs',
  LIST_WEB_HOOKS = 'ListWebHooks',
  START_DEPLOYMENT = 'StartDeployment',
  START_JOB = 'StartJob',
  STOP_JOB = 'StopJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APP = 'UpdateApp',
  UPDATE_BRANCH = 'UpdateBranch',
  UPDATE_DOMAIN_ASSOCIATION = 'UpdateDomainAssociation',
  UPDATE_WEB_HOOK = 'UpdateWebHook',
}

export enum Appmeshpreview {
  CREATE_MESH = 'CreateMesh',
  CREATE_ROUTE = 'CreateRoute',
  CREATE_VIRTUAL_NODE = 'CreateVirtualNode',
  CREATE_VIRTUAL_ROUTER = 'CreateVirtualRouter',
  CREATE_VIRTUAL_SERVICE = 'CreateVirtualService',
  DELETE_MESH = 'DeleteMesh',
  DELETE_ROUTE = 'DeleteRoute',
  DELETE_VIRTUAL_NODE = 'DeleteVirtualNode',
  DELETE_VIRTUAL_ROUTER = 'DeleteVirtualRouter',
  DELETE_VIRTUAL_SERVICE = 'DeleteVirtualService',
  DESCRIBE_MESH = 'DescribeMesh',
  DESCRIBE_ROUTE = 'DescribeRoute',
  DESCRIBE_VIRTUAL_NODE = 'DescribeVirtualNode',
  DESCRIBE_VIRTUAL_ROUTER = 'DescribeVirtualRouter',
  DESCRIBE_VIRTUAL_SERVICE = 'DescribeVirtualService',
  LIST_MESHES = 'ListMeshes',
  LIST_ROUTES = 'ListRoutes',
  LIST_VIRTUAL_NODES = 'ListVirtualNodes',
  LIST_VIRTUAL_ROUTERS = 'ListVirtualRouters',
  LIST_VIRTUAL_SERVICES = 'ListVirtualServices',
  STREAM_AGGREGATED_RESOURCES = 'StreamAggregatedResources',
  UPDATE_MESH = 'UpdateMesh',
  UPDATE_ROUTE = 'UpdateRoute',
  UPDATE_VIRTUAL_NODE = 'UpdateVirtualNode',
  UPDATE_VIRTUAL_ROUTER = 'UpdateVirtualRouter',
  UPDATE_VIRTUAL_SERVICE = 'UpdateVirtualService',
}

export enum Kinesisvideostreams {
  CONNECT_AS_MASTER = 'ConnectAsMaster',
  CONNECT_AS_VIEWER = 'ConnectAsViewer',
  CREATE_SIGNALING_CHANNEL = 'CreateSignalingChannel',
  CREATE_STREAM = 'CreateStream',
  DELETE_SIGNALING_CHANNEL = 'DeleteSignalingChannel',
  DELETE_STREAM = 'DeleteStream',
  DESCRIBE_SIGNALING_CHANNEL = 'DescribeSignalingChannel',
  DESCRIBE_STREAM = 'DescribeStream',
  GET_CLIP = 'GetClip',
  GET_DASH_STREAMING_SESSION_URL = 'GetDASHStreamingSessionURL',
  GET_DATA_ENDPOINT = 'GetDataEndpoint',
  GET_HLS_STREAMING_SESSION_URL = 'GetHLSStreamingSessionURL',
  GET_ICE_SERVER_CONFIG = 'GetIceServerConfig',
  GET_MEDIA = 'GetMedia',
  GET_MEDIA_FOR_FRAGMENT_LIST = 'GetMediaForFragmentList',
  GET_SIGNALING_CHANNEL_ENDPOINT = 'GetSignalingChannelEndpoint',
  LIST_FRAGMENTS = 'ListFragments',
  LIST_SIGNALING_CHANNELS = 'ListSignalingChannels',
  LIST_STREAMS = 'ListStreams',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TAGS_FOR_STREAM = 'ListTagsForStream',
  PUT_MEDIA = 'PutMedia',
  SEND_ALEXA_OFFER_TO_MASTER = 'SendAlexaOfferToMaster',
  TAG_RESOURCE = 'TagResource',
  TAG_STREAM = 'TagStream',
  UNTAG_RESOURCE = 'UntagResource',
  UNTAG_STREAM = 'UntagStream',
  UPDATE_DATA_RETENTION = 'UpdateDataRetention',
  UPDATE_SIGNALING_CHANNEL = 'UpdateSignalingChannel',
  UPDATE_STREAM = 'UpdateStream',
}

export enum Apigateway {
  INVALIDATE_CACHE = 'InvalidateCache',
  INVOKE = 'Invoke',
  MANAGE_CONNECTIONS = 'ManageConnections',
}

export enum Elementalmedialive {
  BATCH_UPDATE_SCHEDULE = 'BatchUpdateSchedule',
  CREATE_CHANNEL = 'CreateChannel',
  CREATE_INPUT = 'CreateInput',
  CREATE_INPUT_SECURITY_GROUP = 'CreateInputSecurityGroup',
  CREATE_MULTIPLEX = 'CreateMultiplex',
  CREATE_TAGS = 'CreateTags',
  DELETE_CHANNEL = 'DeleteChannel',
  DELETE_INPUT = 'DeleteInput',
  DELETE_INPUT_SECURITY_GROUP = 'DeleteInputSecurityGroup',
  DELETE_MULTIPLEX = 'DeleteMultiplex',
  DELETE_RESERVATION = 'DeleteReservation',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_CHANNEL = 'DescribeChannel',
  DESCRIBE_INPUT = 'DescribeInput',
  DESCRIBE_INPUT_SECURITY_GROUP = 'DescribeInputSecurityGroup',
  DESCRIBE_MULTIPLEX = 'DescribeMultiplex',
  DESCRIBE_OFFERING = 'DescribeOffering',
  DESCRIBE_RESERVATION = 'DescribeReservation',
  DESCRIBE_SCHEDULE = 'DescribeSchedule',
  LIST_CHANNELS = 'ListChannels',
  LIST_INPUT_SECURITY_GROUPS = 'ListInputSecurityGroups',
  LIST_INPUTS = 'ListInputs',
  LIST_MULTIPLEXES = 'ListMultiplexes',
  LIST_OFFERINGS = 'ListOfferings',
  LIST_RESERVATIONS = 'ListReservations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PURCHASE_OFFERING = 'PurchaseOffering',
  START_CHANNEL = 'StartChannel',
  START_MULTIPLEX = 'StartMultiplex',
  STOP_CHANNEL = 'StopChannel',
  STOP_MULTIPLEX = 'StopMultiplex',
  UPDATE_CHANNEL = 'UpdateChannel',
  UPDATE_CHANNEL_CLASS = 'UpdateChannelClass',
  UPDATE_INPUT = 'UpdateInput',
  UPDATE_INPUT_SECURITY_GROUP = 'UpdateInputSecurityGroup',
  UPDATE_MULTIPLEX = 'UpdateMultiplex',
  UPDATE_RESERVATION = 'UpdateReservation',
}

export enum Keymanagementservice {
  CANCEL_KEY_DELETION = 'CancelKeyDeletion',
  CONNECT_CUSTOM_KEY_STORE = 'ConnectCustomKeyStore',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_CUSTOM_KEY_STORE = 'CreateCustomKeyStore',
  CREATE_GRANT = 'CreateGrant',
  CREATE_KEY = 'CreateKey',
  DECRYPT = 'Decrypt',
  DELETE_ALIAS = 'DeleteAlias',
  DELETE_CUSTOM_KEY_STORE = 'DeleteCustomKeyStore',
  DELETE_IMPORTED_KEY_MATERIAL = 'DeleteImportedKeyMaterial',
  DESCRIBE_CUSTOM_KEY_STORES = 'DescribeCustomKeyStores',
  DESCRIBE_KEY = 'DescribeKey',
  DISABLE_KEY = 'DisableKey',
  DISABLE_KEY_ROTATION = 'DisableKeyRotation',
  DISCONNECT_CUSTOM_KEY_STORE = 'DisconnectCustomKeyStore',
  ENABLE_KEY = 'EnableKey',
  ENABLE_KEY_ROTATION = 'EnableKeyRotation',
  ENCRYPT = 'Encrypt',
  GENERATE_DATA_KEY = 'GenerateDataKey',
  GENERATE_DATA_KEY_PAIR = 'GenerateDataKeyPair',
  GENERATE_DATA_KEY_PAIR_WITHOUT_PLAINTEXT = 'GenerateDataKeyPairWithoutPlaintext',
  GENERATE_DATA_KEY_WITHOUT_PLAINTEXT = 'GenerateDataKeyWithoutPlaintext',
  GENERATE_RANDOM = 'GenerateRandom',
  GET_KEY_POLICY = 'GetKeyPolicy',
  GET_KEY_ROTATION_STATUS = 'GetKeyRotationStatus',
  GET_PARAMETERS_FOR_IMPORT = 'GetParametersForImport',
  GET_PUBLIC_KEY = 'GetPublicKey',
  IMPORT_KEY_MATERIAL = 'ImportKeyMaterial',
  LIST_ALIASES = 'ListAliases',
  LIST_GRANTS = 'ListGrants',
  LIST_KEY_POLICIES = 'ListKeyPolicies',
  LIST_KEYS = 'ListKeys',
  LIST_RESOURCE_TAGS = 'ListResourceTags',
  LIST_RETIRABLE_GRANTS = 'ListRetirableGrants',
  PUT_KEY_POLICY = 'PutKeyPolicy',
  RE_ENCRYPT_FROM = 'ReEncryptFrom',
  RE_ENCRYPT_TO = 'ReEncryptTo',
  RETIRE_GRANT = 'RetireGrant',
  REVOKE_GRANT = 'RevokeGrant',
  SCHEDULE_KEY_DELETION = 'ScheduleKeyDeletion',
  SIGN = 'Sign',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ALIAS = 'UpdateAlias',
  UPDATE_CUSTOM_KEY_STORE = 'UpdateCustomKeyStore',
  UPDATE_KEY_DESCRIPTION = 'UpdateKeyDescription',
  VERIFY = 'Verify',
}

export enum Cloudhsm {
  ADD_TAGS_TO_RESOURCE = 'AddTagsToResource',
  COPY_BACKUP_TO_REGION = 'CopyBackupToRegion',
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_HAPG = 'CreateHapg',
  CREATE_HSM = 'CreateHsm',
  CREATE_LUNA_CLIENT = 'CreateLunaClient',
  DELETE_BACKUP = 'DeleteBackup',
  DELETE_CLUSTER = 'DeleteCluster',
  DELETE_HAPG = 'DeleteHapg',
  DELETE_HSM = 'DeleteHsm',
  DELETE_LUNA_CLIENT = 'DeleteLunaClient',
  DESCRIBE_BACKUPS = 'DescribeBackups',
  DESCRIBE_CLUSTERS = 'DescribeClusters',
  DESCRIBE_HAPG = 'DescribeHapg',
  DESCRIBE_HSM = 'DescribeHsm',
  DESCRIBE_LUNA_CLIENT = 'DescribeLunaClient',
  GET_CONFIG = 'GetConfig',
  INITIALIZE_CLUSTER = 'InitializeCluster',
  LIST_AVAILABLE_ZONES = 'ListAvailableZones',
  LIST_HAPGS = 'ListHapgs',
  LIST_HSMS = 'ListHsms',
  LIST_LUNA_CLIENTS = 'ListLunaClients',
  LIST_TAGS = 'ListTags',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MODIFY_HAPG = 'ModifyHapg',
  MODIFY_HSM = 'ModifyHsm',
  MODIFY_LUNA_CLIENT = 'ModifyLunaClient',
  REMOVE_TAGS_FROM_RESOURCE = 'RemoveTagsFromResource',
  RESTORE_BACKUP = 'RestoreBackup',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Codeguru {
  GET_CODE_GURU_FREE_TRIAL_SUMMARY = 'GetCodeGuruFreeTrialSummary',
}

export enum Ec2 {
  ACCEPT_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'AcceptReservedInstancesExchangeQuote',
  ACCEPT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'AcceptTransitGatewayPeeringAttachment',
  ACCEPT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'AcceptTransitGatewayVpcAttachment',
  ACCEPT_VPC_ENDPOINT_CONNECTIONS = 'AcceptVpcEndpointConnections',
  ACCEPT_VPC_PEERING_CONNECTION = 'AcceptVpcPeeringConnection',
  ADVERTISE_BYOIP_CIDR = 'AdvertiseByoipCidr',
  ALLOCATE_ADDRESS = 'AllocateAddress',
  ALLOCATE_HOSTS = 'AllocateHosts',
  APPLY_SECURITY_GROUPS_TO_CLIENT_VPN_TARGET_NETWORK = 'ApplySecurityGroupsToClientVpnTargetNetwork',
  ASSIGN_IPV_6_ADDRESSES = 'AssignIpv6Addresses',
  ASSIGN_PRIVATE_IP_ADDRESSES = 'AssignPrivateIpAddresses',
  ASSOCIATE_ADDRESS = 'AssociateAddress',
  ASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'AssociateClientVpnTargetNetwork',
  ASSOCIATE_DHCP_OPTIONS = 'AssociateDhcpOptions',
  ASSOCIATE_IAM_INSTANCE_PROFILE = 'AssociateIamInstanceProfile',
  ASSOCIATE_ROUTE_TABLE = 'AssociateRouteTable',
  ASSOCIATE_SUBNET_CIDR_BLOCK = 'AssociateSubnetCidrBlock',
  ASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'AssociateTransitGatewayMulticastDomain',
  ASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'AssociateTransitGatewayRouteTable',
  ASSOCIATE_VPC_CIDR_BLOCK = 'AssociateVpcCidrBlock',
  ATTACH_CLASSIC_LINK_VPC = 'AttachClassicLinkVpc',
  ATTACH_INTERNET_GATEWAY = 'AttachInternetGateway',
  ATTACH_NETWORK_INTERFACE = 'AttachNetworkInterface',
  ATTACH_VOLUME = 'AttachVolume',
  ATTACH_VPN_GATEWAY = 'AttachVpnGateway',
  AUTHORIZE_CLIENT_VPN_INGRESS = 'AuthorizeClientVpnIngress',
  AUTHORIZE_SECURITY_GROUP_EGRESS = 'AuthorizeSecurityGroupEgress',
  AUTHORIZE_SECURITY_GROUP_INGRESS = 'AuthorizeSecurityGroupIngress',
  BUNDLE_INSTANCE = 'BundleInstance',
  CANCEL_BUNDLE_TASK = 'CancelBundleTask',
  CANCEL_CAPACITY_RESERVATION = 'CancelCapacityReservation',
  CANCEL_CONVERSION_TASK = 'CancelConversionTask',
  CANCEL_EXPORT_TASK = 'CancelExportTask',
  CANCEL_IMPORT_TASK = 'CancelImportTask',
  CANCEL_RESERVED_INSTANCES_LISTING = 'CancelReservedInstancesListing',
  CANCEL_SPOT_FLEET_REQUESTS = 'CancelSpotFleetRequests',
  CANCEL_SPOT_INSTANCE_REQUESTS = 'CancelSpotInstanceRequests',
  CONFIRM_PRODUCT_INSTANCE = 'ConfirmProductInstance',
  COPY_FPGA_IMAGE = 'CopyFpgaImage',
  COPY_IMAGE = 'CopyImage',
  COPY_SNAPSHOT = 'CopySnapshot',
  CREATE_CAPACITY_RESERVATION = 'CreateCapacityReservation',
  CREATE_CLIENT_VPN_ENDPOINT = 'CreateClientVpnEndpoint',
  CREATE_CLIENT_VPN_ROUTE = 'CreateClientVpnRoute',
  CREATE_CUSTOMER_GATEWAY = 'CreateCustomerGateway',
  CREATE_DEFAULT_SUBNET = 'CreateDefaultSubnet',
  CREATE_DEFAULT_VPC = 'CreateDefaultVpc',
  CREATE_DHCP_OPTIONS = 'CreateDhcpOptions',
  CREATE_EGRESS_ONLY_INTERNET_GATEWAY = 'CreateEgressOnlyInternetGateway',
  CREATE_FLEET = 'CreateFleet',
  CREATE_FLOW_LOGS = 'CreateFlowLogs',
  CREATE_FPGA_IMAGE = 'CreateFpgaImage',
  CREATE_IMAGE = 'CreateImage',
  CREATE_INSTANCE_EXPORT_TASK = 'CreateInstanceExportTask',
  CREATE_INTERNET_GATEWAY = 'CreateInternetGateway',
  CREATE_KEY_PAIR = 'CreateKeyPair',
  CREATE_LAUNCH_TEMPLATE = 'CreateLaunchTemplate',
  CREATE_LAUNCH_TEMPLATE_VERSION = 'CreateLaunchTemplateVersion',
  CREATE_LOCAL_GATEWAY_ROUTE = 'CreateLocalGatewayRoute',
  CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'CreateLocalGatewayRouteTableVpcAssociation',
  CREATE_NAT_GATEWAY = 'CreateNatGateway',
  CREATE_NETWORK_ACL = 'CreateNetworkAcl',
  CREATE_NETWORK_ACL_ENTRY = 'CreateNetworkAclEntry',
  CREATE_NETWORK_INTERFACE = 'CreateNetworkInterface',
  CREATE_NETWORK_INTERFACE_PERMISSION = 'CreateNetworkInterfacePermission',
  CREATE_PLACEMENT_GROUP = 'CreatePlacementGroup',
  CREATE_RESERVED_INSTANCES_LISTING = 'CreateReservedInstancesListing',
  CREATE_ROUTE = 'CreateRoute',
  CREATE_ROUTE_TABLE = 'CreateRouteTable',
  CREATE_SECURITY_GROUP = 'CreateSecurityGroup',
  CREATE_SNAPSHOT = 'CreateSnapshot',
  CREATE_SNAPSHOTS = 'CreateSnapshots',
  CREATE_SPOT_DATAFEED_SUBSCRIPTION = 'CreateSpotDatafeedSubscription',
  CREATE_SUBNET = 'CreateSubnet',
  CREATE_TAGS = 'CreateTags',
  CREATE_TRAFFIC_MIRROR_FILTER = 'CreateTrafficMirrorFilter',
  CREATE_TRAFFIC_MIRROR_FILTER_RULE = 'CreateTrafficMirrorFilterRule',
  CREATE_TRAFFIC_MIRROR_SESSION = 'CreateTrafficMirrorSession',
  CREATE_TRAFFIC_MIRROR_TARGET = 'CreateTrafficMirrorTarget',
  CREATE_TRANSIT_GATEWAY = 'CreateTransitGateway',
  CREATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'CreateTransitGatewayMulticastDomain',
  CREATE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'CreateTransitGatewayPeeringAttachment',
  CREATE_TRANSIT_GATEWAY_ROUTE = 'CreateTransitGatewayRoute',
  CREATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'CreateTransitGatewayRouteTable',
  CREATE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'CreateTransitGatewayVpcAttachment',
  CREATE_VOLUME = 'CreateVolume',
  CREATE_VPC = 'CreateVpc',
  CREATE_VPC_ENDPOINT = 'CreateVpcEndpoint',
  CREATE_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'CreateVpcEndpointConnectionNotification',
  CREATE_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'CreateVpcEndpointServiceConfiguration',
  CREATE_VPC_PEERING_CONNECTION = 'CreateVpcPeeringConnection',
  CREATE_VPN_CONNECTION = 'CreateVpnConnection',
  CREATE_VPN_CONNECTION_ROUTE = 'CreateVpnConnectionRoute',
  CREATE_VPN_GATEWAY = 'CreateVpnGateway',
  DELETE_CLIENT_VPN_ENDPOINT = 'DeleteClientVpnEndpoint',
  DELETE_CLIENT_VPN_ROUTE = 'DeleteClientVpnRoute',
  DELETE_CUSTOMER_GATEWAY = 'DeleteCustomerGateway',
  DELETE_DHCP_OPTIONS = 'DeleteDhcpOptions',
  DELETE_EGRESS_ONLY_INTERNET_GATEWAY = 'DeleteEgressOnlyInternetGateway',
  DELETE_FLEETS = 'DeleteFleets',
  DELETE_FLOW_LOGS = 'DeleteFlowLogs',
  DELETE_FPGA_IMAGE = 'DeleteFpgaImage',
  DELETE_INTERNET_GATEWAY = 'DeleteInternetGateway',
  DELETE_KEY_PAIR = 'DeleteKeyPair',
  DELETE_LAUNCH_TEMPLATE = 'DeleteLaunchTemplate',
  DELETE_LAUNCH_TEMPLATE_VERSIONS = 'DeleteLaunchTemplateVersions',
  DELETE_LOCAL_GATEWAY_ROUTE = 'DeleteLocalGatewayRoute',
  DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION = 'DeleteLocalGatewayRouteTableVpcAssociation',
  DELETE_NAT_GATEWAY = 'DeleteNatGateway',
  DELETE_NETWORK_ACL = 'DeleteNetworkAcl',
  DELETE_NETWORK_ACL_ENTRY = 'DeleteNetworkAclEntry',
  DELETE_NETWORK_INTERFACE = 'DeleteNetworkInterface',
  DELETE_NETWORK_INTERFACE_PERMISSION = 'DeleteNetworkInterfacePermission',
  DELETE_PLACEMENT_GROUP = 'DeletePlacementGroup',
  DELETE_ROUTE = 'DeleteRoute',
  DELETE_ROUTE_TABLE = 'DeleteRouteTable',
  DELETE_SECURITY_GROUP = 'DeleteSecurityGroup',
  DELETE_SNAPSHOT = 'DeleteSnapshot',
  DELETE_SPOT_DATAFEED_SUBSCRIPTION = 'DeleteSpotDatafeedSubscription',
  DELETE_SUBNET = 'DeleteSubnet',
  DELETE_TAGS = 'DeleteTags',
  DELETE_TRAFFIC_MIRROR_FILTER = 'DeleteTrafficMirrorFilter',
  DELETE_TRAFFIC_MIRROR_FILTER_RULE = 'DeleteTrafficMirrorFilterRule',
  DELETE_TRAFFIC_MIRROR_SESSION = 'DeleteTrafficMirrorSession',
  DELETE_TRAFFIC_MIRROR_TARGET = 'DeleteTrafficMirrorTarget',
  DELETE_TRANSIT_GATEWAY = 'DeleteTransitGateway',
  DELETE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'DeleteTransitGatewayMulticastDomain',
  DELETE_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'DeleteTransitGatewayPeeringAttachment',
  DELETE_TRANSIT_GATEWAY_ROUTE = 'DeleteTransitGatewayRoute',
  DELETE_TRANSIT_GATEWAY_ROUTE_TABLE = 'DeleteTransitGatewayRouteTable',
  DELETE_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'DeleteTransitGatewayVpcAttachment',
  DELETE_VOLUME = 'DeleteVolume',
  DELETE_VPC = 'DeleteVpc',
  DELETE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'DeleteVpcEndpointConnectionNotifications',
  DELETE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'DeleteVpcEndpointServiceConfigurations',
  DELETE_VPC_ENDPOINTS = 'DeleteVpcEndpoints',
  DELETE_VPC_PEERING_CONNECTION = 'DeleteVpcPeeringConnection',
  DELETE_VPN_CONNECTION = 'DeleteVpnConnection',
  DELETE_VPN_CONNECTION_ROUTE = 'DeleteVpnConnectionRoute',
  DELETE_VPN_GATEWAY = 'DeleteVpnGateway',
  DEPROVISION_BYOIP_CIDR = 'DeprovisionByoipCidr',
  DEREGISTER_IMAGE = 'DeregisterImage',
  DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'DeregisterTransitGatewayMulticastGroupMembers',
  DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'DeregisterTransitGatewayMulticastGroupSources',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_ADDRESSES = 'DescribeAddresses',
  DESCRIBE_AGGREGATE_ID_FORMAT = 'DescribeAggregateIdFormat',
  DESCRIBE_AVAILABILITY_ZONES = 'DescribeAvailabilityZones',
  DESCRIBE_BUNDLE_TASKS = 'DescribeBundleTasks',
  DESCRIBE_BYOIP_CIDRS = 'DescribeByoipCidrs',
  DESCRIBE_CAPACITY_RESERVATIONS = 'DescribeCapacityReservations',
  DESCRIBE_CLASSIC_LINK_INSTANCES = 'DescribeClassicLinkInstances',
  DESCRIBE_CLIENT_VPN_AUTHORIZATION_RULES = 'DescribeClientVpnAuthorizationRules',
  DESCRIBE_CLIENT_VPN_CONNECTIONS = 'DescribeClientVpnConnections',
  DESCRIBE_CLIENT_VPN_ENDPOINTS = 'DescribeClientVpnEndpoints',
  DESCRIBE_CLIENT_VPN_ROUTES = 'DescribeClientVpnRoutes',
  DESCRIBE_CLIENT_VPN_TARGET_NETWORKS = 'DescribeClientVpnTargetNetworks',
  DESCRIBE_CONVERSION_TASKS = 'DescribeConversionTasks',
  DESCRIBE_CUSTOMER_GATEWAYS = 'DescribeCustomerGateways',
  DESCRIBE_DHCP_OPTIONS = 'DescribeDhcpOptions',
  DESCRIBE_EGRESS_ONLY_INTERNET_GATEWAYS = 'DescribeEgressOnlyInternetGateways',
  DESCRIBE_ELASTIC_GPUS = 'DescribeElasticGpus',
  DESCRIBE_EXPORT_IMAGE_TASKS = 'DescribeExportImageTasks',
  DESCRIBE_EXPORT_TASKS = 'DescribeExportTasks',
  DESCRIBE_FAST_SNAPSHOT_RESTORES = 'DescribeFastSnapshotRestores',
  DESCRIBE_FLEET_HISTORY = 'DescribeFleetHistory',
  DESCRIBE_FLEET_INSTANCES = 'DescribeFleetInstances',
  DESCRIBE_FLEETS = 'DescribeFleets',
  DESCRIBE_FLOW_LOGS = 'DescribeFlowLogs',
  DESCRIBE_FPGA_IMAGE_ATTRIBUTE = 'DescribeFpgaImageAttribute',
  DESCRIBE_FPGA_IMAGES = 'DescribeFpgaImages',
  DESCRIBE_HOST_RESERVATION_OFFERINGS = 'DescribeHostReservationOfferings',
  DESCRIBE_HOST_RESERVATIONS = 'DescribeHostReservations',
  DESCRIBE_HOSTS = 'DescribeHosts',
  DESCRIBE_IAM_INSTANCE_PROFILE_ASSOCIATIONS = 'DescribeIamInstanceProfileAssociations',
  DESCRIBE_ID_FORMAT = 'DescribeIdFormat',
  DESCRIBE_IDENTITY_ID_FORMAT = 'DescribeIdentityIdFormat',
  DESCRIBE_IMAGE_ATTRIBUTE = 'DescribeImageAttribute',
  DESCRIBE_IMAGES = 'DescribeImages',
  DESCRIBE_IMPORT_IMAGE_TASKS = 'DescribeImportImageTasks',
  DESCRIBE_IMPORT_SNAPSHOT_TASKS = 'DescribeImportSnapshotTasks',
  DESCRIBE_INSTANCE_ATTRIBUTE = 'DescribeInstanceAttribute',
  DESCRIBE_INSTANCE_CREDIT_SPECIFICATIONS = 'DescribeInstanceCreditSpecifications',
  DESCRIBE_INSTANCE_STATUS = 'DescribeInstanceStatus',
  DESCRIBE_INSTANCE_TYPES = 'DescribeInstanceTypes',
  DESCRIBE_INSTANCES = 'DescribeInstances',
  DESCRIBE_INTERNET_GATEWAYS = 'DescribeInternetGateways',
  DESCRIBE_KEY_PAIRS = 'DescribeKeyPairs',
  DESCRIBE_LAUNCH_TEMPLATE_VERSIONS = 'DescribeLaunchTemplateVersions',
  DESCRIBE_LAUNCH_TEMPLATES = 'DescribeLaunchTemplates',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATIONS = 'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATIONS = 'DescribeLocalGatewayRouteTableVpcAssociations',
  DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLES = 'DescribeLocalGatewayRouteTables',
  DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUPS = 'DescribeLocalGatewayVirtualInterfaceGroups',
  DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACES = 'DescribeLocalGatewayVirtualInterfaces',
  DESCRIBE_LOCAL_GATEWAYS = 'DescribeLocalGateways',
  DESCRIBE_MOVING_ADDRESSES = 'DescribeMovingAddresses',
  DESCRIBE_NAT_GATEWAYS = 'DescribeNatGateways',
  DESCRIBE_NETWORK_ACLS = 'DescribeNetworkAcls',
  DESCRIBE_NETWORK_INTERFACE_ATTRIBUTE = 'DescribeNetworkInterfaceAttribute',
  DESCRIBE_NETWORK_INTERFACE_PERMISSIONS = 'DescribeNetworkInterfacePermissions',
  DESCRIBE_NETWORK_INTERFACES = 'DescribeNetworkInterfaces',
  DESCRIBE_PLACEMENT_GROUPS = 'DescribePlacementGroups',
  DESCRIBE_PREFIX_LISTS = 'DescribePrefixLists',
  DESCRIBE_PRINCIPAL_ID_FORMAT = 'DescribePrincipalIdFormat',
  DESCRIBE_PUBLIC_IPV_4_POOLS = 'DescribePublicIpv4Pools',
  DESCRIBE_REGIONS = 'DescribeRegions',
  DESCRIBE_RESERVED_INSTANCES = 'DescribeReservedInstances',
  DESCRIBE_RESERVED_INSTANCES_LISTINGS = 'DescribeReservedInstancesListings',
  DESCRIBE_RESERVED_INSTANCES_MODIFICATIONS = 'DescribeReservedInstancesModifications',
  DESCRIBE_RESERVED_INSTANCES_OFFERINGS = 'DescribeReservedInstancesOfferings',
  DESCRIBE_ROUTE_TABLES = 'DescribeRouteTables',
  DESCRIBE_SCHEDULED_INSTANCE_AVAILABILITY = 'DescribeScheduledInstanceAvailability',
  DESCRIBE_SCHEDULED_INSTANCES = 'DescribeScheduledInstances',
  DESCRIBE_SECURITY_GROUP_REFERENCES = 'DescribeSecurityGroupReferences',
  DESCRIBE_SECURITY_GROUPS = 'DescribeSecurityGroups',
  DESCRIBE_SNAPSHOT_ATTRIBUTE = 'DescribeSnapshotAttribute',
  DESCRIBE_SNAPSHOTS = 'DescribeSnapshots',
  DESCRIBE_SPOT_DATAFEED_SUBSCRIPTION = 'DescribeSpotDatafeedSubscription',
  DESCRIBE_SPOT_FLEET_INSTANCES = 'DescribeSpotFleetInstances',
  DESCRIBE_SPOT_FLEET_REQUEST_HISTORY = 'DescribeSpotFleetRequestHistory',
  DESCRIBE_SPOT_FLEET_REQUESTS = 'DescribeSpotFleetRequests',
  DESCRIBE_SPOT_INSTANCE_REQUESTS = 'DescribeSpotInstanceRequests',
  DESCRIBE_SPOT_PRICE_HISTORY = 'DescribeSpotPriceHistory',
  DESCRIBE_STALE_SECURITY_GROUPS = 'DescribeStaleSecurityGroups',
  DESCRIBE_SUBNETS = 'DescribeSubnets',
  DESCRIBE_TAGS = 'DescribeTags',
  DESCRIBE_TRAFFIC_MIRROR_FILTERS = 'DescribeTrafficMirrorFilters',
  DESCRIBE_TRAFFIC_MIRROR_SESSIONS = 'DescribeTrafficMirrorSessions',
  DESCRIBE_TRAFFIC_MIRROR_TARGETS = 'DescribeTrafficMirrorTargets',
  DESCRIBE_TRANSIT_GATEWAY_ATTACHMENTS = 'DescribeTransitGatewayAttachments',
  DESCRIBE_TRANSIT_GATEWAY_MULTICAST_DOMAINS = 'DescribeTransitGatewayMulticastDomains',
  DESCRIBE_TRANSIT_GATEWAY_PEERING_ATTACHMENTS = 'DescribeTransitGatewayPeeringAttachments',
  DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLES = 'DescribeTransitGatewayRouteTables',
  DESCRIBE_TRANSIT_GATEWAY_VPC_ATTACHMENTS = 'DescribeTransitGatewayVpcAttachments',
  DESCRIBE_TRANSIT_GATEWAYS = 'DescribeTransitGateways',
  DESCRIBE_VOLUME_ATTRIBUTE = 'DescribeVolumeAttribute',
  DESCRIBE_VOLUME_STATUS = 'DescribeVolumeStatus',
  DESCRIBE_VOLUMES = 'DescribeVolumes',
  DESCRIBE_VOLUMES_MODIFICATIONS = 'DescribeVolumesModifications',
  DESCRIBE_VPC_ATTRIBUTE = 'DescribeVpcAttribute',
  DESCRIBE_VPC_CLASSIC_LINK = 'DescribeVpcClassicLink',
  DESCRIBE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'DescribeVpcClassicLinkDnsSupport',
  DESCRIBE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS = 'DescribeVpcEndpointConnectionNotifications',
  DESCRIBE_VPC_ENDPOINT_CONNECTIONS = 'DescribeVpcEndpointConnections',
  DESCRIBE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS = 'DescribeVpcEndpointServiceConfigurations',
  DESCRIBE_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'DescribeVpcEndpointServicePermissions',
  DESCRIBE_VPC_ENDPOINT_SERVICES = 'DescribeVpcEndpointServices',
  DESCRIBE_VPC_ENDPOINTS = 'DescribeVpcEndpoints',
  DESCRIBE_VPC_PEERING_CONNECTIONS = 'DescribeVpcPeeringConnections',
  DESCRIBE_VPCS = 'DescribeVpcs',
  DESCRIBE_VPN_CONNECTIONS = 'DescribeVpnConnections',
  DESCRIBE_VPN_GATEWAYS = 'DescribeVpnGateways',
  DETACH_CLASSIC_LINK_VPC = 'DetachClassicLinkVpc',
  DETACH_INTERNET_GATEWAY = 'DetachInternetGateway',
  DETACH_NETWORK_INTERFACE = 'DetachNetworkInterface',
  DETACH_VOLUME = 'DetachVolume',
  DETACH_VPN_GATEWAY = 'DetachVpnGateway',
  DISABLE_EBS_ENCRYPTION_BY_DEFAULT = 'DisableEbsEncryptionByDefault',
  DISABLE_FAST_SNAPSHOT_RESTORES = 'DisableFastSnapshotRestores',
  DISABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'DisableTransitGatewayRouteTablePropagation',
  DISABLE_VGW_ROUTE_PROPAGATION = 'DisableVgwRoutePropagation',
  DISABLE_VPC_CLASSIC_LINK = 'DisableVpcClassicLink',
  DISABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'DisableVpcClassicLinkDnsSupport',
  DISASSOCIATE_ADDRESS = 'DisassociateAddress',
  DISASSOCIATE_CLIENT_VPN_TARGET_NETWORK = 'DisassociateClientVpnTargetNetwork',
  DISASSOCIATE_IAM_INSTANCE_PROFILE = 'DisassociateIamInstanceProfile',
  DISASSOCIATE_ROUTE_TABLE = 'DisassociateRouteTable',
  DISASSOCIATE_SUBNET_CIDR_BLOCK = 'DisassociateSubnetCidrBlock',
  DISASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN = 'DisassociateTransitGatewayMulticastDomain',
  DISASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE = 'DisassociateTransitGatewayRouteTable',
  DISASSOCIATE_VPC_CIDR_BLOCK = 'DisassociateVpcCidrBlock',
  ENABLE_EBS_ENCRYPTION_BY_DEFAULT = 'EnableEbsEncryptionByDefault',
  ENABLE_FAST_SNAPSHOT_RESTORES = 'EnableFastSnapshotRestores',
  ENABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION = 'EnableTransitGatewayRouteTablePropagation',
  ENABLE_VGW_ROUTE_PROPAGATION = 'EnableVgwRoutePropagation',
  ENABLE_VOLUME_IO = 'EnableVolumeIO',
  ENABLE_VPC_CLASSIC_LINK = 'EnableVpcClassicLink',
  ENABLE_VPC_CLASSIC_LINK_DNS_SUPPORT = 'EnableVpcClassicLinkDnsSupport',
  EXPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ExportClientVpnClientCertificateRevocationList',
  EXPORT_CLIENT_VPN_CLIENT_CONFIGURATION = 'ExportClientVpnClientConfiguration',
  EXPORT_IMAGE = 'ExportImage',
  EXPORT_TRANSIT_GATEWAY_ROUTES = 'ExportTransitGatewayRoutes',
  GET_CAPACITY_RESERVATION_USAGE = 'GetCapacityReservationUsage',
  GET_CONSOLE_OUTPUT = 'GetConsoleOutput',
  GET_CONSOLE_SCREENSHOT = 'GetConsoleScreenshot',
  GET_DEFAULT_CREDIT_SPECIFICATION = 'GetDefaultCreditSpecification',
  GET_EBS_DEFAULT_KMS_KEY_ID = 'GetEbsDefaultKmsKeyId',
  GET_EBS_ENCRYPTION_BY_DEFAULT = 'GetEbsEncryptionByDefault',
  GET_HOST_RESERVATION_PURCHASE_PREVIEW = 'GetHostReservationPurchasePreview',
  GET_LAUNCH_TEMPLATE_DATA = 'GetLaunchTemplateData',
  GET_PASSWORD_DATA = 'GetPasswordData',
  GET_RESERVED_INSTANCES_EXCHANGE_QUOTE = 'GetReservedInstancesExchangeQuote',
  GET_TRANSIT_GATEWAY_ATTACHMENT_PROPAGATIONS = 'GetTransitGatewayAttachmentPropagations',
  GET_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS = 'GetTransitGatewayMulticastDomainAssociations',
  GET_TRANSIT_GATEWAY_ROUTE_TABLE_ASSOCIATIONS = 'GetTransitGatewayRouteTableAssociations',
  GET_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATIONS = 'GetTransitGatewayRouteTablePropagations',
  IMPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST = 'ImportClientVpnClientCertificateRevocationList',
  IMPORT_IMAGE = 'ImportImage',
  IMPORT_INSTANCE = 'ImportInstance',
  IMPORT_KEY_PAIR = 'ImportKeyPair',
  IMPORT_SNAPSHOT = 'ImportSnapshot',
  IMPORT_VOLUME = 'ImportVolume',
  MODIFY_CAPACITY_RESERVATION = 'ModifyCapacityReservation',
  MODIFY_CLIENT_VPN_ENDPOINT = 'ModifyClientVpnEndpoint',
  MODIFY_DEFAULT_CREDIT_SPECIFICATION = 'ModifyDefaultCreditSpecification',
  MODIFY_EBS_DEFAULT_KMS_KEY_ID = 'ModifyEbsDefaultKmsKeyId',
  MODIFY_FLEET = 'ModifyFleet',
  MODIFY_FPGA_IMAGE_ATTRIBUTE = 'ModifyFpgaImageAttribute',
  MODIFY_HOSTS = 'ModifyHosts',
  MODIFY_ID_FORMAT = 'ModifyIdFormat',
  MODIFY_IDENTITY_ID_FORMAT = 'ModifyIdentityIdFormat',
  MODIFY_IMAGE_ATTRIBUTE = 'ModifyImageAttribute',
  MODIFY_INSTANCE_ATTRIBUTE = 'ModifyInstanceAttribute',
  MODIFY_INSTANCE_CAPACITY_RESERVATION_ATTRIBUTES = 'ModifyInstanceCapacityReservationAttributes',
  MODIFY_INSTANCE_CREDIT_SPECIFICATION = 'ModifyInstanceCreditSpecification',
  MODIFY_INSTANCE_EVENT_START_TIME = 'ModifyInstanceEventStartTime',
  MODIFY_INSTANCE_METADATA_OPTIONS = 'ModifyInstanceMetadataOptions',
  MODIFY_INSTANCE_PLACEMENT = 'ModifyInstancePlacement',
  MODIFY_LAUNCH_TEMPLATE = 'ModifyLaunchTemplate',
  MODIFY_NETWORK_INTERFACE_ATTRIBUTE = 'ModifyNetworkInterfaceAttribute',
  MODIFY_RESERVED_INSTANCES = 'ModifyReservedInstances',
  MODIFY_SNAPSHOT_ATTRIBUTE = 'ModifySnapshotAttribute',
  MODIFY_SPOT_FLEET_REQUEST = 'ModifySpotFleetRequest',
  MODIFY_SUBNET_ATTRIBUTE = 'ModifySubnetAttribute',
  MODIFY_TRAFFIC_MIRROR_FILTER_NETWORK_SERVICES = 'ModifyTrafficMirrorFilterNetworkServices',
  MODIFY_TRAFFIC_MIRROR_FILTER_RULE = 'ModifyTrafficMirrorFilterRule',
  MODIFY_TRAFFIC_MIRROR_SESSION = 'ModifyTrafficMirrorSession',
  MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ModifyTransitGatewayVpcAttachment',
  MODIFY_VOLUME = 'ModifyVolume',
  MODIFY_VOLUME_ATTRIBUTE = 'ModifyVolumeAttribute',
  MODIFY_VPC_ATTRIBUTE = 'ModifyVpcAttribute',
  MODIFY_VPC_ENDPOINT = 'ModifyVpcEndpoint',
  MODIFY_VPC_ENDPOINT_CONNECTION_NOTIFICATION = 'ModifyVpcEndpointConnectionNotification',
  MODIFY_VPC_ENDPOINT_SERVICE_CONFIGURATION = 'ModifyVpcEndpointServiceConfiguration',
  MODIFY_VPC_ENDPOINT_SERVICE_PERMISSIONS = 'ModifyVpcEndpointServicePermissions',
  MODIFY_VPC_PEERING_CONNECTION_OPTIONS = 'ModifyVpcPeeringConnectionOptions',
  MODIFY_VPC_TENANCY = 'ModifyVpcTenancy',
  MODIFY_VPN_CONNECTION = 'ModifyVpnConnection',
  MODIFY_VPN_TUNNEL_CERTIFICATE = 'ModifyVpnTunnelCertificate',
  MODIFY_VPN_TUNNEL_OPTIONS = 'ModifyVpnTunnelOptions',
  MONITOR_INSTANCES = 'MonitorInstances',
  MOVE_ADDRESS_TO_VPC = 'MoveAddressToVpc',
  PROVISION_BYOIP_CIDR = 'ProvisionByoipCidr',
  PURCHASE_HOST_RESERVATION = 'PurchaseHostReservation',
  PURCHASE_RESERVED_INSTANCES_OFFERING = 'PurchaseReservedInstancesOffering',
  PURCHASE_SCHEDULED_INSTANCES = 'PurchaseScheduledInstances',
  REBOOT_INSTANCES = 'RebootInstances',
  REGISTER_IMAGE = 'RegisterImage',
  REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS = 'RegisterTransitGatewayMulticastGroupMembers',
  REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES = 'RegisterTransitGatewayMulticastGroupSources',
  REJECT_TRANSIT_GATEWAY_PEERING_ATTACHMENT = 'RejectTransitGatewayPeeringAttachment',
  REJECT_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'RejectTransitGatewayVpcAttachment',
  REJECT_VPC_ENDPOINT_CONNECTIONS = 'RejectVpcEndpointConnections',
  REJECT_VPC_PEERING_CONNECTION = 'RejectVpcPeeringConnection',
  RELEASE_ADDRESS = 'ReleaseAddress',
  RELEASE_HOSTS = 'ReleaseHosts',
  REPLACE_IAM_INSTANCE_PROFILE_ASSOCIATION = 'ReplaceIamInstanceProfileAssociation',
  REPLACE_NETWORK_ACL_ASSOCIATION = 'ReplaceNetworkAclAssociation',
  REPLACE_NETWORK_ACL_ENTRY = 'ReplaceNetworkAclEntry',
  REPLACE_ROUTE = 'ReplaceRoute',
  REPLACE_ROUTE_TABLE_ASSOCIATION = 'ReplaceRouteTableAssociation',
  REPLACE_TRANSIT_GATEWAY_ROUTE = 'ReplaceTransitGatewayRoute',
  REPORT_INSTANCE_STATUS = 'ReportInstanceStatus',
  REQUEST_SPOT_FLEET = 'RequestSpotFleet',
  REQUEST_SPOT_INSTANCES = 'RequestSpotInstances',
  RESET_EBS_DEFAULT_KMS_KEY_ID = 'ResetEbsDefaultKmsKeyId',
  RESET_FPGA_IMAGE_ATTRIBUTE = 'ResetFpgaImageAttribute',
  RESET_IMAGE_ATTRIBUTE = 'ResetImageAttribute',
  RESET_INSTANCE_ATTRIBUTE = 'ResetInstanceAttribute',
  RESET_NETWORK_INTERFACE_ATTRIBUTE = 'ResetNetworkInterfaceAttribute',
  RESET_SNAPSHOT_ATTRIBUTE = 'ResetSnapshotAttribute',
  RESTORE_ADDRESS_TO_CLASSIC = 'RestoreAddressToClassic',
  REVOKE_CLIENT_VPN_INGRESS = 'RevokeClientVpnIngress',
  REVOKE_SECURITY_GROUP_EGRESS = 'RevokeSecurityGroupEgress',
  REVOKE_SECURITY_GROUP_INGRESS = 'RevokeSecurityGroupIngress',
  RUN_INSTANCES = 'RunInstances',
  RUN_SCHEDULED_INSTANCES = 'RunScheduledInstances',
  SEARCH_LOCAL_GATEWAY_ROUTES = 'SearchLocalGatewayRoutes',
  SEARCH_TRANSIT_GATEWAY_MULTICAST_GROUPS = 'SearchTransitGatewayMulticastGroups',
  SEARCH_TRANSIT_GATEWAY_ROUTES = 'SearchTransitGatewayRoutes',
  SEND_DIAGNOSTIC_INTERRUPT = 'SendDiagnosticInterrupt',
  START_INSTANCES = 'StartInstances',
  START_VPC_ENDPOINT_SERVICE_PRIVATE_DNS_VERIFICATION = 'StartVpcEndpointServicePrivateDnsVerification',
  STOP_INSTANCES = 'StopInstances',
  TERMINATE_CLIENT_VPN_CONNECTIONS = 'TerminateClientVpnConnections',
  TERMINATE_INSTANCES = 'TerminateInstances',
  UNASSIGN_IPV_6_ADDRESSES = 'UnassignIpv6Addresses',
  UNASSIGN_PRIVATE_IP_ADDRESSES = 'UnassignPrivateIpAddresses',
  UNMONITOR_INSTANCES = 'UnmonitorInstances',
  UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_EGRESS = 'UpdateSecurityGroupRuleDescriptionsEgress',
  UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_INGRESS = 'UpdateSecurityGroupRuleDescriptionsIngress',
  WITHDRAW_BYOIP_CIDR = 'WithdrawByoipCidr',
}

export enum Importexportdiskservice {
  CANCEL_JOB = 'CancelJob',
  CREATE_JOB = 'CreateJob',
  GET_SHIPPING_LABEL = 'GetShippingLabel',
  GET_STATUS = 'GetStatus',
  LIST_JOBS = 'ListJobs',
  UPDATE_JOB = 'UpdateJob',
}

export enum Datapipeline {
  ACTIVATE_PIPELINE = 'ActivatePipeline',
  ADD_TAGS = 'AddTags',
  CREATE_PIPELINE = 'CreatePipeline',
  DEACTIVATE_PIPELINE = 'DeactivatePipeline',
  DELETE_PIPELINE = 'DeletePipeline',
  DESCRIBE_OBJECTS = 'DescribeObjects',
  DESCRIBE_PIPELINES = 'DescribePipelines',
  EVALUATE_EXPRESSION = 'EvaluateExpression',
  GET_ACCOUNT_LIMITS = 'GetAccountLimits',
  GET_PIPELINE_DEFINITION = 'GetPipelineDefinition',
  LIST_PIPELINES = 'ListPipelines',
  POLL_FOR_TASK = 'PollForTask',
  PUT_ACCOUNT_LIMITS = 'PutAccountLimits',
  PUT_PIPELINE_DEFINITION = 'PutPipelineDefinition',
  QUERY_OBJECTS = 'QueryObjects',
  REMOVE_TAGS = 'RemoveTags',
  REPORT_TASK_PROGRESS = 'ReportTaskProgress',
  REPORT_TASK_RUNNER_HEARTBEAT = 'ReportTaskRunnerHeartbeat',
  SET_STATUS = 'SetStatus',
  SET_TASK_STATUS = 'SetTaskStatus',
  VALIDATE_PIPELINE_DEFINITION = 'ValidatePipelineDefinition',
}

export enum Servermigrationservice {
  CREATE_APP = 'CreateApp',
  CREATE_REPLICATION_JOB = 'CreateReplicationJob',
  DELETE_APP = 'DeleteApp',
  DELETE_APP_LAUNCH_CONFIGURATION = 'DeleteAppLaunchConfiguration',
  DELETE_APP_REPLICATION_CONFIGURATION = 'DeleteAppReplicationConfiguration',
  DELETE_REPLICATION_JOB = 'DeleteReplicationJob',
  DELETE_SERVER_CATALOG = 'DeleteServerCatalog',
  DISASSOCIATE_CONNECTOR = 'DisassociateConnector',
  GENERATE_CHANGE_SET = 'GenerateChangeSet',
  GENERATE_TEMPLATE = 'GenerateTemplate',
  GET_APP = 'GetApp',
  GET_APP_LAUNCH_CONFIGURATION = 'GetAppLaunchConfiguration',
  GET_APP_REPLICATION_CONFIGURATION = 'GetAppReplicationConfiguration',
  GET_CONNECTORS = 'GetConnectors',
  GET_MESSAGES = 'GetMessages',
  GET_REPLICATION_JOBS = 'GetReplicationJobs',
  GET_REPLICATION_RUNS = 'GetReplicationRuns',
  GET_SERVERS = 'GetServers',
  IMPORT_SERVER_CATALOG = 'ImportServerCatalog',
  LAUNCH_APP = 'LaunchApp',
  LIST_APPS = 'ListApps',
  PUT_APP_LAUNCH_CONFIGURATION = 'PutAppLaunchConfiguration',
  PUT_APP_REPLICATION_CONFIGURATION = 'PutAppReplicationConfiguration',
  SEND_MESSAGE = 'SendMessage',
  START_APP_REPLICATION = 'StartAppReplication',
  START_ON_DEMAND_REPLICATION_RUN = 'StartOnDemandReplicationRun',
  STOP_APP_REPLICATION = 'StopAppReplication',
  TERMINATE_APP = 'TerminateApp',
  UPDATE_APP = 'UpdateApp',
  UPDATE_REPLICATION_JOB = 'UpdateReplicationJob',
}

export enum Cloudformation {
  CANCEL_UPDATE_STACK = 'CancelUpdateStack',
  CONTINUE_UPDATE_ROLLBACK = 'ContinueUpdateRollback',
  CREATE_CHANGE_SET = 'CreateChangeSet',
  CREATE_STACK = 'CreateStack',
  CREATE_STACK_INSTANCES = 'CreateStackInstances',
  CREATE_STACK_SET = 'CreateStackSet',
  CREATE_UPLOAD_BUCKET = 'CreateUploadBucket',
  DELETE_CHANGE_SET = 'DeleteChangeSet',
  DELETE_STACK = 'DeleteStack',
  DELETE_STACK_INSTANCES = 'DeleteStackInstances',
  DELETE_STACK_SET = 'DeleteStackSet',
  DEREGISTER_TYPE = 'DeregisterType',
  DESCRIBE_ACCOUNT_LIMITS = 'DescribeAccountLimits',
  DESCRIBE_CHANGE_SET = 'DescribeChangeSet',
  DESCRIBE_STACK_DRIFT_DETECTION_STATUS = 'DescribeStackDriftDetectionStatus',
  DESCRIBE_STACK_EVENTS = 'DescribeStackEvents',
  DESCRIBE_STACK_INSTANCE = 'DescribeStackInstance',
  DESCRIBE_STACK_RESOURCE = 'DescribeStackResource',
  DESCRIBE_STACK_RESOURCE_DRIFTS = 'DescribeStackResourceDrifts',
  DESCRIBE_STACK_RESOURCES = 'DescribeStackResources',
  DESCRIBE_STACK_SET = 'DescribeStackSet',
  DESCRIBE_STACK_SET_OPERATION = 'DescribeStackSetOperation',
  DESCRIBE_STACKS = 'DescribeStacks',
  DESCRIBE_TYPE = 'DescribeType',
  DESCRIBE_TYPE_REGISTRATION = 'DescribeTypeRegistration',
  DETECT_STACK_DRIFT = 'DetectStackDrift',
  DETECT_STACK_RESOURCE_DRIFT = 'DetectStackResourceDrift',
  DETECT_STACK_SET_DRIFT = 'DetectStackSetDrift',
  ESTIMATE_TEMPLATE_COST = 'EstimateTemplateCost',
  EXECUTE_CHANGE_SET = 'ExecuteChangeSet',
  GET_STACK_POLICY = 'GetStackPolicy',
  GET_TEMPLATE = 'GetTemplate',
  GET_TEMPLATE_SUMMARY = 'GetTemplateSummary',
  LIST_CHANGE_SETS = 'ListChangeSets',
  LIST_EXPORTS = 'ListExports',
  LIST_IMPORTS = 'ListImports',
  LIST_STACK_INSTANCES = 'ListStackInstances',
  LIST_STACK_RESOURCES = 'ListStackResources',
  LIST_STACK_SET_OPERATION_RESULTS = 'ListStackSetOperationResults',
  LIST_STACK_SET_OPERATIONS = 'ListStackSetOperations',
  LIST_STACK_SETS = 'ListStackSets',
  LIST_STACKS = 'ListStacks',
  LIST_TYPE_REGISTRATIONS = 'ListTypeRegistrations',
  LIST_TYPE_VERSIONS = 'ListTypeVersions',
  LIST_TYPES = 'ListTypes',
  REGISTER_TYPE = 'RegisterType',
  SET_STACK_POLICY = 'SetStackPolicy',
  SET_TYPE_DEFAULT_VERSION = 'SetTypeDefaultVersion',
  SIGNAL_RESOURCE = 'SignalResource',
  STOP_STACK_SET_OPERATION = 'StopStackSetOperation',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_STACK = 'UpdateStack',
  UPDATE_STACK_INSTANCES = 'UpdateStackInstances',
  UPDATE_STACK_SET = 'UpdateStackSet',
  UPDATE_TERMINATION_PROTECTION = 'UpdateTerminationProtection',
  VALIDATE_TEMPLATE = 'ValidateTemplate',
}

export enum Workmailmessageflow {
  GET_RAW_MESSAGE_CONTENT = 'GetRawMessageContent',
}

export enum Chatbot {
  CREATE_CHIME_WEBHOOK_CONFIGURATION = 'CreateChimeWebhookConfiguration',
  CREATE_SLACK_CHANNEL_CONFIGURATION = 'CreateSlackChannelConfiguration',
  DELETE_CHIME_WEBHOOK_CONFIGURATION = 'DeleteChimeWebhookConfiguration',
  DELETE_SLACK_CHANNEL_CONFIGURATION = 'DeleteSlackChannelConfiguration',
  DESCRIBE_CHIME_WEBHOOK_CONFIGURATIONS = 'DescribeChimeWebhookConfigurations',
  DESCRIBE_SLACK_CHANNEL_CONFIGURATIONS = 'DescribeSlackChannelConfigurations',
  DESCRIBE_SLACK_CHANNELS = 'DescribeSlackChannels',
  DESCRIBE_SLACK_WORKSPACES = 'DescribeSlackWorkspaces',
  GET_SLACK_OAUTH_PARAMETERS = 'GetSlackOauthParameters',
  REDEEM_SLACK_OAUTH_CODE = 'RedeemSlackOauthCode',
  UPDATE_CHIME_WEBHOOK_CONFIGURATION = 'UpdateChimeWebhookConfiguration',
  UPDATE_SLACK_CHANNEL_CONFIGURATION = 'UpdateSlackChannelConfiguration',
}

export enum Healthapisandnotifications {
  DESCRIBE_AFFECTED_ACCOUNTS_FOR_ORGANIZATION = 'DescribeAffectedAccountsForOrganization',
  DESCRIBE_AFFECTED_ENTITIES = 'DescribeAffectedEntities',
  DESCRIBE_AFFECTED_ENTITIES_FOR_ORGANIZATION = 'DescribeAffectedEntitiesForOrganization',
  DESCRIBE_ENTITY_AGGREGATES = 'DescribeEntityAggregates',
  DESCRIBE_EVENT_AGGREGATES = 'DescribeEventAggregates',
  DESCRIBE_EVENT_DETAILS = 'DescribeEventDetails',
  DESCRIBE_EVENT_DETAILS_FOR_ORGANIZATION = 'DescribeEventDetailsForOrganization',
  DESCRIBE_EVENT_TYPES = 'DescribeEventTypes',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_EVENTS_FOR_ORGANIZATION = 'DescribeEventsForOrganization',
  DESCRIBE_HEALTH_SERVICE_STATUS_FOR_ORGANIZATION = 'DescribeHealthServiceStatusForOrganization',
  DISABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'DisableHealthServiceAccessForOrganization',
  ENABLE_HEALTH_SERVICE_ACCESS_FOR_ORGANIZATION = 'EnableHealthServiceAccessForOrganization',
}

export enum Outposts {
  CREATE_OUTPOST = 'CreateOutpost',
  GET_OUTPOST = 'GetOutpost',
  GET_OUTPOST_INSTANCE_TYPES = 'GetOutpostInstanceTypes',
  LIST_OUTPOSTS = 'ListOutposts',
  LIST_SITES = 'ListSites',
}

export enum Gamelift {
  ACCEPT_MATCH = 'AcceptMatch',
  CREATE_ALIAS = 'CreateAlias',
  CREATE_BUILD = 'CreateBuild',
  CREATE_FLEET = 'CreateFleet',
  CREATE_GAME_SESSION = 'CreateGameSession',
  CREATE_GAME_SESSION_QUEUE = 'CreateGameSessionQueue',
  CREATE_MATCHMAKING_CONFIGURATION = 'CreateMatchmakingConfiguration',
  CREATE_MATCHMAKING_RULE_SET = 'CreateMatchmakingRuleSet',
  CREATE_PLAYER_SESSION = 'CreatePlayerSession',
  CREATE_PLAYER_SESSIONS = 'CreatePlayerSessions',
  CREATE_SCRIPT = 'CreateScript',
  CREATE_VPC_PEERING_AUTHORIZATION = 'CreateVpcPeeringAuthorization',
  CREATE_VPC_PEERING_CONNECTION = 'CreateVpcPeeringConnection',
  DELETE_ALIAS = 'DeleteAlias',
  DELETE_BUILD = 'DeleteBuild',
  DELETE_FLEET = 'DeleteFleet',
  DELETE_GAME_SESSION_QUEUE = 'DeleteGameSessionQueue',
  DELETE_MATCHMAKING_CONFIGURATION = 'DeleteMatchmakingConfiguration',
  DELETE_MATCHMAKING_RULE_SET = 'DeleteMatchmakingRuleSet',
  DELETE_SCALING_POLICY = 'DeleteScalingPolicy',
  DELETE_SCRIPT = 'DeleteScript',
  DELETE_VPC_PEERING_AUTHORIZATION = 'DeleteVpcPeeringAuthorization',
  DELETE_VPC_PEERING_CONNECTION = 'DeleteVpcPeeringConnection',
  DESCRIBE_ALIAS = 'DescribeAlias',
  DESCRIBE_BUILD = 'DescribeBuild',
  DESCRIBE_EC_2_INSTANCE_LIMITS = 'DescribeEC2InstanceLimits',
  DESCRIBE_FLEET_ATTRIBUTES = 'DescribeFleetAttributes',
  DESCRIBE_FLEET_CAPACITY = 'DescribeFleetCapacity',
  DESCRIBE_FLEET_EVENTS = 'DescribeFleetEvents',
  DESCRIBE_FLEET_PORT_SETTINGS = 'DescribeFleetPortSettings',
  DESCRIBE_FLEET_UTILIZATION = 'DescribeFleetUtilization',
  DESCRIBE_GAME_SESSION_DETAILS = 'DescribeGameSessionDetails',
  DESCRIBE_GAME_SESSION_PLACEMENT = 'DescribeGameSessionPlacement',
  DESCRIBE_GAME_SESSION_QUEUES = 'DescribeGameSessionQueues',
  DESCRIBE_GAME_SESSIONS = 'DescribeGameSessions',
  DESCRIBE_INSTANCES = 'DescribeInstances',
  DESCRIBE_MATCHMAKING = 'DescribeMatchmaking',
  DESCRIBE_MATCHMAKING_CONFIGURATIONS = 'DescribeMatchmakingConfigurations',
  DESCRIBE_MATCHMAKING_RULE_SETS = 'DescribeMatchmakingRuleSets',
  DESCRIBE_PLAYER_SESSIONS = 'DescribePlayerSessions',
  DESCRIBE_RUNTIME_CONFIGURATION = 'DescribeRuntimeConfiguration',
  DESCRIBE_SCALING_POLICIES = 'DescribeScalingPolicies',
  DESCRIBE_SCRIPT = 'DescribeScript',
  DESCRIBE_VPC_PEERING_AUTHORIZATIONS = 'DescribeVpcPeeringAuthorizations',
  DESCRIBE_VPC_PEERING_CONNECTIONS = 'DescribeVpcPeeringConnections',
  GET_GAME_SESSION_LOG_URL = 'GetGameSessionLogUrl',
  GET_INSTANCE_ACCESS = 'GetInstanceAccess',
  LIST_ALIASES = 'ListAliases',
  LIST_BUILDS = 'ListBuilds',
  LIST_FLEETS = 'ListFleets',
  LIST_SCRIPTS = 'ListScripts',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_SCALING_POLICY = 'PutScalingPolicy',
  REQUEST_UPLOAD_CREDENTIALS = 'RequestUploadCredentials',
  RESOLVE_ALIAS = 'ResolveAlias',
  SEARCH_GAME_SESSIONS = 'SearchGameSessions',
  START_FLEET_ACTIONS = 'StartFleetActions',
  START_GAME_SESSION_PLACEMENT = 'StartGameSessionPlacement',
  START_MATCH_BACKFILL = 'StartMatchBackfill',
  START_MATCHMAKING = 'StartMatchmaking',
  STOP_FLEET_ACTIONS = 'StopFleetActions',
  STOP_GAME_SESSION_PLACEMENT = 'StopGameSessionPlacement',
  STOP_MATCHMAKING = 'StopMatchmaking',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ALIAS = 'UpdateAlias',
  UPDATE_BUILD = 'UpdateBuild',
  UPDATE_FLEET_ATTRIBUTES = 'UpdateFleetAttributes',
  UPDATE_FLEET_CAPACITY = 'UpdateFleetCapacity',
  UPDATE_FLEET_PORT_SETTINGS = 'UpdateFleetPortSettings',
  UPDATE_GAME_SESSION = 'UpdateGameSession',
  UPDATE_GAME_SESSION_QUEUE = 'UpdateGameSessionQueue',
  UPDATE_MATCHMAKING_CONFIGURATION = 'UpdateMatchmakingConfiguration',
  UPDATE_RUNTIME_CONFIGURATION = 'UpdateRuntimeConfiguration',
  UPDATE_SCRIPT = 'UpdateScript',
  VALIDATE_MATCHMAKING_RULE_SET = 'ValidateMatchmakingRuleSet',
}

export enum Opsworksconfigurationmanagement {
  ASSOCIATE_NODE = 'AssociateNode',
  CREATE_BACKUP = 'CreateBackup',
  CREATE_SERVER = 'CreateServer',
  DELETE_BACKUP = 'DeleteBackup',
  DELETE_SERVER = 'DeleteServer',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_BACKUPS = 'DescribeBackups',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_NODE_ASSOCIATION_STATUS = 'DescribeNodeAssociationStatus',
  DESCRIBE_SERVERS = 'DescribeServers',
  DISASSOCIATE_NODE = 'DisassociateNode',
  RESTORE_SERVER = 'RestoreServer',
  START_MAINTENANCE = 'StartMaintenance',
  UPDATE_SERVER = 'UpdateServer',
  UPDATE_SERVER_ENGINE_ATTRIBUTES = 'UpdateServerEngineAttributes',
}

export enum Ec2instanceconnect {
  SEND_SSH_PUBLIC_KEY = 'SendSSHPublicKey',
}

export enum Rdsiamauthentication {
  CONNECT = 'connect',
}

export enum Applicationdiscovery {
  ASSOCIATE_CONFIGURATION_ITEMS_TO_APPLICATION = 'AssociateConfigurationItemsToApplication',
  BATCH_DELETE_IMPORT_DATA = 'BatchDeleteImportData',
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_TAGS = 'CreateTags',
  DELETE_APPLICATIONS = 'DeleteApplications',
  DELETE_TAGS = 'DeleteTags',
  DESCRIBE_AGENTS = 'DescribeAgents',
  DESCRIBE_CONFIGURATIONS = 'DescribeConfigurations',
  DESCRIBE_CONTINUOUS_EXPORTS = 'DescribeContinuousExports',
  DESCRIBE_EXPORT_CONFIGURATIONS = 'DescribeExportConfigurations',
  DESCRIBE_EXPORT_TASKS = 'DescribeExportTasks',
  DESCRIBE_IMPORT_TASKS = 'DescribeImportTasks',
  DESCRIBE_TAGS = 'DescribeTags',
  DISASSOCIATE_CONFIGURATION_ITEMS_FROM_APPLICATION = 'DisassociateConfigurationItemsFromApplication',
  EXPORT_CONFIGURATIONS = 'ExportConfigurations',
  GET_DISCOVERY_SUMMARY = 'GetDiscoverySummary',
  LIST_CONFIGURATIONS = 'ListConfigurations',
  LIST_SERVER_NEIGHBORS = 'ListServerNeighbors',
  START_CONTINUOUS_EXPORT = 'StartContinuousExport',
  START_DATA_COLLECTION_BY_AGENT_IDS = 'StartDataCollectionByAgentIds',
  START_EXPORT_TASK = 'StartExportTask',
  START_IMPORT_TASK = 'StartImportTask',
  STOP_CONTINUOUS_EXPORT = 'StopContinuousExport',
  STOP_DATA_COLLECTION_BY_AGENT_IDS = 'StopDataCollectionByAgentIds',
  UPDATE_APPLICATION = 'UpdateApplication',
}

export enum Elasticblockstore {
  GET_SNAPSHOT_BLOCK = 'GetSnapshotBlock',
  LIST_CHANGED_BLOCKS = 'ListChangedBlocks',
  LIST_SNAPSHOT_BLOCKS = 'ListSnapshotBlocks',
}

export enum Codecommit {
  ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORY = 'AssociateApprovalRuleTemplateWithRepository',
  BATCH_ASSOCIATE_APPROVAL_RULE_TEMPLATE_WITH_REPOSITORIES = 'BatchAssociateApprovalRuleTemplateWithRepositories',
  BATCH_DESCRIBE_MERGE_CONFLICTS = 'BatchDescribeMergeConflicts',
  BATCH_DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORIES = 'BatchDisassociateApprovalRuleTemplateFromRepositories',
  BATCH_GET_COMMITS = 'BatchGetCommits',
  BATCH_GET_PULL_REQUESTS = 'BatchGetPullRequests',
  BATCH_GET_REPOSITORIES = 'BatchGetRepositories',
  CANCEL_UPLOAD_ARCHIVE = 'CancelUploadArchive',
  CREATE_APPROVAL_RULE_TEMPLATE = 'CreateApprovalRuleTemplate',
  CREATE_BRANCH = 'CreateBranch',
  CREATE_COMMIT = 'CreateCommit',
  CREATE_PULL_REQUEST = 'CreatePullRequest',
  CREATE_PULL_REQUEST_APPROVAL_RULE = 'CreatePullRequestApprovalRule',
  CREATE_REPOSITORY = 'CreateRepository',
  CREATE_UNREFERENCED_MERGE_COMMIT = 'CreateUnreferencedMergeCommit',
  DELETE_APPROVAL_RULE_TEMPLATE = 'DeleteApprovalRuleTemplate',
  DELETE_BRANCH = 'DeleteBranch',
  DELETE_COMMENT_CONTENT = 'DeleteCommentContent',
  DELETE_FILE = 'DeleteFile',
  DELETE_PULL_REQUEST_APPROVAL_RULE = 'DeletePullRequestApprovalRule',
  DELETE_REPOSITORY = 'DeleteRepository',
  DESCRIBE_MERGE_CONFLICTS = 'DescribeMergeConflicts',
  DESCRIBE_PULL_REQUEST_EVENTS = 'DescribePullRequestEvents',
  DISASSOCIATE_APPROVAL_RULE_TEMPLATE_FROM_REPOSITORY = 'DisassociateApprovalRuleTemplateFromRepository',
  EVALUATE_PULL_REQUEST_APPROVAL_RULES = 'EvaluatePullRequestApprovalRules',
  GET_APPROVAL_RULE_TEMPLATE = 'GetApprovalRuleTemplate',
  GET_BLOB = 'GetBlob',
  GET_BRANCH = 'GetBranch',
  GET_COMMENT = 'GetComment',
  GET_COMMENTS_FOR_COMPARED_COMMIT = 'GetCommentsForComparedCommit',
  GET_COMMENTS_FOR_PULL_REQUEST = 'GetCommentsForPullRequest',
  GET_COMMIT = 'GetCommit',
  GET_COMMIT_HISTORY = 'GetCommitHistory',
  GET_COMMITS_FROM_MERGE_BASE = 'GetCommitsFromMergeBase',
  GET_DIFFERENCES = 'GetDifferences',
  GET_FILE = 'GetFile',
  GET_FOLDER = 'GetFolder',
  GET_MERGE_COMMIT = 'GetMergeCommit',
  GET_MERGE_CONFLICTS = 'GetMergeConflicts',
  GET_MERGE_OPTIONS = 'GetMergeOptions',
  GET_OBJECT_IDENTIFIER = 'GetObjectIdentifier',
  GET_PULL_REQUEST = 'GetPullRequest',
  GET_PULL_REQUEST_APPROVAL_STATES = 'GetPullRequestApprovalStates',
  GET_PULL_REQUEST_OVERRIDE_STATE = 'GetPullRequestOverrideState',
  GET_REFERENCES = 'GetReferences',
  GET_REPOSITORY = 'GetRepository',
  GET_REPOSITORY_TRIGGERS = 'GetRepositoryTriggers',
  GET_TREE = 'GetTree',
  GET_UPLOAD_ARCHIVE_STATUS = 'GetUploadArchiveStatus',
  GIT_PULL = 'GitPull',
  GIT_PUSH = 'GitPush',
  LIST_APPROVAL_RULE_TEMPLATES = 'ListApprovalRuleTemplates',
  LIST_ASSOCIATED_APPROVAL_RULE_TEMPLATES_FOR_REPOSITORY = 'ListAssociatedApprovalRuleTemplatesForRepository',
  LIST_BRANCHES = 'ListBranches',
  LIST_PULL_REQUESTS = 'ListPullRequests',
  LIST_REPOSITORIES = 'ListRepositories',
  LIST_REPOSITORIES_FOR_APPROVAL_RULE_TEMPLATE = 'ListRepositoriesForApprovalRuleTemplate',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  MERGE_BRANCHES_BY_FAST_FORWARD = 'MergeBranchesByFastForward',
  MERGE_BRANCHES_BY_SQUASH = 'MergeBranchesBySquash',
  MERGE_BRANCHES_BY_THREE_WAY = 'MergeBranchesByThreeWay',
  MERGE_PULL_REQUEST_BY_FAST_FORWARD = 'MergePullRequestByFastForward',
  MERGE_PULL_REQUEST_BY_SQUASH = 'MergePullRequestBySquash',
  MERGE_PULL_REQUEST_BY_THREE_WAY = 'MergePullRequestByThreeWay',
  OVERRIDE_PULL_REQUEST_APPROVAL_RULES = 'OverridePullRequestApprovalRules',
  POST_COMMENT_FOR_COMPARED_COMMIT = 'PostCommentForComparedCommit',
  POST_COMMENT_FOR_PULL_REQUEST = 'PostCommentForPullRequest',
  POST_COMMENT_REPLY = 'PostCommentReply',
  PUT_FILE = 'PutFile',
  PUT_REPOSITORY_TRIGGERS = 'PutRepositoryTriggers',
  TAG_RESOURCE = 'TagResource',
  TEST_REPOSITORY_TRIGGERS = 'TestRepositoryTriggers',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APPROVAL_RULE_TEMPLATE_CONTENT = 'UpdateApprovalRuleTemplateContent',
  UPDATE_APPROVAL_RULE_TEMPLATE_DESCRIPTION = 'UpdateApprovalRuleTemplateDescription',
  UPDATE_APPROVAL_RULE_TEMPLATE_NAME = 'UpdateApprovalRuleTemplateName',
  UPDATE_COMMENT = 'UpdateComment',
  UPDATE_DEFAULT_BRANCH = 'UpdateDefaultBranch',
  UPDATE_PULL_REQUEST_APPROVAL_RULE_CONTENT = 'UpdatePullRequestApprovalRuleContent',
  UPDATE_PULL_REQUEST_APPROVAL_STATE = 'UpdatePullRequestApprovalState',
  UPDATE_PULL_REQUEST_DESCRIPTION = 'UpdatePullRequestDescription',
  UPDATE_PULL_REQUEST_STATUS = 'UpdatePullRequestStatus',
  UPDATE_PULL_REQUEST_TITLE = 'UpdatePullRequestTitle',
  UPDATE_REPOSITORY_DESCRIPTION = 'UpdateRepositoryDescription',
  UPDATE_REPOSITORY_NAME = 'UpdateRepositoryName',
  UPLOAD_ARCHIVE = 'UploadArchive',
}

export enum Codeguruprofiler {
  CONFIGURE_AGENT = 'ConfigureAgent',
  CREATE_PROFILING_GROUP = 'CreateProfilingGroup',
  DELETE_PROFILING_GROUP = 'DeleteProfilingGroup',
  DESCRIBE_PROFILING_GROUP = 'DescribeProfilingGroup',
  GET_FINDINGS_REPORT = 'GetFindingsReport',
  GET_FINDINGS_REPORT_ACCOUNT_SUMMARY = 'GetFindingsReportAccountSummary',
  GET_POLICY = 'GetPolicy',
  GET_PROFILE = 'GetProfile',
  LIST_FINDINGS_REPORTS = 'ListFindingsReports',
  LIST_PROFILE_TIMES = 'ListProfileTimes',
  LIST_PROFILING_GROUPS = 'ListProfilingGroups',
  POST_AGENT_PROFILE = 'PostAgentProfile',
  PUT_PERMISSION = 'PutPermission',
  REMOVE_PERMISSION = 'RemovePermission',
  UPDATE_PROFILING_GROUP = 'UpdateProfilingGroup',
}

export enum Sns {
  ADD_PERMISSION = 'AddPermission',
  CHECK_IF_PHONE_NUMBER_IS_OPTED_OUT = 'CheckIfPhoneNumberIsOptedOut',
  CONFIRM_SUBSCRIPTION = 'ConfirmSubscription',
  CREATE_PLATFORM_APPLICATION = 'CreatePlatformApplication',
  CREATE_PLATFORM_ENDPOINT = 'CreatePlatformEndpoint',
  CREATE_TOPIC = 'CreateTopic',
  DELETE_ENDPOINT = 'DeleteEndpoint',
  DELETE_PLATFORM_APPLICATION = 'DeletePlatformApplication',
  DELETE_TOPIC = 'DeleteTopic',
  GET_ENDPOINT_ATTRIBUTES = 'GetEndpointAttributes',
  GET_PLATFORM_APPLICATION_ATTRIBUTES = 'GetPlatformApplicationAttributes',
  GET_SMS_ATTRIBUTES = 'GetSMSAttributes',
  GET_SUBSCRIPTION_ATTRIBUTES = 'GetSubscriptionAttributes',
  GET_TOPIC_ATTRIBUTES = 'GetTopicAttributes',
  LIST_ENDPOINTS_BY_PLATFORM_APPLICATION = 'ListEndpointsByPlatformApplication',
  LIST_PHONE_NUMBERS_OPTED_OUT = 'ListPhoneNumbersOptedOut',
  LIST_PLATFORM_APPLICATIONS = 'ListPlatformApplications',
  LIST_SUBSCRIPTIONS = 'ListSubscriptions',
  LIST_SUBSCRIPTIONS_BY_TOPIC = 'ListSubscriptionsByTopic',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TOPICS = 'ListTopics',
  OPT_IN_PHONE_NUMBER = 'OptInPhoneNumber',
  PUBLISH = 'Publish',
  REMOVE_PERMISSION = 'RemovePermission',
  SET_ENDPOINT_ATTRIBUTES = 'SetEndpointAttributes',
  SET_PLATFORM_APPLICATION_ATTRIBUTES = 'SetPlatformApplicationAttributes',
  SET_SMS_ATTRIBUTES = 'SetSMSAttributes',
  SET_SUBSCRIPTION_ATTRIBUTES = 'SetSubscriptionAttributes',
  SET_TOPIC_ATTRIBUTES = 'SetTopicAttributes',
  SUBSCRIBE = 'Subscribe',
  TAG_RESOURCE = 'TagResource',
  UNSUBSCRIBE = 'Unsubscribe',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Cognitouserpools {
  ADD_CUSTOM_ATTRIBUTES = 'AddCustomAttributes',
  ADMIN_ADD_USER_TO_GROUP = 'AdminAddUserToGroup',
  ADMIN_CONFIRM_SIGN_UP = 'AdminConfirmSignUp',
  ADMIN_CREATE_USER = 'AdminCreateUser',
  ADMIN_DELETE_USER = 'AdminDeleteUser',
  ADMIN_DELETE_USER_ATTRIBUTES = 'AdminDeleteUserAttributes',
  ADMIN_DISABLE_PROVIDER_FOR_USER = 'AdminDisableProviderForUser',
  ADMIN_DISABLE_USER = 'AdminDisableUser',
  ADMIN_ENABLE_USER = 'AdminEnableUser',
  ADMIN_FORGET_DEVICE = 'AdminForgetDevice',
  ADMIN_GET_DEVICE = 'AdminGetDevice',
  ADMIN_GET_USER = 'AdminGetUser',
  ADMIN_INITIATE_AUTH = 'AdminInitiateAuth',
  ADMIN_LINK_PROVIDER_FOR_USER = 'AdminLinkProviderForUser',
  ADMIN_LIST_DEVICES = 'AdminListDevices',
  ADMIN_LIST_GROUPS_FOR_USER = 'AdminListGroupsForUser',
  ADMIN_LIST_USER_AUTH_EVENTS = 'AdminListUserAuthEvents',
  ADMIN_REMOVE_USER_FROM_GROUP = 'AdminRemoveUserFromGroup',
  ADMIN_RESET_USER_PASSWORD = 'AdminResetUserPassword',
  ADMIN_RESPOND_TO_AUTH_CHALLENGE = 'AdminRespondToAuthChallenge',
  ADMIN_SET_USER_MFA_PREFERENCE = 'AdminSetUserMFAPreference',
  ADMIN_SET_USER_PASSWORD = 'AdminSetUserPassword',
  ADMIN_SET_USER_SETTINGS = 'AdminSetUserSettings',
  ADMIN_UPDATE_AUTH_EVENT_FEEDBACK = 'AdminUpdateAuthEventFeedback',
  ADMIN_UPDATE_DEVICE_STATUS = 'AdminUpdateDeviceStatus',
  ADMIN_UPDATE_USER_ATTRIBUTES = 'AdminUpdateUserAttributes',
  ADMIN_USER_GLOBAL_SIGN_OUT = 'AdminUserGlobalSignOut',
  ASSOCIATE_SOFTWARE_TOKEN = 'AssociateSoftwareToken',
  CHANGE_PASSWORD = 'ChangePassword',
  CONFIRM_DEVICE = 'ConfirmDevice',
  CONFIRM_FORGOT_PASSWORD = 'ConfirmForgotPassword',
  CONFIRM_SIGN_UP = 'ConfirmSignUp',
  CREATE_GROUP = 'CreateGroup',
  CREATE_IDENTITY_PROVIDER = 'CreateIdentityProvider',
  CREATE_RESOURCE_SERVER = 'CreateResourceServer',
  CREATE_USER_IMPORT_JOB = 'CreateUserImportJob',
  CREATE_USER_POOL = 'CreateUserPool',
  CREATE_USER_POOL_CLIENT = 'CreateUserPoolClient',
  CREATE_USER_POOL_DOMAIN = 'CreateUserPoolDomain',
  DELETE_GROUP = 'DeleteGroup',
  DELETE_IDENTITY_PROVIDER = 'DeleteIdentityProvider',
  DELETE_RESOURCE_SERVER = 'DeleteResourceServer',
  DELETE_USER = 'DeleteUser',
  DELETE_USER_ATTRIBUTES = 'DeleteUserAttributes',
  DELETE_USER_POOL = 'DeleteUserPool',
  DELETE_USER_POOL_CLIENT = 'DeleteUserPoolClient',
  DELETE_USER_POOL_DOMAIN = 'DeleteUserPoolDomain',
  DESCRIBE_IDENTITY_PROVIDER = 'DescribeIdentityProvider',
  DESCRIBE_RESOURCE_SERVER = 'DescribeResourceServer',
  DESCRIBE_RISK_CONFIGURATION = 'DescribeRiskConfiguration',
  DESCRIBE_USER_IMPORT_JOB = 'DescribeUserImportJob',
  DESCRIBE_USER_POOL = 'DescribeUserPool',
  DESCRIBE_USER_POOL_CLIENT = 'DescribeUserPoolClient',
  DESCRIBE_USER_POOL_DOMAIN = 'DescribeUserPoolDomain',
  FORGET_DEVICE = 'ForgetDevice',
  FORGOT_PASSWORD = 'ForgotPassword',
  GET_CSV_HEADER = 'GetCSVHeader',
  GET_DEVICE = 'GetDevice',
  GET_GROUP = 'GetGroup',
  GET_IDENTITY_PROVIDER_BY_IDENTIFIER = 'GetIdentityProviderByIdentifier',
  GET_SIGNING_CERTIFICATE = 'GetSigningCertificate',
  GET_UI_CUSTOMIZATION = 'GetUICustomization',
  GET_USER = 'GetUser',
  GET_USER_ATTRIBUTE_VERIFICATION_CODE = 'GetUserAttributeVerificationCode',
  GET_USER_POOL_MFA_CONFIG = 'GetUserPoolMfaConfig',
  GLOBAL_SIGN_OUT = 'GlobalSignOut',
  INITIATE_AUTH = 'InitiateAuth',
  LIST_DEVICES = 'ListDevices',
  LIST_GROUPS = 'ListGroups',
  LIST_IDENTITY_PROVIDERS = 'ListIdentityProviders',
  LIST_RESOURCE_SERVERS = 'ListResourceServers',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USER_IMPORT_JOBS = 'ListUserImportJobs',
  LIST_USER_POOL_CLIENTS = 'ListUserPoolClients',
  LIST_USER_POOLS = 'ListUserPools',
  LIST_USERS = 'ListUsers',
  LIST_USERS_IN_GROUP = 'ListUsersInGroup',
  RESEND_CONFIRMATION_CODE = 'ResendConfirmationCode',
  RESPOND_TO_AUTH_CHALLENGE = 'RespondToAuthChallenge',
  SET_RISK_CONFIGURATION = 'SetRiskConfiguration',
  SET_UI_CUSTOMIZATION = 'SetUICustomization',
  SET_USER_MFA_PREFERENCE = 'SetUserMFAPreference',
  SET_USER_POOL_MFA_CONFIG = 'SetUserPoolMfaConfig',
  SET_USER_SETTINGS = 'SetUserSettings',
  SIGN_UP = 'SignUp',
  START_USER_IMPORT_JOB = 'StartUserImportJob',
  STOP_USER_IMPORT_JOB = 'StopUserImportJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_AUTH_EVENT_FEEDBACK = 'UpdateAuthEventFeedback',
  UPDATE_DEVICE_STATUS = 'UpdateDeviceStatus',
  UPDATE_GROUP = 'UpdateGroup',
  UPDATE_IDENTITY_PROVIDER = 'UpdateIdentityProvider',
  UPDATE_RESOURCE_SERVER = 'UpdateResourceServer',
  UPDATE_USER_ATTRIBUTES = 'UpdateUserAttributes',
  UPDATE_USER_POOL = 'UpdateUserPool',
  UPDATE_USER_POOL_CLIENT = 'UpdateUserPoolClient',
  UPDATE_USER_POOL_DOMAIN = 'UpdateUserPoolDomain',
  VERIFY_SOFTWARE_TOKEN = 'VerifySoftwareToken',
  VERIFY_USER_ATTRIBUTE = 'VerifyUserAttribute',
}

export enum Elasticbeanstalk {
  ABORT_ENVIRONMENT_UPDATE = 'AbortEnvironmentUpdate',
  ADD_TAGS = 'AddTags',
  APPLY_ENVIRONMENT_MANAGED_ACTION = 'ApplyEnvironmentManagedAction',
  CHECK_DNS_AVAILABILITY = 'CheckDNSAvailability',
  COMPOSE_ENVIRONMENTS = 'ComposeEnvironments',
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_APPLICATION_VERSION = 'CreateApplicationVersion',
  CREATE_CONFIGURATION_TEMPLATE = 'CreateConfigurationTemplate',
  CREATE_ENVIRONMENT = 'CreateEnvironment',
  CREATE_PLATFORM_VERSION = 'CreatePlatformVersion',
  CREATE_STORAGE_LOCATION = 'CreateStorageLocation',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_APPLICATION_VERSION = 'DeleteApplicationVersion',
  DELETE_CONFIGURATION_TEMPLATE = 'DeleteConfigurationTemplate',
  DELETE_ENVIRONMENT_CONFIGURATION = 'DeleteEnvironmentConfiguration',
  DELETE_PLATFORM_VERSION = 'DeletePlatformVersion',
  DESCRIBE_ACCOUNT_ATTRIBUTES = 'DescribeAccountAttributes',
  DESCRIBE_APPLICATION_VERSIONS = 'DescribeApplicationVersions',
  DESCRIBE_APPLICATIONS = 'DescribeApplications',
  DESCRIBE_CONFIGURATION_OPTIONS = 'DescribeConfigurationOptions',
  DESCRIBE_CONFIGURATION_SETTINGS = 'DescribeConfigurationSettings',
  DESCRIBE_ENVIRONMENT_HEALTH = 'DescribeEnvironmentHealth',
  DESCRIBE_ENVIRONMENT_MANAGED_ACTION_HISTORY = 'DescribeEnvironmentManagedActionHistory',
  DESCRIBE_ENVIRONMENT_MANAGED_ACTIONS = 'DescribeEnvironmentManagedActions',
  DESCRIBE_ENVIRONMENT_RESOURCES = 'DescribeEnvironmentResources',
  DESCRIBE_ENVIRONMENTS = 'DescribeEnvironments',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_INSTANCES_HEALTH = 'DescribeInstancesHealth',
  DESCRIBE_PLATFORM_VERSION = 'DescribePlatformVersion',
  LIST_AVAILABLE_SOLUTION_STACKS = 'ListAvailableSolutionStacks',
  LIST_PLATFORM_BRANCHES = 'ListPlatformBranches',
  LIST_PLATFORM_VERSIONS = 'ListPlatformVersions',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  REBUILD_ENVIRONMENT = 'RebuildEnvironment',
  REMOVE_TAGS = 'RemoveTags',
  REQUEST_ENVIRONMENT_INFO = 'RequestEnvironmentInfo',
  RESTART_APP_SERVER = 'RestartAppServer',
  RETRIEVE_ENVIRONMENT_INFO = 'RetrieveEnvironmentInfo',
  SWAP_ENVIRONMENT_CNAM_ES = 'SwapEnvironmentCNAMEs',
  TERMINATE_ENVIRONMENT = 'TerminateEnvironment',
  UPDATE_APPLICATION = 'UpdateApplication',
  UPDATE_APPLICATION_RESOURCE_LIFECYCLE = 'UpdateApplicationResourceLifecycle',
  UPDATE_APPLICATION_VERSION = 'UpdateApplicationVersion',
  UPDATE_CONFIGURATION_TEMPLATE = 'UpdateConfigurationTemplate',
  UPDATE_ENVIRONMENT = 'UpdateEnvironment',
  VALIDATE_CONFIGURATION_SETTINGS = 'ValidateConfigurationSettings',
}

export enum Cloudwatchapplicationinsights {
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_COMPONENT = 'CreateComponent',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_COMPONENT = 'DeleteComponent',
  DESCRIBE_APPLICATION = 'DescribeApplication',
  DESCRIBE_COMPONENT = 'DescribeComponent',
  DESCRIBE_COMPONENT_CONFIGURATION = 'DescribeComponentConfiguration',
  DESCRIBE_COMPONENT_CONFIGURATION_RECOMMENDATION = 'DescribeComponentConfigurationRecommendation',
  DESCRIBE_OBSERVATION = 'DescribeObservation',
  DESCRIBE_PROBLEM = 'DescribeProblem',
  DESCRIBE_PROBLEM_OBSERVATIONS = 'DescribeProblemObservations',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_COMPONENTS = 'ListComponents',
  LIST_PROBLEMS = 'ListProblems',
  UPDATE_APPLICATION = 'UpdateApplication',
  UPDATE_COMPONENT = 'UpdateComponent',
  UPDATE_COMPONENT_CONFIGURATION = 'UpdateComponentConfiguration',
}

export enum Elasticloadbalancingv2 {
  ADD_LISTENER_CERTIFICATES = 'AddListenerCertificates',
  ADD_TAGS = 'AddTags',
  CREATE_LISTENER = 'CreateListener',
  CREATE_LOAD_BALANCER = 'CreateLoadBalancer',
  CREATE_RULE = 'CreateRule',
  CREATE_TARGET_GROUP = 'CreateTargetGroup',
  DELETE_LISTENER = 'DeleteListener',
  DELETE_LOAD_BALANCER = 'DeleteLoadBalancer',
  DELETE_RULE = 'DeleteRule',
  DELETE_TARGET_GROUP = 'DeleteTargetGroup',
  DEREGISTER_TARGETS = 'DeregisterTargets',
  DESCRIBE_ACCOUNT_LIMITS = 'DescribeAccountLimits',
  DESCRIBE_LISTENER_CERTIFICATES = 'DescribeListenerCertificates',
  DESCRIBE_LISTENERS = 'DescribeListeners',
  DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'DescribeLoadBalancerAttributes',
  DESCRIBE_LOAD_BALANCERS = 'DescribeLoadBalancers',
  DESCRIBE_RULES = 'DescribeRules',
  DESCRIBE_SSL_POLICIES = 'DescribeSSLPolicies',
  DESCRIBE_TAGS = 'DescribeTags',
  DESCRIBE_TARGET_GROUP_ATTRIBUTES = 'DescribeTargetGroupAttributes',
  DESCRIBE_TARGET_GROUPS = 'DescribeTargetGroups',
  DESCRIBE_TARGET_HEALTH = 'DescribeTargetHealth',
  MODIFY_LISTENER = 'ModifyListener',
  MODIFY_LOAD_BALANCER_ATTRIBUTES = 'ModifyLoadBalancerAttributes',
  MODIFY_RULE = 'ModifyRule',
  MODIFY_TARGET_GROUP = 'ModifyTargetGroup',
  MODIFY_TARGET_GROUP_ATTRIBUTES = 'ModifyTargetGroupAttributes',
  REGISTER_TARGETS = 'RegisterTargets',
  REMOVE_LISTENER_CERTIFICATES = 'RemoveListenerCertificates',
  REMOVE_TAGS = 'RemoveTags',
  SET_IP_ADDRESS_TYPE = 'SetIpAddressType',
  SET_RULE_PRIORITIES = 'SetRulePriorities',
  SET_SECURITY_GROUPS = 'SetSecurityGroups',
  SET_SUBNETS = 'SetSubnets',
  SET_WEB_ACL = 'SetWebAcl',
}

export enum Elasticloadbalancing {
  ADD_TAGS = 'AddTags',
  APPLY_SECURITY_GROUPS_TO_LOAD_BALANCER = 'ApplySecurityGroupsToLoadBalancer',
  ATTACH_LOAD_BALANCER_TO_SUBNETS = 'AttachLoadBalancerToSubnets',
  CONFIGURE_HEALTH_CHECK = 'ConfigureHealthCheck',
  CREATE_APP_COOKIE_STICKINESS_POLICY = 'CreateAppCookieStickinessPolicy',
  CREATE_LB_COOKIE_STICKINESS_POLICY = 'CreateLBCookieStickinessPolicy',
  CREATE_LOAD_BALANCER = 'CreateLoadBalancer',
  CREATE_LOAD_BALANCER_LISTENERS = 'CreateLoadBalancerListeners',
  CREATE_LOAD_BALANCER_POLICY = 'CreateLoadBalancerPolicy',
  DELETE_LOAD_BALANCER = 'DeleteLoadBalancer',
  DELETE_LOAD_BALANCER_LISTENERS = 'DeleteLoadBalancerListeners',
  DELETE_LOAD_BALANCER_POLICY = 'DeleteLoadBalancerPolicy',
  DEREGISTER_INSTANCES_FROM_LOAD_BALANCER = 'DeregisterInstancesFromLoadBalancer',
  DESCRIBE_INSTANCE_HEALTH = 'DescribeInstanceHealth',
  DESCRIBE_LOAD_BALANCER_ATTRIBUTES = 'DescribeLoadBalancerAttributes',
  DESCRIBE_LOAD_BALANCER_POLICIES = 'DescribeLoadBalancerPolicies',
  DESCRIBE_LOAD_BALANCER_POLICY_TYPES = 'DescribeLoadBalancerPolicyTypes',
  DESCRIBE_LOAD_BALANCERS = 'DescribeLoadBalancers',
  DESCRIBE_TAGS = 'DescribeTags',
  DETACH_LOAD_BALANCER_FROM_SUBNETS = 'DetachLoadBalancerFromSubnets',
  DISABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'DisableAvailabilityZonesForLoadBalancer',
  ENABLE_AVAILABILITY_ZONES_FOR_LOAD_BALANCER = 'EnableAvailabilityZonesForLoadBalancer',
  MODIFY_LOAD_BALANCER_ATTRIBUTES = 'ModifyLoadBalancerAttributes',
  REGISTER_INSTANCES_WITH_LOAD_BALANCER = 'RegisterInstancesWithLoadBalancer',
  REMOVE_TAGS = 'RemoveTags',
  SET_LOAD_BALANCER_LISTENER_SSL_CERTIFICATE = 'SetLoadBalancerListenerSSLCertificate',
  SET_LOAD_BALANCER_POLICIES_FOR_BACKEND_SERVER = 'SetLoadBalancerPoliciesForBackendServer',
  SET_LOAD_BALANCER_POLICIES_OF_LISTENER = 'SetLoadBalancerPoliciesOfListener',
}

export enum Translate {
  DELETE_TERMINOLOGY = 'DeleteTerminology',
  DESCRIBE_TEXT_TRANSLATION_JOB = 'DescribeTextTranslationJob',
  GET_TERMINOLOGY = 'GetTerminology',
  IMPORT_TERMINOLOGY = 'ImportTerminology',
  LIST_TERMINOLOGIES = 'ListTerminologies',
  LIST_TEXT_TRANSLATION_JOBS = 'ListTextTranslationJobs',
  START_TEXT_TRANSLATION_JOB = 'StartTextTranslationJob',
  STOP_TEXT_TRANSLATION_JOB = 'StopTextTranslationJob',
  TRANSLATE_TEXT = 'TranslateText',
}

export enum Wafregional {
  ASSOCIATE_WEB_ACL = 'AssociateWebACL',
  CREATE_BYTE_MATCH_SET = 'CreateByteMatchSet',
  CREATE_GEO_MATCH_SET = 'CreateGeoMatchSet',
  CREATE_IP_SET = 'CreateIPSet',
  CREATE_RATE_BASED_RULE = 'CreateRateBasedRule',
  CREATE_REGEX_MATCH_SET = 'CreateRegexMatchSet',
  CREATE_REGEX_PATTERN_SET = 'CreateRegexPatternSet',
  CREATE_RULE = 'CreateRule',
  CREATE_RULE_GROUP = 'CreateRuleGroup',
  CREATE_SIZE_CONSTRAINT_SET = 'CreateSizeConstraintSet',
  CREATE_SQL_INJECTION_MATCH_SET = 'CreateSqlInjectionMatchSet',
  CREATE_WEB_ACL = 'CreateWebACL',
  CREATE_XSS_MATCH_SET = 'CreateXssMatchSet',
  DELETE_BYTE_MATCH_SET = 'DeleteByteMatchSet',
  DELETE_GEO_MATCH_SET = 'DeleteGeoMatchSet',
  DELETE_IP_SET = 'DeleteIPSet',
  DELETE_LOGGING_CONFIGURATION = 'DeleteLoggingConfiguration',
  DELETE_PERMISSION_POLICY = 'DeletePermissionPolicy',
  DELETE_RATE_BASED_RULE = 'DeleteRateBasedRule',
  DELETE_REGEX_MATCH_SET = 'DeleteRegexMatchSet',
  DELETE_REGEX_PATTERN_SET = 'DeleteRegexPatternSet',
  DELETE_RULE = 'DeleteRule',
  DELETE_RULE_GROUP = 'DeleteRuleGroup',
  DELETE_SIZE_CONSTRAINT_SET = 'DeleteSizeConstraintSet',
  DELETE_SQL_INJECTION_MATCH_SET = 'DeleteSqlInjectionMatchSet',
  DELETE_WEB_ACL = 'DeleteWebACL',
  DELETE_XSS_MATCH_SET = 'DeleteXssMatchSet',
  DISASSOCIATE_WEB_ACL = 'DisassociateWebACL',
  GET_BYTE_MATCH_SET = 'GetByteMatchSet',
  GET_CHANGE_TOKEN = 'GetChangeToken',
  GET_CHANGE_TOKEN_STATUS = 'GetChangeTokenStatus',
  GET_GEO_MATCH_SET = 'GetGeoMatchSet',
  GET_IP_SET = 'GetIPSet',
  GET_LOGGING_CONFIGURATION = 'GetLoggingConfiguration',
  GET_PERMISSION_POLICY = 'GetPermissionPolicy',
  GET_RATE_BASED_RULE = 'GetRateBasedRule',
  GET_RATE_BASED_RULE_MANAGED_KEYS = 'GetRateBasedRuleManagedKeys',
  GET_REGEX_MATCH_SET = 'GetRegexMatchSet',
  GET_REGEX_PATTERN_SET = 'GetRegexPatternSet',
  GET_RULE = 'GetRule',
  GET_RULE_GROUP = 'GetRuleGroup',
  GET_SAMPLED_REQUESTS = 'GetSampledRequests',
  GET_SIZE_CONSTRAINT_SET = 'GetSizeConstraintSet',
  GET_SQL_INJECTION_MATCH_SET = 'GetSqlInjectionMatchSet',
  GET_WEB_ACL = 'GetWebACL',
  GET_WEB_ACL_FOR_RESOURCE = 'GetWebACLForResource',
  GET_XSS_MATCH_SET = 'GetXssMatchSet',
  LIST_ACTIVATED_RULES_IN_RULE_GROUP = 'ListActivatedRulesInRuleGroup',
  LIST_BYTE_MATCH_SETS = 'ListByteMatchSets',
  LIST_GEO_MATCH_SETS = 'ListGeoMatchSets',
  LIST_IP_SETS = 'ListIPSets',
  LIST_LOGGING_CONFIGURATIONS = 'ListLoggingConfigurations',
  LIST_RATE_BASED_RULES = 'ListRateBasedRules',
  LIST_REGEX_MATCH_SETS = 'ListRegexMatchSets',
  LIST_REGEX_PATTERN_SETS = 'ListRegexPatternSets',
  LIST_RESOURCES_FOR_WEB_ACL = 'ListResourcesForWebACL',
  LIST_RULE_GROUPS = 'ListRuleGroups',
  LIST_RULES = 'ListRules',
  LIST_SIZE_CONSTRAINT_SETS = 'ListSizeConstraintSets',
  LIST_SQL_INJECTION_MATCH_SETS = 'ListSqlInjectionMatchSets',
  LIST_SUBSCRIBED_RULE_GROUPS = 'ListSubscribedRuleGroups',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WEB_AC_LS = 'ListWebACLs',
  LIST_XSS_MATCH_SETS = 'ListXssMatchSets',
  PUT_LOGGING_CONFIGURATION = 'PutLoggingConfiguration',
  PUT_PERMISSION_POLICY = 'PutPermissionPolicy',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_BYTE_MATCH_SET = 'UpdateByteMatchSet',
  UPDATE_GEO_MATCH_SET = 'UpdateGeoMatchSet',
  UPDATE_IP_SET = 'UpdateIPSet',
  UPDATE_RATE_BASED_RULE = 'UpdateRateBasedRule',
  UPDATE_REGEX_MATCH_SET = 'UpdateRegexMatchSet',
  UPDATE_REGEX_PATTERN_SET = 'UpdateRegexPatternSet',
  UPDATE_RULE = 'UpdateRule',
  UPDATE_RULE_GROUP = 'UpdateRuleGroup',
  UPDATE_SIZE_CONSTRAINT_SET = 'UpdateSizeConstraintSet',
  UPDATE_SQL_INJECTION_MATCH_SET = 'UpdateSqlInjectionMatchSet',
  UPDATE_WEB_ACL = 'UpdateWebACL',
  UPDATE_XSS_MATCH_SET = 'UpdateXssMatchSet',
}

export enum Elasticcontainerservice {
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_SERVICE = 'CreateService',
  CREATE_TASK_SET = 'CreateTaskSet',
  DELETE_ACCOUNT_SETTING = 'DeleteAccountSetting',
  DELETE_ATTRIBUTES = 'DeleteAttributes',
  DELETE_CLUSTER = 'DeleteCluster',
  DELETE_SERVICE = 'DeleteService',
  DELETE_TASK_SET = 'DeleteTaskSet',
  DEREGISTER_CONTAINER_INSTANCE = 'DeregisterContainerInstance',
  DEREGISTER_TASK_DEFINITION = 'DeregisterTaskDefinition',
  DESCRIBE_CLUSTERS = 'DescribeClusters',
  DESCRIBE_CONTAINER_INSTANCES = 'DescribeContainerInstances',
  DESCRIBE_SERVICES = 'DescribeServices',
  DESCRIBE_TASK_DEFINITION = 'DescribeTaskDefinition',
  DESCRIBE_TASK_SETS = 'DescribeTaskSets',
  DESCRIBE_TASKS = 'DescribeTasks',
  DISCOVER_POLL_ENDPOINT = 'DiscoverPollEndpoint',
  LIST_ACCOUNT_SETTINGS = 'ListAccountSettings',
  LIST_ATTRIBUTES = 'ListAttributes',
  LIST_CLUSTERS = 'ListClusters',
  LIST_CONTAINER_INSTANCES = 'ListContainerInstances',
  LIST_SERVICES = 'ListServices',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TASK_DEFINITION_FAMILIES = 'ListTaskDefinitionFamilies',
  LIST_TASK_DEFINITIONS = 'ListTaskDefinitions',
  LIST_TASKS = 'ListTasks',
  POLL = 'Poll',
  PUT_ACCOUNT_SETTING = 'PutAccountSetting',
  PUT_ACCOUNT_SETTING_DEFAULT = 'PutAccountSettingDefault',
  PUT_ATTRIBUTES = 'PutAttributes',
  REGISTER_CONTAINER_INSTANCE = 'RegisterContainerInstance',
  REGISTER_TASK_DEFINITION = 'RegisterTaskDefinition',
  RUN_TASK = 'RunTask',
  START_TASK = 'StartTask',
  START_TELEMETRY_SESSION = 'StartTelemetrySession',
  STOP_TASK = 'StopTask',
  SUBMIT_ATTACHMENT_STATE_CHANGES = 'SubmitAttachmentStateChanges',
  SUBMIT_CONTAINER_STATE_CHANGE = 'SubmitContainerStateChange',
  SUBMIT_TASK_STATE_CHANGE = 'SubmitTaskStateChange',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CONTAINER_AGENT = 'UpdateContainerAgent',
  UPDATE_CONTAINER_INSTANCES_STATE = 'UpdateContainerInstancesState',
  UPDATE_SERVICE = 'UpdateService',
  UPDATE_SERVICE_PRIMARY_TASK_SET = 'UpdateServicePrimaryTaskSet',
  UPDATE_TASK_SET = 'UpdateTaskSet',
}

export enum Elasticcontainerregistry {
  BATCH_CHECK_LAYER_AVAILABILITY = 'BatchCheckLayerAvailability',
  BATCH_DELETE_IMAGE = 'BatchDeleteImage',
  BATCH_GET_IMAGE = 'BatchGetImage',
  COMPLETE_LAYER_UPLOAD = 'CompleteLayerUpload',
  CREATE_REPOSITORY = 'CreateRepository',
  DELETE_LIFECYCLE_POLICY = 'DeleteLifecyclePolicy',
  DELETE_REPOSITORY = 'DeleteRepository',
  DELETE_REPOSITORY_POLICY = 'DeleteRepositoryPolicy',
  DESCRIBE_IMAGE_SCAN_FINDINGS = 'DescribeImageScanFindings',
  DESCRIBE_IMAGES = 'DescribeImages',
  DESCRIBE_REPOSITORIES = 'DescribeRepositories',
  GET_AUTHORIZATION_TOKEN = 'GetAuthorizationToken',
  GET_DOWNLOAD_URL_FOR_LAYER = 'GetDownloadUrlForLayer',
  GET_LIFECYCLE_POLICY = 'GetLifecyclePolicy',
  GET_LIFECYCLE_POLICY_PREVIEW = 'GetLifecyclePolicyPreview',
  GET_REPOSITORY_POLICY = 'GetRepositoryPolicy',
  INITIATE_LAYER_UPLOAD = 'InitiateLayerUpload',
  LIST_IMAGES = 'ListImages',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_IMAGE = 'PutImage',
  PUT_IMAGE_SCANNING_CONFIGURATION = 'PutImageScanningConfiguration',
  PUT_IMAGE_TAG_MUTABILITY = 'PutImageTagMutability',
  PUT_LIFECYCLE_POLICY = 'PutLifecyclePolicy',
  SET_REPOSITORY_POLICY = 'SetRepositoryPolicy',
  START_IMAGE_SCAN = 'StartImageScan',
  START_LIFECYCLE_POLICY_PREVIEW = 'StartLifecyclePolicyPreview',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPLOAD_LAYER_PART = 'UploadLayerPart',
}

export enum Dynamodbacceleratordax {
  BATCH_GET_ITEM = 'BatchGetItem',
  BATCH_WRITE_ITEM = 'BatchWriteItem',
  CONDITION_CHECK_ITEM = 'ConditionCheckItem',
  CREATE_CLUSTER = 'CreateCluster',
  CREATE_PARAMETER_GROUP = 'CreateParameterGroup',
  CREATE_SUBNET_GROUP = 'CreateSubnetGroup',
  DECREASE_REPLICATION_FACTOR = 'DecreaseReplicationFactor',
  DELETE_CLUSTER = 'DeleteCluster',
  DELETE_ITEM = 'DeleteItem',
  DELETE_PARAMETER_GROUP = 'DeleteParameterGroup',
  DELETE_SUBNET_GROUP = 'DeleteSubnetGroup',
  DESCRIBE_CLUSTERS = 'DescribeClusters',
  DESCRIBE_DEFAULT_PARAMETERS = 'DescribeDefaultParameters',
  DESCRIBE_EVENTS = 'DescribeEvents',
  DESCRIBE_PARAMETER_GROUPS = 'DescribeParameterGroups',
  DESCRIBE_PARAMETERS = 'DescribeParameters',
  DESCRIBE_SUBNET_GROUPS = 'DescribeSubnetGroups',
  GET_ITEM = 'GetItem',
  INCREASE_REPLICATION_FACTOR = 'IncreaseReplicationFactor',
  LIST_TAGS = 'ListTags',
  PUT_ITEM = 'PutItem',
  QUERY = 'Query',
  REBOOT_NODE = 'RebootNode',
  SCAN = 'Scan',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_CLUSTER = 'UpdateCluster',
  UPDATE_ITEM = 'UpdateItem',
  UPDATE_PARAMETER_GROUP = 'UpdateParameterGroup',
  UPDATE_SUBNET_GROUP = 'UpdateSubnetGroup',
}

export enum Resourcegrouptaggingapi {
  DESCRIBE_REPORT_CREATION = 'DescribeReportCreation',
  GET_COMPLIANCE_SUMMARY = 'GetComplianceSummary',
  GET_RESOURCES = 'GetResources',
  GET_TAG_KEYS = 'GetTagKeys',
  GET_TAG_VALUES = 'GetTagValues',
  START_REPORT_CREATION = 'StartReportCreation',
  TAG_RESOURCES = 'TagResources',
  UNTAG_RESOURCES = 'UntagResources',
}

export enum Cloudwatchlogs {
  ASSOCIATE_KMS_KEY = 'AssociateKmsKey',
  CANCEL_EXPORT_TASK = 'CancelExportTask',
  CREATE_EXPORT_TASK = 'CreateExportTask',
  CREATE_LOG_DELIVERY = 'CreateLogDelivery',
  CREATE_LOG_GROUP = 'CreateLogGroup',
  CREATE_LOG_STREAM = 'CreateLogStream',
  DELETE_DESTINATION = 'DeleteDestination',
  DELETE_LOG_DELIVERY = 'DeleteLogDelivery',
  DELETE_LOG_GROUP = 'DeleteLogGroup',
  DELETE_LOG_STREAM = 'DeleteLogStream',
  DELETE_METRIC_FILTER = 'DeleteMetricFilter',
  DELETE_RESOURCE_POLICY = 'DeleteResourcePolicy',
  DELETE_RETENTION_POLICY = 'DeleteRetentionPolicy',
  DELETE_SUBSCRIPTION_FILTER = 'DeleteSubscriptionFilter',
  DESCRIBE_DESTINATIONS = 'DescribeDestinations',
  DESCRIBE_EXPORT_TASKS = 'DescribeExportTasks',
  DESCRIBE_LOG_GROUPS = 'DescribeLogGroups',
  DESCRIBE_LOG_STREAMS = 'DescribeLogStreams',
  DESCRIBE_METRIC_FILTERS = 'DescribeMetricFilters',
  DESCRIBE_QUERIES = 'DescribeQueries',
  DESCRIBE_RESOURCE_POLICIES = 'DescribeResourcePolicies',
  DESCRIBE_SUBSCRIPTION_FILTERS = 'DescribeSubscriptionFilters',
  DISASSOCIATE_KMS_KEY = 'DisassociateKmsKey',
  FILTER_LOG_EVENTS = 'FilterLogEvents',
  GET_LOG_DELIVERY = 'GetLogDelivery',
  GET_LOG_EVENTS = 'GetLogEvents',
  GET_LOG_GROUP_FIELDS = 'GetLogGroupFields',
  GET_LOG_RECORD = 'GetLogRecord',
  GET_QUERY_RESULTS = 'GetQueryResults',
  LIST_LOG_DELIVERIES = 'ListLogDeliveries',
  LIST_TAGS_LOG_GROUP = 'ListTagsLogGroup',
  PUT_DESTINATION = 'PutDestination',
  PUT_DESTINATION_POLICY = 'PutDestinationPolicy',
  PUT_LOG_EVENTS = 'PutLogEvents',
  PUT_METRIC_FILTER = 'PutMetricFilter',
  PUT_RESOURCE_POLICY = 'PutResourcePolicy',
  PUT_RETENTION_POLICY = 'PutRetentionPolicy',
  PUT_SUBSCRIPTION_FILTER = 'PutSubscriptionFilter',
  START_QUERY = 'StartQuery',
  STOP_QUERY = 'StopQuery',
  TAG_LOG_GROUP = 'TagLogGroup',
  TEST_METRIC_FILTER = 'TestMetricFilter',
  UNTAG_LOG_GROUP = 'UntagLogGroup',
  UPDATE_LOG_DELIVERY = 'UpdateLogDelivery',
}

export enum Servicecatalog {
  ACCEPT_PORTFOLIO_SHARE = 'AcceptPortfolioShare',
  ASSOCIATE_BUDGET_WITH_RESOURCE = 'AssociateBudgetWithResource',
  ASSOCIATE_PRINCIPAL_WITH_PORTFOLIO = 'AssociatePrincipalWithPortfolio',
  ASSOCIATE_PRODUCT_WITH_PORTFOLIO = 'AssociateProductWithPortfolio',
  ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'AssociateServiceActionWithProvisioningArtifact',
  ASSOCIATE_TAG_OPTION_WITH_RESOURCE = 'AssociateTagOptionWithResource',
  BATCH_ASSOCIATE_SERVICE_ACTION_WITH_PROVISIONING_ARTIFACT = 'BatchAssociateServiceActionWithProvisioningArtifact',
  BATCH_DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'BatchDisassociateServiceActionFromProvisioningArtifact',
  COPY_PRODUCT = 'CopyProduct',
  CREATE_CONSTRAINT = 'CreateConstraint',
  CREATE_PORTFOLIO = 'CreatePortfolio',
  CREATE_PORTFOLIO_SHARE = 'CreatePortfolioShare',
  CREATE_PRODUCT = 'CreateProduct',
  CREATE_PROVISIONED_PRODUCT_PLAN = 'CreateProvisionedProductPlan',
  CREATE_PROVISIONING_ARTIFACT = 'CreateProvisioningArtifact',
  CREATE_SERVICE_ACTION = 'CreateServiceAction',
  CREATE_TAG_OPTION = 'CreateTagOption',
  DELETE_CONSTRAINT = 'DeleteConstraint',
  DELETE_PORTFOLIO = 'DeletePortfolio',
  DELETE_PORTFOLIO_SHARE = 'DeletePortfolioShare',
  DELETE_PRODUCT = 'DeleteProduct',
  DELETE_PROVISIONED_PRODUCT_PLAN = 'DeleteProvisionedProductPlan',
  DELETE_PROVISIONING_ARTIFACT = 'DeleteProvisioningArtifact',
  DELETE_SERVICE_ACTION = 'DeleteServiceAction',
  DELETE_TAG_OPTION = 'DeleteTagOption',
  DESCRIBE_CONSTRAINT = 'DescribeConstraint',
  DESCRIBE_COPY_PRODUCT_STATUS = 'DescribeCopyProductStatus',
  DESCRIBE_PORTFOLIO = 'DescribePortfolio',
  DESCRIBE_PORTFOLIO_SHARE_STATUS = 'DescribePortfolioShareStatus',
  DESCRIBE_PRODUCT = 'DescribeProduct',
  DESCRIBE_PRODUCT_AS_ADMIN = 'DescribeProductAsAdmin',
  DESCRIBE_PRODUCT_VIEW = 'DescribeProductView',
  DESCRIBE_PROVISIONED_PRODUCT = 'DescribeProvisionedProduct',
  DESCRIBE_PROVISIONED_PRODUCT_PLAN = 'DescribeProvisionedProductPlan',
  DESCRIBE_PROVISIONING_ARTIFACT = 'DescribeProvisioningArtifact',
  DESCRIBE_PROVISIONING_PARAMETERS = 'DescribeProvisioningParameters',
  DESCRIBE_RECORD = 'DescribeRecord',
  DESCRIBE_SERVICE_ACTION = 'DescribeServiceAction',
  DESCRIBE_SERVICE_ACTION_EXECUTION_PARAMETERS = 'DescribeServiceActionExecutionParameters',
  DESCRIBE_TAG_OPTION = 'DescribeTagOption',
  DISABLE_AWS_ORGANIZATIONS_ACCESS = 'DisableAWSOrganizationsAccess',
  DISASSOCIATE_BUDGET_FROM_RESOURCE = 'DisassociateBudgetFromResource',
  DISASSOCIATE_PRINCIPAL_FROM_PORTFOLIO = 'DisassociatePrincipalFromPortfolio',
  DISASSOCIATE_PRODUCT_FROM_PORTFOLIO = 'DisassociateProductFromPortfolio',
  DISASSOCIATE_SERVICE_ACTION_FROM_PROVISIONING_ARTIFACT = 'DisassociateServiceActionFromProvisioningArtifact',
  DISASSOCIATE_TAG_OPTION_FROM_RESOURCE = 'DisassociateTagOptionFromResource',
  ENABLE_AWS_ORGANIZATIONS_ACCESS = 'EnableAWSOrganizationsAccess',
  EXECUTE_PROVISIONED_PRODUCT_PLAN = 'ExecuteProvisionedProductPlan',
  EXECUTE_PROVISIONED_PRODUCT_SERVICE_ACTION = 'ExecuteProvisionedProductServiceAction',
  GET_AWS_ORGANIZATIONS_ACCESS_STATUS = 'GetAWSOrganizationsAccessStatus',
  LIST_ACCEPTED_PORTFOLIO_SHARES = 'ListAcceptedPortfolioShares',
  LIST_BUDGETS_FOR_RESOURCE = 'ListBudgetsForResource',
  LIST_CONSTRAINTS_FOR_PORTFOLIO = 'ListConstraintsForPortfolio',
  LIST_LAUNCH_PATHS = 'ListLaunchPaths',
  LIST_ORGANIZATION_PORTFOLIO_ACCESS = 'ListOrganizationPortfolioAccess',
  LIST_PORTFOLIO_ACCESS = 'ListPortfolioAccess',
  LIST_PORTFOLIOS = 'ListPortfolios',
  LIST_PORTFOLIOS_FOR_PRODUCT = 'ListPortfoliosForProduct',
  LIST_PRINCIPALS_FOR_PORTFOLIO = 'ListPrincipalsForPortfolio',
  LIST_PROVISIONED_PRODUCT_PLANS = 'ListProvisionedProductPlans',
  LIST_PROVISIONING_ARTIFACTS = 'ListProvisioningArtifacts',
  LIST_PROVISIONING_ARTIFACTS_FOR_SERVICE_ACTION = 'ListProvisioningArtifactsForServiceAction',
  LIST_RECORD_HISTORY = 'ListRecordHistory',
  LIST_RESOURCES_FOR_TAG_OPTION = 'ListResourcesForTagOption',
  LIST_SERVICE_ACTIONS = 'ListServiceActions',
  LIST_SERVICE_ACTIONS_FOR_PROVISIONING_ARTIFACT = 'ListServiceActionsForProvisioningArtifact',
  LIST_STACK_INSTANCES_FOR_PROVISIONED_PRODUCT = 'ListStackInstancesForProvisionedProduct',
  LIST_TAG_OPTIONS = 'ListTagOptions',
  PROVISION_PRODUCT = 'ProvisionProduct',
  REJECT_PORTFOLIO_SHARE = 'RejectPortfolioShare',
  SCAN_PROVISIONED_PRODUCTS = 'ScanProvisionedProducts',
  SEARCH_PRODUCTS = 'SearchProducts',
  SEARCH_PRODUCTS_AS_ADMIN = 'SearchProductsAsAdmin',
  SEARCH_PROVISIONED_PRODUCTS = 'SearchProvisionedProducts',
  TERMINATE_PROVISIONED_PRODUCT = 'TerminateProvisionedProduct',
  UPDATE_CONSTRAINT = 'UpdateConstraint',
  UPDATE_PORTFOLIO = 'UpdatePortfolio',
  UPDATE_PRODUCT = 'UpdateProduct',
  UPDATE_PROVISIONED_PRODUCT = 'UpdateProvisionedProduct',
  UPDATE_PROVISIONED_PRODUCT_PROPERTIES = 'UpdateProvisionedProductProperties',
  UPDATE_PROVISIONING_ARTIFACT = 'UpdateProvisioningArtifact',
  UPDATE_SERVICE_ACTION = 'UpdateServiceAction',
  UPDATE_TAG_OPTION = 'UpdateTagOption',
}

export enum Mq {
  CREATE_BROKER = 'CreateBroker',
  CREATE_CONFIGURATION = 'CreateConfiguration',
  CREATE_TAGS = 'CreateTags',
  CREATE_USER = 'CreateUser',
  DELETE_BROKER = 'DeleteBroker',
  DELETE_TAGS = 'DeleteTags',
  DELETE_USER = 'DeleteUser',
  DESCRIBE_BROKER = 'DescribeBroker',
  DESCRIBE_BROKER_ENGINE_TYPES = 'DescribeBrokerEngineTypes',
  DESCRIBE_BROKER_INSTANCE_OPTIONS = 'DescribeBrokerInstanceOptions',
  DESCRIBE_CONFIGURATION = 'DescribeConfiguration',
  DESCRIBE_CONFIGURATION_REVISION = 'DescribeConfigurationRevision',
  DESCRIBE_USER = 'DescribeUser',
  LIST_BROKERS = 'ListBrokers',
  LIST_CONFIGURATION_REVISIONS = 'ListConfigurationRevisions',
  LIST_CONFIGURATIONS = 'ListConfigurations',
  LIST_TAGS = 'ListTags',
  LIST_USERS = 'ListUsers',
  REBOOT_BROKER = 'RebootBroker',
  UPDATE_BROKER = 'UpdateBroker',
  UPDATE_CONFIGURATION = 'UpdateConfiguration',
  UPDATE_USER = 'UpdateUser',
}

export enum Personalize {
  CREATE_CAMPAIGN = 'CreateCampaign',
  CREATE_DATASET = 'CreateDataset',
  CREATE_DATASET_GROUP = 'CreateDatasetGroup',
  CREATE_DATASET_IMPORT_JOB = 'CreateDatasetImportJob',
  CREATE_EVENT_TRACKER = 'CreateEventTracker',
  CREATE_SCHEMA = 'CreateSchema',
  CREATE_SOLUTION = 'CreateSolution',
  CREATE_SOLUTION_VERSION = 'CreateSolutionVersion',
  DELETE_CAMPAIGN = 'DeleteCampaign',
  DELETE_DATASET = 'DeleteDataset',
  DELETE_DATASET_GROUP = 'DeleteDatasetGroup',
  DELETE_EVENT_TRACKER = 'DeleteEventTracker',
  DELETE_SCHEMA = 'DeleteSchema',
  DELETE_SOLUTION = 'DeleteSolution',
  DESCRIBE_ALGORITHM = 'DescribeAlgorithm',
  DESCRIBE_CAMPAIGN = 'DescribeCampaign',
  DESCRIBE_DATASET = 'DescribeDataset',
  DESCRIBE_DATASET_GROUP = 'DescribeDatasetGroup',
  DESCRIBE_DATASET_IMPORT_JOB = 'DescribeDatasetImportJob',
  DESCRIBE_EVENT_TRACKER = 'DescribeEventTracker',
  DESCRIBE_FEATURE_TRANSFORMATION = 'DescribeFeatureTransformation',
  DESCRIBE_RECIPE = 'DescribeRecipe',
  DESCRIBE_SCHEMA = 'DescribeSchema',
  DESCRIBE_SOLUTION = 'DescribeSolution',
  DESCRIBE_SOLUTION_VERSION = 'DescribeSolutionVersion',
  GET_PERSONALIZED_RANKING = 'GetPersonalizedRanking',
  GET_RECOMMENDATIONS = 'GetRecommendations',
  GET_SOLUTION_METRICS = 'GetSolutionMetrics',
  LIST_CAMPAIGNS = 'ListCampaigns',
  LIST_DATASET_GROUPS = 'ListDatasetGroups',
  LIST_DATASET_IMPORT_JOBS = 'ListDatasetImportJobs',
  LIST_DATASETS = 'ListDatasets',
  LIST_EVENT_TRACKERS = 'ListEventTrackers',
  LIST_RECIPES = 'ListRecipes',
  LIST_SCHEMAS = 'ListSchemas',
  LIST_SOLUTION_VERSIONS = 'ListSolutionVersions',
  LIST_SOLUTIONS = 'ListSolutions',
  PUT_EVENTS = 'PutEvents',
  UPDATE_CAMPAIGN = 'UpdateCampaign',
}

export enum Cloud9 {
  CREATE_ENVIRONMENT_EC_2 = 'CreateEnvironmentEC2',
  CREATE_ENVIRONMENT_MEMBERSHIP = 'CreateEnvironmentMembership',
  DELETE_ENVIRONMENT = 'DeleteEnvironment',
  DELETE_ENVIRONMENT_MEMBERSHIP = 'DeleteEnvironmentMembership',
  DESCRIBE_ENVIRONMENT_MEMBERSHIPS = 'DescribeEnvironmentMemberships',
  DESCRIBE_ENVIRONMENT_STATUS = 'DescribeEnvironmentStatus',
  DESCRIBE_ENVIRONMENTS = 'DescribeEnvironments',
  GET_USER_SETTINGS = 'GetUserSettings',
  LIST_ENVIRONMENTS = 'ListEnvironments',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ENVIRONMENT = 'UpdateEnvironment',
  UPDATE_ENVIRONMENT_MEMBERSHIP = 'UpdateEnvironmentMembership',
  UPDATE_USER_SETTINGS = 'UpdateUserSettings',
}

export enum Detective {
  ACCEPT_INVITATION = 'AcceptInvitation',
  CREATE_GRAPH = 'CreateGraph',
  CREATE_MEMBERS = 'CreateMembers',
  DELETE_GRAPH = 'DeleteGraph',
  DELETE_MEMBERS = 'DeleteMembers',
  DISASSOCIATE_MEMBERSHIP = 'DisassociateMembership',
  GET_FREE_TRIAL_ELIGIBILITY = 'GetFreeTrialEligibility',
  GET_GRAPH_INGEST_STATE = 'GetGraphIngestState',
  GET_MEMBERS = 'GetMembers',
  GET_PRICING_INFORMATION = 'GetPricingInformation',
  GET_USAGE_INFORMATION = 'GetUsageInformation',
  LIST_GRAPHS = 'ListGraphs',
  LIST_INVITATIONS = 'ListInvitations',
  LIST_MEMBERS = 'ListMembers',
  REJECT_INVITATION = 'RejectInvitation',
  SEARCH_GRAPH = 'SearchGraph',
  START_MONITORING_MEMBER = 'StartMonitoringMember',
}

export enum Transferforsftp {
  CREATE_SERVER = 'CreateServer',
  CREATE_USER = 'CreateUser',
  DELETE_SERVER = 'DeleteServer',
  DELETE_SSH_PUBLIC_KEY = 'DeleteSshPublicKey',
  DELETE_USER = 'DeleteUser',
  DESCRIBE_SERVER = 'DescribeServer',
  DESCRIBE_USER = 'DescribeUser',
  IMPORT_SSH_PUBLIC_KEY = 'ImportSshPublicKey',
  LIST_SERVERS = 'ListServers',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_USERS = 'ListUsers',
  START_SERVER = 'StartServer',
  STOP_SERVER = 'StopServer',
  TAG_RESOURCE = 'TagResource',
  TEST_IDENTITY_PROVIDER = 'TestIdentityProvider',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_SERVER = 'UpdateServer',
  UPDATE_USER = 'UpdateUser',
}

export enum Iamaccessanalyzer {
  CREATE_ANALYZER = 'CreateAnalyzer',
  CREATE_ARCHIVE_RULE = 'CreateArchiveRule',
  DELETE_ANALYZER = 'DeleteAnalyzer',
  DELETE_ARCHIVE_RULE = 'DeleteArchiveRule',
  GET_ANALYZED_RESOURCE = 'GetAnalyzedResource',
  GET_ANALYZER = 'GetAnalyzer',
  GET_ARCHIVE_RULE = 'GetArchiveRule',
  GET_FINDING = 'GetFinding',
  LIST_ANALYZED_RESOURCES = 'ListAnalyzedResources',
  LIST_ANALYZERS = 'ListAnalyzers',
  LIST_ARCHIVE_RULES = 'ListArchiveRules',
  LIST_FINDINGS = 'ListFindings',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_RESOURCE_SCAN = 'StartResourceScan',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ARCHIVE_RULE = 'UpdateArchiveRule',
  UPDATE_FINDINGS = 'UpdateFindings',
}

export enum Textract {
  ANALYZE_DOCUMENT = 'AnalyzeDocument',
  DETECT_DOCUMENT_TEXT = 'DetectDocumentText',
  GET_DOCUMENT_ANALYSIS = 'GetDocumentAnalysis',
  GET_DOCUMENT_TEXT_DETECTION = 'GetDocumentTextDetection',
  START_DOCUMENT_ANALYSIS = 'StartDocumentAnalysis',
  START_DOCUMENT_TEXT_DETECTION = 'StartDocumentTextDetection',
}

export enum Applicationdiscoveryarsenal {
  REGISTER_ON_PREMISES_AGENT = 'RegisterOnPremisesAgent',
}

export enum Groundtruthlabeling {
  DESCRIBE_CONSOLE_JOB = 'DescribeConsoleJob',
  LIST_DATASET_OBJECTS = 'ListDatasetObjects',
  RUN_FILTER_OR_SAMPLE_DATASET_JOB = 'RunFilterOrSampleDatasetJob',
  RUN_GENERATE_MANIFEST_BY_CRAWLING_JOB = 'RunGenerateManifestByCrawlingJob',
}

export enum Elementalmediastore {
  CREATE_CONTAINER = 'CreateContainer',
  DELETE_CONTAINER = 'DeleteContainer',
  DELETE_CONTAINER_POLICY = 'DeleteContainerPolicy',
  DELETE_CORS_POLICY = 'DeleteCorsPolicy',
  DELETE_LIFECYCLE_POLICY = 'DeleteLifecyclePolicy',
  DELETE_METRIC_POLICY = 'DeleteMetricPolicy',
  DELETE_OBJECT = 'DeleteObject',
  DESCRIBE_CONTAINER = 'DescribeContainer',
  DESCRIBE_OBJECT = 'DescribeObject',
  GET_CONTAINER_POLICY = 'GetContainerPolicy',
  GET_CORS_POLICY = 'GetCorsPolicy',
  GET_LIFECYCLE_POLICY = 'GetLifecyclePolicy',
  GET_METRIC_POLICY = 'GetMetricPolicy',
  GET_OBJECT = 'GetObject',
  LIST_CONTAINERS = 'ListContainers',
  LIST_ITEMS = 'ListItems',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_CONTAINER_POLICY = 'PutContainerPolicy',
  PUT_CORS_POLICY = 'PutCorsPolicy',
  PUT_LIFECYCLE_POLICY = 'PutLifecyclePolicy',
  PUT_METRIC_POLICY = 'PutMetricPolicy',
  PUT_OBJECT = 'PutObject',
  START_ACCESS_LOGGING = 'StartAccessLogging',
  STOP_ACCESS_LOGGING = 'StopAccessLogging',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
}

export enum Iot1click {
  ASSOCIATE_DEVICE_WITH_PLACEMENT = 'AssociateDeviceWithPlacement',
  CLAIM_DEVICES_BY_CLAIM_CODE = 'ClaimDevicesByClaimCode',
  CREATE_PLACEMENT = 'CreatePlacement',
  CREATE_PROJECT = 'CreateProject',
  DELETE_PLACEMENT = 'DeletePlacement',
  DELETE_PROJECT = 'DeleteProject',
  DESCRIBE_DEVICE = 'DescribeDevice',
  DESCRIBE_PLACEMENT = 'DescribePlacement',
  DESCRIBE_PROJECT = 'DescribeProject',
  DISASSOCIATE_DEVICE_FROM_PLACEMENT = 'DisassociateDeviceFromPlacement',
  FINALIZE_DEVICE_CLAIM = 'FinalizeDeviceClaim',
  GET_DEVICE_METHODS = 'GetDeviceMethods',
  GET_DEVICES_IN_PLACEMENT = 'GetDevicesInPlacement',
  INITIATE_DEVICE_CLAIM = 'InitiateDeviceClaim',
  INVOKE_DEVICE_METHOD = 'InvokeDeviceMethod',
  LIST_DEVICE_EVENTS = 'ListDeviceEvents',
  LIST_DEVICES = 'ListDevices',
  LIST_PLACEMENTS = 'ListPlacements',
  LIST_PROJECTS = 'ListProjects',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNCLAIM_DEVICE = 'UnclaimDevice',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DEVICE_STATE = 'UpdateDeviceState',
  UPDATE_PLACEMENT = 'UpdatePlacement',
  UPDATE_PROJECT = 'UpdateProject',
}

export enum Codepipeline {
  ACKNOWLEDGE_JOB = 'AcknowledgeJob',
  ACKNOWLEDGE_THIRD_PARTY_JOB = 'AcknowledgeThirdPartyJob',
  CREATE_CUSTOM_ACTION_TYPE = 'CreateCustomActionType',
  CREATE_PIPELINE = 'CreatePipeline',
  DELETE_CUSTOM_ACTION_TYPE = 'DeleteCustomActionType',
  DELETE_PIPELINE = 'DeletePipeline',
  DELETE_WEBHOOK = 'DeleteWebhook',
  DEREGISTER_WEBHOOK_WITH_THIRD_PARTY = 'DeregisterWebhookWithThirdParty',
  DISABLE_STAGE_TRANSITION = 'DisableStageTransition',
  ENABLE_STAGE_TRANSITION = 'EnableStageTransition',
  GET_JOB_DETAILS = 'GetJobDetails',
  GET_PIPELINE = 'GetPipeline',
  GET_PIPELINE_EXECUTION = 'GetPipelineExecution',
  GET_PIPELINE_STATE = 'GetPipelineState',
  GET_THIRD_PARTY_JOB_DETAILS = 'GetThirdPartyJobDetails',
  LIST_ACTION_EXECUTIONS = 'ListActionExecutions',
  LIST_ACTION_TYPES = 'ListActionTypes',
  LIST_PIPELINE_EXECUTIONS = 'ListPipelineExecutions',
  LIST_PIPELINES = 'ListPipelines',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_WEBHOOKS = 'ListWebhooks',
  POLL_FOR_JOBS = 'PollForJobs',
  POLL_FOR_THIRD_PARTY_JOBS = 'PollForThirdPartyJobs',
  PUT_ACTION_REVISION = 'PutActionRevision',
  PUT_APPROVAL_RESULT = 'PutApprovalResult',
  PUT_JOB_FAILURE_RESULT = 'PutJobFailureResult',
  PUT_JOB_SUCCESS_RESULT = 'PutJobSuccessResult',
  PUT_THIRD_PARTY_JOB_FAILURE_RESULT = 'PutThirdPartyJobFailureResult',
  PUT_THIRD_PARTY_JOB_SUCCESS_RESULT = 'PutThirdPartyJobSuccessResult',
  PUT_WEBHOOK = 'PutWebhook',
  REGISTER_WEBHOOK_WITH_THIRD_PARTY = 'RegisterWebhookWithThirdParty',
  RETRY_STAGE_EXECUTION = 'RetryStageExecution',
  START_PIPELINE_EXECUTION = 'StartPipelineExecution',
  STOP_PIPELINE_EXECUTION = 'StopPipelineExecution',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_PIPELINE = 'UpdatePipeline',
}

export enum Securityhub {
  ACCEPT_INVITATION = 'AcceptInvitation',
  BATCH_DISABLE_STANDARDS = 'BatchDisableStandards',
  BATCH_ENABLE_STANDARDS = 'BatchEnableStandards',
  BATCH_IMPORT_FINDINGS = 'BatchImportFindings',
  BATCH_UPDATE_FINDINGS = 'BatchUpdateFindings',
  CREATE_ACTION_TARGET = 'CreateActionTarget',
  CREATE_INSIGHT = 'CreateInsight',
  CREATE_MEMBERS = 'CreateMembers',
  DECLINE_INVITATIONS = 'DeclineInvitations',
  DELETE_ACTION_TARGET = 'DeleteActionTarget',
  DELETE_INSIGHT = 'DeleteInsight',
  DELETE_INVITATIONS = 'DeleteInvitations',
  DELETE_MEMBERS = 'DeleteMembers',
  DESCRIBE_ACTION_TARGETS = 'DescribeActionTargets',
  DESCRIBE_HUB = 'DescribeHub',
  DESCRIBE_PRODUCTS = 'DescribeProducts',
  DESCRIBE_STANDARDS = 'DescribeStandards',
  DESCRIBE_STANDARDS_CONTROLS = 'DescribeStandardsControls',
  DISABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'DisableImportFindingsForProduct',
  DISABLE_SECURITY_HUB = 'DisableSecurityHub',
  DISASSOCIATE_FROM_MASTER_ACCOUNT = 'DisassociateFromMasterAccount',
  DISASSOCIATE_MEMBERS = 'DisassociateMembers',
  ENABLE_IMPORT_FINDINGS_FOR_PRODUCT = 'EnableImportFindingsForProduct',
  ENABLE_SECURITY_HUB = 'EnableSecurityHub',
  GET_ENABLED_STANDARDS = 'GetEnabledStandards',
  GET_FINDINGS = 'GetFindings',
  GET_INSIGHT_RESULTS = 'GetInsightResults',
  GET_INSIGHTS = 'GetInsights',
  GET_INVITATIONS_COUNT = 'GetInvitationsCount',
  GET_MASTER_ACCOUNT = 'GetMasterAccount',
  GET_MEMBERS = 'GetMembers',
  INVITE_MEMBERS = 'InviteMembers',
  LIST_ENABLED_PRODUCTS_FOR_IMPORT = 'ListEnabledProductsForImport',
  LIST_INVITATIONS = 'ListInvitations',
  LIST_MEMBERS = 'ListMembers',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ACTION_TARGET = 'UpdateActionTarget',
  UPDATE_FINDINGS = 'UpdateFindings',
  UPDATE_INSIGHT = 'UpdateInsight',
  UPDATE_STANDARDS_CONTROL = 'UpdateStandardsControl',
}

export enum Ec2imagebuilder {
  CANCEL_IMAGE_CREATION = 'CancelImageCreation',
  CREATE_COMPONENT = 'CreateComponent',
  CREATE_DISTRIBUTION_CONFIGURATION = 'CreateDistributionConfiguration',
  CREATE_IMAGE = 'CreateImage',
  CREATE_IMAGE_PIPELINE = 'CreateImagePipeline',
  CREATE_IMAGE_RECIPE = 'CreateImageRecipe',
  CREATE_INFRASTRUCTURE_CONFIGURATION = 'CreateInfrastructureConfiguration',
  DELETE_COMPONENT = 'DeleteComponent',
  DELETE_DISTRIBUTION_CONFIGURATION = 'DeleteDistributionConfiguration',
  DELETE_IMAGE = 'DeleteImage',
  DELETE_IMAGE_PIPELINE = 'DeleteImagePipeline',
  DELETE_IMAGE_RECIPE = 'DeleteImageRecipe',
  DELETE_INFRASTRUCTURE_CONFIGURATION = 'DeleteInfrastructureConfiguration',
  GET_COMPONENT = 'GetComponent',
  GET_COMPONENT_POLICY = 'GetComponentPolicy',
  GET_DISTRIBUTION_CONFIGURATION = 'GetDistributionConfiguration',
  GET_IMAGE = 'GetImage',
  GET_IMAGE_PIPELINE = 'GetImagePipeline',
  GET_IMAGE_POLICY = 'GetImagePolicy',
  GET_IMAGE_RECIPE = 'GetImageRecipe',
  GET_IMAGE_RECIPE_POLICY = 'GetImageRecipePolicy',
  GET_INFRASTRUCTURE_CONFIGURATION = 'GetInfrastructureConfiguration',
  LIST_COMPONENT_BUILD_VERSIONS = 'ListComponentBuildVersions',
  LIST_COMPONENTS = 'ListComponents',
  LIST_DISTRIBUTION_CONFIGURATIONS = 'ListDistributionConfigurations',
  LIST_IMAGE_BUILD_VERSIONS = 'ListImageBuildVersions',
  LIST_IMAGE_PIPELINES = 'ListImagePipelines',
  LIST_IMAGE_RECIPES = 'ListImageRecipes',
  LIST_IMAGES = 'ListImages',
  LIST_INFRASTRUCTURE_CONFIGURATIONS = 'ListInfrastructureConfigurations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PUT_COMPONENT_POLICY = 'PutComponentPolicy',
  PUT_IMAGE_POLICY = 'PutImagePolicy',
  PUT_IMAGE_RECIPE_POLICY = 'PutImageRecipePolicy',
  START_IMAGE_PIPELINE_EXECUTION = 'StartImagePipelineExecution',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DISTRIBUTION_CONFIGURATION = 'UpdateDistributionConfiguration',
  UPDATE_IMAGE_PIPELINE = 'UpdateImagePipeline',
  UPDATE_INFRASTRUCTURE_CONFIGURATION = 'UpdateInfrastructureConfiguration',
}

export enum Sqs {
  ADD_PERMISSION = 'AddPermission',
  CHANGE_MESSAGE_VISIBILITY = 'ChangeMessageVisibility',
  CHANGE_MESSAGE_VISIBILITY_BATCH = 'ChangeMessageVisibilityBatch',
  CREATE_QUEUE = 'CreateQueue',
  DELETE_MESSAGE = 'DeleteMessage',
  DELETE_MESSAGE_BATCH = 'DeleteMessageBatch',
  DELETE_QUEUE = 'DeleteQueue',
  GET_QUEUE_ATTRIBUTES = 'GetQueueAttributes',
  GET_QUEUE_URL = 'GetQueueUrl',
  LIST_DEAD_LETTER_SOURCE_QUEUES = 'ListDeadLetterSourceQueues',
  LIST_QUEUE_TAGS = 'ListQueueTags',
  LIST_QUEUES = 'ListQueues',
  PURGE_QUEUE = 'PurgeQueue',
  RECEIVE_MESSAGE = 'ReceiveMessage',
  REMOVE_PERMISSION = 'RemovePermission',
  SEND_MESSAGE = 'SendMessage',
  SEND_MESSAGE_BATCH = 'SendMessageBatch',
  SET_QUEUE_ATTRIBUTES = 'SetQueueAttributes',
  TAG_QUEUE = 'TagQueue',
  UNTAG_QUEUE = 'UntagQueue',
}

export enum Cloudmap {
  CREATE_HTTP_NAMESPACE = 'CreateHttpNamespace',
  CREATE_PRIVATE_DNS_NAMESPACE = 'CreatePrivateDnsNamespace',
  CREATE_PUBLIC_DNS_NAMESPACE = 'CreatePublicDnsNamespace',
  CREATE_SERVICE = 'CreateService',
  DELETE_NAMESPACE = 'DeleteNamespace',
  DELETE_SERVICE = 'DeleteService',
  DEREGISTER_INSTANCE = 'DeregisterInstance',
  DISCOVER_INSTANCES = 'DiscoverInstances',
  GET_INSTANCE = 'GetInstance',
  GET_INSTANCES_HEALTH_STATUS = 'GetInstancesHealthStatus',
  GET_NAMESPACE = 'GetNamespace',
  GET_OPERATION = 'GetOperation',
  GET_SERVICE = 'GetService',
  LIST_INSTANCES = 'ListInstances',
  LIST_NAMESPACES = 'ListNamespaces',
  LIST_OPERATIONS = 'ListOperations',
  LIST_SERVICES = 'ListServices',
  REGISTER_INSTANCE = 'RegisterInstance',
  UPDATE_INSTANCE_CUSTOM_HEALTH_STATUS = 'UpdateInstanceCustomHealthStatus',
  UPDATE_SERVICE = 'UpdateService',
}

export enum Computeoptimizer {
  GET_AUTO_SCALING_GROUP_RECOMMENDATIONS = 'GetAutoScalingGroupRecommendations',
  GET_EC_2_INSTANCE_RECOMMENDATIONS = 'GetEC2InstanceRecommendations',
  GET_EC_2_RECOMMENDATION_PROJECTED_METRICS = 'GetEC2RecommendationProjectedMetrics',
  GET_ENROLLMENT_STATUS = 'GetEnrollmentStatus',
  GET_RECOMMENDATION_SUMMARIES = 'GetRecommendationSummaries',
  UPDATE_ENROLLMENT_STATUS = 'UpdateEnrollmentStatus',
}

export enum Glacier {
  ABORT_MULTIPART_UPLOAD = 'AbortMultipartUpload',
  ABORT_VAULT_LOCK = 'AbortVaultLock',
  ADD_TAGS_TO_VAULT = 'AddTagsToVault',
  COMPLETE_MULTIPART_UPLOAD = 'CompleteMultipartUpload',
  COMPLETE_VAULT_LOCK = 'CompleteVaultLock',
  CREATE_VAULT = 'CreateVault',
  DELETE_ARCHIVE = 'DeleteArchive',
  DELETE_VAULT = 'DeleteVault',
  DELETE_VAULT_ACCESS_POLICY = 'DeleteVaultAccessPolicy',
  DELETE_VAULT_NOTIFICATIONS = 'DeleteVaultNotifications',
  DESCRIBE_JOB = 'DescribeJob',
  DESCRIBE_VAULT = 'DescribeVault',
  GET_DATA_RETRIEVAL_POLICY = 'GetDataRetrievalPolicy',
  GET_JOB_OUTPUT = 'GetJobOutput',
  GET_VAULT_ACCESS_POLICY = 'GetVaultAccessPolicy',
  GET_VAULT_LOCK = 'GetVaultLock',
  GET_VAULT_NOTIFICATIONS = 'GetVaultNotifications',
  INITIATE_JOB = 'InitiateJob',
  INITIATE_MULTIPART_UPLOAD = 'InitiateMultipartUpload',
  INITIATE_VAULT_LOCK = 'InitiateVaultLock',
  LIST_JOBS = 'ListJobs',
  LIST_MULTIPART_UPLOADS = 'ListMultipartUploads',
  LIST_PARTS = 'ListParts',
  LIST_PROVISIONED_CAPACITY = 'ListProvisionedCapacity',
  LIST_TAGS_FOR_VAULT = 'ListTagsForVault',
  LIST_VAULTS = 'ListVaults',
  PURCHASE_PROVISIONED_CAPACITY = 'PurchaseProvisionedCapacity',
  REMOVE_TAGS_FROM_VAULT = 'RemoveTagsFromVault',
  SET_DATA_RETRIEVAL_POLICY = 'SetDataRetrievalPolicy',
  SET_VAULT_ACCESS_POLICY = 'SetVaultAccessPolicy',
  SET_VAULT_NOTIFICATIONS = 'SetVaultNotifications',
  UPLOAD_ARCHIVE = 'UploadArchive',
  UPLOAD_MULTIPART_PART = 'UploadMultipartPart',
}

export enum Rekognition {
  COMPARE_FACES = 'CompareFaces',
  CREATE_COLLECTION = 'CreateCollection',
  CREATE_PROJECT = 'CreateProject',
  CREATE_PROJECT_VERSION = 'CreateProjectVersion',
  CREATE_STREAM_PROCESSOR = 'CreateStreamProcessor',
  DELETE_COLLECTION = 'DeleteCollection',
  DELETE_FACES = 'DeleteFaces',
  DELETE_PROJECT = 'DeleteProject',
  DELETE_PROJECT_VERSION = 'DeleteProjectVersion',
  DELETE_STREAM_PROCESSOR = 'DeleteStreamProcessor',
  DESCRIBE_COLLECTION = 'DescribeCollection',
  DESCRIBE_PROJECT_VERSIONS = 'DescribeProjectVersions',
  DESCRIBE_PROJECTS = 'DescribeProjects',
  DESCRIBE_STREAM_PROCESSOR = 'DescribeStreamProcessor',
  DETECT_CUSTOM_LABELS = 'DetectCustomLabels',
  DETECT_FACES = 'DetectFaces',
  DETECT_LABELS = 'DetectLabels',
  DETECT_MODERATION_LABELS = 'DetectModerationLabels',
  DETECT_TEXT = 'DetectText',
  GET_CELEBRITY_INFO = 'GetCelebrityInfo',
  GET_CELEBRITY_RECOGNITION = 'GetCelebrityRecognition',
  GET_CONTENT_MODERATION = 'GetContentModeration',
  GET_FACE_DETECTION = 'GetFaceDetection',
  GET_FACE_SEARCH = 'GetFaceSearch',
  GET_LABEL_DETECTION = 'GetLabelDetection',
  GET_PERSON_TRACKING = 'GetPersonTracking',
  GET_TEXT_DETECTION = 'GetTextDetection',
  INDEX_FACES = 'IndexFaces',
  LIST_COLLECTIONS = 'ListCollections',
  LIST_FACES = 'ListFaces',
  LIST_STREAM_PROCESSORS = 'ListStreamProcessors',
  RECOGNIZE_CELEBRITIES = 'RecognizeCelebrities',
  SEARCH_FACES = 'SearchFaces',
  SEARCH_FACES_BY_IMAGE = 'SearchFacesByImage',
  START_CELEBRITY_RECOGNITION = 'StartCelebrityRecognition',
  START_CONTENT_MODERATION = 'StartContentModeration',
  START_FACE_DETECTION = 'StartFaceDetection',
  START_FACE_SEARCH = 'StartFaceSearch',
  START_LABEL_DETECTION = 'StartLabelDetection',
  START_PERSON_TRACKING = 'StartPersonTracking',
  START_PROJECT_VERSION = 'StartProjectVersion',
  START_STREAM_PROCESSOR = 'StartStreamProcessor',
  START_TEXT_DETECTION = 'StartTextDetection',
  STOP_PROJECT_VERSION = 'StopProjectVersion',
  STOP_STREAM_PROCESSOR = 'StopStreamProcessor',
}

export enum Launchwizard {
  DELETE_APP = 'DeleteApp',
  DESCRIBE_PROVISIONED_APP = 'DescribeProvisionedApp',
  DESCRIBE_PROVISIONING_EVENTS = 'DescribeProvisioningEvents',
  GET_INFRASTRUCTURE_SUGGESTION = 'GetInfrastructureSuggestion',
  GET_IP_ADDRESS = 'GetIpAddress',
  GET_RESOURCE_COST_ESTIMATE = 'GetResourceCostEstimate',
  LIST_PROVISIONED_APPS = 'ListProvisionedApps',
  START_PROVISIONING = 'StartProvisioning',
}

export enum Elementalmediaconvert {
  ASSOCIATE_CERTIFICATE = 'AssociateCertificate',
  CANCEL_JOB = 'CancelJob',
  CREATE_JOB = 'CreateJob',
  CREATE_JOB_TEMPLATE = 'CreateJobTemplate',
  CREATE_PRESET = 'CreatePreset',
  CREATE_QUEUE = 'CreateQueue',
  DELETE_JOB_TEMPLATE = 'DeleteJobTemplate',
  DELETE_PRESET = 'DeletePreset',
  DELETE_QUEUE = 'DeleteQueue',
  DESCRIBE_ENDPOINTS = 'DescribeEndpoints',
  DISASSOCIATE_CERTIFICATE = 'DisassociateCertificate',
  GET_JOB = 'GetJob',
  GET_JOB_TEMPLATE = 'GetJobTemplate',
  GET_PRESET = 'GetPreset',
  GET_QUEUE = 'GetQueue',
  LIST_JOB_TEMPLATES = 'ListJobTemplates',
  LIST_JOBS = 'ListJobs',
  LIST_PRESETS = 'ListPresets',
  LIST_QUEUES = 'ListQueues',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_JOB_TEMPLATE = 'UpdateJobTemplate',
  UPDATE_PRESET = 'UpdatePreset',
  UPDATE_QUEUE = 'UpdateQueue',
}

export enum Servicequotas {
  ASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'AssociateServiceQuotaTemplate',
  DELETE_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'DeleteServiceQuotaIncreaseRequestFromTemplate',
  DISASSOCIATE_SERVICE_QUOTA_TEMPLATE = 'DisassociateServiceQuotaTemplate',
  GET_AWS_DEFAULT_SERVICE_QUOTA = 'GetAWSDefaultServiceQuota',
  GET_ASSOCIATION_FOR_SERVICE_QUOTA_TEMPLATE = 'GetAssociationForServiceQuotaTemplate',
  GET_REQUESTED_SERVICE_QUOTA_CHANGE = 'GetRequestedServiceQuotaChange',
  GET_SERVICE_QUOTA = 'GetServiceQuota',
  GET_SERVICE_QUOTA_INCREASE_REQUEST_FROM_TEMPLATE = 'GetServiceQuotaIncreaseRequestFromTemplate',
  LIST_AWS_DEFAULT_SERVICE_QUOTAS = 'ListAWSDefaultServiceQuotas',
  LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY = 'ListRequestedServiceQuotaChangeHistory',
  LIST_REQUESTED_SERVICE_QUOTA_CHANGE_HISTORY_BY_QUOTA = 'ListRequestedServiceQuotaChangeHistoryByQuota',
  LIST_SERVICE_QUOTA_INCREASE_REQUESTS_IN_TEMPLATE = 'ListServiceQuotaIncreaseRequestsInTemplate',
  LIST_SERVICE_QUOTAS = 'ListServiceQuotas',
  LIST_SERVICES = 'ListServices',
  PUT_SERVICE_QUOTA_INCREASE_REQUEST_INTO_TEMPLATE = 'PutServiceQuotaIncreaseRequestIntoTemplate',
  REQUEST_SERVICE_QUOTA_INCREASE = 'RequestServiceQuotaIncrease',
}

export enum Inspector {
  ADD_ATTRIBUTES_TO_FINDINGS = 'AddAttributesToFindings',
  CREATE_ASSESSMENT_TARGET = 'CreateAssessmentTarget',
  CREATE_ASSESSMENT_TEMPLATE = 'CreateAssessmentTemplate',
  CREATE_RESOURCE_GROUP = 'CreateResourceGroup',
  DELETE_ASSESSMENT_RUN = 'DeleteAssessmentRun',
  DELETE_ASSESSMENT_TARGET = 'DeleteAssessmentTarget',
  DELETE_ASSESSMENT_TEMPLATE = 'DeleteAssessmentTemplate',
  DESCRIBE_ASSESSMENT_RUNS = 'DescribeAssessmentRuns',
  DESCRIBE_ASSESSMENT_TARGETS = 'DescribeAssessmentTargets',
  DESCRIBE_ASSESSMENT_TEMPLATES = 'DescribeAssessmentTemplates',
  DESCRIBE_CROSS_ACCOUNT_ACCESS_ROLE = 'DescribeCrossAccountAccessRole',
  DESCRIBE_FINDINGS = 'DescribeFindings',
  DESCRIBE_RESOURCE_GROUPS = 'DescribeResourceGroups',
  DESCRIBE_RULES_PACKAGES = 'DescribeRulesPackages',
  GET_TELEMETRY_METADATA = 'GetTelemetryMetadata',
  LIST_ASSESSMENT_RUN_AGENTS = 'ListAssessmentRunAgents',
  LIST_ASSESSMENT_RUNS = 'ListAssessmentRuns',
  LIST_ASSESSMENT_TARGETS = 'ListAssessmentTargets',
  LIST_ASSESSMENT_TEMPLATES = 'ListAssessmentTemplates',
  LIST_EVENT_SUBSCRIPTIONS = 'ListEventSubscriptions',
  LIST_FINDINGS = 'ListFindings',
  LIST_RULES_PACKAGES = 'ListRulesPackages',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  PREVIEW_AGENTS = 'PreviewAgents',
  REGISTER_CROSS_ACCOUNT_ACCESS_ROLE = 'RegisterCrossAccountAccessRole',
  REMOVE_ATTRIBUTES_FROM_FINDINGS = 'RemoveAttributesFromFindings',
  SET_TAGS_FOR_RESOURCE = 'SetTagsForResource',
  START_ASSESSMENT_RUN = 'StartAssessmentRun',
  STOP_ASSESSMENT_RUN = 'StopAssessmentRun',
  SUBSCRIBE_TO_EVENT = 'SubscribeToEvent',
  UNSUBSCRIBE_FROM_EVENT = 'UnsubscribeFromEvent',
  UPDATE_ASSESSMENT_TARGET = 'UpdateAssessmentTarget',
}

export enum Robomaker {
  BATCH_DESCRIBE_SIMULATION_JOB = 'BatchDescribeSimulationJob',
  CANCEL_DEPLOYMENT_JOB = 'CancelDeploymentJob',
  CANCEL_SIMULATION_JOB = 'CancelSimulationJob',
  CANCEL_SIMULATION_JOB_BATCH = 'CancelSimulationJobBatch',
  CREATE_DEPLOYMENT_JOB = 'CreateDeploymentJob',
  CREATE_FLEET = 'CreateFleet',
  CREATE_ROBOT = 'CreateRobot',
  CREATE_ROBOT_APPLICATION = 'CreateRobotApplication',
  CREATE_ROBOT_APPLICATION_VERSION = 'CreateRobotApplicationVersion',
  CREATE_SIMULATION_APPLICATION = 'CreateSimulationApplication',
  CREATE_SIMULATION_APPLICATION_VERSION = 'CreateSimulationApplicationVersion',
  CREATE_SIMULATION_JOB = 'CreateSimulationJob',
  DELETE_FLEET = 'DeleteFleet',
  DELETE_ROBOT = 'DeleteRobot',
  DELETE_ROBOT_APPLICATION = 'DeleteRobotApplication',
  DELETE_SIMULATION_APPLICATION = 'DeleteSimulationApplication',
  DEREGISTER_ROBOT = 'DeregisterRobot',
  DESCRIBE_DEPLOYMENT_JOB = 'DescribeDeploymentJob',
  DESCRIBE_FLEET = 'DescribeFleet',
  DESCRIBE_ROBOT = 'DescribeRobot',
  DESCRIBE_ROBOT_APPLICATION = 'DescribeRobotApplication',
  DESCRIBE_SIMULATION_APPLICATION = 'DescribeSimulationApplication',
  DESCRIBE_SIMULATION_JOB = 'DescribeSimulationJob',
  DESCRIBE_SIMULATION_JOB_BATCH = 'DescribeSimulationJobBatch',
  LIST_DEPLOYMENT_JOBS = 'ListDeploymentJobs',
  LIST_FLEETS = 'ListFleets',
  LIST_ROBOT_APPLICATIONS = 'ListRobotApplications',
  LIST_ROBOTS = 'ListRobots',
  LIST_SIMULATION_APPLICATIONS = 'ListSimulationApplications',
  LIST_SIMULATION_JOB_BATCHES = 'ListSimulationJobBatches',
  LIST_SIMULATION_JOBS = 'ListSimulationJobs',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  REGISTER_ROBOT = 'RegisterRobot',
  RESTART_SIMULATION_JOB = 'RestartSimulationJob',
  START_SIMULATION_JOB_BATCH = 'StartSimulationJobBatch',
  SYNC_DEPLOYMENT_JOB = 'SyncDeploymentJob',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ROBOT_APPLICATION = 'UpdateRobotApplication',
  UPDATE_SIMULATION_APPLICATION = 'UpdateSimulationApplication',
}

export enum Qldb {
  CREATE_LEDGER = 'CreateLedger',
  DELETE_LEDGER = 'DeleteLedger',
  DESCRIBE_JOURNAL_S_3_EXPORT = 'DescribeJournalS3Export',
  DESCRIBE_LEDGER = 'DescribeLedger',
  EXECUTE_STATEMENT = 'ExecuteStatement',
  EXPORT_JOURNAL_TO_S_3 = 'ExportJournalToS3',
  GET_BLOCK = 'GetBlock',
  GET_DIGEST = 'GetDigest',
  GET_REVISION = 'GetRevision',
  INSERT_SAMPLE_DATA = 'InsertSampleData',
  LIST_JOURNAL_S_3_EXPORTS = 'ListJournalS3Exports',
  LIST_JOURNAL_S_3_EXPORTS_FOR_LEDGER = 'ListJournalS3ExportsForLedger',
  LIST_LEDGERS = 'ListLedgers',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  SEND_COMMAND = 'SendCommand',
  SHOW_CATALOG = 'ShowCatalog',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_LEDGER = 'UpdateLedger',
}

export enum Codestar {
  ASSOCIATE_TEAM_MEMBER = 'AssociateTeamMember',
  CREATE_PROJECT = 'CreateProject',
  CREATE_USER_PROFILE = 'CreateUserProfile',
  DELETE_EXTENDED_ACCESS = 'DeleteExtendedAccess',
  DELETE_PROJECT = 'DeleteProject',
  DELETE_USER_PROFILE = 'DeleteUserProfile',
  DESCRIBE_PROJECT = 'DescribeProject',
  DESCRIBE_USER_PROFILE = 'DescribeUserProfile',
  DISASSOCIATE_TEAM_MEMBER = 'DisassociateTeamMember',
  GET_EXTENDED_ACCESS = 'GetExtendedAccess',
  LIST_PROJECTS = 'ListProjects',
  LIST_RESOURCES = 'ListResources',
  LIST_TAGS_FOR_PROJECT = 'ListTagsForProject',
  LIST_TEAM_MEMBERS = 'ListTeamMembers',
  LIST_USER_PROFILES = 'ListUserProfiles',
  PUT_EXTENDED_ACCESS = 'PutExtendedAccess',
  TAG_PROJECT = 'TagProject',
  UNTAG_PROJECT = 'UntagProject',
  UPDATE_PROJECT = 'UpdateProject',
  UPDATE_TEAM_MEMBER = 'UpdateTeamMember',
  UPDATE_USER_PROFILE = 'UpdateUserProfile',
}

export enum Directconnect {
  ACCEPT_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'AcceptDirectConnectGatewayAssociationProposal',
  ALLOCATE_CONNECTION_ON_INTERCONNECT = 'AllocateConnectionOnInterconnect',
  ALLOCATE_HOSTED_CONNECTION = 'AllocateHostedConnection',
  ALLOCATE_PRIVATE_VIRTUAL_INTERFACE = 'AllocatePrivateVirtualInterface',
  ALLOCATE_PUBLIC_VIRTUAL_INTERFACE = 'AllocatePublicVirtualInterface',
  ALLOCATE_TRANSIT_VIRTUAL_INTERFACE = 'AllocateTransitVirtualInterface',
  ASSOCIATE_CONNECTION_WITH_LAG = 'AssociateConnectionWithLag',
  ASSOCIATE_HOSTED_CONNECTION = 'AssociateHostedConnection',
  ASSOCIATE_VIRTUAL_INTERFACE = 'AssociateVirtualInterface',
  CONFIRM_CONNECTION = 'ConfirmConnection',
  CONFIRM_PRIVATE_VIRTUAL_INTERFACE = 'ConfirmPrivateVirtualInterface',
  CONFIRM_PUBLIC_VIRTUAL_INTERFACE = 'ConfirmPublicVirtualInterface',
  CONFIRM_TRANSIT_VIRTUAL_INTERFACE = 'ConfirmTransitVirtualInterface',
  CREATE_BGP_PEER = 'CreateBGPPeer',
  CREATE_CONNECTION = 'CreateConnection',
  CREATE_DIRECT_CONNECT_GATEWAY = 'CreateDirectConnectGateway',
  CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'CreateDirectConnectGatewayAssociation',
  CREATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'CreateDirectConnectGatewayAssociationProposal',
  CREATE_INTERCONNECT = 'CreateInterconnect',
  CREATE_LAG = 'CreateLag',
  CREATE_PRIVATE_VIRTUAL_INTERFACE = 'CreatePrivateVirtualInterface',
  CREATE_PUBLIC_VIRTUAL_INTERFACE = 'CreatePublicVirtualInterface',
  CREATE_TRANSIT_VIRTUAL_INTERFACE = 'CreateTransitVirtualInterface',
  DELETE_BGP_PEER = 'DeleteBGPPeer',
  DELETE_CONNECTION = 'DeleteConnection',
  DELETE_DIRECT_CONNECT_GATEWAY = 'DeleteDirectConnectGateway',
  DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'DeleteDirectConnectGatewayAssociation',
  DELETE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSAL = 'DeleteDirectConnectGatewayAssociationProposal',
  DELETE_INTERCONNECT = 'DeleteInterconnect',
  DELETE_LAG = 'DeleteLag',
  DELETE_VIRTUAL_INTERFACE = 'DeleteVirtualInterface',
  DESCRIBE_CONNECTION_LOA = 'DescribeConnectionLoa',
  DESCRIBE_CONNECTIONS = 'DescribeConnections',
  DESCRIBE_CONNECTIONS_ON_INTERCONNECT = 'DescribeConnectionsOnInterconnect',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATION_PROPOSALS = 'DescribeDirectConnectGatewayAssociationProposals',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ASSOCIATIONS = 'DescribeDirectConnectGatewayAssociations',
  DESCRIBE_DIRECT_CONNECT_GATEWAY_ATTACHMENTS = 'DescribeDirectConnectGatewayAttachments',
  DESCRIBE_DIRECT_CONNECT_GATEWAYS = 'DescribeDirectConnectGateways',
  DESCRIBE_HOSTED_CONNECTIONS = 'DescribeHostedConnections',
  DESCRIBE_INTERCONNECT_LOA = 'DescribeInterconnectLoa',
  DESCRIBE_INTERCONNECTS = 'DescribeInterconnects',
  DESCRIBE_LAGS = 'DescribeLags',
  DESCRIBE_LOA = 'DescribeLoa',
  DESCRIBE_LOCATIONS = 'DescribeLocations',
  DESCRIBE_TAGS = 'DescribeTags',
  DESCRIBE_VIRTUAL_GATEWAYS = 'DescribeVirtualGateways',
  DESCRIBE_VIRTUAL_INTERFACES = 'DescribeVirtualInterfaces',
  DISASSOCIATE_CONNECTION_FROM_LAG = 'DisassociateConnectionFromLag',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_DIRECT_CONNECT_GATEWAY_ASSOCIATION = 'UpdateDirectConnectGatewayAssociation',
  UPDATE_LAG = 'UpdateLag',
  UPDATE_VIRTUAL_INTERFACE_ATTRIBUTES = 'UpdateVirtualInterfaceAttributes',
}

export enum Neptune {
  CONNECT = 'connect',
}

export enum Datasync {
  CANCEL_TASK_EXECUTION = 'CancelTaskExecution',
  CREATE_AGENT = 'CreateAgent',
  CREATE_LOCATION_EFS = 'CreateLocationEfs',
  CREATE_LOCATION_NFS = 'CreateLocationNfs',
  CREATE_LOCATION_S_3 = 'CreateLocationS3',
  CREATE_LOCATION_SMB = 'CreateLocationSmb',
  CREATE_TASK = 'CreateTask',
  DELETE_AGENT = 'DeleteAgent',
  DELETE_LOCATION = 'DeleteLocation',
  DELETE_TASK = 'DeleteTask',
  DESCRIBE_AGENT = 'DescribeAgent',
  DESCRIBE_LOCATION_EFS = 'DescribeLocationEfs',
  DESCRIBE_LOCATION_NFS = 'DescribeLocationNfs',
  DESCRIBE_LOCATION_S_3 = 'DescribeLocationS3',
  DESCRIBE_LOCATION_SMB = 'DescribeLocationSmb',
  DESCRIBE_TASK = 'DescribeTask',
  DESCRIBE_TASK_EXECUTION = 'DescribeTaskExecution',
  LIST_AGENTS = 'ListAgents',
  LIST_LOCATIONS = 'ListLocations',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TASK_EXECUTIONS = 'ListTaskExecutions',
  LIST_TASKS = 'ListTasks',
  START_TASK_EXECUTION = 'StartTaskExecution',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_AGENT = 'UpdateAgent',
  UPDATE_TASK = 'UpdateTask',
}

export enum Organizations {
  ACCEPT_HANDSHAKE = 'AcceptHandshake',
  ATTACH_POLICY = 'AttachPolicy',
  CANCEL_HANDSHAKE = 'CancelHandshake',
  CREATE_ACCOUNT = 'CreateAccount',
  CREATE_GOV_CLOUD_ACCOUNT = 'CreateGovCloudAccount',
  CREATE_ORGANIZATION = 'CreateOrganization',
  CREATE_ORGANIZATIONAL_UNIT = 'CreateOrganizationalUnit',
  CREATE_POLICY = 'CreatePolicy',
  DECLINE_HANDSHAKE = 'DeclineHandshake',
  DELETE_ORGANIZATION = 'DeleteOrganization',
  DELETE_ORGANIZATIONAL_UNIT = 'DeleteOrganizationalUnit',
  DELETE_POLICY = 'DeletePolicy',
  DESCRIBE_ACCOUNT = 'DescribeAccount',
  DESCRIBE_CREATE_ACCOUNT_STATUS = 'DescribeCreateAccountStatus',
  DESCRIBE_EFFECTIVE_POLICY = 'DescribeEffectivePolicy',
  DESCRIBE_HANDSHAKE = 'DescribeHandshake',
  DESCRIBE_ORGANIZATION = 'DescribeOrganization',
  DESCRIBE_ORGANIZATIONAL_UNIT = 'DescribeOrganizationalUnit',
  DESCRIBE_POLICY = 'DescribePolicy',
  DETACH_POLICY = 'DetachPolicy',
  DISABLE_AWS_SERVICE_ACCESS = 'DisableAWSServiceAccess',
  DISABLE_POLICY_TYPE = 'DisablePolicyType',
  ENABLE_AWS_SERVICE_ACCESS = 'EnableAWSServiceAccess',
  ENABLE_ALL_FEATURES = 'EnableAllFeatures',
  ENABLE_POLICY_TYPE = 'EnablePolicyType',
  INVITE_ACCOUNT_TO_ORGANIZATION = 'InviteAccountToOrganization',
  LEAVE_ORGANIZATION = 'LeaveOrganization',
  LIST_AWS_SERVICE_ACCESS_FOR_ORGANIZATION = 'ListAWSServiceAccessForOrganization',
  LIST_ACCOUNTS = 'ListAccounts',
  LIST_ACCOUNTS_FOR_PARENT = 'ListAccountsForParent',
  LIST_CHILDREN = 'ListChildren',
  LIST_CREATE_ACCOUNT_STATUS = 'ListCreateAccountStatus',
  LIST_HANDSHAKES_FOR_ACCOUNT = 'ListHandshakesForAccount',
  LIST_HANDSHAKES_FOR_ORGANIZATION = 'ListHandshakesForOrganization',
  LIST_ORGANIZATIONAL_UNITS_FOR_PARENT = 'ListOrganizationalUnitsForParent',
  LIST_PARENTS = 'ListParents',
  LIST_POLICIES = 'ListPolicies',
  LIST_POLICIES_FOR_TARGET = 'ListPoliciesForTarget',
  LIST_ROOTS = 'ListRoots',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  LIST_TARGETS_FOR_POLICY = 'ListTargetsForPolicy',
  MOVE_ACCOUNT = 'MoveAccount',
  REMOVE_ACCOUNT_FROM_ORGANIZATION = 'RemoveAccountFromOrganization',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_ORGANIZATIONAL_UNIT = 'UpdateOrganizationalUnit',
  UPDATE_POLICY = 'UpdatePolicy',
}

export enum Performanceinsights {
  DESCRIBE_DIMENSION_KEYS = 'DescribeDimensionKeys',
  GET_RESOURCE_METRICS = 'GetResourceMetrics',
}

export enum Kinesisanalyticsv2 {
  ADD_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'AddApplicationCloudWatchLoggingOption',
  ADD_APPLICATION_INPUT = 'AddApplicationInput',
  ADD_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'AddApplicationInputProcessingConfiguration',
  ADD_APPLICATION_OUTPUT = 'AddApplicationOutput',
  ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'AddApplicationReferenceDataSource',
  ADD_APPLICATION_VPC_CONFIGURATION = 'AddApplicationVpcConfiguration',
  CREATE_APPLICATION = 'CreateApplication',
  CREATE_APPLICATION_SNAPSHOT = 'CreateApplicationSnapshot',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_APPLICATION_CLOUD_WATCH_LOGGING_OPTION = 'DeleteApplicationCloudWatchLoggingOption',
  DELETE_APPLICATION_INPUT_PROCESSING_CONFIGURATION = 'DeleteApplicationInputProcessingConfiguration',
  DELETE_APPLICATION_OUTPUT = 'DeleteApplicationOutput',
  DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'DeleteApplicationReferenceDataSource',
  DELETE_APPLICATION_SNAPSHOT = 'DeleteApplicationSnapshot',
  DELETE_APPLICATION_VPC_CONFIGURATION = 'DeleteApplicationVpcConfiguration',
  DESCRIBE_APPLICATION = 'DescribeApplication',
  DESCRIBE_APPLICATION_SNAPSHOT = 'DescribeApplicationSnapshot',
  DISCOVER_INPUT_SCHEMA = 'DiscoverInputSchema',
  LIST_APPLICATION_SNAPSHOTS = 'ListApplicationSnapshots',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_APPLICATION = 'StartApplication',
  STOP_APPLICATION = 'StopApplication',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APPLICATION = 'UpdateApplication',
}

export enum Kinesisanalytics {
  ADD_APPLICATION_INPUT = 'AddApplicationInput',
  ADD_APPLICATION_OUTPUT = 'AddApplicationOutput',
  ADD_APPLICATION_REFERENCE_DATA_SOURCE = 'AddApplicationReferenceDataSource',
  CREATE_APPLICATION = 'CreateApplication',
  DELETE_APPLICATION = 'DeleteApplication',
  DELETE_APPLICATION_OUTPUT = 'DeleteApplicationOutput',
  DELETE_APPLICATION_REFERENCE_DATA_SOURCE = 'DeleteApplicationReferenceDataSource',
  DESCRIBE_APPLICATION = 'DescribeApplication',
  DISCOVER_INPUT_SCHEMA = 'DiscoverInputSchema',
  GET_APPLICATION_STATE = 'GetApplicationState',
  LIST_APPLICATIONS = 'ListApplications',
  LIST_TAGS_FOR_RESOURCE = 'ListTagsForResource',
  START_APPLICATION = 'StartApplication',
  STOP_APPLICATION = 'StopApplication',
  TAG_RESOURCE = 'TagResource',
  UNTAG_RESOURCE = 'UntagResource',
  UPDATE_APPLICATION = 'UpdateApplication',
}

export enum Accounts {
  DISABLE_REGION = 'DisableRegion',
  ENABLE_REGION = 'EnableRegion',
  LIST_REGIONS = 'ListRegions',
}
